cscope 15 $HOME/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf -q 0000005540 0001309565
	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/aarch64/bl31_arch_setup.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<∂©f‹m.h
>

43 
	$bl31_¨ch_£tup
()

45 
tmp_ªg
 = 0;

46 
uöt64_t
 
cou¡î_‰eq
;

49 
tmp_ªg
 = 
	`ªad_s˘Ã_ñ3
();

50 
tmp_ªg
 |(
SCTLR_A_BIT
 | 
SCTLR_SA_BIT
);

51 
	`wrôe_s˘Ã_ñ3
(
tmp_ªg
);

60 
tmp_ªg
 = 
SCR_RES1_BITS
 | 
SCR_RW_BIT
 | 
SCR_HCE_BIT
 |

61 
SCR_FIQ_BIT
;

62 
	`wrôe_s¸
(
tmp_ªg
);

67 
	`íabÀ_£º‹
();

68 
	`íabÀ_debug_ex˚±i⁄s
();

71 
cou¡î_‰eq
 = 
	`∂©_gë_sys˙t_‰eq
();

72 
	`wrôe_˙t‰q_ñ0
(
cou¡î_‰eq
);

73 
	}
}

80 
	$bl31_√xt_ñ_¨ch_£tup
(
uöt32_t
 
£curôy_°©e
)

82 
id_Ø64p‰0
 = 
	`ªad_id_Ø64p‰0_ñ1
();

83 
√xt_s˘Ã
;

84 
ñ_°©us
;

85 
s¸
 = 
	`ªad_s¸
();

88 
√xt_s˘Ã
 = (
	`ªad_s˘Ã_ñ3
(Ë& 
SCTLR_EE_BIT
);

91 
ñ_°©us
 = (
id_Ø64p‰0
 >> 
ID_AA64PFR0_EL2_SHIFT
Ë& 
ID_AA64PFR0_ELX_MASK
;

93 i‡(
£curôy_°©e
 =
NON_SECURE
) {

95 i‡(
ñ_°©us
 && (
s¸
 & 
SCR_HCE_BIT
)) {

97 
√xt_s˘Ã
 |
SCTLR_EL2_RES1
;

98 
	`wrôe_s˘Ã_ñ2
(
√xt_s˘Ã
);

107 
√xt_s˘Ã
 |
SCTLR_EL1_RES1
;

108 
	`wrôe_s˘Ã_ñ1
(
√xt_s˘Ã
);

109 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/aarch64/bl31_entrypoint.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<bl_comm⁄.h
>

35 .
globl
 
	gbl31_íåypoöt


36 .
globl
 
bl31_⁄_íåypoöt


44 
func
 
bl31_íåypoöt


46 
ldr
 
	gx8
, =
BOOT_ARGUMENT_LOCATION


47 
°r
 
w4
, [
x8
]

49 
ldr
 
	gx8
, =
BOOT_ARGUMENT_SIZE


50 
°r
 
w5
, [
x8
]

52 
ldr
 
	gx8
, =
BL33_START_ADDRESS


53 
°r
 
w6
, [
x8
]

56 
ldr
 
	gx8
, =
TEE_BOOT_INFO_ADDR


57 
°r
 
w7
, [
x8
]

59 
	gbl31_⁄_íåypoöt
:

66 #i‡!
RESET_TO_BL31


67 
mov
 
x20
, 
x0


68 
mov
 
	gx21
, 
	gx1


77 
bl
 
	g˝u_ª£t_h™dÀr


84 
mrs
 
	gx1
, 
s˘Ã_ñ3


85 
‹r
 
	gx1
, x1, #SCTLR_I_BIT

86 
m§
 
	gs˘Ã_ñ3
, 
x1


87 
isb


93 
adr
 
	gx1
, 
óæy_ex˚±i⁄s


94 
m§
 
	gvb¨_ñ3
, 
x1


113 
mrs
 
	gx1
, 
˝å_ñ3


114 
bic
 
	gw1
, w1, #TCPAC_BIT

115 
bic
 
	gw1
, w1, #TTA_BIT

116 
bic
 
	gw1
, w1, #TFP_BIT

117 
m§
 
	g˝å_ñ3
, 
	gx1


119 #i‡
RESET_TO_BL31


120 
waô_f‹_íåypoöt


121 
bl
 
	g∂©f‹m_mem_öô


129 
mrs
 
	gx0
, 
mpidr_ñ1


130 
bl
 
∂©f‹m_is_¥im¨y_˝u


131 
cbz
 
	gx0
, 
	g_∑nic


140 
ldr
 
	gx0
, =
__BSS_START__


141 
ldr
 
x1
, =
__BSS_SIZE__


142 
bl
 
zîomem16


144 
ldr
 
x0
, =
__COHERENT_RAM_START__


145 
ldr
 
x1
, =
__COHERENT_RAM_UNALIGNED_SIZE__


146 
bl
 
zîomem16


152 
m§
 
•£l
, #0

159 
mrs
 
	gx0
, 
mpidr_ñ1


160 
bl
 
	g∂©f‹m_£t_cohîít_°ack


166 #i‡
RESET_TO_BL31


167 
mov
 
	gx0
, 0

168 
mov
 
	gx1
, 0

170 
mov
 
	gx0
, 
x20


171 
mov
 
	gx1
, 
	gx21


174 
bl
 
bl31_óæy_∂©f‹m_£tup


175 
bl
 
bl31_∂©_¨ch_£tup


182 
mrs
 
	gx0
, 
mpidr_ñ1


183 
bl
 
∂©f‹m_£t_°ack


189 
bl
 
bl31_maö


191 
b
 
ñ3_exô


193 
	g_∑nic
:

194 
wfi


195 
b
 
_∑nic


198 .
globÆ
 
BOOT_ARGUMENT_LOCATION


199 
BOOT_ARGUMENT_LOCATION
:

200 .
w‹d
 0x00000000

202 .
globÆ
 
BOOT_ARGUMENT_SIZE


203 
BOOT_ARGUMENT_SIZE
:

204 .
w‹d
 0x00000000

206 .
globÆ
 
BL33_START_ADDRESS


207 
BL33_START_ADDRESS
:

208 .
w‹d
 0x00000000

211 .
globÆ
 
TEE_BOOT_INFO_ADDR


212 
TEE_BOOT_INFO_ADDR
:

213 .
w‹d
 0x00000000

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/aarch64/context.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<c⁄ãxt.h
>

43 .
globÆ
 
ñ3_sy§egs_c⁄ãxt_ßve


44 
func
 
ñ3_sy§egs_c⁄ãxt_ßve


46 
mrs
 
	gx9
, 
s¸_ñ3


47 
mrs
 
	gx10
, 
s˘Ã_ñ3


48 
°p
 
	gx9
, 
	gx10
, [
x0
, #CTX_SCR_EL3]

50 
mrs
 
	gx11
, 
˝å_ñ3


51 
°p
 
	gx11
, 
	gxzr
, [
x0
, #CTX_CPTR_EL3]

53 
mrs
 
	gx13
, 
˙t‰q_ñ0


54 
mrs
 
	gx14
, 
maú_ñ3


55 
°p
 
	gx13
, 
	gx14
, [
x0
, #CTX_CNTFRQ_EL0]

57 
mrs
 
	gx15
, 
t¸_ñ3


58 
mrs
 
	gx16
, 
âbr0_ñ3


59 
°p
 
	gx15
, 
	gx16
, [
x0
, #CTX_TCR_EL3]

61 
mrs
 
	gx17
, 
daif


62 
™d
 
	gx17
, x17, #(
	gDAIF_ABT_BIT
 | 
	gDAIF_DBG_BIT
)

63 
°p
 
	gx17
, 
	gxzr
, [
x0
, #CTX_DAIF_EL3]

65 
	gªt


79 .
globÆ
 
ñ3_sy§egs_c⁄ãxt_ª°‹e


80 
func
 
ñ3_sy§egs_c⁄ãxt_ª°‹e


82 
ldp
 
	gx11
, 
	gxzr
, [
x0
, #CTX_CPTR_EL3]

83 
m§
 
	g˝å_ñ3
, 
x11


85 
ldp
 
	gx13
, 
	gx14
, [
x0
, #CTX_CNTFRQ_EL0]

86 
m§
 
	g˙t‰q_ñ0
, 
x13


87 
m§
 
	gmaú_ñ3
, 
x14


89 
ldp
 
	gx15
, 
	gx16
, [
x0
, #CTX_TCR_EL3]

90 
m§
 
	gt¸_ñ3
, 
x15


91 
m§
 
	gâbr0_ñ3
, 
x16


93 
ldp
 
	gx17
, 
	gxzr
, [
x0
, #CTX_DAIF_EL3]

94 
mrs
 
	gx11
, 
daif


95 
‹r
 
	gx17
, x17, 
x11


96 
m§
 
	gdaif
, 
x17


99 
isb


101 
ldp
 
	gx9
, 
	gx10
, [
x0
, #CTX_SCR_EL3]

102 
m§
 
	gs¸_ñ3
, 
x9


103 
m§
 
	gs˘Ã_ñ3
, 
x10


104 
isb


106 
	gªt


116 .
globÆ
 
ñ1_sy§egs_c⁄ãxt_ßve


117 
func
 
ñ1_sy§egs_c⁄ãxt_ßve


119 
mrs
 
	gx9
, 
•§_ñ1


120 
mrs
 
	gx10
, 
ñr_ñ1


121 
°p
 
	gx9
, 
	gx10
, [
x0
, #CTX_SPSR_EL1]

123 
mrs
 
	gx11
, 
•§_abt


124 
mrs
 
	gx12
, 
•§_und


125 
°p
 
	gx11
, 
	gx12
, [
x0
, #CTX_SPSR_ABT]

127 
mrs
 
	gx13
, 
•§_úq


128 
mrs
 
	gx14
, 
•§_fiq


129 
°p
 
	gx13
, 
	gx14
, [
x0
, #CTX_SPSR_IRQ]

131 
mrs
 
	gx15
, 
s˘Ã_ñ1


132 
mrs
 
	gx16
, 
a˘Ã_ñ1


133 
°p
 
	gx15
, 
	gx16
, [
x0
, #CTX_SCTLR_EL1]

135 
mrs
 
	gx17
, 
˝a¸_ñ1


136 
mrs
 
	gx9
, 
cs£Ã_ñ1


137 
°p
 
	gx17
, 
	gx9
, [
x0
, #CTX_CPACR_EL1]

139 
mrs
 
	gx10
, 
•_ñ1


140 
mrs
 
	gx11
, 
e§_ñ1


141 
°p
 
	gx10
, 
	gx11
, [
x0
, #CTX_SP_EL1]

143 
mrs
 
	gx12
, 
âbr0_ñ1


144 
mrs
 
	gx13
, 
âbr1_ñ1


145 
°p
 
	gx12
, 
	gx13
, [
x0
, #CTX_TTBR0_EL1]

147 
mrs
 
	gx14
, 
maú_ñ1


148 
mrs
 
	gx15
, 
amaú_ñ1


149 
°p
 
	gx14
, 
	gx15
, [
x0
, #CTX_MAIR_EL1]

151 
mrs
 
	gx16
, 
t¸_ñ1


152 
mrs
 
	gx17
, 
çidr_ñ1


153 
°p
 
	gx16
, 
	gx17
, [
x0
, #CTX_TCR_EL1]

155 
mrs
 
	gx9
, 
çidr_ñ0


156 
mrs
 
	gx10
, 
çidºo_ñ0


157 
°p
 
	gx9
, 
	gx10
, [
x0
, #CTX_TPIDR_EL0]

159 
mrs
 
	gx11
, 
da¸32_ñ2


160 
mrs
 
	gx12
, 
if§32_ñ2


161 
°p
 
	gx11
, 
	gx12
, [
x0
, #CTX_DACR32_EL2]

163 
mrs
 
	gx13
, 
∑r_ñ1


164 
mrs
 
	gx14
, 
Ár_ñ1


165 
°p
 
	gx13
, 
	gx14
, [
x0
, #CTX_PAR_EL1]

167 
mrs
 
	gx15
, 
af§0_ñ1


168 
mrs
 
	gx16
, 
af§1_ñ1


169 
°p
 
	gx15
, 
	gx16
, [
x0
, #CTX_AFSR0_EL1]

171 
mrs
 
	gx17
, 
c⁄ãxtidr_ñ1


172 
mrs
 
	gx9
, 
vb¨_ñ1


173 
°p
 
	gx17
, 
	gx9
, [
x0
, #CTX_CONTEXTIDR_EL1]

176 #i‡
NS_TIMER_SWITCH


177 
mrs
 
	gx10
, 
˙ç_˘l_ñ0


178 
mrs
 
	gx11
, 
˙ç_cvÆ_ñ0


179 
°p
 
	gx10
, 
	gx11
, [
x0
, #CTX_CNTP_CTL_EL0]

181 
mrs
 
	gx12
, 
˙tv_˘l_ñ0


182 
mrs
 
	gx13
, 
˙tv_cvÆ_ñ0


183 
°p
 
	gx12
, 
	gx13
, [
x0
, #CTX_CNTV_CTL_EL0]

185 
mrs
 
	gx14
, 
˙tk˘l_ñ1


186 
°r
 
	gx14
, [
x0
, #CTX_CNTKCTL_EL1]

189 
mrs
 
	gx15
, 
Âexc32_ñ2


190 
°r
 
	gx15
, [
x0
, #CTX_FP_FPEXC32_EL2]

192 
	gªt


202 .
globÆ
 
ñ1_sy§egs_c⁄ãxt_ª°‹e


203 
func
 
ñ1_sy§egs_c⁄ãxt_ª°‹e


205 
ldp
 
	gx9
, 
	gx10
, [
x0
, #CTX_SPSR_EL1]

206 
m§
 
	g•§_ñ1
, 
x9


207 
m§
 
	gñr_ñ1
, 
x10


209 
ldp
 
	gx11
, 
	gx12
, [
x0
, #CTX_SPSR_ABT]

210 
m§
 
	g•§_abt
, 
x11


211 
m§
 
	g•§_und
, 
x12


213 
ldp
 
	gx13
, 
	gx14
, [
x0
, #CTX_SPSR_IRQ]

214 
m§
 
	g•§_úq
, 
x13


215 
m§
 
	g•§_fiq
, 
x14


217 
ldp
 
	gx15
, 
	gx16
, [
x0
, #CTX_SCTLR_EL1]

218 
m§
 
	gs˘Ã_ñ1
, 
x15


219 
m§
 
	ga˘Ã_ñ1
, 
x16


221 
ldp
 
	gx17
, 
	gx9
, [
x0
, #CTX_CPACR_EL1]

222 
m§
 
	g˝a¸_ñ1
, 
x17


223 
m§
 
	gcs£Ã_ñ1
, 
x9


225 
ldp
 
	gx10
, 
	gx11
, [
x0
, #CTX_SP_EL1]

226 
m§
 
	g•_ñ1
, 
x10


227 
m§
 
	ge§_ñ1
, 
x11


229 
ldp
 
	gx12
, 
	gx13
, [
x0
, #CTX_TTBR0_EL1]

230 
m§
 
	gâbr0_ñ1
, 
x12


231 
m§
 
	gâbr1_ñ1
, 
x13


233 
ldp
 
	gx14
, 
	gx15
, [
x0
, #CTX_MAIR_EL1]

234 
m§
 
	gmaú_ñ1
, 
x14


235 
m§
 
	gamaú_ñ1
, 
x15


237 
ldp
 
	gx16
, 
	gx17
, [
x0
, #CTX_TCR_EL1]

238 
m§
 
	gt¸_ñ1
, 
x16


239 
m§
 
	gçidr_ñ1
, 
x17


241 
ldp
 
	gx9
, 
	gx10
, [
x0
, #CTX_TPIDR_EL0]

242 
m§
 
	gçidr_ñ0
, 
x9


243 
m§
 
	gçidºo_ñ0
, 
x10


245 
ldp
 
	gx11
, 
	gx12
, [
x0
, #CTX_DACR32_EL2]

246 
m§
 
	gda¸32_ñ2
, 
x11


247 
m§
 
	gif§32_ñ2
, 
x12


249 
ldp
 
	gx13
, 
	gx14
, [
x0
, #CTX_PAR_EL1]

250 
m§
 
	g∑r_ñ1
, 
x13


251 
m§
 
	gÁr_ñ1
, 
x14


253 
ldp
 
	gx15
, 
	gx16
, [
x0
, #CTX_AFSR0_EL1]

254 
m§
 
	gaf§0_ñ1
, 
x15


255 
m§
 
	gaf§1_ñ1
, 
x16


257 
ldp
 
	gx17
, 
	gx9
, [
x0
, #CTX_CONTEXTIDR_EL1]

258 
m§
 
	gc⁄ãxtidr_ñ1
, 
x17


259 
m§
 
	gvb¨_ñ1
, 
	gx9


262 #i‡
NS_TIMER_SWITCH


263 
ldp
 
	gx10
, 
	gx11
, [
x0
, #CTX_CNTP_CTL_EL0]

264 
m§
 
	g˙ç_˘l_ñ0
, 
x10


265 
m§
 
	g˙ç_cvÆ_ñ0
, 
x11


267 
ldp
 
	gx12
, 
	gx13
, [
x0
, #CTX_CNTV_CTL_EL0]

268 
m§
 
	g˙tv_˘l_ñ0
, 
x12


269 
m§
 
	g˙tv_cvÆ_ñ0
, 
x13


271 
ldr
 
	gx14
, [
x0
, #CTX_CNTKCTL_EL1]

272 
m§
 
	g˙tk˘l_ñ1
, 
	gx14


275 
ldr
 
	gx15
, [
x0
, #CTX_FP_FPEXC32_EL2]

276 
m§
 
	gÂexc32_ñ2
, 
x15


280 
	gªt


298 .
globÆ
 
Âªgs_c⁄ãxt_ßve


299 
func
 
Âªgs_c⁄ãxt_ßve


300 
°p
 
	gq0
, 
	gq1
, [
x0
, #CTX_FP_Q0]

301 
°p
 
	gq2
, 
	gq3
, [
x0
, #CTX_FP_Q2]

302 
°p
 
	gq4
, 
	gq5
, [
x0
, #CTX_FP_Q4]

303 
°p
 
	gq6
, 
	gq7
, [
x0
, #CTX_FP_Q6]

304 
°p
 
	gq8
, 
	gq9
, [
x0
, #CTX_FP_Q8]

305 
°p
 
	gq10
, 
	gq11
, [
x0
, #CTX_FP_Q10]

306 
°p
 
	gq12
, 
	gq13
, [
x0
, #CTX_FP_Q12]

307 
°p
 
	gq14
, 
	gq15
, [
x0
, #CTX_FP_Q14]

308 
°p
 
	gq16
, 
	gq17
, [
x0
, #CTX_FP_Q16]

309 
°p
 
	gq18
, 
	gq19
, [
x0
, #CTX_FP_Q18]

310 
°p
 
	gq20
, 
	gq21
, [
x0
, #CTX_FP_Q20]

311 
°p
 
	gq22
, 
	gq23
, [
x0
, #CTX_FP_Q22]

312 
°p
 
	gq24
, 
	gq25
, [
x0
, #CTX_FP_Q24]

313 
°p
 
	gq26
, 
	gq27
, [
x0
, #CTX_FP_Q26]

314 
°p
 
	gq28
, 
	gq29
, [
x0
, #CTX_FP_Q28]

315 
°p
 
	gq30
, 
	gq31
, [
x0
, #CTX_FP_Q30]

317 
mrs
 
	gx9
, 
Â§


318 
°r
 
	gx9
, [
x0
, #CTX_FP_FPSR]

320 
mrs
 
	gx10
, 
Â¸


321 
°r
 
	gx10
, [
x0
, #CTX_FP_FPCR]

323 
	gªt


341 .
globÆ
 
Âªgs_c⁄ãxt_ª°‹e


342 
func
 
Âªgs_c⁄ãxt_ª°‹e


343 
ldp
 
	gq0
, 
	gq1
, [
x0
, #CTX_FP_Q0]

344 
ldp
 
	gq2
, 
	gq3
, [
x0
, #CTX_FP_Q2]

345 
ldp
 
	gq4
, 
	gq5
, [
x0
, #CTX_FP_Q4]

346 
ldp
 
	gq6
, 
	gq7
, [
x0
, #CTX_FP_Q6]

347 
ldp
 
	gq8
, 
	gq9
, [
x0
, #CTX_FP_Q8]

348 
ldp
 
	gq10
, 
	gq11
, [
x0
, #CTX_FP_Q10]

349 
ldp
 
	gq12
, 
	gq13
, [
x0
, #CTX_FP_Q12]

350 
ldp
 
	gq14
, 
	gq15
, [
x0
, #CTX_FP_Q14]

351 
ldp
 
	gq16
, 
	gq17
, [
x0
, #CTX_FP_Q16]

352 
ldp
 
	gq18
, 
	gq19
, [
x0
, #CTX_FP_Q18]

353 
ldp
 
	gq20
, 
	gq21
, [
x0
, #CTX_FP_Q20]

354 
ldp
 
	gq22
, 
	gq23
, [
x0
, #CTX_FP_Q22]

355 
ldp
 
	gq24
, 
	gq25
, [
x0
, #CTX_FP_Q24]

356 
ldp
 
	gq26
, 
	gq27
, [
x0
, #CTX_FP_Q26]

357 
ldp
 
	gq28
, 
	gq29
, [
x0
, #CTX_FP_Q28]

358 
ldp
 
	gq30
, 
	gq31
, [
x0
, #CTX_FP_Q30]

360 
ldr
 
	gx9
, [
x0
, #CTX_FP_FPSR]

361 
m§
 
	gÂ§
, 
x9


363 
°r
 
	gx10
, [
x0
, #CTX_FP_FPCR]

364 
m§
 
	gÂ¸
, 
x10


372 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/aarch64/crash_reporting.S

30 
	~<¨ch.h
>

31 
	~<asm_ma¸os.S
>

32 
	~<c⁄ãxt.h
>

33 
	~<∂©_ma¸os.S
>

35 .
globl
 
	ggë_¸ash_°ack


36 .
globl
 
	gdump_°©e_™d_dõ


37 .
globl
 
	gdump_öå_°©e_™d_dõ


46 .
	g£˘i⁄
 .
	grod©a
.
	gdump_ªg_«me
, "aS"

47 
	gˇŒî_ßved_ªgs
: .
asciz
 "x0", "x1", "x2", "x3", "x4", "x5", "x6", "x7",\

51 
	gˇŒì_ßved_ªgs
: .
asciz
 "x19", "x20", "x21", "x22", "x23", "x24",\

54 
	gñ3_sys_ªgs
: .
asciz
 "scr_el3", "sctlr_el3", "cptr_el3", "tcr_el3",\

58 
	gn⁄_ñ3_sys_0_ªgs
: .
asciz
 "spsr_el1", "elr_el1", "spsr_abt", "spsr_und",\

63 
	gn⁄_ñ3_sys_1_ªgs
: .
asciz
 "tpidr_el0", "tpidrro_el0", "dacr32_el2",\

69 
	g°ack_œbñs
: .
asciz
 "sp+0", "\t", "\t", "\t", "sp+0x20", "\t", "\t", "\t",\

72 
	g°ack_ªgs
: .
asciz
 "spsel", "sp_el3", "sp_el0", "sp", ""

74 
	g£≥øã_löe
: .
asciz
 "sp_el0===========", ""

83 
	#REG_SIZE
 0x8

	)

86 
	#CALLER_SAVED_REG_SIZE
 (20 * 
REG_SIZE
)

	)

88 
	#CALLEE_SAVED_REG_SIZE
 (12 * 
REG_SIZE
)

	)

90 
	#EL3_SYS_REG_SIZE
 (12 * 
REG_SIZE
)

	)

92 
	#NON_EL3_SYS_0_REG_SIZE
 (18 * 
REG_SIZE
)

	)

94 
	#NON_EL3_SYS_1_REG_SIZE
 (18 * 
REG_SIZE
)

	)

96 
	#STACK_POINTERS_SIZE
 (16 * 
REG_SIZE
)

	)

100 .
ma¸o
 
¥öt_°ack_vÆue


104 
sub
 
	g•
, sp, #16

105 
°p
 
	gx0
, 
	gx1
, [
•
]

107 
mov
 
	gx1
, 
x0


108 
adr
 
	gx0
, 
°ack_œbñs


109 
bl
 
¥öt_°rög_vÆue


110 
ldp
 
	gx0
, 
	gx1
, [
•
]

111 
add
 
	g•
, sp, #16

112 .
	gídm


115 .
ma¸o
 
dump_°ack_vÆue


119 
mrs
 
	gx10
, 
•£l


120 
mov
 
	gx11
, 
•


121 
mrs
 
	gx12
, 
•_ñ0


122 
mov
 
	gx13
, 
•


124 
sub
 
	g•
, sp, #48

125 
°p
 
	gx0
, 
	gx1
, [
•
]

126 
°p
 
	gx10
, 
	gx11
, [
•
, #(
REG_SIZE
 * 2)]

127 
°p
 
	gx12
, 
	gx13
, [
•
, #(
REG_SIZE
 * 4)]

130 
add
 
	gx1
, 
	g•
, #16

131 
adr
 
	gx0
, 
°ack_ªgs


132 
bl
 
¥öt_°rög_vÆue


135 
mov
 
	gx0
, 
x11


136 
¥öt_°ack_vÆue


137 
add
 
	gx0
, x0, #STACK_POINTERS_SIZE

138 
¥öt_°ack_vÆue


141 
add
 
	gx1
, 
	g•
, #32

142 
adr
 
	gx0
, 
£≥øã_löe


143 
bl
 
¥öt_°rög_vÆue


146 
mov
 
	gx0
, 
x12


147 
¥öt_°ack_vÆue


148 
add
 
	gx0
, x0, #STACK_POINTERS_SIZE

149 
¥öt_°ack_vÆue


151 
ldp
 
	gx0
, 
	gx1
, [
•
]

152 
add
 
	g•
, sp, #48

153 .
	gídm


155 .
ma¸o
 
¥öt_ˇŒî_ßved_ªgs


156 
sub
 
	g•
, sp, #CALLER_SAVED_REG_SIZE

157 
°p
 
	gx0
, 
	gx1
, [
•
]

158 
°p
 
	gx2
, 
	gx3
, [
•
, #(
REG_SIZE
 * 2)]

159 
°p
 
	gx4
, 
	gx5
, [
•
, #(
REG_SIZE
 * 4)]

160 
°p
 
	gx6
, 
	gx7
, [
•
, #(
REG_SIZE
 * 6)]

161 
°p
 
	gx8
, 
	gx9
, [
•
, #(
REG_SIZE
 * 8)]

162 
°p
 
	gx10
, 
	gx11
, [
•
, #(
REG_SIZE
 * 10)]

163 
°p
 
	gx12
, 
	gx13
, [
•
, #(
REG_SIZE
 * 12)]

164 
°p
 
	gx14
, 
	gx15
, [
•
, #(
REG_SIZE
 * 14)]

165 
°p
 
	gx16
, 
	gx17
, [
•
, #(
REG_SIZE
 * 16)]

166 
°p
 
	gx18
, 
	gxzr
, [
•
, #(
REG_SIZE
 * 18)]

167 
adr
 
	gx0
, 
ˇŒî_ßved_ªgs


168 
mov
 
	gx1
, 
•


169 
bl
 
¥öt_°rög_vÆue


170 
add
 
	g•
, sp, #CALLER_SAVED_REG_SIZE

171 .
	gídm


173 .
ma¸o
 
¥öt_ˇŒì_ßved_ªgs


174 
sub
 
	g•
, sp, 
CALLEE_SAVED_REG_SIZE


175 
°p
 
	gx19
, 
	gx20
, [
•
]

176 
°p
 
	gx21
, 
	gx22
, [
•
, #(
REG_SIZE
 * 2)]

177 
°p
 
	gx23
, 
	gx24
, [
•
, #(
REG_SIZE
 * 4)]

178 
°p
 
	gx25
, 
	gx26
, [
•
, #(
REG_SIZE
 * 6)]

179 
°p
 
	gx27
, 
	gx28
, [
•
, #(
REG_SIZE
 * 8)]

180 
°p
 
	gx29
, 
	gx30
, [
•
, #(
REG_SIZE
 * 10)]

181 
adr
 
	gx0
, 
ˇŒì_ßved_ªgs


182 
mov
 
	gx1
, 
•


183 
bl
 
¥öt_°rög_vÆue


184 
add
 
	g•
, sp, #CALLEE_SAVED_REG_SIZE

185 .
	gídm


187 .
ma¸o
 
¥öt_ñ3_sys_ªgs


188 
sub
 
	g•
, sp, #EL3_SYS_REG_SIZE

189 
mrs
 
	gx9
, 
s¸_ñ3


190 
mrs
 
	gx10
, 
s˘Ã_ñ3


191 
mrs
 
	gx11
, 
˝å_ñ3


192 
mrs
 
	gx12
, 
t¸_ñ3


193 
mrs
 
	gx13
, 
daif


194 
mrs
 
	gx14
, 
maú_ñ3


195 
mrs
 
	gx15
, 
•§_ñ3


196 
mrs
 
	gx16
, 
ñr_ñ3


197 
mrs
 
	gx17
, 
âbr0_ñ3


198 
mrs
 
	gx8
, 
e§_ñ3


199 
mrs
 
	gx7
, 
Ár_ñ3


201 
°p
 
	gx9
, 
	gx10
, [
•
]

202 
°p
 
	gx11
, 
	gx12
, [
•
, #(
REG_SIZE
 * 2)]

203 
°p
 
	gx13
, 
	gx14
, [
•
, #(
REG_SIZE
 * 4)]

204 
°p
 
	gx15
, 
	gx16
, [
•
, #(
REG_SIZE
 * 6)]

205 
°p
 
	gx17
, 
	gx8
, [
•
, #(
REG_SIZE
 * 8)]

206 
°p
 
	gx0
, 
	gx7
, [
•
, #(
REG_SIZE
 * 10)]

208 
adr
 
	gx0
, 
ñ3_sys_ªgs


209 
mov
 
	gx1
, 
•


210 
bl
 
¥öt_°rög_vÆue


211 
add
 
	g•
, sp, #EL3_SYS_REG_SIZE

212 .
	gídm


214 .
ma¸o
 
¥öt_n⁄_ñ3_sys_0_ªgs


215 
sub
 
	g•
, sp, #NON_EL3_SYS_0_REG_SIZE

216 
mrs
 
	gx9
, 
•§_ñ1


217 
mrs
 
	gx10
, 
ñr_ñ1


218 
mrs
 
	gx11
, 
•§_abt


219 
mrs
 
	gx12
, 
•§_und


220 
mrs
 
	gx13
, 
•§_úq


221 
mrs
 
	gx14
, 
•§_fiq


222 
mrs
 
	gx15
, 
s˘Ã_ñ1


223 
mrs
 
	gx16
, 
a˘Ã_ñ1


224 
mrs
 
	gx17
, 
˝a¸_ñ1


225 
mrs
 
	gx8
, 
cs£Ã_ñ1


227 
°p
 
	gx9
, 
	gx10
, [
•
]

228 
°p
 
	gx11
, 
	gx12
, [
•
, #(
REG_SIZE
 * 2)]

229 
°p
 
	gx13
, 
	gx14
, [
•
, #(
REG_SIZE
 * 4)]

230 
°p
 
	gx15
, 
	gx16
, [
•
, #(
REG_SIZE
 * 6)]

231 
°p
 
	gx17
, 
	gx8
, [
•
, #(
REG_SIZE
 * 8)]

233 
mrs
 
	gx10
, 
•_ñ1


234 
mrs
 
	gx11
, 
e§_ñ1


235 
mrs
 
	gx12
, 
âbr0_ñ1


236 
mrs
 
	gx13
, 
âbr1_ñ1


237 
mrs
 
	gx14
, 
maú_ñ1


238 
mrs
 
	gx15
, 
amaú_ñ1


239 
mrs
 
	gx16
, 
t¸_ñ1


240 
mrs
 
	gx17
, 
çidr_ñ1


242 
°p
 
	gx10
, 
	gx11
, [
•
, #(
REG_SIZE
 * 10)]

243 
°p
 
	gx12
, 
	gx13
, [
•
, #(
REG_SIZE
 * 12)]

244 
°p
 
	gx14
, 
	gx15
, [
•
, #(
REG_SIZE
 * 14)]

245 
°p
 
	gx16
, 
	gx17
, [
•
, #(
REG_SIZE
 * 16)]

247 
adr
 
	gx0
, 
n⁄_ñ3_sys_0_ªgs


248 
mov
 
	gx1
, 
•


249 
bl
 
¥öt_°rög_vÆue


250 
add
 
	g•
, sp, #NON_EL3_SYS_0_REG_SIZE

251 .
	gídm


253 .
ma¸o
 
¥öt_n⁄_ñ3_sys_1_ªgs


254 
sub
 
	g•
, sp, #NON_EL3_SYS_1_REG_SIZE

256 
mrs
 
	gx9
, 
çidr_ñ0


257 
mrs
 
	gx10
, 
çidºo_ñ0


258 
mrs
 
	gx11
, 
da¸32_ñ2


259 
mrs
 
	gx12
, 
if§32_ñ2


260 
mrs
 
	gx13
, 
∑r_ñ1


261 
mrs
 
	gx14
, 
Ár_ñ1


262 
mrs
 
	gx15
, 
af§0_ñ1


263 
mrs
 
	gx16
, 
af§1_ñ1


264 
mrs
 
	gx17
, 
c⁄ãxtidr_ñ1


265 
mrs
 
	gx8
, 
vb¨_ñ1


267 
°p
 
	gx9
, 
	gx10
, [
•
]

268 
°p
 
	gx11
, 
	gx12
, [
•
, #(
REG_SIZE
 * 2)]

269 
°p
 
	gx13
, 
	gx14
, [
•
, #(
REG_SIZE
 * 4)]

270 
°p
 
	gx15
, 
	gx16
, [
•
, #(
REG_SIZE
 * 6)]

271 
°p
 
	gx17
, 
	gx8
, [
•
, #(
REG_SIZE
 * 8)]

273 
mrs
 
	gx10
, 
˙ç_˘l_ñ0


274 
mrs
 
	gx11
, 
˙ç_cvÆ_ñ0


275 
mrs
 
	gx12
, 
˙tv_˘l_ñ0


276 
mrs
 
	gx13
, 
˙tv_cvÆ_ñ0


277 
mrs
 
	gx14
, 
˙tk˘l_ñ1


278 
mrs
 
	gx15
, 
Âexc32_ñ2


279 
mrs
 
	gx8
, 
•_ñ0


281 
°p
 
	gx10
, 
	gx11
, [
•
, #(
REG_SIZE
 *10)]

282 
°p
 
	gx12
, 
	gx13
, [
•
, #(
REG_SIZE
 * 12)]

283 
°p
 
	gx14
, 
	gx15
, [
•
, #(
REG_SIZE
 * 14)]

284 
°p
 
	gx8
, 
	gxzr
, [
•
, #(
REG_SIZE
 * 16)]

286 
adr
 
	gx0
, 
n⁄_ñ3_sys_1_ªgs


287 
mov
 
	gx1
, 
•


288 
bl
 
¥öt_°rög_vÆue


289 
add
 
	g•
, sp, #NON_EL3_SYS_1_REG_SIZE

290 .
	gídm


292 .
ma¸o
 
öô_¸ash_°ack


293 
m§
 
	g˙t‰q_ñ0
, 
x0


294 
mrs
 
	gx0
, 
çidr_ñ3


297 
cbz
 
	gx0
, 
öföôe_lo›


299 
ldr
 
	gx0
, [
x0
, #PTR_CACHE_CRASH_STACK_OFFSET]

301 
°r
 
	gx30
, [
x0
, #-(
REG_SIZE
)]!

302 
mov
 
	gx30
, 
•


303 
°r
 
	gx30
, [
x0
, #-(
REG_SIZE
)]!

304 
mov
 
	g•
, 
x0


305 
mrs
 
	gx0
, 
	g˙t‰q_ñ0


306 .
ídm


314 
func
 
dump_°©e_™d_dõ


315 
öô_¸ash_°ack


316 
¥öt_ˇŒî_ßved_ªgs


317 
b
 
¥öt_°©e


319 
func
 
dump_öå_°©e_™d_dõ


320 
öô_¸ash_°ack


321 
¥öt_ˇŒî_ßved_ªgs


322 
∂©_¥öt_gic_ªgs


324 
	g¥öt_°©e
:

326 
ldr
 
x30
, [
•
, #REG_SIZE]

327 
¥öt_ˇŒì_ßved_ªgs


329 
ldr
 
	gx0
, [
•
], #(
	gREG_SIZE
 * 2)

330 
dump_°ack_vÆue


331 
¥öt_ñ3_sys_ªgs


332 
¥öt_n⁄_ñ3_sys_0_ªgs


333 
¥öt_n⁄_ñ3_sys_1_ªgs


334 
bl
 
mt_log_£t_¸ash_Êag


335 
b
 
öföôe_lo›


337 
func
 
öföôe_lo›


338 
b
 
	göföôe_lo›


341 
	#PCPU_CRASH_STACK_SIZE
 0x140

	)

349 
func
 
gë_¸ash_°ack


350 
mov
 
	gx10
, 
x30


351 
gë_mp_°ack
 
	gp˝u_¸ash_°ack
, 
PCPU_CRASH_STACK_SIZE


352 
ªt
 
x10


358 
de˛¨e_°ack
 
	gp˝u_¸ash_°ack
, 
	gtzfw_n‹mÆ_°acks
, \

359 
	gPCPU_CRASH_STACK_SIZE
, 
	gPLATFORM_CORE_COUNT


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/aarch64/runtime_exceptions.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<c⁄ãxt.h
>

34 
	~<öãºu±_mgmt.h
>

35 
	~<∂©f‹m_def.h
>

36 
	~<ru¡ime_svc.h
>

38 .
globl
 
	gru¡ime_ex˚±i⁄s


39 .
globl
 
	gñ3_exô


46 .
ma¸o
 
h™dÀ_sync_ex˚±i⁄


47 
°r
 
	gx30
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_LR
]

48 
mrs
 
	gx30
, 
e§_ñ3


49 
ubfx
 
	gx30
, x30, #ESR_EC_SHIFT, #ESR_EC_LENGTH

51 
cmp
 
	gx30
, #EC_AARCH32_SMC

52 
	gb
.
eq
 
smc_h™dÀr32


54 
cmp
 
	gx30
, #EC_AARCH64_SMC

55 
	gb
.
eq
 
smc_h™dÀr64


63 
bl
 
	gdump_°©e_™d_dõ


64 .
	gídm


72 .
ma¸o
 
h™dÀ_öãºu±_ex˚±i⁄
 
œbñ


73 
°r
 
	gx30
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_LR
]

74 
bl
 
ßve_gp_ªgi°îs


77 
ldr
 
	gx2
, [
•
, #CTX_EL3STATE_OFFSET + 
CTX_RUNTIME_SP
]

78 
mov
 
	gx20
, 
•


79 
m§
 
	g•£l
, #0

80 
mov
 
	g•
, 
x2


87 
bl
 
∂©_ic_gë_≥ndög_öãºu±_ty≥


88 
cmp
 
	gx0
, #INTR_TYPE_INVAL

89 
	gb
.
eq
 
	göãºu±_exô_
\
œbñ


98 
bl
 
gë_öãºu±_ty≥_h™dÀr


99 
cbz
 
	gx0
, 
	göãºu±_îr‹_
\
œbñ


100 
mov
 
	gx21
, 
x0


102 
mov
 
	gx0
, #INTR_ID_UNAVAILABLE

103 #i‡
IMF_READ_INTERRUPT_ID


108 
mov
 
	gx19
, #INTR_ID_UNAVAILABLE

109 
bl
 
∂©_ic_gë_≥ndög_öãºu±_id


110 
cmp
 
	gx19
, 
x0


111 
	gb
.
eq
 
	göãºu±_exô_
\
	gœbñ


118 
mrs
 
	gx3
, 
•§_ñ3


119 
mrs
 
	gx4
, 
ñr_ñ3


120 
°p
 
	gx3
, 
	gx4
, [
x20
, #CTX_EL3STATE_OFFSET + 
CTX_SPSR_EL3
]

123 
mrs
 
	gx2
, 
s¸_ñ3


124 
ubfx
 
	gx1
, 
	gx2
, #0, #1

127 
mov
 
	gx2
, 
x20


130 
mov
 
	gx3
, 
xzr


133 
bÃ
 
x21


135 
	göãºu±_exô_
\
	gœbñ
:

137 
b
 
ñ3_exô


144 
öãºu±_îr‹_
\
œbñ
:

145 
bl
 
dump_öå_°©e_™d_dõ


146 .
ídm


149 .
ma¸o
 
ßve_x18_to_x29_•_ñ0


150 
°p
 
x18
, 
	gx19
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X18
]

151 
°p
 
	gx20
, 
	gx21
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X20
]

152 
°p
 
	gx22
, 
	gx23
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X22
]

153 
°p
 
	gx24
, 
	gx25
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X24
]

154 
°p
 
	gx26
, 
	gx27
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X26
]

155 
°p
 
	gx28
, 
	gx29
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X28
]

156 
mrs
 
	gx18
, 
•_ñ0


157 
°r
 
	gx18
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_SP_EL0
]

158 .
	gídm


160 .
	g£˘i⁄
 .
	gve˘‹s
, "ax"; .
	gÆign
 11

162 .
	gÆign
 7

163 
	gru¡ime_ex˚±i⁄s
:

168 
sync_ex˚±i⁄_•_ñ0
:

173 
bl
 
dump_°©e_™d_dõ


174 
check_ve˘‹_size
 
sync_ex˚±i⁄_•_ñ0


176 .
Æign
 7

182 
úq_•_ñ0
:

183 
bl
 
dump_öå_°©e_™d_dõ


184 
check_ve˘‹_size
 
úq_•_ñ0


186 .
Æign
 7

187 
fiq_•_ñ0
:

188 
bl
 
dump_öå_°©e_™d_dõ


189 
check_ve˘‹_size
 
fiq_•_ñ0


191 .
Æign
 7

192 
£º‹_•_ñ0
:

193 
bl
 
dump_°©e_™d_dõ


194 
check_ve˘‹_size
 
£º‹_•_ñ0


200 .
Æign
 7

201 
sync_ex˚±i⁄_•_ñx
:

209 
bl
 
dump_°©e_™d_dõ


210 
check_ve˘‹_size
 
sync_ex˚±i⁄_•_ñx


212 .
Æign
 7

213 
úq_•_ñx
:

214 
bl
 
dump_öå_°©e_™d_dõ


215 
check_ve˘‹_size
 
úq_•_ñx


217 .
Æign
 7

218 
fiq_•_ñx
:

219 
bl
 
dump_öå_°©e_™d_dõ


220 
check_ve˘‹_size
 
fiq_•_ñx


222 .
Æign
 7

223 
£º‹_•_ñx
:

224 
bl
 
dump_°©e_™d_dõ


225 
check_ve˘‹_size
 
£º‹_•_ñx


231 .
Æign
 7

232 
sync_ex˚±i⁄_Ørch64
:

241 
h™dÀ_sync_ex˚±i⁄


242 
check_ve˘‹_size
 
sync_ex˚±i⁄_Ørch64


244 .
Æign
 7

250 
úq_Ørch64
:

251 
h™dÀ_öãºu±_ex˚±i⁄
 
úq_Ørch64


252 
check_ve˘‹_size
 
úq_Ørch64


254 .
Æign
 7

255 
fiq_Ørch64
:

256 
h™dÀ_öãºu±_ex˚±i⁄
 
fiq_Ørch64


257 
check_ve˘‹_size
 
fiq_Ørch64


259 .
Æign
 7

260 
£º‹_Ørch64
:

261 
bl
 
dump_°©e_™d_dõ


262 
check_ve˘‹_size
 
£º‹_Ørch64


268 .
Æign
 7

269 
sync_ex˚±i⁄_Ørch32
:

278 
h™dÀ_sync_ex˚±i⁄


279 
check_ve˘‹_size
 
sync_ex˚±i⁄_Ørch32


281 .
Æign
 7

287 
úq_Ørch32
:

288 
h™dÀ_öãºu±_ex˚±i⁄
 
úq_Ørch32


289 
check_ve˘‹_size
 
úq_Ørch32


291 .
Æign
 7

292 
fiq_Ørch32
:

293 
h™dÀ_öãºu±_ex˚±i⁄
 
fiq_Ørch32


294 
check_ve˘‹_size
 
fiq_Ørch32


296 .
Æign
 7

297 
£º‹_Ørch32
:

298 
bl
 
dump_°©e_™d_dõ


299 
check_ve˘‹_size
 
£º‹_Ørch32


301 .
Æign
 7

316 
func
 
smc_h™dÀr


317 
smc_h™dÀr32
:

318 #i‚de‡
PLAT_USE_EL1_AARCH32


320 
tbnz
 
x0
, #FUNCID_CC_SHIFT, 
	gsmc_¥ohibôed


330 
°p
 
	gx8
, 
	gx9
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X8
]

331 
°p
 
	gx10
, 
	gx11
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X10
]

332 
°p
 
	gx12
, 
	gx13
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X12
]

333 
°p
 
	gx14
, 
	gx15
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X14
]

334 
°p
 
	gx16
, 
	gx17
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X16
]

338 
	gsmc_h™dÀr64
:

349 
°p
 
x4
, 
	gx5
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X4
]

350 
°p
 
	gx6
, 
	gx7
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X6
]

353 
ßve_x18_to_x29_•_ñ0


355 
mov
 
	gx5
, 
xzr


356 
mov
 
	gx6
, 
	g•


362 #i‡
deföed
(
PLAT_USE_EL1_AARCH32
Ë|| deföed(
PLAT_USE_EL1_AARCH64
)

365 
ldr
 
	gw5
, =0xffff0000

366 
™d
 
w4
, 
	gw0
, 
w5


367 
cmp
 
	gw4
, 
w5


368 
	gb√
 1f

369 
mov
 
	gw4
, 
w0


370 
mov
 
	gx5
, 
xzr


371 
‹n
 
	gw5
, w5, 
w4


372 
add
 
	gw5
, w5, #1

373 
ldr
 
	gw4
, =0x82000000

374 
‹r
 
w0
, 
	gw4
, 
	gw5


379 
ubfx
 
x16
, 
	gx0
, #FUNCID_OEN_SHIFT, #FUNCID_OEN_WIDTH

380 
ubfx
 
	gx15
, 
	gx0
, #FUNCID_TYPE_SHIFT, #FUNCID_TYPE_WIDTH

381 
‹r
 
	gx16
, x16, 
	gx15
, 
	gl¶
 #FUNCID_OEN_WIDTH

383 
adr
 
	gx11
, (
	g__RT_SVC_DESCS_START__
 + 
	gRT_SVC_DESC_HANDLE
)

386 
adr
 
	gx14
, 
π_svc_descs_ödi˚s


387 
ldrb
 
	gw15
, [
x14
, 
x16
]

396 
ldr
 
	gx12
, [
x6
, #CTX_EL3STATE_OFFSET + 
CTX_RUNTIME_SP
]

402 
tbnz
 
	gw15
, 7, 
smc_unknown


405 
m§
 
	g•£l
, #0

414 
l¶
 
	gw10
, 
	gw15
, #RT_SVC_SIZE_LOG2

415 
ldr
 
	gx15
, [
x11
, 
w10
, 
uxtw
]

424 
mrs
 
	gx16
, 
•§_ñ3


425 
mrs
 
	gx17
, 
ñr_ñ3


426 
mrs
 
	gx18
, 
s¸_ñ3


427 
°p
 
	gx16
, 
	gx17
, [
x6
, #CTX_EL3STATE_OFFSET + 
CTX_SPSR_EL3
]

428 
°p
 
	gx18
, 
	gxzr
, [
x6
, #CTX_EL3STATE_OFFSET + 
CTX_SCR_EL3
]

431 
bfi
 
	gx7
, 
	gx18
, #0, #1

433 
mov
 
	g•
, 
	gx12


442 #i‡
DEBUG


443 
cbz
 
	gx15
, 
	gπ_svc_fw_¸ôiˇl_îr‹


445 
bÃ
 
x15


456 
	gñ3_exô
: ; .
ty≥
Él3_exô, %
fun˘i⁄


463 
mov
 
	gx17
, 
•


464 
m§
 
	g•£l
, #1

465 
°r
 
	gx17
, [
•
, #CTX_EL3STATE_OFFSET + 
CTX_RUNTIME_SP
]

471 
ldp
 
	gx18
, 
	gxzr
, [
•
, #CTX_EL3STATE_OFFSET + 
CTX_SCR_EL3
]

472 
ldp
 
	gx16
, 
	gx17
, [
•
, #CTX_EL3STATE_OFFSET + 
CTX_SPSR_EL3
]

473 
m§
 
	gs¸_ñ3
, 
x18


474 
m§
 
	g•§_ñ3
, 
x16


475 
m§
 
	gñr_ñ3
, 
x17


478 
b
 
ª°‹e_gp_ªgi°îs_îë


480 
	gsmc_unknown
:

488 
mov
 
w0
, #SMC_UNK

489 
b
 
ª°‹e_gp_ªgi°îs_ˇŒì_îë


491 
	gsmc_¥ohibôed
:

492 
ldr
 
x30
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_LR
]

493 
mov
 
	gw0
, #SMC_UNK

494 
îë


496 
	gπ_svc_fw_¸ôiˇl_îr‹
:

497 
m§
 
•£l
, #1

498 
bl
 
dump_°©e_™d_dõ


511 
func
 
ßve_gp_ªgi°îs


512 
°p
 
	gx0
, 
	gx1
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X0
]

513 
°p
 
	gx2
, 
	gx3
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X2
]

514 
°p
 
	gx4
, 
	gx5
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X4
]

515 
°p
 
	gx6
, 
	gx7
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X6
]

516 
°p
 
	gx8
, 
	gx9
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X8
]

517 
°p
 
	gx10
, 
	gx11
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X10
]

518 
°p
 
	gx12
, 
	gx13
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X12
]

519 
°p
 
	gx14
, 
	gx15
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X14
]

520 
°p
 
	gx16
, 
	gx17
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X16
]

521 
ßve_x18_to_x29_•_ñ0


522 
ªt


524 
func
 
ª°‹e_gp_ªgi°îs_îë


525 
ldp
 
	gx0
, 
	gx1
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X0
]

526 
ldp
 
	gx2
, 
	gx3
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X2
]

528 
	gª°‹e_gp_ªgi°îs_ˇŒì_îë
:

529 
ldp
 
x4
, 
	gx5
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X4
]

530 
ldp
 
	gx6
, 
	gx7
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X6
]

531 
ldp
 
	gx8
, 
	gx9
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X8
]

532 
ldp
 
	gx10
, 
	gx11
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X10
]

533 
ldp
 
	gx12
, 
	gx13
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X12
]

534 
ldp
 
	gx14
, 
	gx15
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X14
]

535 
ldp
 
	gx18
, 
	gx19
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X18
]

536 
ldp
 
	gx20
, 
	gx21
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X20
]

537 
ldp
 
	gx22
, 
	gx23
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X22
]

538 
ldp
 
	gx24
, 
	gx25
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X24
]

539 
ldp
 
	gx26
, 
	gx27
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X26
]

540 
ldp
 
	gx28
, 
	gx29
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X28
]

541 
ldp
 
	gx30
, 
	gx17
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_LR
]

542 
m§
 
	g•_ñ0
, 
x17


543 
ldp
 
	gx16
, 
	gx17
, [
•
, #CTX_GPREGS_OFFSET + 
CTX_GPREG_X16
]

544 
	gîë


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/bl31.ld.S

31 
	~<∂©f‹m_def.h
>

33 
	$OUTPUT_FORMAT
(
PLATFORM_LINKER_FORMAT
)

34 
	$OUTPUT_ARCH
(
PLATFORM_LINKER_ARCH
)

35 
	$ENTRY
(
bl31_íåypoöt
)

38 
MEMORY
 {

39 
	`RAM
 (
rwx
): 
ORIGIN
 = 
TZRAM_BASE
, 
LENGTH
 = 
TZRAM_SIZE


40 
	`RAM2
 (
rwx
): 
ORIGIN
 = 
TZRAM2_BASE
, 
LENGTH
 = 
TZRAM2_SIZE


41 
	}
}

44 
	gSECTIONS


46 . = 
BL31_BASE
;

47 
ASSERT
(. =
ALIGN
(4096),

50 
	gro
 . : {

51 
__RO_START__
 = .;

52 *
	gbl31_íåypoöt
.
o
(.
ãxt
*)

53 *(.
	gãxt
*)

54 *(.
	grod©a
*)

57 . = 
ALIGN
(8);

58 
	g__RT_SVC_DESCS_START__
 = .;

59 
KEEP
(*(
π_svc_descs
))

60 
	g__RT_SVC_DESCS_END__
 = .;

62 *(.
	gve˘‹s
)

63 
	g__RO_END_UNALIGNED__
 = .;

69 . = 
NEXT
(4096);

70 
	g__RO_END__
 = .;

71 } >
	gRAM


73 .
	gd©a
 . : {

74 
__DATA_START__
 = .;

75 *(.
	gd©a
*)

76 
	g__DATA_END__
 = .;

78 . = 
NEXT
(4096);

79 
	g__MBOX_BASE__
 = .;

80 . = 
NEXT
(4096);

81 
	g__MBOX_END__
 = .;

83 } >
RAM


85 
°acks
 (
NOLOAD
) : {

86 
__STACKS_START__
 = .;

87 *(
	gtzfw_n‹mÆ_°acks
)

88 
	g__STACKS_END__
 = .;

89 } >
	gRAM


95 .
	gbss
 : 
ALIGN
(16) {

96 
__BSS_START__
 = .;

97 *(.
	gbss
*)

98 *(
	gCOMMON
)

99 
	g__BSS_END__
 = .;

100 } >
RAM


102 
ASSERT
(. <
BL31_LIMIT
, "BL3-1 image hasÉxceeded itsÜimit.")

109 
xœt_èbÀ
 (
NOLOAD
) : {

110 *(
xœt_èbÀ
)

111 } >
RAM2


119 
cohîít_øm
 (
NOLOAD
Ë: 
ALIGN
(4096) {

120 
__COHERENT_RAM_START__
 = .;

121 *(
	gtzfw_cohîít_mem
)

122 
	g__COHERENT_RAM_END_UNALIGNED__
 = .;

128 . = 
NEXT
(4096);

129 
	g__COHERENT_RAM_END__
 = .;

130 } >
RAM2


132 
	g__BL31_END__
 = .;

134 
	g__BSS_SIZE__
 = 
SIZEOF
(.
bss
);

135 
	g__COHERENT_RAM_UNALIGNED_SIZE__
 =

136 
__COHERENT_RAM_END_UNALIGNED__
 - 
__COHERENT_RAM_START__
;

138 
ASSERT
(. <
TZRAM2_LIMIT
, "TZRAM2 image hasÉxceeded itsÜimit.")

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/bl31.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 
	gBL31_SOURCES
 +
bl31
/
bl31_maö
.
c
 \

25 
bl31
/
c⁄ãxt_mgmt
.
c
 \

26 
bl31
/
ru¡ime_svc
.
c
 \

27 
bl31
/
öãºu±_mgmt
.
c
 \

28 
bl31
/
Ørch64
/
bl31_¨ch_£tup
.
c
 \

29 
bl31
/
Ørch64
/
bl31_íåypoöt
.
S
 \

30 
bl31
/
Ørch64
/
c⁄ãxt
.
S
 \

31 
bl31
/
Ørch64
/
ru¡ime_ex˚±i⁄s
.
S
 \

32 
bl31
/
Ørch64
/
¸ash_ªp‹tög
.
S
 \

33 
comm⁄
/
Ørch64
/
óæy_ex˚±i⁄s
.
S
 \

34 
lib
/
Ørch64
/
˝u_hñ≥rs
.
S
 \

35 
lib
/
locks
/
bakîy
/
bakîy_lock
.
c
 \

36 
lib
/
locks
/
ex˛usive
/
•ölock
.
S
 \

37 
£rvi˚s
/
°d_svc
/
°d_svc_£tup
.
c
 \

38 
£rvi˚s
/
°d_svc
/
psci
/
psci_afÊvl_off
.
c
 \

39 
£rvi˚s
/
°d_svc
/
psci
/
psci_afÊvl_⁄
.
c
 \

40 
£rvi˚s
/
°d_svc
/
psci
/
psci_afÊvl_su•íd
.
c
 \

41 
£rvi˚s
/
°d_svc
/
psci
/
psci_comm⁄
.
c
 \

42 
£rvi˚s
/
°d_svc
/
psci
/
psci_íåy
.
S
 \

43 
£rvi˚s
/
°d_svc
/
psci
/
psci_maö
.
c
 \

44 
£rvi˚s
/
°d_svc
/
psci
/
psci_£tup
.
c


46 
BL31_LINKERFILE
 :
bl31
/bl31.
ld
.
S


48 #Fœg 
u£d
 
by
 
the
 
gíîic
 
öãºu±
 
m™agemít
 
‰amew‹k
 
to
 
dëîmöe
 

49 #up⁄ 
the
 
as£πi⁄
 
of
 
™
 
öãºu±
, 
ô
 
should
 
∑ss
Åhêöãºu± 
id
 
‹
 
nŸ


50 
	gIMF_READ_INTERRUPT_ID
 := 1

52 
$
(
evÆ
 $(
ˇŒ
 
as£π_boﬁón
,
IMF_READ_INTERRUPT_ID
))

53 
$
(
evÆ
 $(
ˇŒ
 
add_deföe
,
IMF_READ_INTERRUPT_ID
))

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/bl31_main.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<c⁄ãxt_mgmt.h
>

37 
	~<∂©f‹m.h
>

38 
	~<ru¡ime_svc.h
>

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<log.h
>

42 
	~<c⁄sﬁe.h
>

50 
	$öt32_t
 (*
bl32_öô
)(, );

56 
uöt32_t
 
√xt_image_ty≥
;

61 
	$bl31_lib_öô
()

63 
	`cm_öô
();

64 
	}
}

74 
	$bl31_maö
()

76 #i‡
DEBUG


77 
mpidr
 = 
	`ªad_mpidr
();

79 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

81 if(
ãórg
->
©f_log_buf_size
 != 0)

83 
ãórg
->
©f_´e_debug_buf_size
 = 
ATF_AEE_BUFFER_SIZE
;

84 
ãórg
->
©f_´e_debug_buf_°¨t
 =Åì¨g->
©f_log_buf_°¨t
 +Åì¨g->
©f_log_buf_size
 - 
ATF_AEE_BUFFER_SIZE
;

85 
	`mt_log_£tup
(
ãórg
->
©f_log_buf_°¨t
,Åì¨g->
©f_log_buf_size
,Åì¨g->
©f_´e_debug_buf_size
);

86 
	`¥ötf
("ATFÜog sîvi˚ i†ªgi°îed (0x%x,áì:0x%x)\n", 
ãórg
->
©f_log_buf_°¨t
,Åì¨g->
©f_´e_debug_buf_°¨t
);

90 
ãórg
->
©f_´e_debug_buf_size
 = 0;

91 
ãórg
->
©f_´e_debug_buf_°¨t
 = 0;

95 
	`bl31_¨ch_£tup
();

98 
	`bl31_∂©f‹m_£tup
();

100 
	`¥ötf
("BL31 %s\n\r", 
buûd_mesßge
);

103 
	`bl31_lib_öô
();

106 
	`ru¡ime_svc_öô
();

109 
	`dcsw_›_Æl
(
DCCSW
);

117 
	`as£π
(
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
));

118 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

119 
	`cm_öô_p˝u_±r_ˇche
();

120 
	`wrôe_vb¨_ñ3
((
uöt64_t
Ë
ru¡ime_ex˚±i⁄s
);

121 
	`isb
();

122 
√xt_image_ty≥
 = 
NON_SECURE
;

137 if(
ãórg
->
ãe_suµ‹t
)

139 
	`¥ötf
("[BL31] JumpÅo secure OS for initialization!\n\r");

140 i‡(
bl32_öô
)

142 (*
bl32_öô
)(
ãórg
->
ãe_íåy
,Åì¨g->
ãe_boŸ_¨g_addr
);

146 
	`¥ötf
("[ERROR] Secure OS isÇot initialized!\n\r");

152 
	`¥ötf
("[BL31] JumpÅo FIQD for initialization!\n\r");

153 i‡(
bl32_öô
)

155 (*
bl32_öô
)(0, 0);

163 
	`bl31_¥ï¨e_√xt_image_íåy
();

165 
	`¥ötf
("[BL31] Final dump!\n\r");

167 
	`˛ór_u¨t_Êag
();

169 
	`¥ötf
("[BL31] SHOULDÇot dump in UART but inÜog buffer!\n\r");

170 
	}
}

180 
	$bl31_£t_√xt_image_ty≥
(
uöt32_t
 
£curôy_°©e
)

182 
	`as£π
(
£curôy_°©e
 =
NON_SECURE
 || securôy_°©ê=
SECURE
);

183 
√xt_image_ty≥
 = 
£curôy_°©e
;

184 
	}
}

186 
uöt32_t
 
	$bl31_gë_√xt_image_ty≥
()

188  
√xt_image_ty≥
;

189 
	}
}

191 
íåy_poöt_öfo_t
 *
bl31_∂©_gë_√xt_kî√l_ï_öfo
(
uöt32_t
 
ty≥
);

193 
	$bl31_¥ï¨e_k64_íåy
()

195 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

196 
uöt32_t
 
s¸
, 
image_ty≥
;

197 
˝u_c⁄ãxt_t
 *
˘x
;

198 
gp_ªgs_t
 *
gp_ªgs
;

201 
image_ty≥
 = 
NON_SECURE
;

207 
	`bl31_√xt_ñ_¨ch_£tup
(
image_ty≥
);

210 
√xt_image_öfo
 = 
	`bl31_∂©_gë_√xt_kî√l_ï_öfo
(
image_ty≥
);

213 
	`as£π
(
√xt_image_öfo
);

214 
	`as£π
(
image_ty≥
 =
	`GET_SECURITY_STATE
(
√xt_image_öfo
->
h
.
©å
));

218 
	`¥ötf
("√xt_image_öfo->•§ = 0x%Œx\n", 
√xt_image_öfo
->
•§
);

220 
s¸
 = 
	`ªad_s¸
();

221 
s¸
 &~
SCR_NS_BIT
;

222 i‡(
image_ty≥
 =
NON_SECURE
)

223 
s¸
 |
SCR_NS_BIT
;

225 
s¸
 &~
SCR_RW_BIT
;

226 i‡((
√xt_image_öfo
->
•§
 & (1 << 
MODE_RW_SHIFT
)) ==

227 (
MODE_RW_64
 << 
MODE_RW_SHIFT
))

229 
s¸
 |
SCR_RW_BIT
;

231 
	`¥ötf
("spsr is 64 bit\n");

234 
s¸
 |
SCR_HCE_BIT
;

240 
	`cm_£t_ñ3_îë_c⁄ãxt
(
image_ty≥
,

241 
√xt_image_öfo
->
pc
,

242 
√xt_image_öfo
->
•§
,

243 
s¸
);

249 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
image_ty≥
);

250 
gp_ªgs
 = 
	`gë_g¥egs_˘x
(
˘x
);

251 
	`mem˝y
(
gp_ªgs
, (*)&
√xt_image_öfo
->
¨gs
, (
Øpcs64_∑øms_t
));

253 
	`¥ötf
("Finally setÅheÇext context\n");

256 
	`cm_£t_√xt_îë_c⁄ãxt
(
image_ty≥
);

257 
	}
}

265 
	$bl31_¥ï¨e_√xt_image_íåy
()

267 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

268 
uöt32_t
 
s¸
, 
image_ty≥
;

269 
˝u_c⁄ãxt_t
 *
˘x
;

270 
gp_ªgs_t
 *
gp_ªgs
;

273 
image_ty≥
 = 
	`bl31_gë_√xt_image_ty≥
();

279 
	`bl31_√xt_ñ_¨ch_£tup
(
image_ty≥
);

282 
√xt_image_öfo
 = 
	`bl31_∂©_gë_√xt_image_ï_öfo
(
image_ty≥
);

283 
	`as£π
(
√xt_image_öfo
);

284 
	`as£π
(
image_ty≥
 =
	`GET_SECURITY_STATE
(
√xt_image_öfo
->
h
.
©å
));

286 
s¸
 = 
	`ªad_s¸
();

287 
s¸
 &~
SCR_NS_BIT
;

288 i‡(
image_ty≥
 =
NON_SECURE
)

289 
s¸
 |
SCR_NS_BIT
;

291 
s¸
 &~
SCR_RW_BIT
;

292 i‡((
√xt_image_öfo
->
•§
 & (1 << 
MODE_RW_SHIFT
)) ==

293 (
MODE_RW_64
 << 
MODE_RW_SHIFT
))

295 
s¸
 |
SCR_RW_BIT
;

296 
s¸
 |
SCR_HCE_BIT
;

300 
s¸
 &~(
SCR_HCE_BIT
);

321 
	`cm_£t_ñ3_îë_c⁄ãxt
(
image_ty≥
,

322 
√xt_image_öfo
->
pc
,

323 
√xt_image_öfo
->
•§
,

324 
s¸
);

330 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
image_ty≥
);

331 
gp_ªgs
 = 
	`gë_g¥egs_˘x
(
˘x
);

332 
	`mem˝y
(
gp_ªgs
, (*)&
√xt_image_öfo
->
¨gs
, (
Øpcs64_∑øms_t
));

335 
	`cm_£t_√xt_îë_c⁄ãxt
(
image_ty≥
);

336 
	}
}

342 
bl31_ªgi°î_bl32_öô
(
	$öt32_t
 (*
func
)(, ))

344 
bl32_öô
 = 
func
;

345 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/context_mgmt.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<c⁄ãxt.h
>

37 
	~<c⁄ãxt_mgmt.h
>

38 
	~<öãºu±_mgmt.h
>

39 
	~<∂©f‹m.h
>

40 
	~<∂©f‹m_def.h
>

41 
	~<ru¡ime_svc.h
>

49 *
	m±r
[2];

50 } 
	t__Æig√d
 (
	tCACHE_WRITEBACK_GRANULE
Ë
	tc⁄ãxt_öfo_t
;

52 
c⁄ãxt_öfo_t
 
cm_c⁄ãxt_öfo
[
PLATFORM_CORE_COUNT
];

55 
≥r_˝u_±r_ˇche_t
 
≥r_˝u_±r_ˇche_•a˚
[
PLATFORM_CORE_COUNT
];

70 
	$cm_öô
()

76 
	}
}

83 *
	$cm_gë_c⁄ãxt
(
uöt64_t
 
mpidr
, 
uöt32_t
 
£curôy_°©e
)

85 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

87 
	`as£π
(
£curôy_°©e
 <
NON_SECURE
);

89  
cm_c⁄ãxt_öfo
[
löór_id
].
±r
[
£curôy_°©e
];

90 
	}
}

96 
	$cm_£t_c⁄ãxt
(
uöt64_t
 
mpidr
, *
c⁄ãxt
, 
uöt32_t
 
£curôy_°©e
)

98 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

100 
	`as£π
(
£curôy_°©e
 <
NON_SECURE
);

102 
cm_c⁄ãxt_öfo
[
löór_id
].
±r
[
£curôy_°©e
] = 
c⁄ãxt
;

103 
	}
}

110 
	$cm_ñ3_sy§egs_c⁄ãxt_ßve
(
uöt32_t
 
£curôy_°©e
)

112 
˝u_c⁄ãxt_t
 *
˘x
;

114 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
£curôy_°©e
);

115 
	`as£π
(
˘x
);

117 
	`ñ3_sy§egs_c⁄ãxt_ßve
(
	`gë_ñ3°©e_˘x
(
˘x
));

118 
	}
}

120 
	$cm_ñ3_sy§egs_c⁄ãxt_ª°‹e
(
uöt32_t
 
£curôy_°©e
)

122 
˝u_c⁄ãxt_t
 *
˘x
;

124 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
£curôy_°©e
);

125 
	`as£π
(
˘x
);

127 
	`ñ3_sy§egs_c⁄ãxt_ª°‹e
(
	`gë_ñ3°©e_˘x
(
˘x
));

128 
	}
}

130 
	$cm_ñ1_sy§egs_c⁄ãxt_ßve
(
uöt32_t
 
£curôy_°©e
)

132 
˝u_c⁄ãxt_t
 *
˘x
;

134 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
£curôy_°©e
);

135 
	`as£π
(
˘x
);

137 
	`ñ1_sy§egs_c⁄ãxt_ßve
(
	`gë_sy§egs_˘x
(
˘x
));

138 
	}
}

140 
	$cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
uöt32_t
 
£curôy_°©e
)

142 
˝u_c⁄ãxt_t
 *
˘x
;

144 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
£curôy_°©e
);

145 
	`as£π
(
˘x
);

147 
	`ñ1_sy§egs_c⁄ãxt_ª°‹e
(
	`gë_sy§egs_˘x
(
˘x
));

148 
	}
}

156 
	$cm_£t_ñ3_îë_c⁄ãxt
(
uöt32_t
 
£curôy_°©e
, 
uöt64_t
 
íåypoöt
,

157 
uöt32_t
 
•§
, uöt32_à
s¸
)

159 
˝u_c⁄ãxt_t
 *
˘x
;

160 
ñ3_°©e_t
 *
°©e
;

162 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
£curôy_°©e
);

163 
	`as£π
(
˘x
);

166 
s¸
 &~
SCR_FIQ_BIT
;

167 
s¸
 &~
SCR_IRQ_BIT
;

168 
s¸
 |
	`gë_s¸_ñ3_‰om_routög_modñ
(
£curôy_°©e
);

171 
°©e
 = 
	`gë_ñ3°©e_˘x
(
˘x
);

172 
	`wrôe_˘x_ªg
(
°©e
, 
CTX_SPSR_EL3
, 
•§
);

173 
	`wrôe_˘x_ªg
(
°©e
, 
CTX_ELR_EL3
, 
íåypoöt
);

174 
	`wrôe_˘x_ªg
(
°©e
, 
CTX_SCR_EL3
, 
s¸
);

175 
	}
}

181 
	$cm_£t_ñr_ñ3
(
uöt32_t
 
£curôy_°©e
, 
uöt64_t
 
íåypoöt
)

183 
˝u_c⁄ãxt_t
 *
˘x
;

184 
ñ3_°©e_t
 *
°©e
;

186 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
£curôy_°©e
);

187 
	`as£π
(
˘x
);

190 
°©e
 = 
	`gë_ñ3°©e_˘x
(
˘x
);

191 
	`wrôe_˘x_ªg
(
°©e
, 
CTX_ELR_EL3
, 
íåypoöt
);

192 
	}
}

199 
	$cm_wrôe_s¸_ñ3_bô
(
uöt32_t
 
£curôy_°©e
,

200 
uöt32_t
 
bô_pos
,

201 
uöt32_t
 
vÆue
)

203 
˝u_c⁄ãxt_t
 *
˘x
;

204 
ñ3_°©e_t
 *
°©e
;

205 
uöt32_t
 
s¸_ñ3
;

207 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
£curôy_°©e
);

208 
	`as£π
(
˘x
);

211 
	`as£π
((1 << 
bô_pos
Ë& 
SCR_VALID_BIT_MASK
);

214 
	`as£π
(
vÆue
 <= 1);

220 
°©e
 = 
	`gë_ñ3°©e_˘x
(
˘x
);

221 
s¸_ñ3
 = 
	`ªad_˘x_ªg
(
°©e
, 
CTX_SCR_EL3
);

222 
s¸_ñ3
 &~(1 << 
bô_pos
);

223 
s¸_ñ3
 |
vÆue
 << 
bô_pos
;

224 
	`wrôe_˘x_ªg
(
°©e
, 
CTX_SCR_EL3
, 
s¸_ñ3
);

225 
	}
}

231 
uöt32_t
 
	$cm_gë_s¸_ñ3
(
uöt32_t
 
£curôy_°©e
)

233 
˝u_c⁄ãxt_t
 *
˘x
;

234 
ñ3_°©e_t
 *
°©e
;

236 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
£curôy_°©e
);

237 
	`as£π
(
˘x
);

240 
°©e
 = 
	`gë_ñ3°©e_˘x
(
˘x
);

241  
	`ªad_˘x_ªg
(
°©e
, 
CTX_SCR_EL3
);

242 
	}
}

249 
	$cm_£t_√xt_îë_c⁄ãxt
(
uöt32_t
 
£curôy_°©e
)

251 
˝u_c⁄ãxt_t
 *
˘x
;

252 #i‡
DEBUG


253 
uöt64_t
 
•_mode
;

256 
˘x
 = 
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
£curôy_°©e
);

257 
	`as£π
(
˘x
);

259 #i‡
DEBUG


264 
__asm__
 volatile("mrs %0, SPSel\n"

265 : "Ù" (
•_mode
));

267 
	`as£π
(
•_mode
 =
MODE_SP_EL0
);

270 
__asm__
 volatile("msr spsel, #1\n"

273 : : "r" (
˘x
));

274 
	}
}

280 
	$cm_öô_p˝u_±r_ˇche
()

282 
mpidr
 = 
	`ªad_mpidr
();

283 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

284 
≥r_˝u_±r_ˇche_t
 *
p˝u_±r_ˇche
;

286 
p˝u_±r_ˇche
 = &
≥r_˝u_±r_ˇche_•a˚
[
löór_id
];

287 
	`as£π
(
p˝u_±r_ˇche
);

288 
p˝u_±r_ˇche
->
¸ash_°ack
 = 
	`gë_¸ash_°ack
(
mpidr
);

290 
	`cm_£t_p˝u_±r_ˇche
(
p˝u_±r_ˇche
);

291 
	}
}

294 
	$cm_£t_p˝u_±r_ˇche
(c⁄° *
p˝u_±r
)

296 
	`wrôe_çidr_ñ3
(()
p˝u_±r
);

297 
	}
}

299 *
	$cm_gë_p˝u_±r_ˇche
()

301  (*)
	`ªad_çidr_ñ3
();

302 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/interrupt_mgmt.c

31 
	~<as£π.h
>

32 
	~<bl_comm⁄.h
>

33 
	~<c⁄ãxt_mgmt.h
>

34 
	~<î∫o.h
>

35 
	~<öãºu±_mgmt.h
>

36 
	~<∂©f‹m.h
>

37 
	~<°dio.h
>

61 
	söå_ty≥_desc
 {

62 
öãºu±_ty≥_h™dÀr_t
 
	mh™dÀr
;

63 
uöt32_t
 
	mÊags
;

64 
uöt32_t
 
	ms¸_ñ3
[2];

65 } 
	töå_ty≥_desc_t
;

67 
öå_ty≥_desc_t
 
	göå_ty≥_descs
[
MAX_INTR_TYPES
];

73 
öt32_t
 
	$vÆid©e_öãºu±_ty≥
(
uöt32_t
 
ty≥
)

75 i‡(
ty≥
 =
INTR_TYPE_EL3
)

76  -
ENOTSUP
;

78 i‡(
ty≥
 !
INTR_TYPE_S_EL1
 &&Åy≥ !
INTR_TYPE_NS
)

79  -
EINVAL
;

82 
	}
}

87 
öt32_t
 
	$vÆid©e_routög_modñ
(
uöt32_t
 
ty≥
, uöt32_à
Êags
)

89 
Êags
 >>
INTR_RM_FLAGS_SHIFT
;

90 
Êags
 &
INTR_RM_FLAGS_MASK
;

92 i‡(
ty≥
 =
INTR_TYPE_S_EL1
)

93  
	`vÆid©e_£l1_öãºu±_rm
(
Êags
);

95 i‡(
ty≥
 =
INTR_TYPE_NS
)

96  
	`vÆid©e_ns_öãºu±_rm
(
Êags
);

98  -
EINVAL
;

99 
	}
}

106 
uöt32_t
 
	$gë_s¸_ñ3_‰om_routög_modñ
(
uöt32_t
 
£curôy_°©e
)

108 
uöt32_t
 
s¸_ñ3
;

110 
	`as£π
(
£curôy_°©e
 <
NON_SECURE
);

111 
s¸_ñ3
 = 
öå_ty≥_descs
[
INTR_TYPE_NS
].s¸_ñ3[
£curôy_°©e
];

112 
s¸_ñ3
 |
öå_ty≥_descs
[
INTR_TYPE_S_EL1
].s¸_ñ3[
£curôy_°©e
];

113 
s¸_ñ3
 |
öå_ty≥_descs
[
INTR_TYPE_EL3
].s¸_ñ3[
£curôy_°©e
];

114  
s¸_ñ3
;

115 
	}
}

123 
	$£t_s¸_ñ3_‰om_rm
(
uöt32_t
 
ty≥
,

124 
uöt32_t
 
öãºu±_ty≥_Êags
,

125 
uöt32_t
 
£curôy_°©e
)

127 
uöt32_t
 
Êag
, 
bô_pos
;

129 
Êag
 = 
	`gë_öãºu±_rm_Êag
(
öãºu±_ty≥_Êags
, 
£curôy_°©e
);

130 
bô_pos
 = 
	`∂©_öãºu±_ty≥_to_löe
(
ty≥
, 
£curôy_°©e
);

131 
öå_ty≥_descs
[
ty≥
].
s¸_ñ3
[
£curôy_°©e
] = 
Êag
 << 
bô_pos
;

132 
	`cm_wrôe_s¸_ñ3_bô
(
£curôy_°©e
, 
bô_pos
, 
Êag
);

133 
	}
}

141 
öt32_t
 
	$£t_routög_modñ
(
uöt32_t
 
ty≥
, uöt32_à
Êags
)

143 
öt32_t
 
rc
;

145 
rc
 = 
	`vÆid©e_öãºu±_ty≥
(
ty≥
);

146 i‡(
rc
)

147  
rc
;

149 
rc
 = 
	`vÆid©e_routög_modñ
(
ty≥
, 
Êags
);

150 i‡(
rc
)

151  
rc
;

154 
öå_ty≥_descs
[
ty≥
].
Êags
 = flags;

155 
	`£t_s¸_ñ3_‰om_rm
(
ty≥
, 
Êags
, 
SECURE
);

156 
	`£t_s¸_ñ3_‰om_rm
(
ty≥
, 
Êags
, 
NON_SECURE
);

159 
	}
}

166 
öt32_t
 
	$ªgi°î_öãºu±_ty≥_h™dÀr
(
uöt32_t
 
ty≥
,

167 
öãºu±_ty≥_h™dÀr_t
 
h™dÀr
,

168 
uöt32_t
 
Êags
)

170 
öt32_t
 
rc
;

173 i‡(!
h™dÀr
)

174  -
EINVAL
;

177 i‡(
Êags
 & 
INTR_TYPE_FLAGS_MASK
)

178  -
EINVAL
;

181 i‡(
öå_ty≥_descs
[
ty≥
].
h™dÀr
)

182  -
EALREADY
;

184 
rc
 = 
	`£t_routög_modñ
(
ty≥
, 
Êags
);

185 i‡(
rc
)

186  
rc
;

189 
öå_ty≥_descs
[
ty≥
].
h™dÀr
 = handler;

192 
	}
}

199 
öãºu±_ty≥_h™dÀr_t
 
	$gë_öãºu±_ty≥_h™dÀr
(
uöt32_t
 
ty≥
)

201 i‡(
	`vÆid©e_öãºu±_ty≥
(
ty≥
))

202  
NULL
;

204  
öå_ty≥_descs
[
ty≥
].
h™dÀr
;

205 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/runtime_svc.c

31 
	~<debug.h
>

32 
	~<î∫o.h
>

33 
	~<ru¡ime_svc.h
>

34 
	~<°rög.h
>

45 
	#RT_SVC_DESCS_START
 ((
uöt64_t
Ë(&
__RT_SVC_DESCS_START__
))

	)

46 
	#RT_SVC_DESCS_END
 ((
uöt64_t
Ë(&
__RT_SVC_DESCS_END__
))

	)

47 
uöt8_t
 
	gπ_svc_descs_ödi˚s
[
MAX_RT_SVCS
];

48 
π_svc_desc_t
 *
	gπ_svc_descs
;

53 
öt32_t
 
	$vÆid©e_π_svc_desc
(
π_svc_desc_t
 *
desc
)

55 i‡(
desc
 =
NULL
)

56  -
EINVAL
;

58 i‡(
desc
->
°¨t_€n
 > desc->
íd_€n
)

59  -
EINVAL
;

61 i‡(
desc
->
íd_€n
 >
OEN_LIMIT
)

62  -
EINVAL
;

64 i‡(
desc
->
ˇŒ_ty≥
 !
SMC_TYPE_FAST
 && desc->ˇŒ_ty≥ !
SMC_TYPE_STD
)

65  -
EINVAL
;

68 i‡(
desc
->
öô
 =
NULL
 && desc->
h™dÀ
 == NULL)

69  -
EINVAL
;

72 
	}
}

81 
	$ru¡ime_svc_öô
()

83 
öt32_t
 
rc
 = 0;

84 
uöt32_t
 
ödex
, 
°¨t_idx
, 
íd_idx
;

85 
uöt64_t
 
π_svc_descs_num
;

88 
π_svc_descs_num
 = 
RT_SVC_DESCS_END
 - 
RT_SVC_DESCS_START
;

89 
π_svc_descs_num
 /(
π_svc_desc_t
);

90 i‡(
π_svc_descs_num
 == 0)

94 
	`mem£t
(
π_svc_descs_ödi˚s
, -1, (rt_svc_descs_indices));

96 
π_svc_descs
 = (
π_svc_desc_t
 *Ë
RT_SVC_DESCS_START
;

97 
ödex
 = 0; index < 
π_svc_descs_num
; index++) {

104 
rc
 = 
	`vÆid©e_π_svc_desc
(&
π_svc_descs
[
ödex
]);

105 i‡(
rc
) {

106 
	`ERROR
("InvalidÑuntime service descriptor 0x%x (%s)\n",

107 &
π_svc_descs
[
ödex
],

108 
π_svc_descs
[
ödex
].
«me
);

109 
îr‹
;

119 i‡(
π_svc_descs
[
ödex
].
öô
) {

120 
rc
 = 
π_svc_descs
[
ödex
].
	`öô
();

121 i‡(
rc
) {

122 
	`ERROR
("Error initializingÑuntime service %s\n",

123 
π_svc_descs
[
ödex
].
«me
);

134 
°¨t_idx
 = 
	`gë_unique_€n
(
π_svc_descs
[
ödex
].
°¨t_€n
,

135 
π_svc_descs
[
ödex
].
ˇŒ_ty≥
);

136 
íd_idx
 = 
	`gë_unique_€n
(
π_svc_descs
[
ödex
].
íd_€n
,

137 
π_svc_descs
[
ödex
].
ˇŒ_ty≥
);

139 ; 
°¨t_idx
 <
íd_idx
; start_idx++)

140 
π_svc_descs_ödi˚s
[
°¨t_idx
] = 
ödex
;

144 
îr‹
:

145 
	`∑nic
();

146 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/aarch64/tsp_entrypoint.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<t•.h
>

36 .
globl
 
	gt•_íåypoöt


37 .
globl
 
	gt•_ve˘‹_èbÀ


46 .
ma¸o
 
ª°‹e_¨gs_ˇŒ_smc


47 
ldp
 
	gx6
, 
	gx7
, [
x0
, #TSP_ARG6]

48 
ldp
 
	gx4
, 
	gx5
, [
x0
, #TSP_ARG4]

49 
ldp
 
	gx2
, 
	gx3
, [
x0
, #TSP_ARG2]

50 
ldp
 
	gx0
, 
	gx1
, [
x0
, #TSP_ARG0]

51 
	gsmc
 #0

52 .
	gídm


54 .
ma¸o
 
ßve_îë_c⁄ãxt
 
ªg1
 
ªg2


55 
	gmrs
 \
	gªg1
, 
ñr_ñ1


56 
	gmrs
 \
	gªg2
, 
•§_ñ1


57 
	g°p
 \
	gªg1
, \
	gªg2
, [
•
, #-0x10]!

58 
°p
 
	gx30
, 
	gx18
, [
•
, #-0x10]!

59 .
	gídm


61 .
ma¸o
 
ª°‹e_îë_c⁄ãxt
 
ªg1
 
ªg2


62 
ldp
 
	gx30
, 
	gx18
, [
•
], #0
x10


63 
	gldp
 \
	gªg1
, \
	gªg2
, [
•
], #0
x10


64 
m§
 
	gñr_ñ1
, \
ªg1


65 
m§
 
	g•§_ñ1
, \
	gªg2


66 .
	gídm


68 .
	g£˘i⁄
 .
	gãxt
, "ax"

69 .
	gÆign
 3

71 
func
 
t•_íåypoöt


79 
mrs
 
	gx0
, 
mpidr_ñ1


80 
bl
 
∂©f‹m_is_¥im¨y_˝u


81 
cbz
 
	gx0
, 
t•_íåypoöt_∑nic


87 
adr
 
	gx0
, 
t•_ex˚±i⁄s


88 
m§
 
	gvb¨_ñ1
, 
x0


94 
mrs
 
	gx0
, 
s˘Ã_ñ1


95 
‹r
 
	gx0
, x0, #SCTLR_I_BIT

96 
m§
 
	gs˘Ã_ñ1
, 
x0


97 
isb


105 
ldr
 
	gx0
, =
__BSS_START__


106 
ldr
 
x1
, =
__BSS_SIZE__


107 
bl
 
zîomem16


109 
ldr
 
x0
, =
__COHERENT_RAM_START__


110 
ldr
 
x1
, =
__COHERENT_RAM_UNALIGNED_SIZE__


111 
bl
 
zîomem16


118 
mrs
 
x0
, 
mpidr_ñ1


119 
bl
 
∂©f‹m_£t_cohîít_°ack


126 
bl
 
bl32_óæy_∂©f‹m_£tup


127 
bl
 
bl32_∂©_¨ch_£tup


134 
mrs
 
	gx0
, 
mpidr_ñ1


135 
bl
 
∂©f‹m_£t_°ack


141 
bl
 
t•_maö


147 
mov
 
	gx1
, 
x0


148 
mov
 
	gx0
, #TSP_ENTRY_DONE

149 
	gsmc
 #0

151 
	gt•_íåypoöt_∑nic
:

152 
b
 
t•_íåypoöt_∑nic


160 
func
 
t•_ve˘‹_èbÀ


161 
b
 
t•_°d_smc_íåy


162 
b
 
t•_Á°_smc_íåy


163 
b
 
t•_˝u_⁄_íåy


164 
b
 
t•_˝u_off_íåy


165 
b
 
t•_˝u_ªsume_íåy


166 
b
 
t•_˝u_su•íd_íåy


167 
b
 
t•_fiq_íåy


179 
func
 
t•_˝u_off_íåy


180 
bl
 
t•_˝u_off_maö


181 
ª°‹e_¨gs_ˇŒ_smc


194 
func
 
t•_˝u_⁄_íåy


199 
adr
 
x0
, 
t•_ex˚±i⁄s


200 
m§
 
	gvb¨_ñ1
, 
x0


206 
mrs
 
	gx0
, 
s˘Ã_ñ1


207 
‹r
 
	gx0
, x0, #SCTLR_I_BIT

208 
m§
 
	gs˘Ã_ñ1
, 
x0


209 
isb


216 
mrs
 
	gx0
, 
mpidr_ñ1


217 
bl
 
∂©f‹m_£t_cohîít_°ack


223 
bl
 
bl32_∂©_íabÀ_mmu


230 
mrs
 
	gx0
, 
mpidr_ñ1


231 
bl
 
∂©f‹m_£t_°ack


238 
bl
 
t•_˝u_⁄_maö


239 
ª°‹e_¨gs_ˇŒ_smc


242 
	gt•_˝u_⁄_íåy_∑nic
:

243 
b
 
t•_˝u_⁄_íåy_∑nic


254 
func
 
t•_˝u_su•íd_íåy


255 
bl
 
t•_˝u_su•íd_maö


256 
ª°‹e_¨gs_ˇŒ_smc


279 
func
 
t•_fiq_íåy


280 #i‡
DEBUG


281 
mov
 
x2
, #(
	gTSP_HANDLE_FIQ_AND_RETURN
 & ~0xffff)

282 
movk
 
	gx2
, #(
	gTSP_HANDLE_FIQ_AND_RETURN
 & 0xffff)

283 
cmp
 
	gx0
, 
x2


284 
	gb
.
√
 
	gt•_fiq_íåy_∑nic


298 
ßve_îë_c⁄ãxt
 
x2
 
x3


299 
bl
 
t•_upd©e_sync_fiq_°©s


300 
bl
 
t•_fiq_h™dÀr


301 
cbnz
 
	gx0
, 
t•_fiq_íåy_∑nic


302 
ª°‹e_îë_c⁄ãxt
 
x2
 
x3


303 
mov
 
	gx0
, #(
	gTSP_HANDLED_S_EL1_FIQ
 & ~0xffff)

304 
movk
 
	gx0
, #(
	gTSP_HANDLED_S_EL1_FIQ
 & 0xffff)

305 
	gsmc
 #0

307 
	gt•_fiq_íåy_∑nic
:

308 
b
 
t•_fiq_íåy_∑nic


320 
func
 
t•_˝u_ªsume_íåy


321 
bl
 
t•_˝u_ªsume_maö


322 
ª°‹e_¨gs_ˇŒ_smc


323 
t•_˝u_ªsume_∑nic
:

324 
b
 
t•_˝u_ªsume_∑nic


331 
func
 
t•_Á°_smc_íåy


332 
bl
 
t•_smc_h™dÀr


333 
ª°‹e_¨gs_ˇŒ_smc


334 
t•_Á°_smc_íåy_∑nic
:

335 
b
 
t•_Á°_smc_íåy_∑nic


344 
func
 
t•_°d_smc_íåy


345 
m§
 
daif˛r
, #DAIF_FIQ_BIT | 
DAIF_IRQ_BIT


346 
bl
 
t•_smc_h™dÀr


347 
m§
 
	gdaif£t
, #DAIF_FIQ_BIT | 
DAIF_IRQ_BIT


348 
ª°‹e_¨gs_ˇŒ_smc


349 
	gt•_°d_smc_íåy_∑nic
:

350 
b
 
t•_°d_smc_íåy_∑nic


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/aarch64/tsp_exceptions.S

31 
	~<bl_comm⁄.h
>

32 
	~<¨ch.h
>

33 
	~<t•.h
>

34 
	~<asm_ma¸os.S
>

43 
	#SCRATCH_REG_SIZE
 #(20 * 8)

	)

45 .
ma¸o
 
ßve_ˇŒî_ªgs_™d_Ã


46 
sub
 
	g•
, sp, 
SCRATCH_REG_SIZE


47 
°p
 
	gx0
, 
	gx1
, [
•
]

48 
°p
 
	gx2
, 
	gx3
, [
•
, #0
x10
]

49 
°p
 
	gx4
, 
	gx5
, [
•
, #0
x20
]

50 
°p
 
	gx6
, 
	gx7
, [
•
, #0
x30
]

51 
°p
 
	gx8
, 
	gx9
, [
•
, #0
x40
]

52 
°p
 
	gx10
, 
	gx11
, [
•
, #0
x50
]

53 
°p
 
	gx12
, 
	gx13
, [
•
, #0
x60
]

54 
°p
 
	gx14
, 
	gx15
, [
•
, #0
x70
]

55 
°p
 
	gx16
, 
	gx17
, [
•
, #0
x80
]

56 
°p
 
	gx18
, 
	gx30
, [
•
, #0
x90
]

57 .
	gídm


59 .
ma¸o
 
ª°‹e_ˇŒî_ªgs_™d_Ã


60 
ldp
 
	gx0
, 
	gx1
, [
•
]

61 
ldp
 
	gx2
, 
	gx3
, [
•
, #0
x10
]

62 
ldp
 
	gx4
, 
	gx5
, [
•
, #0
x20
]

63 
ldp
 
	gx6
, 
	gx7
, [
•
, #0
x30
]

64 
ldp
 
	gx8
, 
	gx9
, [
•
, #0
x40
]

65 
ldp
 
	gx10
, 
	gx11
, [
•
, #0
x50
]

66 
ldp
 
	gx12
, 
	gx13
, [
•
, #0
x60
]

67 
ldp
 
	gx14
, 
	gx15
, [
•
, #0
x70
]

68 
ldp
 
	gx16
, 
	gx17
, [
•
, #0
x80
]

69 
ldp
 
	gx18
, 
	gx30
, [
•
, #0
x90
]

70 
add
 
	g•
, sp, 
	gSCRATCH_REG_SIZE


71 .
	gídm


73 .
globl
 
	gt•_ex˚±i⁄s


79 .
	g£˘i⁄
 .
	gve˘‹s
, "ax"; .
	gÆign
 11

81 .
	gÆign
 7

82 
	gt•_ex˚±i⁄s
:

88 
sync_ex˚±i⁄_•_ñ0
:

89 
wfi


90 
b
 
sync_ex˚±i⁄_•_ñ0


91 
check_ve˘‹_size
 
sync_ex˚±i⁄_•_ñ0


93 .
Æign
 7

95 
úq_•_ñ0
:

96 
b
 
úq_•_ñ0


97 
check_ve˘‹_size
 
úq_•_ñ0


99 .
Æign
 7

100 
fiq_•_ñ0
:

101 
b
 
fiq_•_ñ0


102 
check_ve˘‹_size
 
fiq_•_ñ0


104 .
Æign
 7

105 
£º‹_•_ñ0
:

106 
b
 
£º‹_•_ñ0


107 
check_ve˘‹_size
 
£º‹_•_ñ0


115 .
Æign
 7

116 
sync_ex˚±i⁄_•_ñx
:

117 
wfi


118 
b
 
sync_ex˚±i⁄_•_ñx


119 
check_ve˘‹_size
 
sync_ex˚±i⁄_•_ñx


121 .
Æign
 7

122 
úq_•_ñx
:

123 
ßve_ˇŒî_ªgs_™d_Ã


125 
bl
 
t•_úq_ª˚ived


127 
smc
 #0

129 
ª°‹e_ˇŒî_ªgs_™d_Ã


130 
îë


131 
check_ve˘‹_size
 
úq_•_ñx


133 .
Æign
 7

134 
fiq_•_ñx
:

135 
ßve_ˇŒî_ªgs_™d_Ã


136 
bl
 
t•_fiq_h™dÀr


137 
cbz
 
x0
, 
fiq_•_ñx_d⁄e


143 
	gsmc
 #0

144 
	gfiq_•_ñx_d⁄e
:

145 
ª°‹e_ˇŒî_ªgs_™d_Ã


146 
îë


147 
check_ve˘‹_size
 
fiq_•_ñx


149 .
Æign
 7

150 
£º‹_•_ñx
:

151 
b
 
£º‹_•_ñx


152 
check_ve˘‹_size
 
£º‹_•_ñx


160 .
Æign
 7

161 
sync_ex˚±i⁄_Ørch64
:

162 
wfi


163 
b
 
sync_ex˚±i⁄_Ørch64


164 
check_ve˘‹_size
 
sync_ex˚±i⁄_Ørch64


166 .
Æign
 7

167 
úq_Ørch64
:

168 
b
 
úq_Ørch64


169 
check_ve˘‹_size
 
úq_Ørch64


171 .
Æign
 7

172 
fiq_Ørch64
:

173 
b
 
fiq_Ørch64


174 
check_ve˘‹_size
 
fiq_Ørch64


176 .
Æign
 7

177 
£º‹_Ørch64
:

178 
b
 
£º‹_Ørch64


179 
check_ve˘‹_size
 
£º‹_Ørch64


187 .
Æign
 7

188 
sync_ex˚±i⁄_Ørch32
:

189 
wfi


190 
b
 
sync_ex˚±i⁄_Ørch32


191 
check_ve˘‹_size
 
sync_ex˚±i⁄_Ørch32


193 .
Æign
 7

194 
úq_Ørch32
:

195 
b
 
úq_Ørch32


196 
check_ve˘‹_size
 
úq_Ørch32


198 .
Æign
 7

199 
fiq_Ørch32
:

200 
b
 
fiq_Ørch32


201 
check_ve˘‹_size
 
fiq_Ørch32


203 .
Æign
 7

204 
£º‹_Ørch32
:

205 
b
 
£º‹_Ørch32


206 
check_ve˘‹_size
 
£º‹_Ørch32


207 .
Æign
 7

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/aarch64/tsp_request.S

31 
	~<asm_ma¸os.S
>

32 
	~<t•.h
>

34 .
globl
 
t•_gë_magic


42 
func
 
t•_gë_magic


44 
°p
 
	gx0
, 
	gxzr
, [
•
, #-16]!

47 
ldr
 
	gw0
, 
_t•_fid_gë_magic


50 
	gsmc
 #0

53 
ldp
 
	gx4
, 
	gxzr
, [
•
], #16

56 
°p
 
	gx0
, 
	gx1
, [
x4
, #0]

58 
	gªt


60 .
	gÆign
 2

61 
	g_t•_fid_gë_magic
:

62 .
w‹d
 
TSP_GET_ARGS


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp-fvp.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 #TSP 
sour˚
 
fûes
 
•ecific
 
to
 
FVP
 
∂©f‹m


25 
	gBL32_SOURCES
 +
drivîs
/
¨m
/
gic
/
gic_v2
.
c
 \

26 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_mp_°ack
.
S
 \

27 
∂©
/
fvp
/
Ørch64
/
fvp_comm⁄
.
c
 \

28 
∂©
/
fvp
/
Ørch64
/
fvp_hñ≥rs
.
S
 \

29 
∂©
/
fvp
/
bl32_fvp_£tup
.
c
 \

30 
∂©
/
fvp
/
fvp_gic
.
c


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp-mt6752.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 #TSP 
sour˚
 
fûes
 
•ecific
 
to
 
FVP
 
∂©f‹m


25 
	gBL32_SOURCES
 +
drivîs
/
¨m
/
gic
/
gic_v2
.
c
 \

26 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_mp_°ack
.
S
 \

27 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

28 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©_hñ≥rs
.
S
 \

29 
∂©
/
$
{
PLAT
}/
bl32_∂©_£tup
.
c
 \

30 
∂©
/
$
{
PLAT
}/
∂©_gic
.
c


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp.ld.S

31 
	~<∂©f‹m_def.h
>

33 
	$OUTPUT_FORMAT
(
PLATFORM_LINKER_FORMAT
)

34 
	$OUTPUT_ARCH
(
PLATFORM_LINKER_ARCH
)

35 
	$ENTRY
(
t•_íåypoöt
)

38 
MEMORY
 {

39 
	`RAM
 (
rwx
): 
ORIGIN
 = 
TSP_SEC_MEM_BASE
, 
LENGTH
 = 
TSP_SEC_MEM_SIZE


40 
	}
}

43 
	gSECTIONS


45 . = 
BL32_BASE
;

46 
ASSERT
(. =
ALIGN
(4096),

49 
	gro
 . : {

50 
__RO_START__
 = .;

51 *
	gt•_íåypoöt
.
o
(.
ãxt
*)

52 *(.
	gãxt
*)

53 *(.
	grod©a
*)

54 *(.
	gve˘‹s
)

55 
	g__RO_END_UNALIGNED__
 = .;

61 . = 
NEXT
(4096);

62 
	g__RO_END__
 = .;

63 } >
	gRAM


65 .
	gd©a
 . : {

66 
__DATA_START__
 = .;

67 *(.
	gd©a
*)

68 
	g__DATA_END__
 = .;

69 } >
RAM


71 
°acks
 (
NOLOAD
) : {

72 
__STACKS_START__
 = .;

73 *(
	gtzfw_n‹mÆ_°acks
)

74 
	g__STACKS_END__
 = .;

75 } >
	gRAM


81 .
	gbss
 : 
ALIGN
(16) {

82 
__BSS_START__
 = .;

83 *(
SORT_BY_ALIGNMENT
(.
bss
*))

84 *(
	gCOMMON
)

85 
	g__BSS_END__
 = .;

86 } >
RAM


93 
xœt_èbÀ
 (
NOLOAD
) : {

94 *(
xœt_èbÀ
)

95 } >
RAM


103 
cohîít_øm
 (
NOLOAD
Ë: 
ALIGN
(4096) {

104 
__COHERENT_RAM_START__
 = .;

105 *(
	gtzfw_cohîít_mem
)

106 
	g__COHERENT_RAM_END_UNALIGNED__
 = .;

112 . = 
NEXT
(4096);

113 
	g__COHERENT_RAM_END__
 = .;

114 } >
RAM


116 
	g__BL32_END__
 = .;

118 
	g__BSS_SIZE__
 = 
SIZEOF
(.
bss
);

119 
	g__COHERENT_RAM_UNALIGNED_SIZE__
 =

120 
__COHERENT_RAM_END_UNALIGNED__
 - 
__COHERENT_RAM_START__
;

122 
ASSERT
(. <
BL32_LIMIT
, "BL3-2 image hasÉxceeded itsÜimit.")

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 
	gBL32_SOURCES
 +
bl32
/
t•
/
t•_maö
.
c
 \

25 
bl32
/
t•
/
Ørch64
/
t•_íåypoöt
.
S
 \

26 
bl32
/
t•
/
Ørch64
/
t•_ex˚±i⁄s
.
S
 \

27 
bl32
/
t•
/
Ørch64
/
t•_ªque°
.
S
 \

28 
bl32
/
t•
/
t•_öãºu±
.
c
 \

29 
bl32
/
t•
/
t•_timî
.
c
 \

30 
comm⁄
/
Ørch64
/
óæy_ex˚±i⁄s
.
S
 \

31 
lib
/
locks
/
ex˛usive
/
•ölock
.
S


33 
BL32_LINKERFILE
 :
bl32
/
t•
/t•.
ld
.
S


35 #In˛udê
the
 
∂©f‹m
-
•ecific
 
TSP
 
Makefûe


36 #I‡
no
 
∂©f‹m
-
•ecific
 
TSP
 
Makefûe
 
exi°s
, 
ô
 
móns
 TSP 
is
 
nŸ
 
suµ‹ãd


37 #⁄ 
this
 
∂©f‹m
.

38 
	gTSP_PLAT_MAKEFILE
 :
bl32
/
t•
/t•-
$
{
PLAT
}.
mk


39 
i„q
 (,
$
(
wûdˇrd
 ${
TSP_PLAT_MAKEFILE
}))

40 
$
(
îr‹
 
TSP
 
is
 
nŸ
 
suµ‹ãd
 
⁄
 
∂©f‹m
 ${
PLAT
})

42 
ö˛ude
 
	g$
{
	gTSP_PLAT_MAKEFILE
}

43 
	gídif


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp_interrupt.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<debug.h
>

34 
	~<gic_v2.h
>

35 
	~<t•.h
>

36 
	~<∂©f‹m.h
>

37 
	~<∂©f‹m_def.h
>

49 
	$t•_upd©e_sync_fiq_°©s
(
uöt32_t
 
ty≥
, 
uöt64_t
 
ñr_ñ3
)

51 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

52 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

54 
t•_°©s
[
löór_id
].
sync_fiq_cou¡
++;

55 i‡(
ty≥
 =
TSP_HANDLE_FIQ_AND_RETURN
)

56 
t•_°©s
[
löór_id
].
sync_fiq_ªt_cou¡
++;

58 
	`•ö_lock
(&
c⁄sﬁe_lock
);

59 
	`¥ötf
("TSP: cpu 0x%x sync fiqÑequest from 0x%llx \n\r",

60 
mpidr
, 
ñr_ñ3
);

61 
	`INFO
("cpu 0x%x: %d sync fiqÑequests, %d sync fiqÑeturns\n",

62 
mpidr
,

63 
t•_°©s
[
löór_id
].
sync_fiq_cou¡
,

64 
t•_°©s
[
löór_id
].
sync_fiq_ªt_cou¡
);

65 
	`•ö_u∆ock
(&
c⁄sﬁe_lock
);

66 
	}
}

75 
öt32_t
 
	$t•_fiq_h™dÀr
()

77 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

78 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
), 
id
;

85 
id
 = 
	`∂©_ic_gë_≥ndög_öãºu±_id
();

88 i‡(
id
 !
IRQ_SEC_PHY_TIMER
)

89  
TSP_EL3_FIQ
;

95 
id
 = 
	`∂©_ic_acknowÀdge_öãºu±
();

96 
	`as£π
(
id
 =
IRQ_SEC_PHY_TIMER
);

97 
	`t•_gíîic_timî_h™dÀr
();

98 
	`∂©_ic_íd_of_öãºu±
(
id
);

101 
t•_°©s
[
löór_id
].
fiq_cou¡
++;

102 
	`•ö_lock
(&
c⁄sﬁe_lock
);

103 
	`¥ötf
("TSP: cpu 0x%x handled fiq %d \n\r",

104 
mpidr
, 
id
);

105 
	`INFO
("cpu 0x%x: %d fiqÑequests \n",

106 
mpidr
, 
t•_°©s
[
löór_id
].
fiq_cou¡
);

107 
	`•ö_u∆ock
(&
c⁄sﬁe_lock
);

110 
	}
}

112 
öt32_t
 
	$t•_úq_ª˚ived
()

114 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

115 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

117 
t•_°©s
[
löór_id
].
úq_cou¡
++;

118 
	`•ö_lock
(&
c⁄sﬁe_lock
);

119 
	`¥ötf
("TSP: cpu 0x%xÑe˚ived irq\n\r", 
mpidr
);

120 
	`INFO
("cpu 0x%x: %d irqÑequests \n",

121 
mpidr
, 
t•_°©s
[
löór_id
].
úq_cou¡
);

122 
	`•ö_u∆ock
(&
c⁄sﬁe_lock
);

124  
TSP_PREEMPTED
;

125 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp_main.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<bl_comm⁄.h
>

33 
	~<debug.h
>

34 
	~<∂©f‹m.h
>

35 
	~<∂©f‹m_def.h
>

36 
	~<•ölock.h
>

37 
	~<°dio.h
>

38 
	~<t•.h
>

44 
__RO_START__
;

45 
__COHERENT_RAM_END__
;

50 
•ölock_t
 
	gc⁄sﬁe_lock
;

56 
t•_¨gs_t
 
	gt•_smc_¨gs
[
PLATFORM_CORE_COUNT
];

61 
w‹k_°©i°ics_t
 
	gt•_°©s
[
PLATFORM_CORE_COUNT
];

67 
	#BL32_TOTAL_BASE
 ()(&
__RO_START__
)

	)

69 
	#BL32_TOTAL_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

71 
t•_¨gs_t
 *
	$£t_smc_¨gs
(
uöt64_t
 
¨g0
,

72 
uöt64_t
 
¨g1
,

73 
uöt64_t
 
¨g2
,

74 
uöt64_t
 
¨g3
,

75 
uöt64_t
 
¨g4
,

76 
uöt64_t
 
¨g5
,

77 
uöt64_t
 
¨g6
,

78 
uöt64_t
 
¨g7
)

80 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

81 
uöt32_t
 
löór_id
;

82 
t•_¨gs_t
 *
p˝u_smc_¨gs
;

88 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

89 
p˝u_smc_¨gs
 = &
t•_smc_¨gs
[
löór_id
];

90 
	`wrôe_•_¨g
(
p˝u_smc_¨gs
, 
TSP_ARG0
, 
¨g0
);

91 
	`wrôe_•_¨g
(
p˝u_smc_¨gs
, 
TSP_ARG1
, 
¨g1
);

92 
	`wrôe_•_¨g
(
p˝u_smc_¨gs
, 
TSP_ARG2
, 
¨g2
);

93 
	`wrôe_•_¨g
(
p˝u_smc_¨gs
, 
TSP_ARG3
, 
¨g3
);

94 
	`wrôe_•_¨g
(
p˝u_smc_¨gs
, 
TSP_ARG4
, 
¨g4
);

95 
	`wrôe_•_¨g
(
p˝u_smc_¨gs
, 
TSP_ARG5
, 
¨g5
);

96 
	`wrôe_•_¨g
(
p˝u_smc_¨gs
, 
TSP_ARG6
, 
¨g6
);

97 
	`wrôe_•_¨g
(
p˝u_smc_¨gs
, 
TSP_ARG7
, 
¨g7
);

99  
p˝u_smc_¨gs
;

100 
	}
}

107 
uöt64_t
 
	$t•_maö
()

109 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

110 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

113 
	`bl32_∂©f‹m_£tup
();

116 
	`t•_gíîic_timî_°¨t
();

119 
t•_°©s
[
löór_id
].
smc_cou¡
++;

120 
t•_°©s
[
löór_id
].
îë_cou¡
++;

121 
t•_°©s
[
löór_id
].
˝u_⁄_cou¡
++;

123 
	`•ö_lock
(&
c⁄sﬁe_lock
);

124 
	`¥ötf
("TSP %s\n\r", 
buûd_mesßge
);

125 
	`INFO
("TŸÆ mem‹y ba£ : 0x%x\n", ()
BL32_TOTAL_BASE
);

126 
	`INFO
("Total memory size : 0x%x bytes\n",

127 ()(
BL32_TOTAL_LIMIT
 - 
BL32_TOTAL_BASE
));

128 
	`INFO
("˝u 0x%x: %d smcs, %dÉªt†%d cpu o¿ªque°s\n", 
mpidr
,

129 
t•_°©s
[
löór_id
].
smc_cou¡
,

130 
t•_°©s
[
löór_id
].
îë_cou¡
,

131 
t•_°©s
[
löór_id
].
˝u_⁄_cou¡
);

132 
	`•ö_u∆ock
(&
c⁄sﬁe_lock
);

134  (
uöt64_t
Ë&
t•_ve˘‹_èbÀ
;

135 
	}
}

142 
t•_¨gs_t
 *
	$t•_˝u_⁄_maö
()

144 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

145 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

148 
	`t•_gíîic_timî_°¨t
();

151 
t•_°©s
[
löór_id
].
smc_cou¡
++;

152 
t•_°©s
[
löór_id
].
îë_cou¡
++;

153 
t•_°©s
[
löór_id
].
˝u_⁄_cou¡
++;

155 
	`•ö_lock
(&
c⁄sﬁe_lock
);

156 
	`¥ötf
("SP: cpu 0x%xÅu∫ed on\n\r", 
mpidr
);

157 
	`INFO
("˝u 0x%x: %d smcs, %dÉªt†%d cpu o¿ªque°s\n", 
mpidr
,

158 
t•_°©s
[
löór_id
].
smc_cou¡
,

159 
t•_°©s
[
löór_id
].
îë_cou¡
,

160 
t•_°©s
[
löór_id
].
˝u_⁄_cou¡
);

161 
	`•ö_u∆ock
(&
c⁄sﬁe_lock
);

164  
	`£t_smc_¨gs
(
TSP_ON_DONE
, 0, 0, 0, 0, 0, 0, 0);

165 
	}
}

171 
t•_¨gs_t
 *
	$t•_˝u_off_maö
(
uöt64_t
 
¨g0
,

172 
uöt64_t
 
¨g1
,

173 
uöt64_t
 
¨g2
,

174 
uöt64_t
 
¨g3
,

175 
uöt64_t
 
¨g4
,

176 
uöt64_t
 
¨g5
,

177 
uöt64_t
 
¨g6
,

178 
uöt64_t
 
¨g7
)

180 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

181 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

188 
	`t•_gíîic_timî_°›
();

191 
t•_°©s
[
löór_id
].
smc_cou¡
++;

192 
t•_°©s
[
löór_id
].
îë_cou¡
++;

193 
t•_°©s
[
löór_id
].
˝u_off_cou¡
++;

195 
	`•ö_lock
(&
c⁄sﬁe_lock
);

196 
	`¥ötf
("SP: cpu 0x%x of‡ªque°\n\r", 
mpidr
);

197 
	`INFO
("˝u 0x%x: %d smcs, %dÉªt†%d cpu of‡ªque°s\n", 
mpidr
,

198 
t•_°©s
[
löór_id
].
smc_cou¡
,

199 
t•_°©s
[
löór_id
].
îë_cou¡
,

200 
t•_°©s
[
löór_id
].
˝u_off_cou¡
);

201 
	`•ö_u∆ock
(&
c⁄sﬁe_lock
);

205  
	`£t_smc_¨gs
(
TSP_OFF_DONE
, 0, 0, 0, 0, 0, 0, 0);

206 
	}
}

213 
t•_¨gs_t
 *
	$t•_˝u_su•íd_maö
(
uöt64_t
 
powî_°©e
,

214 
uöt64_t
 
¨g1
,

215 
uöt64_t
 
¨g2
,

216 
uöt64_t
 
¨g3
,

217 
uöt64_t
 
¨g4
,

218 
uöt64_t
 
¨g5
,

219 
uöt64_t
 
¨g6
,

220 
uöt64_t
 
¨g7
)

222 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

223 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

229 
	`t•_gíîic_timî_ßve
();

230 
	`t•_gíîic_timî_°›
();

233 
t•_°©s
[
löór_id
].
smc_cou¡
++;

234 
t•_°©s
[
löór_id
].
îë_cou¡
++;

235 
t•_°©s
[
löór_id
].
˝u_su•íd_cou¡
++;

237 
	`•ö_lock
(&
c⁄sﬁe_lock
);

238 
	`¥ötf
("SP: cpu 0x%x suspendÑequest.Öower state: 0x%x\n\r",

239 
mpidr
, 
powî_°©e
);

240 
	`INFO
("˝u 0x%x: %d smcs, %dÉªt†%d cpu su•ídÑeque°s\n", 
mpidr
,

241 
t•_°©s
[
löór_id
].
smc_cou¡
,

242 
t•_°©s
[
löór_id
].
îë_cou¡
,

243 
t•_°©s
[
löór_id
].
˝u_su•íd_cou¡
);

244 
	`•ö_u∆ock
(&
c⁄sﬁe_lock
);

247  
	`£t_smc_¨gs
(
TSP_SUSPEND_DONE
, 0, 0, 0, 0, 0, 0, 0);

248 
	}
}

255 
t•_¨gs_t
 *
	$t•_˝u_ªsume_maö
(
uöt64_t
 
su•íd_Àvñ
,

256 
uöt64_t
 
¨g1
,

257 
uöt64_t
 
¨g2
,

258 
uöt64_t
 
¨g3
,

259 
uöt64_t
 
¨g4
,

260 
uöt64_t
 
¨g5
,

261 
uöt64_t
 
¨g6
,

262 
uöt64_t
 
¨g7
)

264 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

265 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

268 
	`t•_gíîic_timî_ª°‹e
();

271 
t•_°©s
[
löór_id
].
smc_cou¡
++;

272 
t•_°©s
[
löór_id
].
îë_cou¡
++;

273 
t•_°©s
[
löór_id
].
˝u_ªsume_cou¡
++;

275 
	`•ö_lock
(&
c⁄sﬁe_lock
);

276 
	`¥ötf
("SP: cpu 0x%xÑesumed. suspendÜevel %d \n\r",

277 
mpidr
, 
su•íd_Àvñ
);

278 
	`INFO
("˝u 0x%x: %d smcs, %dÉªt†%d cpu su•ídÑeque°s\n", 
mpidr
,

279 
t•_°©s
[
löór_id
].
smc_cou¡
,

280 
t•_°©s
[
löór_id
].
îë_cou¡
,

281 
t•_°©s
[
löór_id
].
˝u_su•íd_cou¡
);

282 
	`•ö_u∆ock
(&
c⁄sﬁe_lock
);

285  
	`£t_smc_¨gs
(
TSP_RESUME_DONE
, 0, 0, 0, 0, 0, 0, 0);

286 
	}
}

294 
t•_¨gs_t
 *
	$t•_smc_h™dÀr
(
uöt64_t
 
func
,

295 
uöt64_t
 
¨g1
,

296 
uöt64_t
 
¨g2
,

297 
uöt64_t
 
¨g3
,

298 
uöt64_t
 
¨g4
,

299 
uöt64_t
 
¨g5
,

300 
uöt64_t
 
¨g6
,

301 
uöt64_t
 
¨g7
)

303 
uöt64_t
 
ªsu…s
[2];

304 
uöt64_t
 
£rvi˚_¨gs
[2];

305 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

306 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

307 c⁄° *
smc_ty≥
;

310 
t•_°©s
[
löór_id
].
smc_cou¡
++;

311 
t•_°©s
[
löór_id
].
îë_cou¡
++;

313 
smc_ty≥
 = ((
func
 >> 31) & 1) == 1 ? "fast" : "standard";

315 
	`¥ötf
("SP: cpu 0x%xÑe˚ived %†sm¯0x%x\n", 
	`ªad_mpidr
(), 
smc_ty≥
, 
func
);

316 
	`INFO
("˝u 0x%x: %d smcs, %dÉªts\n", 
mpidr
,

317 
t•_°©s
[
löór_id
].
smc_cou¡
,

318 
t•_°©s
[
löór_id
].
îë_cou¡
);

321 
ªsu…s
[0] = 
¨g1
;

322 
ªsu…s
[1] = 
¨g2
;

328 
	`t•_gë_magic
(
£rvi˚_¨gs
);

331 
	`TSP_BARE_FID
(
func
)) {

332 
TSP_ADD
:

333 
ªsu…s
[0] +
£rvi˚_¨gs
[0];

334 
ªsu…s
[1] +
£rvi˚_¨gs
[1];

336 
TSP_SUB
:

337 
ªsu…s
[0] -
£rvi˚_¨gs
[0];

338 
ªsu…s
[1] -
£rvi˚_¨gs
[1];

340 
TSP_MUL
:

341 
ªsu…s
[0] *
£rvi˚_¨gs
[0];

342 
ªsu…s
[1] *
£rvi˚_¨gs
[1];

344 
TSP_DIV
:

345 
ªsu…s
[0] /
£rvi˚_¨gs
[0] ? service_args[0] : 1;

346 
ªsu…s
[1] /
£rvi˚_¨gs
[1] ? service_args[1] : 1;

352  
	`£t_smc_¨gs
(
func
, 0,

353 
ªsu…s
[0],

354 
ªsu…s
[1],

356 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp_timer.c

30 
	~<¨ch_hñ≥rs.h
>

31 
	~<as£π.h
>

32 
	~<∂©f‹m.h
>

33 
	~<t•.h
>

39 
	stimî_c⁄ãxt
 {

40 
uöt64_t
 
	mcvÆ
;

41 
uöt32_t
 
	m˘l
;

42 } 
	ttimî_c⁄ãxt_t
;

44 
timî_c⁄ãxt_t
 
	gp˝u_timî_c⁄ãxt
[
PLATFORM_CORE_COUNT
];

49 
	$t•_gíîic_timî_°¨t
()

51 
uöt64_t
 
cvÆ
;

52 
uöt32_t
 
˘l
 = 0;

55 
cvÆ
 = 
	`ªad_˙ç˘_ñ0
(Ë+ (
	`ªad_˙t‰q_ñ0
() >> 1);

56 
	`wrôe_˙çs_cvÆ_ñ1
(
cvÆ
);

59 
	`£t_˙ç_˘l_íabÀ
(
˘l
);

60 
	`wrôe_˙çs_˘l_ñ1
(
˘l
);

61 
	}
}

66 
	$t•_gíîic_timî_h™dÀr
()

69 
	`as£π
(
	`gë_˙ç_˘l_i°©us
(
	`ªad_˙çs_˘l_ñ1
()));

72 
	`wrôe_˙çs_˘l_ñ1
(0);

73 
	`t•_gíîic_timî_°¨t
();

74 
	}
}

79 
	$t•_gíîic_timî_°›
()

82 
	`wrôe_˙çs_˘l_ñ1
(0);

83 
	}
}

88 
	$t•_gíîic_timî_ßve
()

90 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
());

92 
p˝u_timî_c⁄ãxt
[
löór_id
].
cvÆ
 = 
	`ªad_˙çs_cvÆ_ñ1
();

93 
p˝u_timî_c⁄ãxt
[
löór_id
].
˘l
 = 
	`ªad_˙çs_˘l_ñ1
();

94 
	`Êush_dˇche_ønge
((
uöt64_t
Ë&
p˝u_timî_c⁄ãxt
[
löór_id
],

95 (
p˝u_timî_c⁄ãxt
[
löór_id
]));

96 
	}
}

101 
	$t•_gíîic_timî_ª°‹e
()

103 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
());

105 
	`wrôe_˙çs_cvÆ_ñ1
(
p˝u_timî_c⁄ãxt
[
löór_id
].
cvÆ
);

106 
	`wrôe_˙çs_˘l_ñ1
(
p˝u_timî_c⁄ãxt
[
löór_id
].
˘l
);

107 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/build.sh

1 #!/
bö
/
bash


3 
	gecho
 "[ATF] build mode : $1"

4 #˝ 
$TEST_BINARY
 
$2


6 
	gecho
 "[ATF] output file : $2"

7 
	gecho
 "[ATF] output folder should be : $3"

8 
	gecho
 "[ATF]Ölatform : $4"

9 
	gecho
 "[ATF] secure OS support : $5"

10 
	gecho
 "[ATF] mach_type : $6"

12 [ "$1" = "Debug" ] ; 
thí


13 
	gDEBUG_ENABLE
=1

14 
echo
 "[ATF] debugÉnable "

16 
DEBUG_ENABLE
=0

17 
echo
 "[ATF] debug disable "

18 
fi


20 #makê
ªÆ˛ón


22 #makê
ATF_BIN
=
$2
 
BUILD_BASE
=
$3
/
ATF_OBJ
 
DEBUG
=
$
{
DEBUG_ENABLE
} 
PLAT
=
$4
 
Æl


23 #makê
ATF_BIN
=
$2
 
BUILD_BASE
=
$3
/
ATF_OBJ
 
DEBUG
=1 
PLAT
=
$4
 
SECURE_OS
=
$5
 
Æl


24 
make
 
ATF_BIN
=
$2
 
BUILD_BASE
=
$3
/
ATF_OBJ
 
DEBUG
=
$
{
DEBUG_ENABLE
} 
PLAT
=
$4
 
SECURE_OS
=
$5
 
MACH_TYPE
=
$6
 
Æl


26 [ 
$
? -
√
 0 ]; 
thí


27 
	gecho
 "[ERROR] ARMÅrusted firmware compile failed!"

28 
	gexô
 1;

29 
fi


31 
	gecho
 "[ATF] build code "

33 
	gecho
 "[ATF] output file : $2"

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/common/aarch64/early_exceptions.S

31 
	~<asm_ma¸os.S
>

32 
	~<ru¡ime_svc.h
>

34 .
globl
 
	góæy_ex˚±i⁄s


36 .
	g£˘i⁄
 .
	gve˘‹s
, "ax"; .
	gÆign
 11

44 .
	gÆign
 7

45 
	góæy_ex˚±i⁄s
:

50 
Synchr⁄ousEx˚±i⁄SP0
:

51 
mov
 
x0
, #SYNC_EXCEPTION_SP_EL0

52 
bl
 
∂©_ªp‹t_ex˚±i⁄


53 
b
 
Synchr⁄ousEx˚±i⁄SP0


54 
check_ve˘‹_size
 
	gSynchr⁄ousEx˚±i⁄SP0


56 .
	gÆign
 7

57 
	gIrqSP0
:

58 
mov
 
x0
, #IRQ_SP_EL0

59 
bl
 
∂©_ªp‹t_ex˚±i⁄


60 
b
 
IrqSP0


61 
check_ve˘‹_size
 
	gIrqSP0


63 .
	gÆign
 7

64 
	gFiqSP0
:

65 
mov
 
x0
, #FIQ_SP_EL0

66 
bl
 
∂©_ªp‹t_ex˚±i⁄


67 
b
 
FiqSP0


68 
check_ve˘‹_size
 
	gFiqSP0


70 .
	gÆign
 7

71 
	gSEº‹SP0
:

72 
mov
 
x0
, #SERROR_SP_EL0

73 
bl
 
∂©_ªp‹t_ex˚±i⁄


74 
b
 
SEº‹SP0


75 
check_ve˘‹_size
 
	gSEº‹SP0


81 .
	gÆign
 7

82 
	gSynchr⁄ousEx˚±i⁄SPx
:

83 
mov
 
x0
, #SYNC_EXCEPTION_SP_ELX

84 
bl
 
∂©_ªp‹t_ex˚±i⁄


85 
b
 
Synchr⁄ousEx˚±i⁄SPx


86 
check_ve˘‹_size
 
	gSynchr⁄ousEx˚±i⁄SPx


88 .
	gÆign
 7

89 
	gIrqSPx
:

90 
mov
 
x0
, #IRQ_SP_ELX

91 
bl
 
∂©_ªp‹t_ex˚±i⁄


92 
b
 
IrqSPx


93 
check_ve˘‹_size
 
	gIrqSPx


95 .
	gÆign
 7

96 
	gFiqSPx
:

97 
mov
 
x0
, #FIQ_SP_ELX

98 
bl
 
∂©_ªp‹t_ex˚±i⁄


99 
b
 
FiqSPx


100 
check_ve˘‹_size
 
	gFiqSPx


102 .
	gÆign
 7

103 
	gSEº‹SPx
:

104 
mov
 
x0
, #SERROR_SP_ELX

105 
bl
 
∂©_ªp‹t_ex˚±i⁄


106 
b
 
SEº‹SPx


107 
check_ve˘‹_size
 
	gSEº‹SPx


113 .
	gÆign
 7

114 
	gSynchr⁄ousEx˚±i⁄A64
:

115 
mov
 
x0
, #SYNC_EXCEPTION_AARCH64

116 
bl
 
∂©_ªp‹t_ex˚±i⁄


117 
b
 
Synchr⁄ousEx˚±i⁄A64


118 
check_ve˘‹_size
 
	gSynchr⁄ousEx˚±i⁄A64


120 .
	gÆign
 7

121 
	gIrqA64
:

122 
mov
 
x0
, #IRQ_AARCH64

123 
bl
 
∂©_ªp‹t_ex˚±i⁄


124 
b
 
IrqA64


125 
check_ve˘‹_size
 
	gIrqA64


127 .
	gÆign
 7

128 
	gFiqA64
:

129 
mov
 
x0
, #FIQ_AARCH64

130 
bl
 
∂©_ªp‹t_ex˚±i⁄


131 
b
 
FiqA64


132 
check_ve˘‹_size
 
	gFiqA64


134 .
	gÆign
 7

135 
	gSEº‹A64
:

136 
mov
 
x0
, #SERROR_AARCH64

137 
bl
 
∂©_ªp‹t_ex˚±i⁄


138 
b
 
SEº‹A64


139 
check_ve˘‹_size
 
	gSEº‹A64


145 .
	gÆign
 7

146 
	gSynchr⁄ousEx˚±i⁄A32
:

147 
mov
 
x0
, #SYNC_EXCEPTION_AARCH32

148 
bl
 
∂©_ªp‹t_ex˚±i⁄


149 
b
 
Synchr⁄ousEx˚±i⁄A32


150 
check_ve˘‹_size
 
	gSynchr⁄ousEx˚±i⁄A32


152 .
	gÆign
 7

153 
	gIrqA32
:

154 
mov
 
x0
, #IRQ_AARCH32

155 
bl
 
∂©_ªp‹t_ex˚±i⁄


156 
b
 
IrqA32


157 
check_ve˘‹_size
 
	gIrqA32


159 .
	gÆign
 7

160 
	gFiqA32
:

161 
mov
 
x0
, #FIQ_AARCH32

162 
bl
 
∂©_ªp‹t_ex˚±i⁄


163 
b
 
FiqA32


164 
check_ve˘‹_size
 
	gFiqA32


166 .
	gÆign
 7

167 
	gSEº‹A32
:

168 
mov
 
x0
, #SERROR_AARCH32

169 
bl
 
∂©_ªp‹t_ex˚±i⁄


170 
b
 
SEº‹A32


171 
check_ve˘‹_size
 
	gSEº‹A32


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/common/bl_common.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<debug.h
>

36 
	~<io_°‹age.h
>

37 
	~<∂©f‹m.h
>

38 
	~<î∫o.h
>

39 
	~<°dio.h
>

41 
	$∑ge_Æign
(
vÆue
, 
dú
)

43 
∑ge_size
 = 1 << 
FOUR_KB_SHIFT
;

46 i‡(
vÆue
 & (
∑ge_size
 - 1)) {

47 
vÆue
 &~(
∑ge_size
 - 1);

48 i‡(
dú
 =
UP
)

49 
vÆue
 +
∑ge_size
;

52  
vÆue
;

53 
	}
}

55 
ölöe
 
	$is_∑ge_Æig√d
 (
addr
) {

56 c⁄° 
∑ge_size
 = 1 << 
FOUR_KB_SHIFT
;

58  (
addr
 & (
∑ge_size
 - 1)) == 0;

59 
	}
}

61 
	$ch™ge_£curôy_°©e
(
èrgë_£curôy_°©e
)

63 
s¸
 = 
	`ªad_s¸
();

65 i‡(
èrgë_£curôy_°©e
 =
SECURE
)

66 
s¸
 &~
SCR_NS_BIT
;

67 i‡(
èrgë_£curôy_°©e
 =
NON_SECURE
)

68 
s¸
 |
SCR_NS_BIT
;

70 
	`as£π
(0);

72 
	`wrôe_s¸
(
s¸
);

73 
	}
}

80 #¥agm®
wók
 
öô_bl2_mem_œyout


88 
	$öô_bl2_mem_œyout
(
memöfo_t
 *
bl1_mem_œyout
,

89 
memöfo_t
 *
bl2_mem_œyout
,

90 
lﬂd_ty≥
,

91 
bl2_ba£
)

93 
tmp
;

95 i‡(
lﬂd_ty≥
 =
BOT_LOAD
) {

96 
bl2_mem_œyout
->
tŸÆ_ba£
 = 
bl2_ba£
;

97 
tmp
 = 
bl1_mem_œyout
->
‰ì_ba£
 - 
bl2_ba£
;

98 
bl2_mem_œyout
->
tŸÆ_size
 = 
bl1_mem_œyout
->
‰ì_size
 + 
tmp
;

101 
bl2_mem_œyout
->
tŸÆ_ba£
 = 
bl1_mem_œyout
->
‰ì_ba£
;

102 
tmp
 = 
bl1_mem_œyout
->
tŸÆ_ba£
 + bl1_mem_œyout->
tŸÆ_size
;

103 
bl2_mem_œyout
->
tŸÆ_size
 = 
tmp
 - 
bl1_mem_œyout
->
‰ì_ba£
;

106 
bl2_mem_œyout
->
‰ì_ba£
 = 
bl1_mem_œyout
->free_base;

107 
bl2_mem_œyout
->
‰ì_size
 = 
bl1_mem_œyout
->free_size;

108 
bl2_mem_œyout
->
©å
 = 
lﬂd_ty≥
;

110 
	`Êush_dˇche_ønge
((Ë
bl2_mem_œyout
, (
memöfo_t
));

112 
	}
}

114 
	$dump_lﬂd_öfo
(
image_lﬂd_addr
,

115 
image_size
,

116 c⁄° 
memöfo_t
 *
mem_œyout
)

118 #i‡
DEBUG


119 
	`¥ötf
("TryingÅoÜoad imageátáddress 0x%lx, size = 0x%lx\r\n",

120 
image_lﬂd_addr
, 
image_size
);

121 
	`¥ötf
("Current memoryÜayout:\r\n");

122 
	`¥ötf
("ÅŸÆÑegi⁄ = [0x%lx, 0x%lx]\r\n", 
mem_œyout
->
tŸÆ_ba£
,

123 
mem_œyout
->
tŸÆ_ba£
 + mem_œyout->
tŸÆ_size
);

124 
	`¥ötf
(" fªêªgi⁄ = [0x%lx, 0x%lx]\r\n", 
mem_œyout
->
‰ì_ba£
,

125 
mem_œyout
->
‰ì_ba£
 + mem_œyout->
‰ì_size
);

127 
	}
}

130 
	$image_size
(c⁄° *
image_«me
)

132 
uöçå_t
 
dev_h™dÀ
;

133 
uöçå_t
 
image_h™dÀ
;

134 
uöçå_t
 
image_•ec
;

135 
size_t
 
image_size
 = 0;

136 
io_ªsu…
 = 
IO_FAIL
;

138 
	`as£π
(
image_«me
 !
NULL
);

141 
io_ªsu…
 = 
	`∂©_gë_image_sour˚
(
image_«me
, &
dev_h™dÀ
, &
image_•ec
);

142 i‡(
io_ªsu…
 !
IO_SUCCESS
) {

143 
	`WARN
("FailedÅo obtainÑeferenceÅo image '%s' (%i)\n",

144 
image_«me
, 
io_ªsu…
);

149 
io_ªsu…
 = 
	`io_›í
(
dev_h™dÀ
, 
image_•ec
, &
image_h™dÀ
);

150 i‡(
io_ªsu…
 !
IO_SUCCESS
) {

151 
	`WARN
("FailedÅoáccess image '%s' (%i)\n",

152 
image_«me
, 
io_ªsu…
);

157 
io_ªsu…
 = 
	`io_size
(
image_h™dÀ
, &
image_size
);

158 i‡((
io_ªsu…
 !
IO_SUCCESS
Ë|| (
image_size
 == 0)) {

159 
	`WARN
("FailedÅo determineÅhe size ofÅhe image '%s' file (%i)\n",

160 
image_«me
, 
io_ªsu…
);

162 
io_ªsu…
 = 
	`io_˛o£
(
image_h™dÀ
);

168 
io_ªsu…
 = 
	`io_dev_˛o£
(
dev_h™dÀ
);

171  
image_size
;

172 
	}
}

180 
	$lﬂd_image
(
memöfo_t
 *
mem_œyout
,

181 c⁄° *
image_«me
,

182 
lﬂd_ty≥
,

183 
fixed_addr
,

184 
image_öfo_t
 *
image_d©a
,

185 
íåy_poöt_öfo_t
 *
íåy_poöt_öfo
)

187 
uöçå_t
 
dev_h™dÀ
;

188 
uöçå_t
 
image_h™dÀ
;

189 
uöçå_t
 
image_•ec
;

190 
ãmp_image_ba£
 = 0;

191 
image_ba£
 = 0;

192 
off£t
 = 0;

193 
size_t
 
image_size
 = 0;

194 
size_t
 
byãs_ªad
 = 0;

195 
io_ªsu…
 = 
IO_FAIL
;

197 
	`as£π
(
mem_œyout
 !
NULL
);

198 
	`as£π
(
image_«me
 !
NULL
);

199 
	`as£π
(
image_d©a
->
h
.
vîsi⁄
 >
VERSION_1
);

202 
io_ªsu…
 = 
	`∂©_gë_image_sour˚
(
image_«me
, &
dev_h™dÀ
, &
image_•ec
);

203 i‡(
io_ªsu…
 !
IO_SUCCESS
) {

204 
	`WARN
("FailedÅo obtainÑeferenceÅo image '%s' (%i)\n",

205 
image_«me
, 
io_ªsu…
);

206  
io_ªsu…
;

210 
io_ªsu…
 = 
	`io_›í
(
dev_h™dÀ
, 
image_•ec
, &
image_h™dÀ
);

211 i‡(
io_ªsu…
 !
IO_SUCCESS
) {

212 
	`WARN
("FailedÅoáccess image '%s' (%i)\n",

213 
image_«me
, 
io_ªsu…
);

214  
io_ªsu…
;

218 
io_ªsu…
 = 
	`io_size
(
image_h™dÀ
, &
image_size
);

219 i‡((
io_ªsu…
 !
IO_SUCCESS
Ë|| (
image_size
 == 0)) {

220 
	`WARN
("FailedÅo determineÅhe size ofÅhe image '%s' file (%i)\n",

221 
image_«me
, 
io_ªsu…
);

222 
exô
;

226 i‡(
image_size
 > 
mem_œyout
->
‰ì_size
) {

227 
	`WARN
("CannotÜoad '%s' file: NotÉnough space.\n",

228 
image_«me
);

229 
	`dump_lﬂd_öfo
(0, 
image_size
, 
mem_œyout
);

230 
exô
;

233 
lﬂd_ty≥
) {

235 
TOP_LOAD
:

238 
ãmp_image_ba£
 = 
mem_œyout
->
‰ì_ba£
 + mem_œyout->
‰ì_size
;

239 
ãmp_image_ba£
 -
image_size
;

242 
image_ba£
 = 
	`∑ge_Æign
(
ãmp_image_ba£
, 
DOWN
);

243 
	`as£π
(
image_ba£
 <
ãmp_image_ba£
);

245 i‡(
image_ba£
 < 
mem_œyout
->
‰ì_ba£
) {

246 
	`WARN
("CannotÜoad '%s' file: NotÉnough space.\n",

247 
image_«me
);

248 
	`dump_lﬂd_öfo
(
image_ba£
, 
image_size
, 
mem_œyout
);

249 
io_ªsu…
 = -
ENOMEM
;

250 
exô
;

254 
off£t
 = 
ãmp_image_ba£
 - 
image_ba£
;

258 
BOT_LOAD
:

261 
ãmp_image_ba£
 = 
mem_œyout
->
‰ì_ba£
;

262 
image_ba£
 = 
	`∑ge_Æign
(
ãmp_image_ba£
, 
UP
);

263 
	`as£π
(
image_ba£
 >
ãmp_image_ba£
);

266 i‡(
image_ba£
 + 
image_size
 >

267 
mem_œyout
->
‰ì_ba£
 + mem_œyout->
‰ì_size
) {

268 
	`WARN
("CannotÜoad '%s' file: NotÉnough space.\n",

269 
image_«me
);

270 
	`dump_lﬂd_öfo
(
image_ba£
, 
image_size
, 
mem_œyout
);

271 
io_ªsu…
 = -
ENOMEM
;

272 
exô
;

276 
off£t
 = 
image_ba£
 - 
ãmp_image_ba£
;

281 
	`as£π
(0);

326 i‡(
fixed_addr
 != 0) {

328 
image_ba£
 = 
fixed_addr
;

331 i‡((
image_ba£
 < 
mem_œyout
->
‰ì_ba£
) ||

332 (
image_ba£
 + 
image_size
 >

333 
mem_œyout
->
‰ì_ba£
 + mem_œyout->
‰ì_size
)) {

334 
	`WARN
("CannotÜoad '%s' file: NotÉnough space.\n",

335 
image_«me
);

336 
	`dump_lﬂd_öfo
(
image_ba£
, 
image_size
, 
mem_œyout
);

337 
io_ªsu…
 = -
ENOMEM
;

338 
exô
;

342 i‡(!
	`is_∑ge_Æig√d
(
image_ba£
)) {

343 
	`WARN
("CannotÜoad '%s' fileát unalignedáddress 0x%lx\n",

344 
image_«me
, 
fixed_addr
);

345 
io_ªsu…
 = -
ENOMEM
;

346 
exô
;

353 i‡(
lﬂd_ty≥
 =
TOP_LOAD
) {

354 
max_addr
, 
•a˚_u£d
;

365 
max_addr
 = 
mem_œyout
->
tŸÆ_ba£
 + mem_œyout->
tŸÆ_size
;

371 
•a˚_u£d
 = 
max_addr
 - 
fixed_addr
;

376 
off£t
 = 
•a˚_u£d
 - 
image_size
;

388 
off£t
 = 
fixed_addr
 - 
mem_œyout
->
tŸÆ_ba£
;

393 
io_ªsu…
 = 
	`io_ªad
(
image_h™dÀ
, 
image_ba£
, 
image_size
, &
byãs_ªad
);

394 i‡((
io_ªsu…
 !
IO_SUCCESS
Ë|| (
byãs_ªad
 < 
image_size
)) {

395 
	`WARN
("FaûedÅÿlﬂd '%s' fûê(%i)\n", 
image_«me
, 
io_ªsu…
);

396 
exô
;

399 
image_d©a
->
image_ba£
 = image_base;

400 
image_d©a
->
image_size
 = image_size;

402 
íåy_poöt_öfo
->
pc
 = 
image_ba£
;

410 
	`Êush_dˇche_ønge
(
image_ba£
, 
image_size
);

412 
mem_œyout
->
‰ì_size
 -
image_size
 + 
off£t
;

415 i‡(
lﬂd_ty≥
 =
BOT_LOAD
)

416 
mem_œyout
->
‰ì_ba£
 +
off£t
 + 
image_size
;

418 
exô
:

419 
	`io_˛o£
(
image_h™dÀ
);

423 
	`io_dev_˛o£
(
dev_h™dÀ
);

426  
io_ªsu…
;

427 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/common/debug.c

30 
	~<c⁄sﬁe.h
>

31 
	~<debug.h
>

32 
	~<°dio.h
>

34 (*
log_lock_acquúe2
)();

35 (*
log_wrôe2
)();

36 (*
log_lock_ªÀa£2
)();

43 
	$¥öt_°rög_vÆue
(*
s
, *
mem
)

45 
i
, 
ãmp
;

46 
vÆ
;

47 
c
;

49 *
s
) {

50 
i
 = 16;

51 *
s
) {

52 
c
 = *
s
++;

53 
	`c⁄sﬁe_putc
(
c
);

54 if(
log_wrôe2
)

55 
	`log_wrôe2
(
c
);

58 
s
++;

60 
	`c⁄sﬁe_putc
('\t');

61 
	`c⁄sﬁe_putc
(':');

62 
	`c⁄sﬁe_putc
('0');

63 
	`c⁄sﬁe_putc
('x');

65 if(
log_wrôe2
) {

66 
	`log_wrôe2
('\t');

67 
	`log_wrôe2
(':');

68 
	`log_wrôe2
('0');

69 
	`log_wrôe2
('x');

72 
vÆ
 = *
mem
++;

74 
i
--) {

75 
ãmp
 = (
vÆ
 >> (
i
 << 2)) & 0xf;

76 i‡(
ãmp
 < 0xa) {

77 
	`c⁄sﬁe_putc
('0' + 
ãmp
);

78 if(
log_wrôe2
)

79 
	`log_wrôe2
('0' + 
ãmp
);

82 
	`c⁄sﬁe_putc
('A' + (
ãmp
 - 0xa));

83 if(
log_wrôe2
)

84 
	`log_wrôe2
('A' + (
ãmp
 - 0xa));

87 
	`c⁄sﬁe_putc
('\n');

88 if(
log_wrôe2
)

89 
	`log_wrôe2
('\n');

91 
	}
}

97 #i‡
DEBUG


98 
__dód2
 
	$do_∑nic
(c⁄° *
fûe
, 
löe
)

100 
	`¥ötf
("PANIC i¿fûe: %†löe: %d\n", 
fûe
, 
löe
);

103 
	}
}

105 
__dód2
 
	$do_∑nic
()

107 
pc_ªg
;

108 
__asm__
 volatile("mov %0, x30\n"

109 : "Ù" (
pc_ªg
) : );

114 
	`¥ötf
("PANIC i¿PCÜoˇti⁄ 0x%016X\n", 
pc_ªg
 - 0x4);

118 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oem_error.h

38 #i‚de‡
__OEM_ERROR_H__


39 
	#__OEM_ERROR_H__


	)

43 
	#OEM_SVC_E_SUCCESS
 0

	)

44 
	#OEM_SVC_E_NOT_SUPPORTED
 -1

	)

45 
	#OEM_SVC_E_INVALID_PARAMS
 -2

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oem_private.h

38 #i‚de‡
__OEM_PRIVATE_H__


39 
	#__OEM_PRIVATE_H__


	)

41 
	~<¨ch.h
>

42 
	~<bakîy_lock.h
>

48 
uöt64_t
 
€m_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

49 
uöt64_t
 
x1
,

50 
uöt64_t
 
x2
,

51 
uöt64_t
 
x3
,

52 
uöt64_t
 
x4
,

53 *
cookõ
,

54 *
h™dÀ
,

55 
uöt64_t
 
Êags
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oem_svc.h

38 #i‚de‡
__OEM_SVC_H__


39 
	#__OEM_SVC_H__


	)

46 
	#OEM_SMC_CALL_1_AARCH32
 0x83000000

	)

47 
	#OEM_SMC_CALL_1_AARCH64
 0xC3000000

	)

48 
	#OEM_SMC_CALL_2_AARCH32
 0x83000001

	)

49 
	#OEM_SMC_CALL_2_AARCH64
 0xC3000001

	)

50 
	#OEM_SMC_CALL_3_AARCH32
 0x83000002

	)

51 
	#OEM_SMC_CALL_3_AARCH64
 0xC3000002

	)

56 
	#OEM_SVC_NUM_CALLS
 3

	)

62 
	#OEM_SVC_CALL_COUNT
 0x8300ff00

	)

63 
	#OEM_SVC_UID
 0x8300ff01

	)

65 
	#OEM_SVC_VERSION
 0x8300ff03

	)

69 
	#OEM_VERSION_MAJOR
 0x0

	)

70 
	#OEM_VERSION_MINOR
 0x1

	)

75 
	#OEM_FID_MASK
 0xf000u

	)

76 
	#OEM_FID_VALUE
 0u

	)

77 
	#is_€m_fid
(
_fid
) \

78 (((
_fid
Ë& 
OEM_FID_MASK
Ë=
OEM_FID_VALUE
)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oem_svc_common.c

38 
	~<¨ch.h
>

39 
	~<¨ch_hñ≥rs.h
>

40 
	~<as£π.h
>

41 
	~<ru¡ime_svc.h
>

42 
	~<debug.h
>

43 
	~<€m_svc.h
>

44 
	~<€m_îr‹.h
>

45 
	~<∂©f‹m.h
>

46 
	~"€m_¥iv©e.h
"

51 
uöt64_t
 
	$€m_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

52 
uöt64_t
 
x1
,

53 
uöt64_t
 
x2
,

54 
uöt64_t
 
x3
,

55 
uöt64_t
 
x4
,

56 *
cookõ
,

57 *
h™dÀ
,

58 
uöt64_t
 
Êags
)

60 
uöt64_t
 
rc
;

61 
uöt32_t
 
ns
;

64 
ns
 = 
	`is_ˇŒî_n⁄_£cuª
(
Êags
);

66 
smc_fid
) {

67 
OEM_SMC_CALL_1_AARCH32
:

68 
OEM_SMC_CALL_1_AARCH64
:

70 i‡(
ns
)

71 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

72 
rc
 = 
OEM_SVC_E_NOT_SUPPORTED
;

74 
OEM_SMC_CALL_2_AARCH32
:

75 
OEM_SMC_CALL_2_AARCH64
:

76 
rc
 = 
OEM_SVC_E_NOT_SUPPORTED
;

78 
OEM_SMC_CALL_3_AARCH32
:

79 
OEM_SMC_CALL_3_AARCH64
:

80 
rc
 = 
OEM_SVC_E_NOT_SUPPORTED
;

83 
rc
 = 
SMC_UNK
;

84 
	`WARN
("Unim∂emíãd OEM CÆl: 0x%x \n", 
smc_fid
);

87 
	`SMC_RET1
(
h™dÀ
, 
rc
);

88 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oem_svc_setup.c

38 
	~<debug.h
>

39 
	~<ru¡ime_svc.h
>

40 
	~<€m_svc.h
>

41 
	~<°döt.h
>

42 
	~<uuid.h
>

43 
	~"€m_¥iv©e.h
"

46 
DEFINE_SVC_UUID
(
€m_svc_uid
,

52 
öt32_t
 
	$€m_svc_£tup
()

59 
	}
}

65 
uöt64_t
 
	$€m_svc_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

66 
uöt64_t
 
x1
,

67 
uöt64_t
 
x2
,

68 
uöt64_t
 
x3
,

69 
uöt64_t
 
x4
,

70 *
cookõ
,

71 *
h™dÀ
,

72 
uöt64_t
 
Êags
)

77 i‡(
	`is_€m_fid
(
smc_fid
)) {

78  
	`€m_smc_h™dÀr
(
smc_fid
, 
x1
, 
x2
, 
x3
, 
x4
, 
cookõ
,

79 
h™dÀ
, 
Êags
);

82 
smc_fid
) {

83 
OEM_SVC_CALL_COUNT
:

88 
	`SMC_RET1
(
h™dÀ
, 
OEM_SVC_NUM_CALLS
);

90 
OEM_SVC_UID
:

92 
	`SMC_UUID_RET
(
h™dÀ
, 
€m_svc_uid
);

94 
OEM_SVC_VERSION
:

96 
	`SMC_RET2
(
h™dÀ
, 
OEM_VERSION_MAJOR
, 
OEM_VERSION_MINOR
);

99 
	`WARN
("Unim∂emíãd OEM Sîvi˚ CÆl: 0x%x \n", 
smc_fid
);

100 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

102 
	}
}

105 
DECLARE_RT_SVC
(

106 
€m_svc
,

108 
OEN_OEM_START
,

109 
OEN_OEM_END
,

110 
SMC_TYPE_FAST
,

111 
€m_svc_£tup
,

112 
€m_svc_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oems.mk

2 
	gOEMS_DIR
 :
cu°om
/

3 
OEMS_INCLUDES
 :-
Icu°om
/

5 
OEMS_SOURCES
 :
cu°om
/
€m_svc_comm⁄
.
c
 \

6 
cu°om
/
€m_svc_£tup
.
c


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/cci400/cci400.c

31 
	~<cci400.h
>

32 
	~<mmio.h
>

33 
	~"∂©_def.h
"

35 
ölöe
 
	$gë_¶ave_iÁ˚_ba£
(
mpidr
)

37  
CCI400_BASE
 + 
	`SLAVE_IFACE_OFFSET
(
	`CCI400_SL_IFACE_INDEX
(
mpidr
));

38 
	}
}

40 
	$cci_íabÀ_cohîícy
(
mpidr
)

43 
	`mmio_wrôe_32
(
	`gë_¶ave_iÁ˚_ba£
(
mpidr
Ë+ 
SNOOP_CTRL_REG
,

44 
DVM_EN_BIT
 | 
SNOOP_EN_BIT
);

47 
	`mmio_ªad_32
(
CCI400_BASE
 + 
STATUS_REG
Ë& 
CHANGE_PENDING_BIT
)

49 
	}
}

51 
	$cci_dißbÀ_cohîícy
(
mpidr
)

54 
	`mmio_wrôe_32
(
	`gë_¶ave_iÁ˚_ba£
(
mpidr
Ë+ 
SNOOP_CTRL_REG
,

55 ~(
DVM_EN_BIT
 | 
SNOOP_EN_BIT
));

58 
	`mmio_ªad_32
(
CCI400_BASE
 + 
STATUS_REG
Ë& 
CHANGE_PENDING_BIT
)

60 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/gic/aarch64/gic_v3_sysregs.S

31 
	~<asm_ma¸os.S
>

33 .
globl
 
	gªad_icc_§e_ñ1


34 .
globl
 
	gªad_icc_§e_ñ2


35 .
globl
 
	gªad_icc_§e_ñ3


36 .
globl
 
	gwrôe_icc_§e_ñ1


37 .
globl
 
	gwrôe_icc_§e_ñ2


38 .
globl
 
	gwrôe_icc_§e_ñ3


39 .
globl
 
	gwrôe_icc_pmr_ñ1


46 
	#ICC_SRE_EL1
 
S3_0_C12_C12_5


	)

47 
	#ICC_SRE_EL2
 
S3_4_C12_C9_5


	)

48 
	#ICC_SRE_EL3
 
S3_6_C12_C12_5


	)

49 
	#ICC_CTLR_EL1
 
S3_0_C12_C12_4


	)

50 
	#ICC_CTLR_EL3
 
S3_6_C12_C12_4


	)

51 
	#ICC_PMR_EL1
 
S3_0_C4_C6_0


	)

53 
func
 
ªad_icc_§e_ñ1


54 
mrs
 
	gx0
, 
ICC_SRE_EL1


55 
ªt


58 
func
 
ªad_icc_§e_ñ2


59 
mrs
 
	gx0
, 
ICC_SRE_EL2


60 
ªt


63 
func
 
ªad_icc_§e_ñ3


64 
mrs
 
	gx0
, 
ICC_SRE_EL3


65 
ªt


68 
func
 
wrôe_icc_§e_ñ1


69 
m§
 
	gICC_SRE_EL1
, 
x0


70 
ªt


73 
func
 
wrôe_icc_§e_ñ2


74 
m§
 
	gICC_SRE_EL2
, 
x0


75 
ªt


78 
func
 
wrôe_icc_§e_ñ3


79 
m§
 
	gICC_SRE_EL3
, 
x0


80 
ªt


83 
func
 
wrôe_icc_pmr_ñ1


84 
m§
 
	gICC_PMR_EL1
, 
x0


85 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/gic/gic_v2.c

31 
	~<¨ch.h
>

32 
	~<as£π.h
>

33 
	~<gic_v2.h
>

34 
	~<öãºu±_mgmt.h
>

35 
	~<mmio.h
>

41 
	$gicd_ªad_igrou¥
(
ba£
, 
id
)

43 
n
 = 
id
 >> 
IGROUPR_SHIFT
;

44  
	`mmio_ªad_32
(
ba£
 + 
GICD_IGROUPR
 + (
n
 << 2));

45 
	}
}

47 
	$gicd_ªad_i£«bÀr
(
ba£
, 
id
)

49 
n
 = 
id
 >> 
ISENABLER_SHIFT
;

50  
	`mmio_ªad_32
(
ba£
 + 
GICD_ISENABLER
 + (
n
 << 2));

51 
	}
}

53 
	$gicd_ªad_i˚«bÀr
(
ba£
, 
id
)

55 
n
 = 
id
 >> 
ICENABLER_SHIFT
;

56  
	`mmio_ªad_32
(
ba£
 + 
GICD_ICENABLER
 + (
n
 << 2));

57 
	}
}

59 
	$gicd_ªad_i•ídr
(
ba£
, 
id
)

61 
n
 = 
id
 >> 
ISPENDR_SHIFT
;

62  
	`mmio_ªad_32
(
ba£
 + 
GICD_ISPENDR
 + (
n
 << 2));

63 
	}
}

65 
	$gicd_ªad_i˝ídr
(
ba£
, 
id
)

67 
n
 = 
id
 >> 
ICPENDR_SHIFT
;

68  
	`mmio_ªad_32
(
ba£
 + 
GICD_ICPENDR
 + (
n
 << 2));

69 
	}
}

71 
	$gicd_ªad_iß˘ivî
(
ba£
, 
id
)

73 
n
 = 
id
 >> 
ISACTIVER_SHIFT
;

74  
	`mmio_ªad_32
(
ba£
 + 
GICD_ISACTIVER
 + (
n
 << 2));

75 
	}
}

77 
	$gicd_ªad_iˇ˘ivî
(
ba£
, 
id
)

79 
n
 = 
id
 >> 
ICACTIVER_SHIFT
;

80  
	`mmio_ªad_32
(
ba£
 + 
GICD_ICACTIVER
 + (
n
 << 2));

81 
	}
}

83 
	$gicd_ªad_ùri‹ôyr
(
ba£
, 
id
)

85 
n
 = 
id
 >> 
IPRIORITYR_SHIFT
;

86  
	`mmio_ªad_32
(
ba£
 + 
GICD_IPRIORITYR
 + (
n
 << 2));

87 
	}
}

89 
	$gicd_ªad_ô¨gë§
(
ba£
, 
id
)

91 
n
 = 
id
 >> 
ITARGETSR_SHIFT
;

92  
	`mmio_ªad_32
(
ba£
 + 
GICD_ITARGETSR
 + (
n
 << 2));

93 
	}
}

95 
	$gicd_ªad_icfgr
(
ba£
, 
id
)

97 
n
 = 
id
 >> 
ICFGR_SHIFT
;

98  
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
n
 << 2));

99 
	}
}

101 
	$gicd_ªad_˝ídsgú
(
ba£
, 
id
)

103 
n
 = 
id
 >> 
CPENDSGIR_SHIFT
;

104  
	`mmio_ªad_32
(
ba£
 + 
GICD_CPENDSGIR
 + (
n
 << 2));

105 
	}
}

107 
	$gicd_ªad_•ídsgú
(
ba£
, 
id
)

109 
n
 = 
id
 >> 
SPENDSGIR_SHIFT
;

110  
	`mmio_ªad_32
(
ba£
 + 
GICD_SPENDSGIR
 + (
n
 << 2));

111 
	}
}

117 
	$gicd_wrôe_igrou¥
(
ba£
, 
id
, 
vÆ
)

119 
n
 = 
id
 >> 
IGROUPR_SHIFT
;

120 
	`mmio_wrôe_32
(
ba£
 + 
GICD_IGROUPR
 + (
n
 << 2), 
vÆ
);

121 
	}
}

123 
	$gicd_wrôe_i£«bÀr
(
ba£
, 
id
, 
vÆ
)

125 
n
 = 
id
 >> 
ISENABLER_SHIFT
;

126 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ISENABLER
 + (
n
 << 2), 
vÆ
);

127 
	}
}

129 
	$gicd_wrôe_i˚«bÀr
(
ba£
, 
id
, 
vÆ
)

131 
n
 = 
id
 >> 
ICENABLER_SHIFT
;

132 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICENABLER
 + (
n
 << 2), 
vÆ
);

133 
	}
}

135 
	$gicd_wrôe_i•ídr
(
ba£
, 
id
, 
vÆ
)

137 
n
 = 
id
 >> 
ISPENDR_SHIFT
;

138 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ISPENDR
 + (
n
 << 2), 
vÆ
);

139 
	}
}

141 
	$gicd_wrôe_i˝ídr
(
ba£
, 
id
, 
vÆ
)

143 
n
 = 
id
 >> 
ICPENDR_SHIFT
;

144 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICPENDR
 + (
n
 << 2), 
vÆ
);

145 
	}
}

147 
	$gicd_wrôe_iß˘ivî
(
ba£
, 
id
, 
vÆ
)

149 
n
 = 
id
 >> 
ISACTIVER_SHIFT
;

150 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ISACTIVER
 + (
n
 << 2), 
vÆ
);

151 
	}
}

153 
	$gicd_wrôe_iˇ˘ivî
(
ba£
, 
id
, 
vÆ
)

155 
n
 = 
id
 >> 
ICACTIVER_SHIFT
;

156 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICACTIVER
 + (
n
 << 2), 
vÆ
);

157 
	}
}

159 
	$gicd_wrôe_ùri‹ôyr
(
ba£
, 
id
, 
vÆ
)

161 
n
 = 
id
 >> 
IPRIORITYR_SHIFT
;

162 
	`mmio_wrôe_32
(
ba£
 + 
GICD_IPRIORITYR
 + (
n
 << 2), 
vÆ
);

163 
	}
}

165 
	$gicd_wrôe_ô¨gë§
(
ba£
, 
id
, 
vÆ
)

167 
n
 = 
id
 >> 
ITARGETSR_SHIFT
;

168 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ITARGETSR
 + (
n
 << 2), 
vÆ
);

169 
	}
}

171 
	$gicd_wrôe_icfgr
(
ba£
, 
id
, 
vÆ
)

173 
n
 = 
id
 >> 
ICFGR_SHIFT
;

174 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
n
 << 2), 
vÆ
);

175 
	}
}

177 
	$gicd_wrôe_˝ídsgú
(
ba£
, 
id
, 
vÆ
)

179 
n
 = 
id
 >> 
CPENDSGIR_SHIFT
;

180 
	`mmio_wrôe_32
(
ba£
 + 
GICD_CPENDSGIR
 + (
n
 << 2), 
vÆ
);

181 
	}
}

183 
	$gicd_wrôe_•ídsgú
(
ba£
, 
id
, 
vÆ
)

185 
n
 = 
id
 >> 
SPENDSGIR_SHIFT
;

186 
	`mmio_wrôe_32
(
ba£
 + 
GICD_SPENDSGIR
 + (
n
 << 2), 
vÆ
);

187 
	}
}

192 
	$gicd_gë_igrou¥
(
ba£
, 
id
)

194 
bô_num
 = 
id
 & ((1 << 
IGROUPR_SHIFT
) - 1);

195 
ªg_vÆ
 = 
	`gicd_ªad_igrou¥
(
ba£
, 
id
);

197  (
ªg_vÆ
 >> 
bô_num
) & 0x1;

198 
	}
}

200 
	$gicd_£t_igrou¥
(
ba£
, 
id
)

202 
bô_num
 = 
id
 & ((1 << 
IGROUPR_SHIFT
) - 1);

203 
ªg_vÆ
 = 
	`gicd_ªad_igrou¥
(
ba£
, 
id
);

205 
	`gicd_wrôe_igrou¥
(
ba£
, 
id
, 
ªg_vÆ
 | (1 << 
bô_num
));

206 
	}
}

208 
	$gicd_˛r_igrou¥
(
ba£
, 
id
)

210 
bô_num
 = 
id
 & ((1 << 
IGROUPR_SHIFT
) - 1);

211 
ªg_vÆ
 = 
	`gicd_ªad_igrou¥
(
ba£
, 
id
);

213 
	`gicd_wrôe_igrou¥
(
ba£
, 
id
, 
ªg_vÆ
 & ~(1 << 
bô_num
));

214 
	}
}

216 
	$gicd_£t_i£«bÀr
(
ba£
, 
id
)

218 
bô_num
 = 
id
 & ((1 << 
ISENABLER_SHIFT
) - 1);

220 
	`gicd_wrôe_i£«bÀr
(
ba£
, 
id
, (1 << 
bô_num
));

221 
	}
}

223 
	$gicd_£t_i˚«bÀr
(
ba£
, 
id
)

225 
bô_num
 = 
id
 & ((1 << 
ICENABLER_SHIFT
) - 1);

227 
	`gicd_wrôe_i˚«bÀr
(
ba£
, 
id
, (1 << 
bô_num
));

228 
	}
}

230 
	$gicd_£t_i•ídr
(
ba£
, 
id
)

232 
bô_num
 = 
id
 & ((1 << 
ISPENDR_SHIFT
) - 1);

234 
	`gicd_wrôe_i•ídr
(
ba£
, 
id
, (1 << 
bô_num
));

235 
	}
}

237 
	$gicd_£t_i˝ídr
(
ba£
, 
id
)

239 
bô_num
 = 
id
 & ((1 << 
ICPENDR_SHIFT
) - 1);

241 
	`gicd_wrôe_i˝ídr
(
ba£
, 
id
, (1 << 
bô_num
));

242 
	}
}

244 
	$gicd_£t_iß˘ivî
(
ba£
, 
id
)

246 
bô_num
 = 
id
 & ((1 << 
ISACTIVER_SHIFT
) - 1);

248 
	`gicd_wrôe_iß˘ivî
(
ba£
, 
id
, (1 << 
bô_num
));

249 
	}
}

251 
	$gicd_£t_iˇ˘ivî
(
ba£
, 
id
)

253 
bô_num
 = 
id
 & ((1 << 
ICACTIVER_SHIFT
) - 1);

255 
	`gicd_wrôe_iˇ˘ivî
(
ba£
, 
id
, (1 << 
bô_num
));

256 
	}
}

262 
	$gicd_£t_ùri‹ôyr
(
ba£
, 
id
, 
¥i
)

264 
ªg
 = 
ba£
 + 
GICD_IPRIORITYR
 + (
id
 & ~3);

265 
shi·
 = (
id
 & 3) << 3;

266 
ªg_vÆ
 = 
	`mmio_ªad_32
(
ªg
);

275 
	`as£π
(
	`gicd_gë_igrou¥
(
ba£
, 
id
Ë=
GRP1
 ?

276 
¥i
 >
GIC_HIGHEST_NS_PRIORITY
 &&

277 
¥i
 <
GIC_LOWEST_NS_PRIORITY
 :

278 
¥i
 >
GIC_HIGHEST_SEC_PRIORITY
 &&

279 
¥i
 <
GIC_LOWEST_SEC_PRIORITY
);

281 
ªg_vÆ
 &~(
GIC_PRI_MASK
 << 
shi·
);

282 
ªg_vÆ
 |(
¥i
 & 
GIC_PRI_MASK
Ë<< 
shi·
;

283 
	`mmio_wrôe_32
(
ªg
, 
ªg_vÆ
);

284 
	}
}

286 
	$gicd_£t_ô¨gë§
(
ba£
, 
id
, 
iÁ˚
)

288 
byã_off
 = 
id
 & ((1 << 
ITARGETSR_SHIFT
) - 1);

289 
ªg_vÆ
 = 
	`gicd_ªad_ô¨gë§
(
ba£
, 
id
);

291 
	`gicd_wrôe_ô¨gë§
(
ba£
, 
id
, 
ªg_vÆ
 |

292 (1 << 
iÁ˚
Ë<< (
byã_off
 << 3));

293 
	}
}

301 
uöt32_t
 
	$gicv2_öãºu±_ty≥_to_löe
(
uöt32_t
 
˝uif_ba£
, uöt32_à
ty≥
)

303 
uöt32_t
 
gicc_˘Ã
;

306 i‡(
ty≥
 =
INTR_TYPE_NS
)

307  
	`__buûtö_˘z
(
SCR_IRQ_BIT
);

313 
gicc_˘Ã
 = 
	`gicc_ªad_˘Ã
(
˝uif_ba£
);

314 i‡(
gicc_˘Ã
 & 
FIQ_EN
)

315  
	`__buûtö_˘z
(
SCR_FIQ_BIT
);

317  
	`__buûtö_˘z
(
SCR_IRQ_BIT
);

318 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/gic/gic_v3.c

31 
	~<¨ch.h
>

32 
	~<debug.h
>

33 
	~<gic_v3.h
>

35 
uöçå_t
 
	$gicv3_gë_rdi°
(
uöçå_t
 
gi¸_ba£
, 
uöt64_t
 
mpidr
)

37 
uöt32_t
 
˝u_aff
, 
gi¸_aff
;

38 
uöt64_t
 
gi¸_ty≥r
;

39 
uöçå_t
 
addr
;

44 
˝u_aff
 = ((
mpidr
 >> 
MPIDR_AFF0_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
) <<

45 
GICV3_AFF0_SHIFT
;

46 
˝u_aff
 |((
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
) <<

47 
GICV3_AFF1_SHIFT
;

48 
˝u_aff
 |((
mpidr
 >> 
MPIDR_AFF2_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
) <<

49 
GICV3_AFF2_SHIFT
;

50 
˝u_aff
 |((
mpidr
 >> 
MPIDR_AFF3_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
) <<

51 
GICV3_AFF3_SHIFT
;

53 
addr
 = 
gi¸_ba£
;

55 
gi¸_ty≥r
 = 
	`gi¸_ªad_ty≥r
(
addr
);

57 
gi¸_aff
 = (
gi¸_ty≥r
 >> 
GICR_TYPER_AFF_SHIFT
) &

58 
GICR_TYPER_AFF_MASK
;

59 i‡(
˝u_aff
 =
gi¸_aff
) {

66  
addr
;

73 
addr
 +(1 << 
GICR_PCPUBASE_SHIFT
);

75 } !(
gi¸_ty≥r
 & 
GICR_TYPER_LAST
));

78 
	`ERROR
("GICv3 - DidÇŸ föd RDIST f‹ CPU wôh MPIDR 0x%lx\n", 
mpidr
);

79  (
uöçå_t
)
NULL
;

80 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/pl011/pl011.c

31 
	~<as£π.h
>

32 
	~<∂011.h
>

34 
	$∂011_£tbaudøã
(
ba£_addr
, 
baudøã
)

36 
divis‹
;

37 
	`as£π
(
baudøã
);

38 
divis‹
 = (
PL011_CLK_IN_HZ
 * 4Ë/ 
baudøã
;

39 
	`∂011_wrôe_ibrd
(
ba£_addr
, 
divis‹
 >> 6);

40 
	`∂011_wrôe_fbrd
(
ba£_addr
, 
divis‹
 & 0x3F);

41 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/pl011/pl011_console.c

31 
	~<as£π.h
>

32 
	~<c⁄sﬁe.h
>

33 
	~<∂011.h
>

35 
mtk_u¨t_öô
 (
u¨t_p‹t
, 
u¨t˛k
, 
baudøã
);

36 
PutUARTByã
 (c⁄° 
c
);

37 
GëUARTByãs
(*
buf
, 
size
, 
tmo_ms
);

39 
	gu¨t_ba£
;

40 
	gIsOuçutToUARTFœg
=1;

42 
	$£t_u¨t_Êag
()

44 
IsOuçutToUARTFœg
=1;

45 
	}
}

46 
	$˛ór_u¨t_Êag
()

48 
IsOuçutToUARTFœg
=0;

49 
	}
}

52 
	$c⁄sﬁe_öô
(
ba£_addr
)

59 
	`as£π
(
ba£_addr
);

62 
u¨t_ba£
 = 
ba£_addr
;

66 
	#CFG_LOG_BAUDRATE
 921600

	)

68 #i‡
CFG_FPGA_PLATFORM


69 
	#UART_SRC_CLK_FRQ
 (12000000)

	)

71 
	#UART_SRC_CLK_FRQ
 (0Ë

	)

74 #i‡
CFG_FPGA_PLATFORM


76 
	`mtk_u¨t_öô
(
ba£_addr
, 
UART_SRC_CLK_FRQ
, 
CFG_LOG_BAUDRATE
);

79 
	}
}

81 
	#WAIT_UNTIL_UART_FREE
(
ba£
Ë(
	`∂011_ªad_‰
(base)\

82 & 
PL011_UARTFR_TXFF
Ë=1)

	)

83 
	$c⁄sﬁe_putc
(
c
)

86 if(
IsOuçutToUARTFœg
){

87 
	`PutUARTByã
 (
c
);

90 
	`as£π
(
u¨t_ba£
);

92 i‡(
c
 == '\n') {

93 
	`WAIT_UNTIL_UART_FREE
(
u¨t_ba£
);

94 
	`∂011_wrôe_dr
(
u¨t_ba£
, '\r');

97 
	`WAIT_UNTIL_UART_FREE
(
u¨t_ba£
);

98 
	`∂011_wrôe_dr
(
u¨t_ba£
, 
c
);

100  
c
;

101 
	}
}

103 
	$c⁄sﬁe_gëc
()

106 
c
 = 0;

107 if(
IsOuçutToUARTFœg
){

108 
	`GëUARTByãs
(&
c
, 1, 10);

110  
c
;

112 
	`as£π
(
u¨t_ba£
);

114 (
	`∂011_ªad_‰
(
u¨t_ba£
Ë& 
PL011_UARTFR_RXFE
) != 0)

116  
	`∂011_ªad_dr
(
u¨t_ba£
);

118 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/tzc400/tzc400.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<mmio.h
>

34 
	~<°ddef.h
>

35 
	~<tzc400.h
>

37 
uöt32_t
 
	$tzc_ªad_buûd_c⁄fig
(
uöt64_t
 
ba£
)

39  
	`mmio_ªad_32
(
ba£
 + 
BUILD_CONFIG_OFF
);

40 
	}
}

42 
uöt32_t
 
	$tzc_ªad_g©e_kì≥r
(
uöt64_t
 
ba£
)

44  
	`mmio_ªad_32
(
ba£
 + 
GATE_KEEPER_OFF
);

45 
	}
}

47 
	$tzc_wrôe_g©e_kì≥r
(
uöt64_t
 
ba£
, 
uöt32_t
 
vÆ
)

49 
	`mmio_wrôe_32
(
ba£
 + 
GATE_KEEPER_OFF
, 
vÆ
);

50 
	}
}

52 
	$tzc_wrôe_a˘i⁄
(
uöt64_t
 
ba£
, 
tzc_a˘i⁄_t
 
a˘i⁄
)

54 
	`mmio_wrôe_32
(
ba£
 + 
ACTION_OFF
, 
a˘i⁄
);

55 
	}
}

57 
	$tzc_wrôe_ªgi⁄_ba£_low
(
uöt64_t
 
ba£
, 
uöt32_t
 
ªgi⁄
, uöt32_à
vÆ
)

59 
	`mmio_wrôe_32
(
ba£
 + 
REGION_BASE_LOW_OFF
 + 
	`REGION_NUM_OFF
(
ªgi⁄
), 
vÆ
);

60 
	}
}

62 
	$tzc_wrôe_ªgi⁄_ba£_high
(
uöt64_t
 
ba£
, 
uöt32_t
 
ªgi⁄
, uöt32_à
vÆ
)

64 
	`mmio_wrôe_32
(
ba£
 + 
REGION_BASE_HIGH_OFF
 + 
	`REGION_NUM_OFF
(
ªgi⁄
), 
vÆ
);

65 
	}
}

67 
	$tzc_wrôe_ªgi⁄_t›_low
(
uöt64_t
 
ba£
, 
uöt32_t
 
ªgi⁄
, uöt32_à
vÆ
)

69 
	`mmio_wrôe_32
(
ba£
 + 
REGION_TOP_LOW_OFF
 + 
	`REGION_NUM_OFF
(
ªgi⁄
), 
vÆ
);

70 
	}
}

72 
	$tzc_wrôe_ªgi⁄_t›_high
(
uöt64_t
 
ba£
, 
uöt32_t
 
ªgi⁄
, uöt32_à
vÆ
)

74 
	`mmio_wrôe_32
(
ba£
 + 
REGION_TOP_HIGH_OFF
 + 
	`REGION_NUM_OFF
(
ªgi⁄
), 
vÆ
);

75 
	}
}

77 
	$tzc_wrôe_ªgi⁄_©åibuãs
(
uöt64_t
 
ba£
, 
uöt32_t
 
ªgi⁄
, uöt32_à
vÆ
)

79 
	`mmio_wrôe_32
(
ba£
 + 
REGION_ATTRIBUTES_OFF
 + 
	`REGION_NUM_OFF
(
ªgi⁄
), 
vÆ
);

80 
	}
}

82 
	$tzc_wrôe_ªgi⁄_id_ac˚ss
(
uöt64_t
 
ba£
, 
uöt32_t
 
ªgi⁄
, uöt32_à
vÆ
)

84 
	`mmio_wrôe_32
(
ba£
 + 
REGION_ID_ACCESS_OFF
 + 
	`REGION_NUM_OFF
(
ªgi⁄
), 
vÆ
);

85 
	}
}

87 
uöt32_t
 
	$tzc_ªad_comp⁄ít_id
(
uöt64_t
 
ba£
)

89 
uöt32_t
 
id
;

91 
id
 = 
	`mmio_ªad_8
(
ba£
 + 
CID0_OFF
);

92 
id
 |(
	`mmio_ªad_8
(
ba£
 + 
CID1_OFF
) << 8);

93 
id
 |(
	`mmio_ªad_8
(
ba£
 + 
CID2_OFF
) << 16);

94 
id
 |(
	`mmio_ªad_8
(
ba£
 + 
CID3_OFF
) << 24);

96  
id
;

97 
	}
}

99 
uöt32_t
 
	$tzc_gë_g©e_kì≥r
(
uöt64_t
 
ba£
, 
uöt8_t
 
fûãr
)

101 
uöt32_t
 
tmp
;

103 
tmp
 = (
	`tzc_ªad_g©e_kì≥r
(
ba£
Ë>> 
GATE_KEEPER_OS_SHIFT
) &

104 
GATE_KEEPER_OS_MASK
;

106  
tmp
 >> 
fûãr
;

107 
	}
}

110 
	$tzc_£t_g©e_kì≥r
(
uöt64_t
 
ba£
, 
uöt8_t
 
fûãr
, 
uöt32_t
 
vÆ
)

112 
uöt32_t
 
tmp
;

115 
tmp
 = (
	`tzc_ªad_g©e_kì≥r
(
ba£
Ë>> 
GATE_KEEPER_OS_SHIFT
) &

116 
GATE_KEEPER_OS_MASK
;

118 i‡(
vÆ
)

119 
tmp
 |(1 << 
fûãr
);

121 
tmp
 &~(1 << 
fûãr
);

123 
	`tzc_wrôe_g©e_kì≥r
(
ba£
, (
tmp
 & 
GATE_KEEPER_OR_MASK
) <<

124 
GATE_KEEPER_OR_SHIFT
);

127 ((
	`tzc_ªad_g©e_kì≥r
(
ba£
Ë>> 
GATE_KEEPER_OS_SHIFT
) &

128 
GATE_KEEPER_OS_MASK
Ë!
tmp
)

130 
	}
}

133 
	$tzc_öô
(
tzc_ö°™˚_t
 *
c⁄åﬁÀr
)

135 
uöt32_t
 
tzc_id
, 
tzc_buûd
;

137 
	`as£π
(
c⁄åﬁÀr
 !
NULL
);

143 
tzc_id
 = 
	`tzc_ªad_comp⁄ít_id
(
c⁄åﬁÀr
->
ba£
);

144 i‡(
tzc_id
 !
TZC400_COMPONENT_ID
) {

145 
	`ERROR
("TZC : Wr⁄g devi˚ ID (0x%x).\n", 
tzc_id
);

146 
	`∑nic
();

150 
tzc_buûd
 = 
	`tzc_ªad_buûd_c⁄fig
(
c⁄åﬁÀr
->
ba£
);

151 
c⁄åﬁÀr
->
num_fûãrs
 = ((
tzc_buûd
 >> 
BUILD_CONFIG_NF_SHIFT
) &

152 
BUILD_CONFIG_NF_MASK
) + 1;

153 
c⁄åﬁÀr
->
addr_width
 = ((
tzc_buûd
 >> 
BUILD_CONFIG_AW_SHIFT
) &

154 
BUILD_CONFIG_AW_MASK
) + 1;

155 
c⁄åﬁÀr
->
num_ªgi⁄s
 = ((
tzc_buûd
 >> 
BUILD_CONFIG_NR_SHIFT
) &

156 
BUILD_CONFIG_NR_MASK
) + 1;

157 
	}
}

169 
	$tzc_c⁄figuª_ªgi⁄
(c⁄° 
tzc_ö°™˚_t
 *
c⁄åﬁÀr
,

170 
uöt32_t
 
fûãrs
,

171 
uöt8_t
 
ªgi⁄
,

172 
uöt64_t
 
ªgi⁄_ba£
,

173 
uöt64_t
 
ªgi⁄_t›
,

174 
tzc_ªgi⁄_©åibuãs_t
 
£c_©å
,

175 
uöt32_t
 
ns_devi˚_ac˚ss
)

177 
uöt64_t
 
max_addr
;

179 
	`as£π
(
c⁄åﬁÀr
 !
NULL
);

182 
	`as£π
(((
fûãrs
 >> 
c⁄åﬁÀr
->
num_fûãrs
) == 0) &&

183 (
ªgi⁄
 < 
c⁄åﬁÀr
->
num_ªgi⁄s
));

189 
max_addr
 = 
UINT64_MAX
 >> (64 - 
c⁄åﬁÀr
->
addr_width
);

190 i‡((
ªgi⁄_t›
 > 
max_addr
Ë|| (
ªgi⁄_ba£
 >=Ñegion_top))

191 
	`as£π
(0);

194 
	`as£π
(((
ªgi⁄_ba£
 | (
ªgi⁄_t›
 + 1)) & (4096 - 1)) == 0);

196 
	`as£π
(
£c_©å
 <
TZC_REGION_S_RDWR
);

203 
	`tzc_wrôe_ªgi⁄_ba£_low
(
c⁄åﬁÀr
->
ba£
, 
ªgi⁄
, (
uöt32_t
)(
ªgi⁄_ba£
));

204 
	`tzc_wrôe_ªgi⁄_ba£_high
(
c⁄åﬁÀr
->
ba£
, 
ªgi⁄
, (
uöt32_t
)(
ªgi⁄_ba£
 >> 32));

206 
	`tzc_wrôe_ªgi⁄_t›_low
(
c⁄åﬁÀr
->
ba£
, 
ªgi⁄
, (
uöt32_t
)(
ªgi⁄_t›
));

207 
	`tzc_wrôe_ªgi⁄_t›_high
(
c⁄åﬁÀr
->
ba£
, 
ªgi⁄
, (
uöt32_t
)(
ªgi⁄_t›
 >> 32));

210 
	`tzc_wrôe_ªgi⁄_©åibuãs
(
c⁄åﬁÀr
->
ba£
, 
ªgi⁄
,

211 (
£c_©å
 << 
REGION_ATTRIBUTES_SEC_SHIFT
Ë| 
fûãrs
);

217 
	`tzc_wrôe_ªgi⁄_id_ac˚ss
(
c⁄åﬁÀr
->
ba£
, 
ªgi⁄
, 
ns_devi˚_ac˚ss
);

218 
	}
}

221 
	$tzc_£t_a˘i⁄
(c⁄° 
tzc_ö°™˚_t
 *
c⁄åﬁÀr
, 
tzc_a˘i⁄_t
 
a˘i⁄
)

223 
	`as£π
(
c⁄åﬁÀr
 !
NULL
);

230 
	`tzc_wrôe_a˘i⁄
(
c⁄åﬁÀr
->
ba£
, 
a˘i⁄
);

231 
	}
}

234 
	$tzc_íabÀ_fûãrs
(c⁄° 
tzc_ö°™˚_t
 *
c⁄åﬁÀr
)

236 
uöt32_t
 
°©e
;

237 
uöt32_t
 
fûãr
;

239 
	`as£π
(
c⁄åﬁÀr
 !
NULL
);

241 
fûãr
 = 0; fûã∏< 
c⁄åﬁÀr
->
num_fûãrs
; filter++) {

242 
°©e
 = 
	`tzc_gë_g©e_kì≥r
(
c⁄åﬁÀr
->
ba£
, 
fûãr
);

243 i‡(
°©e
) {

244 
	`ERROR
("TZC : Filter %d GatekeeperálreadyÉnabled.\n",

245 
fûãr
);

246 
	`∑nic
();

248 
	`tzc_£t_g©e_kì≥r
(
c⁄åﬁÀr
->
ba£
, 
fûãr
, 1);

250 
	}
}

253 
	$tzc_dißbÀ_fûãrs
(c⁄° 
tzc_ö°™˚_t
 *
c⁄åﬁÀr
)

255 
uöt32_t
 
fûãr
;

257 
	`as£π
(
c⁄åﬁÀr
 !
NULL
);

263 
fûãr
 = 0; fûã∏< 
c⁄åﬁÀr
->
num_fûãrs
; filter++)

264 
	`tzc_£t_g©e_kì≥r
(
c⁄åﬁÀr
->
ba£
, 
fûãr
, 0);

265 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/io/io_fip.c

31 
	~<as£π.h
>

32 
	~<bl_comm⁄.h
>

33 
	~<debug.h
>

34 
	~<î∫o.h
>

35 
	~<fúmw¨e_image_∑ckage.h
>

36 
	~<io_drivî.h
>

37 
	~<io_fù.h
>

38 
	~<io_°‹age.h
>

39 
	~<∂©f‹m.h
>

40 
	~<∂©f‹m_def.h
>

41 
	~<°döt.h
>

42 
	~<°rög.h
>

43 
	~<uuid.h
>

46 
	#PRINT_UUID2
(
x
) \

48 
x
.
time_low
, x.
time_mid
, x.
time_hi_™d_vîsi⁄
, \

49 
x
.
˛ock_£q_hi_™d_ª£rved
, x.
˛ock_£q_low
, \

50 
x
.
node
[0], x.node[1], x.node[2], x.node[3], \

51 
x
.
node
[4], x.node[5]

	)

54 c⁄° *
	m«me
;

55 c⁄° 
uuid_t
 
	muuid
;

56 } 
	t∂©_fù_«me_uuid_t
;

63 
	mfûe_pos
;

64 
fù_toc_íåy_t
 
	míåy
;

65 } 
	tfûe_°©e_t
;

67 c⁄° 
∂©_fù_«me_uuid_t
 
	g«me_uuid
[] = {

68 {
BL2_IMAGE_NAME
, 
UUID_TRUSTED_BOOT_FIRMWARE_BL2
},

69 {
BL31_IMAGE_NAME
, 
UUID_EL3_RUNTIME_FIRMWARE_BL31
},

70 #ifde‡
BL32_IMAGE_NAME


72 {
BL32_IMAGE_NAME
, 
UUID_SECURE_PAYLOAD_BL32
},

74 {
BL33_IMAGE_NAME
, 
UUID_NON_TRUSTED_FIRMWARE_BL33
},

77 c⁄° 
uuid_t
 
	guuid_nuŒ
 = {0};

78 
fûe_°©e_t
 
	gcuºít_fûe
 = {0};

79 
uöçå_t
 
	gbackíd_dev_h™dÀ
;

80 
uöçå_t
 
	gbackíd_image_•ec
;

84 
fù_dev_›í
(c⁄° 
uöçå_t
 
dev_•ec
, 
io_dev_öfo_t
 **
dev_öfo
);

85 
fù_fûe_›í
(
io_dev_öfo_t
 *
dev_öfo
, c⁄° 
uöçå_t
 
•ec
,

86 
io_ítôy_t
 *
ítôy
);

87 
fù_fûe_Àn
(
io_ítôy_t
 *
ítôy
, 
size_t
 *
Àngth
);

88 
fù_fûe_ªad
(
io_ítôy_t
 *
ítôy
, 
uöçå_t
 
buf„r
, 
size_t
 
Àngth
,

89 
size_t
 *
Àngth_ªad
);

90 
fù_fûe_˛o£
(
io_ítôy_t
 *
ítôy
);

91 
fù_dev_öô
(
io_dev_öfo_t
 *
dev_öfo
, c⁄° 
uöçå_t
 
öô_∑øms
);

92 
fù_dev_˛o£
(
io_dev_öfo_t
 *
dev_öfo
);

95 
ölöe
 
	$c›y_uuid
(
uuid_t
 *
d°
, c⁄° uuid_à*
§c
)

97 
	`mem˝y
(
d°
, 
§c
, (
uuid_t
));

99 
	}
}

103 
ölöe
 
	$com∑ª_uuids
(c⁄° 
uuid_t
 *
uuid1
, c⁄° uuid_à*
uuid2
)

105  
	`memcmp
(
uuid1
, 
uuid2
, (
uuid_t
));

106 
	}
}

110 
ölöe
 
	$is_vÆid_hódî
(
fù_toc_hódî_t
 *
hódî
)

112 i‡((
hódî
->
«me
 =
TOC_HEADER_NAME
Ë&& (hódî->
£rül_numbî
 != 0)) {

117 
	}
}

120 
	$fûe_to_uuid
(c⁄° *
fûíame
, 
uuid_t
 *
uuid
)

122 
i
;

123 
°©us
 = -
EINVAL
;

125 
i
 = 0; i < ((
«me_uuid
) / (name_uuid[0])); i++) {

126 i‡(
	`°rcmp
(
fûíame
, 
«me_uuid
[
i
].
«me
) == 0) {

127 
	`c›y_uuid
(
uuid
, &
«me_uuid
[
i
].uuid);

128 
°©us
 = 0;

132  
°©us
;

133 
	}
}

137 
io_ty≥_t
 
	$devi˚_ty≥_fù
()

139  
IO_TYPE_FIRMWARE_IMAGE_PACKAGE
;

140 
	}
}

143 c⁄° 
io_dev_c⁄√˘‹_t
 
	gfù_dev_c⁄√˘‹
 = {

144 .
dev_›í
 = 
fù_dev_›í


148 c⁄° 
io_dev_funcs_t
 
	gfù_dev_funcs
 = {

149 .
ty≥
 = 
devi˚_ty≥_fù
,

150 .
	g›í
 = 
fù_fûe_›í
,

151 .
	g£ek
 = 
NULL
,

152 .
	gsize
 = 
fù_fûe_Àn
,

153 .
	gªad
 = 
fù_fûe_ªad
,

154 .
	gwrôe
 = 
NULL
,

155 .
	g˛o£
 = 
fù_fûe_˛o£
,

156 .
	gdev_öô
 = 
fù_dev_öô
,

157 .
	gdev_˛o£
 = 
fù_dev_˛o£
,

162 c⁄° 
io_dev_öfo_t
 
	gfù_dev_öfo
 = {

163 .
funcs
 = &
fù_dev_funcs
,

164 .
	göfo
 = (
uöçå_t
)
NULL


169 
fù_dev_›í
(c⁄° 
uöçå_t
 
dev_•ec
 
__©åibuã__
((
unu£d
)),

170 
io_dev_öfo_t
 **
dev_öfo
)

172 
as£π
(
dev_öfo
 !
NULL
);

173 *
	gdev_öfo
 = (
io_dev_öfo_t
 *)&
fù_dev_öfo
;

175  
	gIO_SUCCESS
;

180 
	$fù_dev_öô
(
io_dev_öfo_t
 *
dev_öfo
, c⁄° 
uöçå_t
 
öô_∑øms
)

182 
ªsu…
 = 
IO_FAIL
;

183 *
image_«me
 = (*)
öô_∑øms
;

184 
uöçå_t
 
backíd_h™dÀ
;

185 
fù_toc_hódî_t
 
hódî
;

186 
size_t
 
byãs_ªad
;

189 
ªsu…
 = 
	`∂©_gë_image_sour˚
(
image_«me
, &
backíd_dev_h™dÀ
,

190 &
backíd_image_•ec
);

191 i‡(
ªsu…
 !
IO_SUCCESS
) {

192 
	`WARN
("FailedÅo obtainÑeferenceÅo image '%s' (%i)\n",

193 
image_«me
, 
ªsu…
);

194 
ªsu…
 = 
IO_FAIL
;

195 
fù_dev_öô_exô
;

199 
ªsu…
 = 
	`io_›í
(
backíd_dev_h™dÀ
, 
backíd_image_•ec
,

200 &
backíd_h™dÀ
);

201 i‡(
ªsu…
 !
IO_SUCCESS
) {

202 
	`WARN
("FaûedÅÿac˚s†imagê'%s' (%i)\n", 
image_«me
, 
ªsu…
);

203 
ªsu…
 = 
IO_FAIL
;

204 
fù_dev_öô_exô
;

207 
ªsu…
 = 
	`io_ªad
(
backíd_h™dÀ
, (
uöçå_t
)&
hódî
, (header),

208 &
byãs_ªad
);

209 i‡(
ªsu…
 =
IO_SUCCESS
) {

210 i‡(!
	`is_vÆid_hódî
(&
hódî
)) {

211 
	`WARN
("Firmware Image Package header check failed.\n");

212 
ªsu…
 = 
IO_FAIL
;

214 
	`INFO
("FIP headerÜooks OK.\n");

218 
	`io_˛o£
(
backíd_h™dÀ
);

220 
fù_dev_öô_exô
:

221  
ªsu…
;

222 
	}
}

225 
	$fù_dev_˛o£
(
io_dev_öfo_t
 *
dev_öfo
)

230 
backíd_dev_h™dÀ
 = (
uöçå_t
)
NULL
;

231 
backíd_image_•ec
 = (
uöçå_t
)
NULL
;

233  
IO_SUCCESS
;

234 
	}
}

238 
	$fù_fûe_›í
(
io_dev_öfo_t
 *
dev_öfo
, c⁄° 
uöçå_t
 
•ec
,

239 
io_ítôy_t
 *
ítôy
)

241 
ªsu…
 = 
IO_FAIL
;

242 
uöçå_t
 
backíd_h™dÀ
;

243 
uuid_t
 
fûe_uuid
;

244 c⁄° 
io_fûe_•ec_t
 *
fûe_•ec
 = (io_fûe_•ec_à*)
•ec
;

245 
size_t
 
byãs_ªad
;

246 
found_fûe
 = 0;

248 
	`as£π
(
fûe_•ec
 !
NULL
);

249 
	`as£π
(
ítôy
 !
NULL
);

257 i‡(
cuºít_fûe
.
íåy
.
off£t_addªss
 != 0) {

258 
	`WARN
("fip_file_open : Only one open fileátáÅime.\n");

259  
IO_RESOURCES_EXHAUSTED
;

263 
ªsu…
 = 
	`io_›í
(
backíd_dev_h™dÀ
, 
backíd_image_•ec
,

264 &
backíd_h™dÀ
);

265 i‡(
ªsu…
 !
IO_SUCCESS
) {

266 
	`WARN
("FaûedÅÿ›í Fúmw¨êImagêPackagê(%i)\n", 
ªsu…
);

267 
ªsu…
 = 
IO_FAIL
;

268 
fù_fûe_›í_exô
;

272 
ªsu…
 = 
	`io_£ek
(
backíd_h™dÀ
, 
IO_SEEK_SET
, (
fù_toc_hódî_t
));

273 i‡(
ªsu…
 !
IO_SUCCESS
) {

274 
	`WARN
("fip_file_open: failedÅo seek\n");

275 
ªsu…
 = 
IO_FAIL
;

276 
fù_fûe_›í_˛o£
;

279 
	`fûe_to_uuid
(
fûe_•ec
->
∑th
, &
fûe_uuid
);

281 
found_fûe
 = 0;

283 
ªsu…
 = 
	`io_ªad
(
backíd_h™dÀ
,

284 (
uöçå_t
)&
cuºít_fûe
.
íåy
,

285 (
cuºít_fûe
.
íåy
),

286 &
byãs_ªad
);

287 i‡(
ªsu…
 =
IO_SUCCESS
) {

288 i‡(
	`com∑ª_uuids
(&
cuºít_fûe
.
íåy
.
uuid
,

289 &
fûe_uuid
) == 0) {

290 
found_fûe
 = 1;

294 
	`WARN
("FaûedÅÿªad FIP (%i)\n", 
ªsu…
);

295 
fù_fûe_›í_˛o£
;

297 } 
	`com∑ª_uuids
(&
cuºít_fûe
.
íåy
.
uuid
, &
uuid_nuŒ
) != 0);

299 i‡(
found_fûe
 == 1) {

304 
cuºít_fûe
.
fûe_pos
 = 0;

305 
ítôy
->
öfo
 = (
uöçå_t
)&
cuºít_fûe
;

308 
cuºít_fûe
.
íåy
.
off£t_addªss
 = 0;

309 
ªsu…
 = 
IO_FAIL
;

312 
fù_fûe_›í_˛o£
:

313 
	`io_˛o£
(
backíd_h™dÀ
);

315 
fù_fûe_›í_exô
:

316  
ªsu…
;

317 
	}
}

321 
	$fù_fûe_Àn
(
io_ítôy_t
 *
ítôy
, 
size_t
 *
Àngth
)

323 
	`as£π
(
ítôy
 !
NULL
);

324 
	`as£π
(
Àngth
 !
NULL
);

326 *
Àngth
 = ((
fûe_°©e_t
 *)
ítôy
->
öfo
)->
íåy
.
size
;

328  
IO_SUCCESS
;

329 
	}
}

333 
	$fù_fûe_ªad
(
io_ítôy_t
 *
ítôy
, 
uöçå_t
 
buf„r
, 
size_t
 
Àngth
,

334 
size_t
 *
Àngth_ªad
)

336 
ªsu…
 = 
IO_FAIL
;

337 
fûe_°©e_t
 *
Â
;

338 
size_t
 
fûe_off£t
;

339 
size_t
 
byãs_ªad
;

340 
uöçå_t
 
backíd_h™dÀ
;

342 
	`as£π
(
ítôy
 !
NULL
);

343 
	`as£π
(
buf„r
 !(
uöçå_t
)
NULL
);

344 
	`as£π
(
Àngth_ªad
 !
NULL
);

345 
	`as£π
(
ítôy
->
öfo
 !(
uöçå_t
)
NULL
);

348 
ªsu…
 = 
	`io_›í
(
backíd_dev_h™dÀ
, 
backíd_image_•ec
,

349 &
backíd_h™dÀ
);

350 i‡(
ªsu…
 !
IO_SUCCESS
) {

351 
	`WARN
("FaûedÅÿ›í FIP (%i)\n", 
ªsu…
);

352 
ªsu…
 = 
IO_FAIL
;

353 
fù_fûe_ªad_exô
;

356 
Â
 = (
fûe_°©e_t
 *)
ítôy
->
öfo
;

359 
fûe_off£t
 = 
Â
->
íåy
.
off£t_addªss
 + fp->
fûe_pos
;

360 
ªsu…
 = 
	`io_£ek
(
backíd_h™dÀ
, 
IO_SEEK_SET
, 
fûe_off£t
);

361 i‡(
ªsu…
 !
IO_SUCCESS
) {

362 
	`WARN
("fip_file_read: failedÅo seek\n");

363 
ªsu…
 = 
IO_FAIL
;

364 
fù_fûe_ªad_˛o£
;

367 
ªsu…
 = 
	`io_ªad
(
backíd_h™dÀ
, 
buf„r
, 
Àngth
, &
byãs_ªad
);

368 i‡(
ªsu…
 !
IO_SUCCESS
) {

370 
	`WARN
("FaûedÅÿªadÖaylﬂd (%i)\n", 
ªsu…
);

371 
ªsu…
 = 
IO_FAIL
;

372 
fù_fûe_ªad_˛o£
;

375 *
Àngth_ªad
 = 
byãs_ªad
;

376 
Â
->
fûe_pos
 +
byãs_ªad
;

380 
fù_fûe_ªad_˛o£
:

381 
	`io_˛o£
(
backíd_h™dÀ
);

383 
fù_fûe_ªad_exô
:

384  
ªsu…
;

385 
	}
}

389 
	$fù_fûe_˛o£
(
io_ítôy_t
 *
ítôy
)

394 i‡(
cuºít_fûe
.
íåy
.
off£t_addªss
 != 0) {

395 
	`mem£t
(&
cuºít_fûe
, 0, (current_file));

399 
ítôy
->
öfo
 = 0;

401  
IO_SUCCESS
;

402 
	}
}

407 
	$ªgi°î_io_dev_fù
(c⁄° 
io_dev_c⁄√˘‹_t
 **
dev_c⁄
)

409 
ªsu…
 = 
IO_FAIL
;

410 
	`as£π
(
dev_c⁄
 !
NULL
);

412 
ªsu…
 = 
	`io_ªgi°î_devi˚
(&
fù_dev_öfo
);

413 i‡(
ªsu…
 =
IO_SUCCESS
)

414 *
dev_c⁄
 = &
fù_dev_c⁄√˘‹
;

416  
ªsu…
;

417 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/io/io_memmap.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<io_drivî.h
>

34 
	~<io_°‹age.h
>

35 
	~<°rög.h
>

45 
	mö_u£
;

46 
uöçå_t
 
	mba£
;

47 
size_t
 
	mfûe_pos
;

48 } 
	tfûe_°©e_t
;

50 
fûe_°©e_t
 
	gcuºít_fûe
 = {0};

53 
io_ty≥_t
 
	$devi˚_ty≥_memm≠
()

55  
IO_TYPE_MEMMAP
;

56 
	}
}

59 
memm≠_dev_›í
(c⁄° 
uöçå_t
 
dev_•ec
, 
io_dev_öfo_t
 **
dev_öfo
);

60 
memm≠_block_›í
(
io_dev_öfo_t
 *
dev_öfo
, c⁄° 
uöçå_t
 
•ec
,

61 
io_ítôy_t
 *
ítôy
);

62 
memm≠_block_£ek
(
io_ítôy_t
 *
ítôy
, 
mode
,

63 
ssize_t
 
off£t
);

64 
memm≠_block_ªad
(
io_ítôy_t
 *
ítôy
, 
uöçå_t
 
buf„r
,

65 
size_t
 
Àngth
, size_à*
Àngth_ªad
);

66 
memm≠_block_wrôe
(
io_ítôy_t
 *
ítôy
, c⁄° 
uöçå_t
 
buf„r
,

67 
size_t
 
Àngth
, size_à*
Àngth_wrôãn
);

68 
memm≠_block_˛o£
(
io_ítôy_t
 *
ítôy
);

69 
memm≠_dev_˛o£
(
io_dev_öfo_t
 *
dev_öfo
);

72 c⁄° 
io_dev_c⁄√˘‹_t
 
	gmemm≠_dev_c⁄√˘‹
 = {

73 .
dev_›í
 = 
memm≠_dev_›í


77 c⁄° 
io_dev_funcs_t
 
	gmemm≠_dev_funcs
 = {

78 .
ty≥
 = 
devi˚_ty≥_memm≠
,

79 .
	g›í
 = 
memm≠_block_›í
,

80 .
	g£ek
 = 
memm≠_block_£ek
,

81 .
	gsize
 = 
NULL
,

82 .
	gªad
 = 
memm≠_block_ªad
,

83 .
	gwrôe
 = 
memm≠_block_wrôe
,

84 .
	g˛o£
 = 
memm≠_block_˛o£
,

85 .
	gdev_öô
 = 
NULL
,

86 .
	gdev_˛o£
 = 
memm≠_dev_˛o£
,

91 c⁄° 
io_dev_öfo_t
 
	gmemm≠_dev_öfo
 = {

92 .
funcs
 = &
memm≠_dev_funcs
,

93 .
	göfo
 = (
uöçå_t
)
NULL


98 
memm≠_dev_›í
(c⁄° 
uöçå_t
 
dev_•ec
 
__©åibuã__
((
unu£d
)),

99 
io_dev_öfo_t
 **
dev_öfo
)

101 
as£π
(
dev_öfo
 !
NULL
);

102 *
	gdev_öfo
 = (
io_dev_öfo_t
 *)&
memm≠_dev_öfo
;

104  
	gIO_SUCCESS
;

110 
	$memm≠_dev_˛o£
(
io_dev_öfo_t
 *
dev_öfo
)

114  
IO_SUCCESS
;

115 
	}
}

120 
	$memm≠_block_›í
(
io_dev_öfo_t
 *
dev_öfo
, c⁄° 
uöçå_t
 
•ec
,

121 
io_ítôy_t
 *
ítôy
)

123 
ªsu…
 = 
IO_FAIL
;

124 c⁄° 
io_block_•ec_t
 *
block_•ec
 = (io_block_•ec_à*)
•ec
;

130 i‡(
cuºít_fûe
.
ö_u£
 == 0) {

131 
	`as£π
(
block_•ec
 !
NULL
);

132 
	`as£π
(
ítôy
 !
NULL
);

134 
cuºít_fûe
.
ö_u£
 = 1;

135 
cuºít_fûe
.
ba£
 = 
block_•ec
->
off£t
;

137 
cuºít_fûe
.
fûe_pos
 = 0;

138 
ítôy
->
öfo
 = (
uöçå_t
)&
cuºít_fûe
;

139 
ªsu…
 = 
IO_SUCCESS
;

141 
	`WARN
("A Memmap device isálreadyáctive. Close first.\n");

142 
ªsu…
 = 
IO_RESOURCES_EXHAUSTED
;

145  
ªsu…
;

146 
	}
}

150 
	$memm≠_block_£ek
(
io_ítôy_t
 *
ítôy
, 
mode
, 
ssize_t
 
off£t
)

152 
ªsu…
 = 
IO_FAIL
;

155 i‡(
mode
 =
IO_SEEK_SET
) {

156 
	`as£π
(
ítôy
 !
NULL
);

159 ((
fûe_°©e_t
 *)
ítôy
->
öfo
)->
fûe_pos
 = 
off£t
;

160 
ªsu…
 = 
IO_SUCCESS
;

162 
ªsu…
 = 
IO_FAIL
;

165  
ªsu…
;

166 
	}
}

170 
	$memm≠_block_ªad
(
io_ítôy_t
 *
ítôy
, 
uöçå_t
 
buf„r
,

171 
size_t
 
Àngth
, size_à*
Àngth_ªad
)

173 
fûe_°©e_t
 *
Â
;

175 
	`as£π
(
ítôy
 !
NULL
);

176 
	`as£π
(
buf„r
 !(
uöçå_t
)
NULL
);

177 
	`as£π
(
Àngth_ªad
 !
NULL
);

179 
Â
 = (
fûe_°©e_t
 *)
ítôy
->
öfo
;

181 
	`mem˝y
((*)
buf„r
, (*)(
Â
->
ba£
 + fp->
fûe_pos
), 
Àngth
);

183 *
Àngth_ªad
 = 
Àngth
;

185 
Â
->
fûe_pos
 +
Àngth
;

187  
IO_SUCCESS
;

188 
	}
}

192 
	$memm≠_block_wrôe
(
io_ítôy_t
 *
ítôy
, c⁄° 
uöçå_t
 
buf„r
,

193 
size_t
 
Àngth
, size_à*
Àngth_wrôãn
)

195 
fûe_°©e_t
 *
Â
;

197 
	`as£π
(
ítôy
 !
NULL
);

198 
	`as£π
(
buf„r
 !(
uöçå_t
)
NULL
);

199 
	`as£π
(
Àngth_wrôãn
 !
NULL
);

201 
Â
 = (
fûe_°©e_t
 *)
ítôy
->
öfo
;

203 
	`mem˝y
((*)(
Â
->
ba£
 + fp->
fûe_pos
), (*)
buf„r
, 
Àngth
);

205 *
Àngth_wrôãn
 = 
Àngth
;

208 
Â
->
fûe_pos
 +
Àngth
;

210  
IO_SUCCESS
;

211 
	}
}

215 
	$memm≠_block_˛o£
(
io_ítôy_t
 *
ítôy
)

217 
	`as£π
(
ítôy
 !
NULL
);

219 
ítôy
->
öfo
 = 0;

222 
	`mem£t
((*)&
cuºít_fûe
, 0, (current_file));

224  
IO_SUCCESS
;

225 
	}
}

231 
	$ªgi°î_io_dev_memm≠
(c⁄° 
io_dev_c⁄√˘‹_t
 **
dev_c⁄
)

233 
ªsu…
 = 
IO_FAIL
;

234 
	`as£π
(
dev_c⁄
 !
NULL
);

236 
ªsu…
 = 
	`io_ªgi°î_devi˚
(&
memm≠_dev_öfo
);

237 i‡(
ªsu…
 =
IO_SUCCESS
)

238 *
dev_c⁄
 = &
memm≠_dev_c⁄√˘‹
;

240  
ªsu…
;

241 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/io/io_semihosting.c

31 
	~<as£π.h
>

32 
	~<io_drivî.h
>

33 
	~<io_°‹age.h
>

34 
	~<£miho°ög.h
>

39 
io_ty≥_t
 
	$devi˚_ty≥_sh
()

41  
IO_TYPE_SEMIHOSTING
;

42 
	}
}

47 
sh_dev_›í
(c⁄° 
uöçå_t
 
dev_•ec
, 
io_dev_öfo_t
 **
dev_öfo
);

48 
sh_fûe_›í
(
io_dev_öfo_t
 *
dev_öfo
, c⁄° 
uöçå_t
 
•ec
,

49 
io_ítôy_t
 *
ítôy
);

50 
sh_fûe_£ek
(
io_ítôy_t
 *
ítôy
, 
mode
, 
ssize_t
 
off£t
);

51 
sh_fûe_Àn
(
io_ítôy_t
 *
ítôy
, 
size_t
 *
Àngth
);

52 
sh_fûe_ªad
(
io_ítôy_t
 *
ítôy
, 
uöçå_t
 
buf„r
, 
size_t
 
Àngth
,

53 
size_t
 *
Àngth_ªad
);

54 
sh_fûe_wrôe
(
io_ítôy_t
 *
ítôy
, c⁄° 
uöçå_t
 
buf„r
,

55 
size_t
 
Àngth
, size_à*
Àngth_wrôãn
);

56 
sh_fûe_˛o£
(
io_ítôy_t
 *
ítôy
);

58 c⁄° 
io_dev_c⁄√˘‹_t
 
	gsh_dev_c⁄√˘‹
 = {

59 .
dev_›í
 = 
sh_dev_›í


63 c⁄° 
io_dev_funcs_t
 
	gsh_dev_funcs
 = {

64 .
ty≥
 = 
devi˚_ty≥_sh
,

65 .
	g›í
 = 
sh_fûe_›í
,

66 .
	g£ek
 = 
sh_fûe_£ek
,

67 .
	gsize
 = 
sh_fûe_Àn
,

68 .
	gªad
 = 
sh_fûe_ªad
,

69 .
	gwrôe
 = 
sh_fûe_wrôe
,

70 .
	g˛o£
 = 
sh_fûe_˛o£
,

71 .
	gdev_öô
 = 
NULL
,

72 .
	gdev_˛o£
 = 
NULL
,

77 c⁄° 
io_dev_öfo_t
 
	gsh_dev_öfo
 = {

78 .
funcs
 = &
sh_dev_funcs
,

79 .
	göfo
 = (
uöçå_t
)
NULL


84 
	$sh_dev_›í
(c⁄° 
uöçå_t
 
dev_•ec
 
__unu£d
,

85 
io_dev_öfo_t
 **
dev_öfo
)

87 
ªsu…
 = 
IO_SUCCESS
;

88 
	`as£π
(
dev_öfo
 !
NULL
);

89 *
dev_öfo
 = (
io_dev_öfo_t
 *)&
sh_dev_öfo
;

90  
ªsu…
;

91 
	}
}

95 
sh_fûe_›í
(
io_dev_öfo_t
 *
dev_öfo
 
__©åibuã__
((
unu£d
)),

96 c⁄° 
uöçå_t
 
•ec
, 
io_ítôy_t
 *
ítôy
)

98 
	gªsu…
 = 
IO_FAIL
;

99 
	gsh_ªsu…
 = -1;

100 c⁄° 
io_fûe_•ec_t
 *
	gfûe_•ec
 = (c⁄° io_fûe_•ec_à*)
•ec
;

102 
as£π
(
fûe_•ec
 !
NULL
);

103 
as£π
(
ítôy
 !
NULL
);

105 
	gsh_ªsu…
 = 
£miho°ög_fûe_›í
(
fûe_•ec
->
∑th
, fûe_•ec->
mode
);

107 i‡(
	gsh_ªsu…
 > 0) {

108 
	gítôy
->
	göfo
 = (
uöçå_t
)
sh_ªsu…
;

109 
	gªsu…
 = 
IO_SUCCESS
;

111 
	gªsu…
 = 
IO_FAIL
;

113  
	gªsu…
;

118 
	$sh_fûe_£ek
(
io_ítôy_t
 *
ítôy
, 
mode
, 
ssize_t
 
off£t
)

120 
ªsu…
 = 
IO_FAIL
;

121 
fûe_h™dÀ
, 
sh_ªsu…
;

123 
	`as£π
(
ítôy
 !
NULL
);

125 
fûe_h™dÀ
 = ()
ítôy
->
öfo
;

127 
sh_ªsu…
 = 
	`£miho°ög_fûe_£ek
(
fûe_h™dÀ
, 
off£t
);

129 
ªsu…
 = (
sh_ªsu…
 =0Ë? 
IO_SUCCESS
 : 
IO_FAIL
;

131  
ªsu…
;

132 
	}
}

136 
	$sh_fûe_Àn
(
io_ítôy_t
 *
ítôy
, 
size_t
 *
Àngth
)

138 
ªsu…
 = 
IO_FAIL
;

140 
	`as£π
(
ítôy
 !
NULL
);

141 
	`as£π
(
Àngth
 !
NULL
);

143 
sh_h™dÀ
 = ()
ítôy
->
öfo
;

144 
sh_ªsu…
 = 
	`£miho°ög_fûe_Àngth
(
sh_h™dÀ
);

146 i‡(
sh_ªsu…
 >= 0) {

147 
ªsu…
 = 
IO_SUCCESS
;

148 *
Àngth
 = (
size_t
)
sh_ªsu…
;

151  
ªsu…
;

152 
	}
}

156 
	$sh_fûe_ªad
(
io_ítôy_t
 *
ítôy
, 
uöçå_t
 
buf„r
, 
size_t
 
Àngth
,

157 
size_t
 *
Àngth_ªad
)

159 
ªsu…
 = 
IO_FAIL
;

160 
sh_ªsu…
 = -1;

161 
size_t
 
byãs
 = 
Àngth
;

162 
fûe_h™dÀ
;

164 
	`as£π
(
ítôy
 !
NULL
);

165 
	`as£π
(
buf„r
 !(
uöçå_t
)
NULL
);

166 
	`as£π
(
Àngth_ªad
 !
NULL
);

168 
fûe_h™dÀ
 = ()
ítôy
->
öfo
;

170 
sh_ªsu…
 = 
	`£miho°ög_fûe_ªad
(
fûe_h™dÀ
, &
byãs
, 
buf„r
);

172 i‡(
sh_ªsu…
 >= 0) {

173 *
Àngth_ªad
 = (
byãs
 !
Àngth
) ? bytes :Üength;

174 
ªsu…
 = 
IO_SUCCESS
;

176 
ªsu…
 = 
IO_FAIL
;

178  
ªsu…
;

179 
	}
}

183 
	$sh_fûe_wrôe
(
io_ítôy_t
 *
ítôy
, c⁄° 
uöçå_t
 
buf„r
,

184 
size_t
 
Àngth
, size_à*
Àngth_wrôãn
)

186 
ªsu…
 = 
IO_FAIL
;

187 
sh_ªsu…
 = -1;

188 
fûe_h™dÀ
;

189 
size_t
 
byãs
 = 
Àngth
;

191 
	`as£π
(
ítôy
 !
NULL
);

192 
	`as£π
(
buf„r
 !(
uöçå_t
)
NULL
);

193 
	`as£π
(
Àngth_wrôãn
 !
NULL
);

195 
fûe_h™dÀ
 = ()
ítôy
->
öfo
;

197 
sh_ªsu…
 = 
	`£miho°ög_fûe_wrôe
(
fûe_h™dÀ
, &
byãs
, 
buf„r
);

199 i‡(
sh_ªsu…
 >= 0) {

200 *
Àngth_wrôãn
 = 
sh_ªsu…
;

201 
ªsu…
 = 
IO_SUCCESS
;

203 
ªsu…
 = 
IO_FAIL
;

205  
ªsu…
;

206 
	}
}

210 
	$sh_fûe_˛o£
(
io_ítôy_t
 *
ítôy
)

212 
ªsu…
 = 
IO_FAIL
;

213 
sh_ªsu…
 = -1;

214 
fûe_h™dÀ
;

216 
	`as£π
(
ítôy
 !
NULL
);

218 
fûe_h™dÀ
 = ()
ítôy
->
öfo
;

220 
sh_ªsu…
 = 
	`£miho°ög_fûe_˛o£
(
fûe_h™dÀ
);

222 
ªsu…
 = (
sh_ªsu…
 >0Ë? 
IO_SUCCESS
 : 
IO_FAIL
;

224  
ªsu…
;

225 
	}
}

231 
	$ªgi°î_io_dev_sh
(c⁄° 
io_dev_c⁄√˘‹_t
 **
dev_c⁄
)

233 
ªsu…
 = 
IO_FAIL
;

234 
	`as£π
(
dev_c⁄
 !
NULL
);

236 
ªsu…
 = 
	`io_ªgi°î_devi˚
(&
sh_dev_öfo
);

237 i‡(
ªsu…
 =
IO_SUCCESS
)

238 *
dev_c⁄
 = &
sh_dev_c⁄√˘‹
;

240  
ªsu…
;

241 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/bl31.h

31 #i‚de‡
__BL31_H__


32 
	#__BL31_H__


	)

34 
	~<°döt.h
>

39 
bl31_¨ch_£tup
();

40 
bl31_√xt_ñ_¨ch_£tup
(
uöt32_t
 
£curôy_°©e
);

41 
bl31_£t_√xt_image_ty≥
(
uöt32_t
 
ty≥
);

42 
uöt32_t
 
bl31_gë_√xt_image_ty≥
();

43 
bl31_¥ï¨e_√xt_image_íåy
();

44 
bl31_ªgi°î_bl32_öô
(
	$öt32_t
 (*)(, ));

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/context.h

31 #i‚de‡
__CONTEXT_H__


32 
	#__CONTEXT_H__


	)

38 
	#CTX_GPREGS_OFFSET
 0x0

	)

39 
	#CTX_GPREG_X0
 0x0

	)

40 
	#CTX_GPREG_X1
 0x8

	)

41 
	#CTX_GPREG_X2
 0x10

	)

42 
	#CTX_GPREG_X3
 0x18

	)

43 
	#CTX_GPREG_X4
 0x20

	)

44 
	#CTX_GPREG_X5
 0x28

	)

45 
	#CTX_GPREG_X6
 0x30

	)

46 
	#CTX_GPREG_X7
 0x38

	)

47 
	#CTX_GPREG_X8
 0x40

	)

48 
	#CTX_GPREG_X9
 0x48

	)

49 
	#CTX_GPREG_X10
 0x50

	)

50 
	#CTX_GPREG_X11
 0x58

	)

51 
	#CTX_GPREG_X12
 0x60

	)

52 
	#CTX_GPREG_X13
 0x68

	)

53 
	#CTX_GPREG_X14
 0x70

	)

54 
	#CTX_GPREG_X15
 0x78

	)

55 
	#CTX_GPREG_X16
 0x80

	)

56 
	#CTX_GPREG_X17
 0x88

	)

57 
	#CTX_GPREG_X18
 0x90

	)

58 
	#CTX_GPREG_X19
 0x98

	)

59 
	#CTX_GPREG_X20
 0xa0

	)

60 
	#CTX_GPREG_X21
 0xa8

	)

61 
	#CTX_GPREG_X22
 0xb0

	)

62 
	#CTX_GPREG_X23
 0xb8

	)

63 
	#CTX_GPREG_X24
 0xc0

	)

64 
	#CTX_GPREG_X25
 0xc8

	)

65 
	#CTX_GPREG_X26
 0xd0

	)

66 
	#CTX_GPREG_X27
 0xd8

	)

67 
	#CTX_GPREG_X28
 0xe0

	)

68 
	#CTX_GPREG_X29
 0xe8

	)

69 
	#CTX_GPREG_LR
 0xf0

	)

70 
	#CTX_GPREG_SP_EL0
 0xf8

	)

71 
	#CTX_GPREGS_END
 0x100

	)

78 
	#CTX_EL3STATE_OFFSET
 (
CTX_GPREGS_OFFSET
 + 
CTX_GPREGS_END
)

	)

79 
	#CTX_VBAR_EL3
 0x0

	)

80 
	#CTX_RUNTIME_SP
 0x8

	)

81 
	#CTX_SPSR_EL3
 0x10

	)

82 
	#CTX_ELR_EL3
 0x18

	)

83 
	#CTX_SCR_EL3
 0x20

	)

84 
	#CTX_SCTLR_EL3
 0x28

	)

85 
	#CTX_CPTR_EL3
 0x30

	)

87 
	#CTX_CNTFRQ_EL0
 0x40

	)

88 
	#CTX_MAIR_EL3
 0x48

	)

89 
	#CTX_TCR_EL3
 0x50

	)

90 
	#CTX_TTBR0_EL3
 0x58

	)

91 
	#CTX_DAIF_EL3
 0x60

	)

93 
	#CTX_EL3STATE_END
 0x70

	)

101 
	#CTX_SYSREGS_OFFSET
 (
CTX_EL3STATE_OFFSET
 + 
CTX_EL3STATE_END
)

	)

102 
	#CTX_SPSR_EL1
 0x0

	)

103 
	#CTX_ELR_EL1
 0x8

	)

104 
	#CTX_SPSR_ABT
 0x10

	)

105 
	#CTX_SPSR_UND
 0x18

	)

106 
	#CTX_SPSR_IRQ
 0x20

	)

107 
	#CTX_SPSR_FIQ
 0x28

	)

108 
	#CTX_SCTLR_EL1
 0x30

	)

109 
	#CTX_ACTLR_EL1
 0x38

	)

110 
	#CTX_CPACR_EL1
 0x40

	)

111 
	#CTX_CSSELR_EL1
 0x48

	)

112 
	#CTX_SP_EL1
 0x50

	)

113 
	#CTX_ESR_EL1
 0x58

	)

114 
	#CTX_TTBR0_EL1
 0x60

	)

115 
	#CTX_TTBR1_EL1
 0x68

	)

116 
	#CTX_MAIR_EL1
 0x70

	)

117 
	#CTX_AMAIR_EL1
 0x78

	)

118 
	#CTX_TCR_EL1
 0x80

	)

119 
	#CTX_TPIDR_EL1
 0x88

	)

120 
	#CTX_TPIDR_EL0
 0x90

	)

121 
	#CTX_TPIDRRO_EL0
 0x98

	)

122 
	#CTX_DACR32_EL2
 0xa0

	)

123 
	#CTX_IFSR32_EL2
 0xa8

	)

124 
	#CTX_PAR_EL1
 0xb0

	)

125 
	#CTX_FAR_EL1
 0xb8

	)

126 
	#CTX_AFSR0_EL1
 0xc0

	)

127 
	#CTX_AFSR1_EL1
 0xc8

	)

128 
	#CTX_CONTEXTIDR_EL1
 0xd0

	)

129 
	#CTX_VBAR_EL1
 0xd8

	)

134 #i‡
NS_TIMER_SWITCH


135 
	#CTX_CNTP_CTL_EL0
 0xe0

	)

136 
	#CTX_CNTP_CVAL_EL0
 0xe8

	)

137 
	#CTX_CNTV_CTL_EL0
 0xf0

	)

138 
	#CTX_CNTV_CVAL_EL0
 0xf8

	)

139 
	#CTX_CNTKCTL_EL1
 0x100

	)

140 
	#CTX_FP_FPEXC32_EL2
 0x108

	)

141 
	#CTX_SYSREGS_END
 0x110

	)

143 
	#CTX_FP_FPEXC32_EL2
 0xe0

	)

144 
	#CTX_SYSREGS_END
 0xf0

	)

151 
	#CTX_FPREGS_OFFSET
 (
CTX_SYSREGS_OFFSET
 + 
CTX_SYSREGS_END
)

	)

152 
	#CTX_FP_Q0
 0x0

	)

153 
	#CTX_FP_Q1
 0x10

	)

154 
	#CTX_FP_Q2
 0x20

	)

155 
	#CTX_FP_Q3
 0x30

	)

156 
	#CTX_FP_Q4
 0x40

	)

157 
	#CTX_FP_Q5
 0x50

	)

158 
	#CTX_FP_Q6
 0x60

	)

159 
	#CTX_FP_Q7
 0x70

	)

160 
	#CTX_FP_Q8
 0x80

	)

161 
	#CTX_FP_Q9
 0x90

	)

162 
	#CTX_FP_Q10
 0xa0

	)

163 
	#CTX_FP_Q11
 0xb0

	)

164 
	#CTX_FP_Q12
 0xc0

	)

165 
	#CTX_FP_Q13
 0xd0

	)

166 
	#CTX_FP_Q14
 0xe0

	)

167 
	#CTX_FP_Q15
 0xf0

	)

168 
	#CTX_FP_Q16
 0x100

	)

169 
	#CTX_FP_Q17
 0x110

	)

170 
	#CTX_FP_Q18
 0x120

	)

171 
	#CTX_FP_Q19
 0x130

	)

172 
	#CTX_FP_Q20
 0x140

	)

173 
	#CTX_FP_Q21
 0x150

	)

174 
	#CTX_FP_Q22
 0x160

	)

175 
	#CTX_FP_Q23
 0x170

	)

176 
	#CTX_FP_Q24
 0x180

	)

177 
	#CTX_FP_Q25
 0x190

	)

178 
	#CTX_FP_Q26
 0x1a0

	)

179 
	#CTX_FP_Q27
 0x1b0

	)

180 
	#CTX_FP_Q28
 0x1c0

	)

181 
	#CTX_FP_Q29
 0x1d0

	)

182 
	#CTX_FP_Q30
 0x1e0

	)

183 
	#CTX_FP_Q31
 0x1f0

	)

184 
	#CTX_FP_FPSR
 0x200

	)

185 
	#CTX_FP_FPCR
 0x208

	)

186 
	#CTX_FPREGS_END
 0x210

	)

191 
	#PTR_CACHE_CRASH_STACK_OFFSET
 0x0

	)

193 #i‚de‡
__ASSEMBLY__


195 
	~<ˇs£π.h
>

196 
	~<°döt.h
>

202 
	#DWORD_SHIFT
 3

	)

203 
	#DEFINE_REG_STRUCT
(
«me
, 
num_ªgs
) \

204 
	s«me
 { \

205 
uöt64_t
 
_ªgs
[
num_ªgs
]; \

206 } 
	t__Æig√d
(16Ë
	t«me
##
	t_t


	)

209 
	tCTX_GPREG_ALL
 (
	tCTX_GPREGS_END
 >> 
	tDWORD_SHIFT
)

	)

210 
	tCTX_SYSREG_ALL
 (
	tCTX_SYSREGS_END
 >> 
	tDWORD_SHIFT
)

	)

211 
	tCTX_FPREG_ALL
 (
	tCTX_FPREGS_END
 >> 
	tDWORD_SHIFT
)

	)

212 
	tCTX_EL3STATE_ALL
 (
	tCTX_EL3STATE_END
 >> 
	tDWORD_SHIFT
)

	)

221 
	tDEFINE_REG_STRUCT
(
	tgp_ªgs
, 
	tCTX_GPREG_ALL
);

228 
DEFINE_REG_STRUCT
(
ñ1_sys_ªgs
, 
CTX_SYSREG_ALL
);

235 
DEFINE_REG_STRUCT
(
Â_ªgs
, 
CTX_FPREG_ALL
);

241 
DEFINE_REG_STRUCT
(
ñ3_°©e
, 
CTX_EL3STATE_ALL
);

247 
	#ªad_˘x_ªg
(
˘x
, 
off£t
Ë((˘x)->
_ªgs
[off£à>> 
DWORD_SHIFT
])

	)

248 
	#wrôe_˘x_ªg
(
˘x
, 
off£t
, 
vÆ
Ë(((˘x)->
_ªgs
[off£à>> 
DWORD_SHIFT
]) \

249 
vÆ
)

	)

260 
	s˝u_c⁄ãxt
 {

261 
gp_ªgs_t
 
	mg¥egs_˘x
;

262 
ñ3_°©e_t
 
	mñ3°©e_˘x
;

263 
ñ1_sys_ªgs_t
 
	msy§egs_˘x
;

264 
Â_ªgs_t
 
	mÂªgs_˘x
;

265 } 
	t˝u_c⁄ãxt_t
;

268 
	#gë_ñ3°©e_˘x
(
h
Ë(&((
˝u_c⁄ãxt_t
 *Ëh)->
ñ3°©e_˘x
)

	)

269 
	#gë_Âªgs_˘x
(
h
Ë(&((
˝u_c⁄ãxt_t
 *Ëh)->
Âªgs_˘x
)

	)

270 
	#gë_sy§egs_˘x
(
h
Ë(&((
˝u_c⁄ãxt_t
 *Ëh)->
sy§egs_˘x
)

	)

271 
	#gë_g¥egs_˘x
(
h
Ë(&((
˝u_c⁄ãxt_t
 *Ëh)->
g¥egs_˘x
)

	)

278 
CASSERT
(
CTX_GPREGS_OFFSET
 =
__buûtö_off£tof
(
˝u_c⁄ãxt_t
, 
g¥egs_˘x
), \

279 
as£π_c‹e_c⁄ãxt_gp_off£t_mism©ch
);

280 
CASSERT
(
CTX_SYSREGS_OFFSET
 =
__buûtö_off£tof
(
˝u_c⁄ãxt_t
, 
sy§egs_˘x
), \

281 
as£π_c‹e_c⁄ãxt_sys_off£t_mism©ch
);

282 
CASSERT
(
CTX_FPREGS_OFFSET
 =
__buûtö_off£tof
(
˝u_c⁄ãxt_t
, 
Âªgs_˘x
), \

283 
as£π_c‹e_c⁄ãxt_Â_off£t_mism©ch
);

284 
CASSERT
(
CTX_EL3STATE_OFFSET
 =
__buûtö_off£tof
(
˝u_c⁄ãxt_t
, 
ñ3°©e_˘x
), \

285 
as£π_c‹e_c⁄ãxt_ñ3°©e_off£t_mism©ch
);

291 
	#£t_Øpcs_¨gs0
(
˘x
, 
x0
) do { \

292 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
˘x
), 
CTX_GPREG_X0
, 
x0
); \

293 } 0);

	)

294 
	#£t_Øpcs_¨gs1
(
˘x
, 
x0
, 
x1
) do { \

295 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
˘x
), 
CTX_GPREG_X1
, 
x1
); \

296 
	`£t_Øpcs_¨gs0
(
˘x
, 
x0
); \

297 } 0);

	)

298 
	#£t_Øpcs_¨gs2
(
˘x
, 
x0
, 
x1
, 
x2
) do { \

299 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
˘x
), 
CTX_GPREG_X2
, 
x2
); \

300 
	`£t_Øpcs_¨gs1
(
˘x
, 
x0
, 
x1
); \

301 } 0);

	)

302 
	#£t_Øpcs_¨gs3
(
˘x
, 
x0
, 
x1
, 
x2
, 
x3
) do { \

303 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
˘x
), 
CTX_GPREG_X3
, 
x3
); \

304 
	`£t_Øpcs_¨gs2
(
˘x
, 
x0
, 
x1
, 
x2
); \

305 } 0);

	)

306 
	#£t_Øpcs_¨gs4
(
˘x
, 
x0
, 
x1
, 
x2
, 
x3
, 
x4
) do { \

307 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
˘x
), 
CTX_GPREG_X4
, 
x4
); \

308 
	`£t_Øpcs_¨gs3
(
˘x
, 
x0
, 
x1
, 
x2
, 
x3
); \

309 } 0);

	)

310 
	#£t_Øpcs_¨gs5
(
˘x
, 
x0
, 
x1
, 
x2
, 
x3
, 
x4
, 
x5
) do { \

311 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
˘x
), 
CTX_GPREG_X5
, 
x5
); \

312 
	`£t_Øpcs_¨gs4
(
˘x
, 
x0
, 
x1
, 
x2
, 
x3
, 
x4
); \

313 } 0);

	)

314 
	#£t_Øpcs_¨gs6
(
˘x
, 
x0
, 
x1
, 
x2
, 
x3
, 
x4
, 
x5
, 
x6
) do { \

315 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
˘x
), 
CTX_GPREG_X6
, 
x6
); \

316 
	`£t_Øpcs_¨gs5
(
˘x
, 
x0
, 
x1
, 
x2
, 
x3
, 
x4
, 
x5
); \

317 } 0);

	)

318 
	#£t_Øpcs_¨gs7
(
˘x
, 
x0
, 
x1
, 
x2
, 
x3
, 
x4
, 
x5
, 
x6
, 
x7
) do { \

319 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
˘x
), 
CTX_GPREG_X7
, 
x7
); \

320 
	`£t_Øpcs_¨gs6
(
˘x
, 
x0
, 
x1
, 
x2
, 
x3
, 
x4
, 
x5
, 
x6
); \

321 } 0);

	)

326 
ñ3_sy§egs_c⁄ãxt_ßve
(
ñ3_°©e_t
 *
ªgs
);

327 
ñ3_sy§egs_c⁄ãxt_ª°‹e
(
ñ3_°©e_t
 *
ªgs
);

328 
ñ1_sy§egs_c⁄ãxt_ßve
(
ñ1_sys_ªgs_t
 *
ªgs
);

329 
ñ1_sy§egs_c⁄ãxt_ª°‹e
(
ñ1_sys_ªgs_t
 *
ªgs
);

330 
Âªgs_c⁄ãxt_ßve
(
Â_ªgs_t
 *
ªgs
);

331 
Âªgs_c⁄ãxt_ª°‹e
(
Â_ªgs_t
 *
ªgs
);

337 
	s≥r_˝u_±r_ˇche
 {

338 
uöt64_t
 
	m¸ash_°ack
;

339 } 
	t≥r_˝u_±r_ˇche_t
;

341 
CASSERT
(
PTR_CACHE_CRASH_STACK_OFFSET
 =
__buûtö_off£tof
\

342 (
≥r_˝u_±r_ˇche_t
, 
¸ash_°ack
), \

343 
as£π_≥r_˝u_±r_ˇche_¸ash_°ack_off£t_mism©ch
);

345 #unde‡
CTX_SYSREG_ALL


346 #unde‡
CTX_FP_ALL


347 #unde‡
CTX_GPREG_ALL


348 #unde‡
CTX_EL3STATE_ALL


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/context_mgmt.h

31 #i‚de‡
__CM_H__


32 
	#__CM_H__


	)

34 
	~<°döt.h
>

39 
cm_öô
();

40 *
cm_gë_c⁄ãxt
(
uöt64_t
 
mpidr
, 
uöt32_t
 
£curôy_°©e
);

41 
cm_£t_c⁄ãxt
(
uöt64_t
 
mpidr
,

42 *
c⁄ãxt
,

43 
uöt32_t
 
£curôy_°©e
);

44 
cm_ñ3_sy§egs_c⁄ãxt_ßve
(
uöt32_t
 
£curôy_°©e
);

45 
cm_ñ3_sy§egs_c⁄ãxt_ª°‹e
(
uöt32_t
 
£curôy_°©e
);

46 
cm_ñ1_sy§egs_c⁄ãxt_ßve
(
uöt32_t
 
£curôy_°©e
);

47 
cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
uöt32_t
 
£curôy_°©e
);

48 
cm_£t_ñ3_îë_c⁄ãxt
(
uöt32_t
 
£curôy_°©e
, 
uöt64_t
 
íåypoöt
,

49 
uöt32_t
 
•§
, uöt32_à
s¸
);

50 
cm_£t_ñr_ñ3
(
uöt32_t
 
£curôy_°©e
, 
uöt64_t
 
íåypoöt
);

51 
cm_wrôe_s¸_ñ3_bô
(
uöt32_t
 
£curôy_°©e
,

52 
uöt32_t
 
bô_pos
,

53 
uöt32_t
 
vÆue
);

54 
cm_£t_√xt_îë_c⁄ãxt
(
uöt32_t
 
£curôy_°©e
);

55 
cm_öô_p˝u_±r_ˇche
();

56 
cm_£t_p˝u_±r_ˇche
(c⁄° *
p˝u_±r
);

57 *
cm_gë_p˝u_±r_ˇche
();

58 
uöt32_t
 
cm_gë_s¸_ñ3
(uöt32_à
£curôy_°©e
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/interrupt_mgmt.h

31 #i‚de‡
__INTERRUPT_MGMT_H__


32 
	#__INTERRUPT_MGMT_H__


	)

34 
	~<¨ch.h
>

39 
	#INTR_TYPE_S_EL1
 0

	)

40 
	#INTR_TYPE_EL3
 1

	)

41 
	#INTR_TYPE_NS
 2

	)

42 
	#MAX_INTR_TYPES
 3

	)

43 
	#INTR_TYPE_INVAL
 
MAX_INTR_TYPES


	)

48 
	#INTR_ID_UNAVAILABLE
 0xFFFFFFFF

	)

56 
	#INTR_RM_FLAGS_SHIFT
 0x0

	)

57 
	#INTR_RM_FLAGS_MASK
 0x3

	)

59 
	#INTR_SEL1_VALID_RM0
 0x2

	)

61 
	#INTR_SEL1_VALID_RM1
 0x3

	)

63 
	#INTR_NS_VALID_RM0
 0x0

	)

65 
	#INTR_NS_VALID_RM1
 0x1

	)

73 
	#INTR_TYPE_FLAGS_MASK
 0xFFFFFFFC

	)

75 
	#INTR_RM_FROM_SEC_SHIFT
 
SECURE


	)

76 
	#INTR_RM_FROM_NS_SHIFT
 
NON_SECURE


	)

77 
	#INTR_RM_FROM_FLAG_MASK
 1

	)

78 
	#gë_öãºu±_rm_Êag
(
Êag
, 
ss
Ë(((Êag >> 
INTR_RM_FLAGS_SHIFT
) >> ss) \

79 & 
INTR_RM_FROM_FLAG_MASK
)

	)

80 
	#£t_öãºu±_rm_Êag
(
Êag
, 
ss
Ë(Êag |1 << ss)

	)

81 
	#˛r_öãºu±_rm_Êag
(
Êag
, 
ss
Ë(Êag &~(1 << ss))

	)

89 
	#vÆid©e_£l1_öãºu±_rm
(
x
Ë(x =
INTR_SEL1_VALID_RM0
 ? 0 : \

90 (
x
 =
INTR_SEL1_VALID_RM1
 ? 0 :\

91 -
EINVAL
))

	)

93 
	#vÆid©e_ns_öãºu±_rm
(
x
Ë(x =
INTR_NS_VALID_RM0
 ? 0 : \

94 (
x
 =
INTR_NS_VALID_RM1
 ? 0 :\

95 -
EINVAL
))

	)

102 
	#INTR_SRC_SS_FLAG_SHIFT
 0

	)

103 
	#INTR_SRC_SS_FLAG_MASK
 1

	)

104 
	#£t_öãºu±_§c_ss
(
Êag
, 
vÆ
Ë(Êag |vÆ << 
INTR_SRC_SS_FLAG_SHIFT
)

	)

105 
	#˛r_öãºu±_§c_ss
(
Êag
Ë(Êag &~(1 << 
INTR_SRC_SS_FLAG_SHIFT
))

	)

106 
	#gë_öãºu±_§c_ss
(
Êag
Ë((Êag >> 
INTR_SRC_SS_FLAG_SHIFT
) & \

107 
INTR_SRC_SS_FLAG_MASK
)

	)

109 #i‚de‡
__ASSEMBLY__


112 
	$uöt64_t
 (*
	töãºu±_ty≥_h™dÀr_t
)(
	tuöt32_t
 
	tid
,

113 
	tuöt32_t
 
	tÊags
,

114 *
	th™dÀ
,

115 *
	tcookõ
);

120 
uöt32_t
 
	`gë_s¸_ñ3_‰om_routög_modñ
(uöt32_à
£curôy_°©e
);

121 
öt32_t
 
	`£t_routög_modñ
(
uöt32_t
 
ty≥
, uöt32_à
Êags
);

122 
öt32_t
 
	`ªgi°î_öãºu±_ty≥_h™dÀr
(
uöt32_t
 
ty≥
,

123 
öãºu±_ty≥_h™dÀr_t
 
h™dÀr
,

124 
uöt32_t
 
Êags
);

125 
öãºu±_ty≥_h™dÀr_t
 
	`gë_öãºu±_ty≥_h™dÀr
(
uöt32_t
 
öãºu±_ty≥
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/runtime_svc.h

31 #i‚de‡
__RUNTIME_SVC_H__


32 
	#__RUNTIME_SVC_H__


	)

37 
	#FUNCID_TYPE_SHIFT
 31

	)

38 
	#FUNCID_CC_SHIFT
 30

	)

39 
	#FUNCID_OEN_SHIFT
 24

	)

40 
	#FUNCID_NUM_SHIFT
 0

	)

42 
	#FUNCID_TYPE_MASK
 0x1

	)

43 
	#FUNCID_CC_MASK
 0x1

	)

44 
	#FUNCID_OEN_MASK
 0x3f

	)

45 
	#FUNCID_NUM_MASK
 0xffff

	)

47 
	#FUNCID_TYPE_WIDTH
 1

	)

48 
	#FUNCID_CC_WIDTH
 1

	)

49 
	#FUNCID_OEN_WIDTH
 6

	)

50 
	#FUNCID_NUM_WIDTH
 16

	)

52 
	#GET_SMC_CC
(
id
Ë((id >> 
FUNCID_CC_SHIFT
) & \

53 
FUNCID_CC_MASK
)

	)

54 
	#GET_SMC_TYPE
(
id
Ë((id >> 
FUNCID_TYPE_SHIFT
) & \

55 
FUNCID_TYPE_MASK
)

	)

57 
	#SMC_64
 1

	)

58 
	#SMC_32
 0

	)

59 
	#SMC_UNK
 0xffffffff

	)

60 
	#SMC_TYPE_FAST
 1

	)

61 
	#SMC_TYPE_STD
 0

	)

62 
	#SMC_PREEMPTED
 0xffffff„

	)

67 
	#OEN_ARM_START
 0

	)

68 
	#OEN_ARM_END
 0

	)

69 
	#OEN_CPU_START
 1

	)

70 
	#OEN_CPU_END
 1

	)

71 
	#OEN_SIP_START
 2

	)

72 
	#OEN_SIP_END
 2

	)

73 
	#OEN_OEM_START
 3

	)

74 
	#OEN_OEM_END
 3

	)

75 
	#OEN_STD_START
 4

	)

76 
	#OEN_STD_END
 4

	)

77 
	#OEN_TAP_START
 48

	)

78 
	#OEN_TAP_END
 49

	)

79 
	#OEN_TOS_START
 50

	)

80 
	#OEN_TOS_END
 63

	)

81 
	#OEN_LIMIT
 64

	)

86 
	#SYNC_EXCEPTION_SP_EL0
 0x0

	)

87 
	#IRQ_SP_EL0
 0x1

	)

88 
	#FIQ_SP_EL0
 0x2

	)

89 
	#SERROR_SP_EL0
 0x3

	)

90 
	#SYNC_EXCEPTION_SP_ELX
 0x4

	)

91 
	#IRQ_SP_ELX
 0x5

	)

92 
	#FIQ_SP_ELX
 0x6

	)

93 
	#SERROR_SP_ELX
 0x7

	)

94 
	#SYNC_EXCEPTION_AARCH64
 0x8

	)

95 
	#IRQ_AARCH64
 0x9

	)

96 
	#FIQ_AARCH64
 0xa

	)

97 
	#SERROR_AARCH64
 0xb

	)

98 
	#SYNC_EXCEPTION_AARCH32
 0xc

	)

99 
	#IRQ_AARCH32
 0xd

	)

100 
	#FIQ_AARCH32
 0xe

	)

101 
	#SERROR_AARCH32
 0xf

	)

111 
	#RT_SVC_SIZE_LOG2
 5

	)

112 
	#SIZEOF_RT_SVC_DESC
 (1 << 
RT_SVC_SIZE_LOG2
)

	)

113 
	#RT_SVC_DESC_INIT
 16

	)

114 
	#RT_SVC_DESC_HANDLE
 24

	)

121 
	#MAX_RT_SVCS
 128

	)

123 #i‚de‡
__ASSEMBLY__


125 
	~<ˇs£π.h
>

126 
	~<c⁄ãxt.h
>

127 
	~<°döt.h
>

130 
	#SMC_FROM_SECURE
 (0 << 0)

	)

131 
	#SMC_FROM_NON_SECURE
 (1 << 0)

	)

133 
	#is_ˇŒî_n⁄_£cuª
(
_f
Ë(!!(_‡& 
SMC_FROM_NON_SECURE
))

	)

134 
	#is_ˇŒî_£cuª
(
_f
Ë(!(
	`is_ˇŒî_n⁄_£cuª
(_f)))

	)

137 
	$öt32_t
 (*
	tπ_svc_öô_t
)();

140 
	#SMC_RET0
(
_h
) { \

141  (
uöt64_t
Ë(
_h
); \

142 
	}

	)
}

143 
	#SMC_RET1
(
_h
, 
_x0
) { \

144 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
_h
), 
CTX_GPREG_X0
, (
_x0
)); \

145 
	`SMC_RET0
(
_h
); \

146 }

	)

147 
	#SMC_RET2
(
_h
, 
_x0
, 
_x1
) { \

148 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
_h
), 
CTX_GPREG_X1
, (
_x1
)); \

149 
	`SMC_RET1
(
_h
, (
_x0
)); \

150 }

	)

151 
	#SMC_RET3
(
_h
, 
_x0
, 
_x1
, 
_x2
) { \

152 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
_h
), 
CTX_GPREG_X2
, (
_x2
)); \

153 
	`SMC_RET2
(
_h
, (
_x0
), (
_x1
)); \

154 }

	)

155 
	#SMC_RET4
(
_h
, 
_x0
, 
_x1
, 
_x2
, 
_x3
) { \

156 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
_h
), 
CTX_GPREG_X3
, (
_x3
)); \

157 
	`SMC_RET3
(
_h
, (
_x0
), (
_x1
), (
_x2
)); \

158 }

	)

165 
	#SMC_GET_GP
(
_h
, 
_g
) \

166 
	`ªad_˘x_ªg
(
	`gë_g¥egs_˘x
(
_h
), (
_g
));

	)

167 
	#SMC_SET_GP
(
_h
, 
_g
, 
_v
) \

168 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(
_h
), (
_g
), (
_v
));

	)

174 
	#SMC_GET_EL3
(
_h
, 
_e
) \

175 
	`ªad_˘x_ªg
(
	`gë_ñ3°©e_˘x
(
_h
), (
_e
));

	)

176 
	#SMC_SET_EL3
(
_h
, 
_e
, 
_v
) \

177 
	`wrôe_˘x_ªg
(
	`gë_ñ3°©e_˘x
(
_h
), (
_e
), (
_v
));

	)

185 
	$uöt64_t
 (*
	tπ_svc_h™dÀ_t
)(
	tuöt32_t
 
	tsmc_fid
,

186 
	tuöt64_t
 
	tx1
,

187 
	tuöt64_t
 
	tx2
,

188 
	tuöt64_t
 
	tx3
,

189 
	tuöt64_t
 
	tx4
,

190 *
	tcookõ
,

191 *
	th™dÀ
,

192 
	tuöt64_t
 
	tÊags
);

193 
	sπ_svc_desc
 {

194 
uöt8_t
 
°¨t_€n
;

195 
uöt8_t
 
íd_€n
;

196 
uöt8_t
 
ˇŒ_ty≥
;

197 c⁄° *
«me
;

198 
π_svc_öô_t
 
öô
;

199 
π_svc_h™dÀ_t
 
h™dÀ
;

200 } 
	tπ_svc_desc_t
;

205 
	#DECLARE_RT_SVC
(
_«me
, 
_°¨t
, 
_íd
, 
_ty≥
, 
_£tup
, 
_smch
) \

206 c⁄° 
π_svc_desc_t
 
__svc_desc_
 ## 
_«me
 \

207 
	`__©åibuã__
 ((
	`£˘i⁄
("π_svc_descs"), 
u£d
)) = { \

208 
_°¨t
, \

209 
_íd
, \

210 
_ty≥
, \

212 
_£tup
, \

213 
_smch
 
	}

	)
}

224 
CASSERT
(((
π_svc_desc_t
Ë=
SIZEOF_RT_SVC_DESC
), \

225 
as£π_sizeof_π_svc_desc_mism©ch
);

226 
CASSERT
(
RT_SVC_DESC_INIT
 =
__buûtö_off£tof
(
π_svc_desc_t
, 
öô
), \

227 
as£π_π_svc_desc_öô_off£t_mism©ch
);

228 
CASSERT
(
RT_SVC_DESC_HANDLE
 =
__buûtö_off£tof
(
π_svc_desc_t
, 
h™dÀ
), \

229 
as£π_π_svc_desc_h™dÀ_off£t_mism©ch
);

238 
	#gë_unique_€n
(
€n
, 
ˇŒ_ty≥
Ë((€¿& 
FUNCID_OEN_MASK
) | \

239 ((
ˇŒ_ty≥
 & 
FUNCID_TYPE_MASK
) \

240 << 
FUNCID_OEN_WIDTH
))

	)

249 
	#DEFINE_SVC_UUID
(
_«me
, 
_é
, 
_tm
, 
_th
, 
_˛
, 
_ch
, \

250 
_n0
, 
_n1
, 
_n2
, 
_n3
, 
_n4
, 
_n5
) \

251 
	`CASSERT
(
_é
 !
SMC_UNK
, 
övÆid_svc_uuid
);\

252 c⁄° 
uuid_t
 
_«me
 = { \

253 
_é
, 
_tm
, 
_th
, 
_˛
, 
_ch
, \

254 { 
_n0
, 
_n1
, 
_n2
, 
_n3
, 
_n4
, 
_n5
 } \

255 }

	)

258 
	#SMC_UUID_RET
(
_h
, 
_uuid
) \

259 
	`SMC_RET4
(
h™dÀ
, ((c⁄° 
uöt32_t
 *Ë&(
_uuid
))[0], \

260 ((c⁄° 
uöt32_t
 *Ë&(
_uuid
))[1], \

261 ((c⁄° 
uöt32_t
 *Ë&(
_uuid
))[2], \

262 ((c⁄° 
uöt32_t
 *Ë&(
_uuid
))[3])

	)

267 
ru¡ime_svc_öô
();

268 
uöt64_t
 
__RT_SVC_DESCS_START__
;

269 
uöt64_t
 
__RT_SVC_DESCS_END__
;

270 
uöt64_t
 
gë_¸ash_°ack
(uöt64_à
mpidr
);

271 
ru¡ime_ex˚±i⁄s
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/services/psci.h

31 #i‚de‡
__PSCI_H__


32 
	#__PSCI_H__


	)

38 
	#PSCI_VERSION
 0x84000000

	)

39 
	#PSCI_CPU_SUSPEND_AARCH32
 0x84000001

	)

40 
	#PSCI_CPU_SUSPEND_AARCH64
 0xc4000001

	)

41 
	#PSCI_CPU_OFF
 0x84000002

	)

42 
	#PSCI_CPU_ON_AARCH32
 0x84000003

	)

43 
	#PSCI_CPU_ON_AARCH64
 0xc4000003

	)

44 
	#PSCI_AFFINITY_INFO_AARCH32
 0x84000004

	)

45 
	#PSCI_AFFINITY_INFO_AARCH64
 0xc4000004

	)

46 
	#PSCI_MIG_AARCH32
 0x84000005

	)

47 
	#PSCI_MIG_AARCH64
 0xc4000005

	)

48 
	#PSCI_MIG_INFO_TYPE
 0x84000006

	)

49 
	#PSCI_MIG_INFO_UP_CPU_AARCH32
 0x84000007

	)

50 
	#PSCI_MIG_INFO_UP_CPU_AARCH64
 0xc4000007

	)

51 
	#PSCI_SYSTEM_OFF
 0x84000008

	)

52 
	#PSCI_SYSTEM_RESET
 0x84000009

	)

58 
	#PSCI_NUM_CALLS
 13

	)

63 
	#PSCI_TOS_UP_MIG_CAP
 0

	)

64 
	#PSCI_TOS_NOT_UP_MIG_CAP
 1

	)

65 
	#PSCI_TOS_NOT_PRESENT_MP
 2

	)

70 
	#PSTATE_ID_SHIFT
 0

	)

71 
	#PSTATE_TYPE_SHIFT
 16

	)

72 
	#PSTATE_AFF_LVL_SHIFT
 24

	)

74 
	#PSTATE_ID_MASK
 0xffff

	)

75 
	#PSTATE_TYPE_MASK
 0x1

	)

76 
	#PSTATE_AFF_LVL_MASK
 0x3

	)

77 
	#PSTATE_VALID_MASK
 0xFCFE0000

	)

79 
	#PSTATE_TYPE_STANDBY
 0x0

	)

80 
	#PSTATE_TYPE_POWERDOWN
 0x1

	)

82 
	#psci_gë_p°©e_id
(
p°©e
Ë’°©ê>> 
PSTATE_ID_SHIFT
) & \

83 
PSTATE_ID_MASK


	)

84 
	#psci_gë_p°©e_ty≥
(
p°©e
Ë’°©ê>> 
PSTATE_TYPE_SHIFT
) & \

85 
PSTATE_TYPE_MASK


	)

86 
	#psci_gë_p°©e_afÊvl
(
p°©e
Ë’°©ê>> 
PSTATE_AFF_LVL_SHIFT
) & \

87 
PSTATE_AFF_LVL_MASK


	)

92 
	#PSCI_MAJOR_VER
 (0 << 16)

	)

93 
	#PSCI_MINOR_VER
 0x2

	)

98 
	#PSCI_E_SUCCESS
 0

	)

99 
	#PSCI_E_NOT_SUPPORTED
 -1

	)

100 
	#PSCI_E_INVALID_PARAMS
 -2

	)

101 
	#PSCI_E_DENIED
 -3

	)

102 
	#PSCI_E_ALREADY_ON
 -4

	)

103 
	#PSCI_E_ON_PENDING
 -5

	)

104 
	#PSCI_E_INTERN_FAIL
 -6

	)

105 
	#PSCI_E_NOT_PRESENT
 -7

	)

106 
	#PSCI_E_DISABLED
 -8

	)

113 
	#PSCI_STATE_SHIFT
 1

	)

114 
	#PSCI_STATE_MASK
 0xff

	)

116 
	#PSCI_AFF_ABSENT
 0x0

	)

117 
	#PSCI_AFF_PRESENT
 0x1

	)

118 
	#PSCI_STATE_ON
 0x0

	)

119 
	#PSCI_STATE_OFF
 0x1

	)

120 
	#PSCI_STATE_ON_PENDING
 0x2

	)

121 
	#PSCI_STATE_SUSPEND
 0x3

	)

123 
	#PSCI_INVALID_DATA
 -1

	)

125 
	#gë_phys_°©e
(
x
Ë(x !
PSCI_STATE_ON
 ? \

126 
PSCI_STATE_OFF
 : 
PSCI_STATE_ON
)

	)

128 
	#psci_vÆid©e_powî_°©e
(
p°©e
Ë’°©ê& 
PSTATE_VALID_MASK
)

	)

132 
	#PSCI_NUM_AFFS
 32uŒ

	)

134 #i‚de‡
__ASSEMBLY__


136 
	~<°döt.h
>

143 
	s∂©_pm_›s
 {

144 (*
	maffö°_°™dby
)();

145 (*
	maffö°_⁄
)(,

150 (*
	maffö°_off
)(, , );

151 (*
	maffö°_su•íd
)(,

156 (*
	maffö°_⁄_föish
)(, , );

157 (*
	maffö°_su•íd_föish
)(,

160 } 
	t∂©_pm_›s_t
;

168 
	s•d_pm_›s
 {

169 (*
	msvc_⁄
)(
uöt64_t
 
	mèrgë_˝u
);

170 
öt32_t
 (*
svc_off
)(
uöt64_t
 
	m__unu£d
);

171 (*
	msvc_su•íd
)(
uöt64_t
 
	mpowî_°©e
);

172 (*
	msvc_⁄_föish
)(
uöt64_t
 
	m__unu£d
);

173 (*
	msvc_su•íd_föish
)(
uöt64_t
 
	msu•íd_Àvñ
);

174 (*
	msvc_migøã
)(
uöt64_t
 
	m__unu£d1
, uöt64_à
	m__unu£d2
);

175 
öt32_t
 (*
svc_migøã_öfo
)(
uöt64_t
 *
	m__unu£d
);

176 } 
	t•d_pm_›s_t
;

181 
psci_vîsi⁄
();

182 
__psci_˝u_su•íd
(, , );

183 
__psci_˝u_off
();

184 
psci_afföôy_öfo
(, );

185 
psci_migøã
();

186 
psci_migøã_öfo_ty≥
();

187 
psci_migøã_öfo_up_˝u
();

188 
psci_sy°em_off
();

189 
psci_sy°em_ª£t
();

190 
psci_˝u_⁄
(,

193 
__dód2
 
psci_powî_down_wfi
();

194 
psci_aff_⁄_föish_íåy
();

195 
psci_aff_su•íd_föish_íåy
();

196 
psci_ªgi°î_•d_pm_hook
(c⁄° 
•d_pm_›s_t
 *);

197 
psci_gë_su•íd_°©eid
(
mpidr
);

198 
psci_gë_su•íd_afÊvl
(
mpidr
);

200 
uöt64_t
 
psci_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

201 
uöt64_t
 
x1
,

202 
uöt64_t
 
x2
,

203 
uöt64_t
 
x3
,

204 
uöt64_t
 
x4
,

205 *
cookõ
,

206 *
h™dÀ
,

207 
uöt64_t
 
Êags
);

210 
öt32_t
 
psci_£tup
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/services/sip_error.h

38 #i‚de‡
__SIP_ERROR_H__


39 
	#__SIP_ERROR_H__


	)

43 
	#SIP_SVC_E_SUCCESS
 0

	)

44 
	#SIP_SVC_E_NOT_SUPPORTED
 -1

	)

45 
	#SIP_SVC_E_INVALID_PARAMS
 -2

	)

46 
	#SIP_SVC_E_INVALID_R™ge
 -3

	)

47 
	#SIP_SVC_E_PERMISSION_DENY
 -4

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/services/sip_svc.h

38 #i‚de‡
__SIP_SVC_H__


39 
	#__SIP_SVC_H__


	)

49 
	#MTK_SIP_TBASE_HWUID_AARCH32
 0x82000000

	)

53 
	#MTK_SIP_BL_INIT_AARCH32
 0x82000100

	)

54 
	#MTK_SIP_BL_INIT_AARCH64
 0xC2000100

	)

58 
	#MTK_SIP_KERNEL_TMP_AARCH32
 0x82000200

	)

59 
	#MTK_SIP_KERNEL_TMP_AARCH64
 0xC2000200

	)

60 
	#MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH32
 0x82000201

	)

61 
	#MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH64
 0xC2000201

	)

62 
	#MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH32
 0x82000202

	)

63 
	#MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH64
 0xC2000202

	)

64 
	#MTK_SIP_KERNEL_L2_SHARING_AARCH32
 0x82000203

	)

65 
	#MTK_SIP_KERNEL_L2_SHARING_AARCH64
 0xC2000203

	)

66 
	#MTK_SIP_KERNEL_WDT_AARCH32
 0x82000204

	)

67 
	#MTK_SIP_KERNEL_WDT_AARCH64
 0xC2000204

	)

68 
	#MTK_SIP_KERNEL_GIC_DUMP_AARCH32
 0x82000205

	)

69 
	#MTK_SIP_KERNEL_GIC_DUMP_AARCH64
 0xC2000205

	)

77 
	#MTK_SIP_SVC_NUM_CALLS
 2

	)

83 
	#MTK_SIP_SVC_CALL_COUNT
 0x8200ff00

	)

84 
	#MTK_SIP_SVC_UID
 0x8200ff01

	)

86 
	#MTK_SIP_SVC_VERSION
 0x8200ff03

	)

90 
	#MTK_SIP_VERSION_MAJOR
 0x0

	)

91 
	#MTK_SIP_VERSION_MINOR
 0x1

	)

96 
	#SIP_FID_MASK
 0xf000u

	)

97 
	#SIP_FID_VALUE
 0u

	)

98 
	#is_sù_fid
(
_fid
) \

99 (((
_fid
Ë& 
SIP_FID_MASK
Ë=
SIP_FID_VALUE
)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/services/std_svc.h

31 #i‚de‡
__STD_SVC_H__


32 
	#__STD_SVC_H__


	)

36 
	#ARM_STD_SVC_CALL_COUNT
 0x8400ff00

	)

37 
	#ARM_STD_SVC_UID
 0x8400ff01

	)

39 
	#ARM_STD_SVC_VERSION
 0x8400ff03

	)

42 
	#STD_SVC_VERSION_MAJOR
 0x0

	)

43 
	#STD_SVC_VERSION_MINOR
 0x1

	)

46 
	#PSCI_FID_MASK
 0xf„0u

	)

47 
	#PSCI_FID_VALUE
 0u

	)

48 
	#is_psci_fid
(
_fid
) \

49 (((
_fid
Ë& 
PSCI_FID_MASK
Ë=
PSCI_FID_VALUE
)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/services/tbase.h

12 #i‚de‡
__TBASE_H__


13 
	#__TBASE_H__


	)

15 
	~<bl_comm⁄.h
>

16 
	~<tba£_∂©f‹m.h
>

19 
	#TBASE_MONITOR_FLAGS_DEFAULT
 (0)

	)

22 
	#TBASE_MONITOR_CALL_REGS_MIN
 4

	)

23 
	#TBASE_NWD_REGISTERS_MIN
 8

	)

25 
	#TBASE_MONITOR_INTERFACE_VERSION
 1

	)

28 #i‚de‡
__ASSEMBLY__


31 
uöt64_t
 
	mx1
;

32 
uöt64_t
 
	mx2
;

33 
uöt64_t
 
	mx3
;

34 
uöt64_t
 
	mx4
;

35 } 
	tfc_ª•⁄£_t
;

43 
uöt64_t
 
tba£_m⁄ô‹_Á°ˇŒ
(
uöt32_t
 
smc_fid
,

44 
uöt64_t
 
x1
,

45 
uöt64_t
 
x2
,

46 
uöt64_t
 
x3
,

47 
uöt64_t
 
x4
,

48 
fc_ª•⁄£_t
 *
ª•
 );

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl32/payloads/mtee.h

31 #i‚de‡
__MTEE_H__


32 
	#__MTEE_H__


	)

38 
	#MTEE_ENTRY_DONE
 0xf2000000

	)

39 
	#MTEE_ON_DONE
 0xf2000001

	)

40 
	#MTEE_OFF_DONE
 0xf2000002

	)

41 
	#MTEE_SUSPEND_DONE
 0xf2000003

	)

42 
	#MTEE_RESUME_DONE
 0xf2000004

	)

43 
	#MTEE_PREEMPTED
 0xf2000005

	)

50 
	#MTEE_HANDLED_S_EL1_FIQ
 0xf2000006

	)

51 
	#MTEE_EL3_FIQ
 0xf2000007

	)

52 
	#MTEE_HANDLE_FIQ_AND_RETURN
 0xf2000009

	)

59 
	#MTEE_SERVICE
 0x8

	)

60 
	#MTEE_EARLY_SERVICE
 0x9

	)

66 
	#MTEE_STD_FID
(
fid
Ë((fidË| 0x72000000 | (0 << 31))

	)

67 
	#MTEE_FAST_FID
(
fid
Ë((fidË| 0x72000000 | (1 << 31))

	)

68 
	#MTEE32_STD_FID
(
fid
Ë((fidË| 0x32000000 | (0 << 31))

	)

69 
	#MTEE32_FAST_FID
(
fid
Ë((fidË| 0x32000000 | (1 << 31))

	)

75 
	#MTEE_BARE_FID
(
fid
Ë((fidË& 0xffff)

	)

81 
	#MTEE_NUM_FID
 0x2

	)

84 
	#MTEE_VERSION_MAJOR
 0x0

	)

85 
	#MTEE_VERSION_MINOR
 0x1

	)

91 
	#TOS_CALL_COUNT
 0xbf00ff00

	)

92 
	#TOS_UID
 0xbf00ff01

	)

94 
	#TOS_CALL_VERSION
 0xbf00ff03

	)

97 
	#MTEE_ARGS_SIZE
 0x40

	)

98 
	#MTEE_ARG0
 0x0

	)

99 
	#MTEE_ARG1
 0x8

	)

100 
	#MTEE_ARG2
 0x10

	)

101 
	#MTEE_ARG3
 0x18

	)

102 
	#MTEE_ARG4
 0x20

	)

103 
	#MTEE_ARG5
 0x28

	)

104 
	#MTEE_ARG6
 0x30

	)

105 
	#MTEE_ARG7
 0x38

	)

106 
	#MTEE_ARGS_END
 0x40

	)

108 #i‚de‡
__ASSEMBLY__


110 
	~<ˇs£π.h
>

111 
	~<∂©f‹m_def.h
>

112 
	~<•ölock.h
>

113 
	~<°döt.h
>

115 
uöt32_t
 
	tmãe_ve˘‹_i¢_t
;

117 
	smãe_ve˘‹s
 {

118 
mãe_ve˘‹_i¢_t
 
	m°d_smc_íåy
;

119 
mãe_ve˘‹_i¢_t
 
	mÁ°_smc_íåy
;

120 
mãe_ve˘‹_i¢_t
 
	m˝u_⁄_íåy
;

121 
mãe_ve˘‹_i¢_t
 
	m˝u_off_íåy
;

122 
mãe_ve˘‹_i¢_t
 
	m˝u_ªsume_íåy
;

123 
mãe_ve˘‹_i¢_t
 
	m˝u_su•íd_íåy
;

124 
mãe_ve˘‹_i¢_t
 
	mfiq_íåy
;

125 
mãe_ve˘‹_i¢_t
 
	móæy_smc_íåy
;

126 } 
	tmãe_ve˘‹s_t
;

128 
	smãe_¨gs
 {

129 
uöt64_t
 
	m_ªgs
[
MTEE_ARGS_END
 >> 3];

130 } 
	t__Æig√d
(
	tCACHE_WRITEBACK_GRANULE
Ë
	tmãe_¨gs_t
;

133 
	#ªad_•_¨g
(
¨gs
, 
off£t
Ë(◊rgs)->
_ªgs
[off£à>> 3])

	)

134 
	#wrôe_•_¨g
(
¨gs
, 
off£t
, 
vÆ
Ë((◊rgs)->
_ªgs
[offset >> 3]) \

135 
vÆ
)

	)

141 
	`CASSERT
(
MTEE_ARGS_SIZE
 =(
mãe_¨gs_t
), 
as£π_•_¨gs_size_mism©ch
);

143 
	`mãe_gë_magic
(
uöt64_t
 
¨gs
[4]);

145 
mãe_¨gs_t
 *
	`mãe_˝u_ªsume_maö
(
uöt64_t
 
¨g0
,

146 
uöt64_t
 
¨g1
,

147 
uöt64_t
 
¨g2
,

148 
uöt64_t
 
¨g3
,

149 
uöt64_t
 
¨g4
,

150 
uöt64_t
 
¨g5
,

151 
uöt64_t
 
¨g6
,

152 
uöt64_t
 
¨g7
);

153 
mãe_¨gs_t
 *
	`mãe_˝u_su•íd_maö
(
uöt64_t
 
¨g0
,

154 
uöt64_t
 
¨g1
,

155 
uöt64_t
 
¨g2
,

156 
uöt64_t
 
¨g3
,

157 
uöt64_t
 
¨g4
,

158 
uöt64_t
 
¨g5
,

159 
uöt64_t
 
¨g6
,

160 
uöt64_t
 
¨g7
);

161 
mãe_¨gs_t
 *
	`mãe_˝u_⁄_maö
();

162 
mãe_¨gs_t
 *
	`mãe_˝u_off_maö
(
uöt64_t
 
¨g0
,

163 
uöt64_t
 
¨g1
,

164 
uöt64_t
 
¨g2
,

165 
uöt64_t
 
¨g3
,

166 
uöt64_t
 
¨g4
,

167 
uöt64_t
 
¨g5
,

168 
uöt64_t
 
¨g6
,

169 
uöt64_t
 
¨g7
);

172 
	`mãe_gíîic_timî_°¨t
();

173 
	`mãe_gíîic_timî_h™dÀr
();

174 
	`mãe_gíîic_timî_°›
();

175 
	`mãe_gíîic_timî_ßve
();

176 
	`mãe_gíîic_timî_ª°‹e
();

179 
	`mãe_upd©e_sync_fiq_°©s
(
uöt32_t
 
ty≥
, 
uöt64_t
 
ñr_ñ3
);

182 
mãe_ve˘‹s_t
 *
mãe_ve˘‹s
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl32/payloads/tsp.h

31 #i‚de‡
__TSP_H__


32 
	#__TSP_H__


	)

38 
	#TSP_ENTRY_DONE
 0xf2000000

	)

39 
	#TSP_ON_DONE
 0xf2000001

	)

40 
	#TSP_OFF_DONE
 0xf2000002

	)

41 
	#TSP_SUSPEND_DONE
 0xf2000003

	)

42 
	#TSP_RESUME_DONE
 0xf2000004

	)

43 
	#TSP_PREEMPTED
 0xf2000005

	)

50 
	#TSP_HANDLED_S_EL1_FIQ
 0xf2000006

	)

51 
	#TSP_EL3_FIQ
 0xf2000007

	)

54 
	#TSP_GET_ARGS
 0xf2001000

	)

60 
	#TSP_ADD
 0x2000

	)

61 
	#TSP_SUB
 0x2001

	)

62 
	#TSP_MUL
 0x2002

	)

63 
	#TSP_DIV
 0x2003

	)

64 
	#TSP_HANDLE_FIQ_AND_RETURN
 0x2004

	)

70 
	#TSP_STD_FID
(
fid
Ë((fidË| 0x72000000 | (0 << 31))

	)

71 
	#TSP_FAST_FID
(
fid
Ë((fidË| 0x72000000 | (1 << 31))

	)

74 
	#TSP_FID_RESUME
 
	`TSP_STD_FID
(0x3000)

	)

80 
	#TSP_BARE_FID
(
fid
Ë((fidË& 0xffff)

	)

86 
	#TSP_NUM_FID
 0x4

	)

89 
	#TSP_VERSION_MAJOR
 0x0

	)

90 
	#TSP_VERSION_MINOR
 0x1

	)

96 
	#TOS_CALL_COUNT
 0xbf00ff00

	)

97 
	#TOS_UID
 0xbf00ff01

	)

99 
	#TOS_CALL_VERSION
 0xbf00ff03

	)

102 
	#TSP_ARGS_SIZE
 0x40

	)

103 
	#TSP_ARG0
 0x0

	)

104 
	#TSP_ARG1
 0x8

	)

105 
	#TSP_ARG2
 0x10

	)

106 
	#TSP_ARG3
 0x18

	)

107 
	#TSP_ARG4
 0x20

	)

108 
	#TSP_ARG5
 0x28

	)

109 
	#TSP_ARG6
 0x30

	)

110 
	#TSP_ARG7
 0x38

	)

111 
	#TSP_ARGS_END
 0x40

	)

113 #i‚de‡
__ASSEMBLY__


115 
	~<ˇs£π.h
>

116 
	~<∂©f‹m_def.h
>

117 
	~<•ölock.h
>

118 
	~<°döt.h
>

120 
uöt32_t
 
	tt•_ve˘‹_i¢_t
;

122 
	st•_ve˘‹s
 {

123 
t•_ve˘‹_i¢_t
 
	m°d_smc_íåy
;

124 
t•_ve˘‹_i¢_t
 
	mÁ°_smc_íåy
;

125 
t•_ve˘‹_i¢_t
 
	m˝u_⁄_íåy
;

126 
t•_ve˘‹_i¢_t
 
	m˝u_off_íåy
;

127 
t•_ve˘‹_i¢_t
 
	m˝u_ªsume_íåy
;

128 
t•_ve˘‹_i¢_t
 
	m˝u_su•íd_íåy
;

129 
t•_ve˘‹_i¢_t
 
	mfiq_íåy
;

130 } 
	tt•_ve˘‹s_t
;

132 
	sw‹k_°©i°ics
 {

133 
uöt32_t
 
	mfiq_cou¡
;

134 
uöt32_t
 
	múq_cou¡
;

135 
uöt32_t
 
	msync_fiq_cou¡
;

136 
uöt32_t
 
	msync_fiq_ªt_cou¡
;

137 
uöt32_t
 
	msmc_cou¡
;

138 
uöt32_t
 
	mîë_cou¡
;

139 
uöt32_t
 
	m˝u_⁄_cou¡
;

140 
uöt32_t
 
	m˝u_off_cou¡
;

141 
uöt32_t
 
	m˝u_su•íd_cou¡
;

142 
uöt32_t
 
	m˝u_ªsume_cou¡
;

143 } 
	t__Æig√d
(
	tCACHE_WRITEBACK_GRANULE
Ë
	tw‹k_°©i°ics_t
;

145 
	st•_¨gs
 {

146 
uöt64_t
 
_ªgs
[
TSP_ARGS_END
 >> 3];

147 } 
	t__Æig√d
(
	tCACHE_WRITEBACK_GRANULE
Ë
	tt•_¨gs_t
;

150 
	#ªad_•_¨g
(
¨gs
, 
off£t
Ë(◊rgs)->
_ªgs
[off£à>> 3])

	)

151 
	#wrôe_•_¨g
(
¨gs
, 
off£t
, 
vÆ
Ë((◊rgs)->
_ªgs
[offset >> 3]) \

152 
vÆ
)

	)

158 
	`CASSERT
(
TSP_ARGS_SIZE
 =(
t•_¨gs_t
), 
as£π_•_¨gs_size_mism©ch
);

160 
	`t•_gë_magic
(
uöt64_t
 
¨gs
[4]);

162 
t•_¨gs_t
 *
	`t•_˝u_ªsume_maö
(
uöt64_t
 
¨g0
,

163 
uöt64_t
 
¨g1
,

164 
uöt64_t
 
¨g2
,

165 
uöt64_t
 
¨g3
,

166 
uöt64_t
 
¨g4
,

167 
uöt64_t
 
¨g5
,

168 
uöt64_t
 
¨g6
,

169 
uöt64_t
 
¨g7
);

170 
t•_¨gs_t
 *
	`t•_˝u_su•íd_maö
(
uöt64_t
 
¨g0
,

171 
uöt64_t
 
¨g1
,

172 
uöt64_t
 
¨g2
,

173 
uöt64_t
 
¨g3
,

174 
uöt64_t
 
¨g4
,

175 
uöt64_t
 
¨g5
,

176 
uöt64_t
 
¨g6
,

177 
uöt64_t
 
¨g7
);

178 
t•_¨gs_t
 *
	`t•_˝u_⁄_maö
();

179 
t•_¨gs_t
 *
	`t•_˝u_off_maö
(
uöt64_t
 
¨g0
,

180 
uöt64_t
 
¨g1
,

181 
uöt64_t
 
¨g2
,

182 
uöt64_t
 
¨g3
,

183 
uöt64_t
 
¨g4
,

184 
uöt64_t
 
¨g5
,

185 
uöt64_t
 
¨g6
,

186 
uöt64_t
 
¨g7
);

189 
	`t•_gíîic_timî_°¨t
();

190 
	`t•_gíîic_timî_h™dÀr
();

191 
	`t•_gíîic_timî_°›
();

192 
	`t•_gíîic_timî_ßve
();

193 
	`t•_gíîic_timî_ª°‹e
();

196 
	`t•_upd©e_sync_fiq_°©s
(
uöt32_t
 
ty≥
, 
uöt64_t
 
ñr_ñ3
);

199 
•ölock_t
 
c⁄sﬁe_lock
;

200 
w‹k_°©i°ics_t
 
t•_°©s
[
PLATFORM_CORE_COUNT
];

203 
t•_ve˘‹s_t
 
t•_ve˘‹_èbÀ
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/common/asm_macros.S

31 
	~<¨ch.h
>

34 .
ma¸o
 
func_¥ﬁogue


35 
°p
 
	gx29
, 
	gx30
, [
•
, #-0x10]!

36 
mov
 
	gx29
,
	g•


37 .
	gídm


39 .
ma¸o
 
func_ïûogue


40 
ldp
 
	gx29
, 
	gx30
, [
•
], #0
	gx10


41 .
	gídm


44 .
ma¸o
 
dˇche_löe_size
 
	gªg
, 
tmp


45 
	gmrs
 \
	gtmp
, 
˘r_ñ0


46 
	gubfx
 \
	gtmp
, \tmp, #16, #4

47 
	gmov
 \
	gªg
, #4

48 
	gl¶
 \
	gªg
, \ªg, \
	gtmp


49 .
	gídm


52 .
ma¸o
 
iˇche_löe_size
 
	gªg
, 
tmp


53 
	gmrs
 \
	gtmp
, 
˘r_ñ0


54 
	g™d
 \
	gtmp
, \tmp, #0
xf


55 
	gmov
 \
	gªg
, #4

56 
	gl¶
 \
	gªg
, \ªg, \
	gtmp


57 .
	gídm


60 .
ma¸o
 
smc_check
 
œbñ


61 
mrs
 
	gx0
, 
e§_ñ3


62 
ubfx
 
	gx0
, x0, #ESR_EC_SHIFT, #ESR_EC_LENGTH

63 
cmp
 
	gx0
, #EC_AARCH64_SMC

64 
	gb
.
√
 
	g$œbñ


65 .
	gídm


74 .
ma¸o
 
check_ve˘‹_size
 
	gsö˚


75 .i‡(. - \
	gsö˚
) > (32 * 4)

76 .
	gîr‹
 "VectorÉxceeds 32 instructions"

77 .
	gídif


78 .
	gídm


85 .
ma¸o
 
func
 
	g_«me


86 .
	g£˘i⁄
 .
	gãxt
.\
	g_«me
, "ax"

87 .
	gty≥
 \
	g_«me
, %
	gfun˘i⁄


88 \
	g_«me
:

89 .
ídm


99 .
ma¸o
 
waô_f‹_íåypoöt


100 
waô_f‹_íåypoöt
:

101 
mrs
 
x0
, 
mpidr_ñ1


102 
bl
 
∂©f‹m_gë_íåypoöt


103 
cbnz
 
	gx0
, 
do_w¨m_boŸ


104 
mrs
 
	gx0
, 
mpidr_ñ1


105 
bl
 
∂©f‹m_is_¥im¨y_˝u


106 
cbnz
 
	gx0
, 
do_cﬁd_boŸ


113 
bl
 
∂©_£c⁄d¨y_cﬁd_boŸ_£tup


114 
b
 
waô_f‹_íåypoöt


116 
	gdo_w¨m_boŸ
:

121 
bÃ
 
x0


123 
do_cﬁd_boŸ
:

124 .
ídm


130 
	#STACK_ALIGN
 6

	)

132 .
ma¸o
 
de˛¨e_°ack
 
_«me
, 
	g_£˘i⁄
, 
	g_size
, 
	g_cou¡


133 .i‡((\
	g_size
 & ((1 << 
	gSTACK_ALIGN
) - 1)) <> 0)

134 .
	gîr‹
 "Stack sizeÇot correctlyáligned"

135 .
	gídif


136 .
	g£˘i⁄
 \
	g_£˘i⁄
, "aw", %
	gnobôs


137 .
Æign
 
	gSTACK_ALIGN


138 \
	g_«me
:

139 .
•a˚
 ((\
_cou¡
Ë* (\
_size
)), 0

140 .
	gídm


150 .
ma¸o
 
gë_mp_°ack
 
	g_«me
, 
_size


151 
bl
 
∂©f‹m_gë_c‹e_pos


152 
ldr
 
	gx2
, =(\
_«me
 + \
_size
)

153 
mov
 
x1
, #\
_size


154 
madd
 
	gx0
, x0, 
	gx1
, 
	gx2


155 .
	gídm


162 .
ma¸o
 
gë_up_°ack
 
	g_«me
, 
_size


163 
ldr
 
	gx0
, =(\
_«me
 + \
_size
)

164 .
ídm


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/common/bl_common.h

31 #i‚de‡
__BL_COMMON_H__


32 
	#__BL_COMMON_H__


	)

34 
	#SECURE
 0x0

	)

35 
	#NON_SECURE
 0x1

	)

36 
	#PARAM_EP_SECURITY_MASK
 0x1

	)

38 
	#UP
 1

	)

39 
	#DOWN
 0

	)

48 
	#TOP_LOAD
 0x1

	)

49 
	#BOT_LOAD
 !
TOP_LOAD


	)

50 
	#LOAD_MASK
 (1 << 0)

	)

58 
	#RUN_IMAGE
 0xC0000000

	)

64 
	#ENTRY_POINT_INFO_PC_OFFSET
 0x08

	)

65 
	#ENTRY_POINT_INFO_ARGS_OFFSET
 0x18

	)

67 
	#GET_SECURITY_STATE
(
x
Ë(x & 
PARAM_EP_SECURITY_MASK
)

	)

68 
	#SET_SECURITY_STATE
(
x
, 
£curôy
) \

69 ((
x
Ë((xË& ~
PARAM_EP_SECURITY_MASK
Ë| (
£curôy
))

	)

71 
	#PARAM_EP
 0x01

	)

72 
	#PARAM_IMAGE_BINARY
 0x02

	)

73 
	#PARAM_BL31
 0x03

	)

75 
	#VERSION_1
 0x01

	)

77 
	#SET_PARAM_HEAD
(
_p
, 
_ty≥
, 
_vî
, 
_©å
) do { \

78 (
_p
)->
h
.
ty≥
 = (
uöt8_t
)(
_ty≥
); \

79 (
_p
)->
h
.
vîsi⁄
 = (
uöt8_t
)(
_vî
); \

80 (
_p
)->
h
.
size
 = (
uöt16_t
)(*_p); \

81 (
_p
)->
h
.
©å
 = (
uöt32_t
)(
_©å
) ; \

82 } 0)

	)

84 #i‚de‡
__ASSEMBLY__


85 
	~<cdefs.h
>

86 
	~<ˇs£π.h
>

87 
	~<°döt.h
>

93 
	smemöfo
 {

94 
	mtŸÆ_ba£
;

95 
	mtŸÆ_size
;

96 
	m‰ì_ba£
;

97 
	m‰ì_size
;

98 
	m©å
;

99 
	m√xt
;

100 } 
	tmemöfo_t
;

102 
	sØpcs64_∑øms
 {

103 
	m¨g0
;

104 
	m¨g1
;

105 
	m¨g2
;

106 
	m¨g3
;

107 
	m¨g4
;

108 
	m¨g5
;

109 
	m¨g6
;

110 
	m¨g7
;

111 } 
	tØpcs64_∑øms_t
;

117 
	s∑øm_hódî
 {

118 
uöt8_t
 
	mty≥
;

119 
uöt8_t
 
	mvîsi⁄
;

120 
uöt16_t
 
	msize
;

121 
uöt32_t
 
	m©å
;

122 } 
	t∑øm_hódî_t
;

132 
	síåy_poöt_öfo
 {

133 
∑øm_hódî_t
 
	mh
;

134 
uöçå_t
 
	mpc
;

135 
uöt32_t
 
	m•§
;

136 
Øpcs64_∑øms_t
 
	m¨gs
;

137 } 
	tíåy_poöt_öfo_t
;

146 
	simage_öfo
 {

147 
∑øm_hódî_t
 
	mh
;

148 
uöçå_t
 
	mimage_ba£
;

149 
uöt32_t
 
	mimage_size
;

150 } 
	timage_öfo_t
;

166 
	sbl31_∑øms
 {

167 
∑øm_hódî_t
 
	mh
;

168 
image_öfo_t
 *
	mbl31_image_öfo
;

169 
íåy_poöt_öfo_t
 *
	mbl32_ï_öfo
;

170 
image_öfo_t
 *
	mbl32_image_öfo
;

171 
íåy_poöt_öfo_t
 *
	mbl33_ï_öfo
;

172 
image_öfo_t
 *
	mbl33_image_öfo
;

173 } 
	tbl31_∑øms_t
;

181 
CASSERT
(
ENTRY_POINT_INFO_PC_OFFSET
 ==

182 
__buûtö_off£tof
(
íåy_poöt_öfo_t
, 
pc
), \

183 
as£π_BL31_pc_off£t_mism©ch
);

185 
CASSERT
(
ENTRY_POINT_INFO_ARGS_OFFSET
 == \

186 
__buûtö_off£tof
(
íåy_poöt_öfo_t
, 
¨gs
), \

187 
as£π_BL31_¨gs_off£t_mism©ch
);

189 
CASSERT
(() ==

190 
__buûtö_off£tof
(
íåy_poöt_öfo_t
, 
•§
) - \

191 
__buûtö_off£tof
(
íåy_poöt_öfo_t
, 
pc
), \

192 
as£π_íåypoöt_™d_•§_should_be_adja˚¡
);

197 
∑ge_Æign
(, );

198 
ch™ge_£curôy_°©e
();

199 
image_size
(const *);

200 
lﬂd_image
(
memöfo_t
 *,

204 
image_öfo_t
 *,

205 
íåy_poöt_öfo_t
 *);

206 c⁄° 
buûd_mesßge
[];

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/common/debug.h

31 #i‚de‡
__DEBUG_H__


32 
	#__DEBUG_H__


	)

34 
	~<°dio.h
>

45 #i‡
DEBUG


46 
	#INFO
(...Ë
	`¥ötf
("INFO: " 
__VA_ARGS__
)

	)

47 
	#WARN
(...Ë
	`¥ötf
("WARN: " 
__VA_ARGS__
)

	)

49 
	#INFO
(...)

	)

50 
	#WARN
(...)

	)

53 
	#ERROR
(...Ë
	`¥ötf
("ERROR: " 
__VA_ARGS__
)

	)

59 #i‡
DEBUG


60 
__dód2
 
do_∑nic
(c⁄° *
fûe
, 
löe
);

61 
	#∑nic
(Ë
	`do_∑nic
(
__FILE__
, 
__LINE__
)

	)

64 
__dód2
 
do_∑nic
();

65 
	#∑nic
(Ë
	`do_∑nic
()

	)

69 
¥öt_°rög_vÆue
(*
s
, *
mem
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/common/firmware_image_package.h

31 #i‚de‡
__FIRMWARE_IMAGE_PACKAGE_H__


32 
	#__FIRMWARE_IMAGE_PACKAGE_H__


	)

34 
	~<°döt.h
>

35 
	~<uuid.h
>

38 
	#TOC_HEADER_NAME
 0xAA640001

	)

42 
	#UUID_TRUSTED_BOOT_FIRMWARE_BL2
 \

43 {0x0becf95f, 0x224d, 0x4d3e, 0xa5, 0x44, {0xc3, 0x9d, 0x81, 0xc7, 0x3f, 0x0a} }

	)

44 
	#UUID_SCP_FIRMWARE_BL30
 \

45 {0x3dfd6697, 0xbe89, 0x49e8, 0x´, 0x5d, {0x78, 0xa1, 0x40, 0x60, 0x82, 0x13} }

	)

46 
	#UUID_EL3_RUNTIME_FIRMWARE_BL31
 \

47 {0x6d08d447, 0x„4c, 0x4698, 0x9b, 0x95, {0x29, 0x50, 0xcb, 0xbd, 0x5a, 0x00} }

	)

48 
	#UUID_SECURE_PAYLOAD_BL32
 \

49 {0x89e1d005, 0xdc53, 0x4713, 0x8d, 0x2b, {0x50, 0x0a, 0x4b, 0x7a, 0x3e, 0x38} }

	)

50 
	#UUID_NON_TRUSTED_FIRMWARE_BL33
 \

51 {0xa7ìd0d6, 0xófc, 0x4bd5, 0x97, 0x82, {0x99, 0x34, 0xf2, 0x34, 0xb6, 0xe4} }

	)

53 
	sfù_toc_hódî
 {

54 
uöt32_t
 
	m«me
;

55 
uöt32_t
 
	m£rül_numbî
;

56 
uöt64_t
 
	mÊags
;

57 } 
	tfù_toc_hódî_t
;

59 
	sfù_toc_íåy
 {

60 
uuid_t
 
	muuid
;

61 
uöt64_t
 
	moff£t_addªss
;

62 
uöt64_t
 
	msize
;

63 
uöt64_t
 
	mÊags
;

64 } 
	tfù_toc_íåy_t
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/arm/cci400.h

31 #i‚de‡
__CCI_400_H__


32 
	#__CCI_400_H__


	)

35 
	#SLAVE_IFACE4_OFFSET
 0x5000

	)

36 
	#SLAVE_IFACE3_OFFSET
 0x4000

	)

37 
	#SLAVE_IFACE2_OFFSET
 0x3000

	)

38 
	#SLAVE_IFACE1_OFFSET
 0x2000

	)

39 
	#SLAVE_IFACE0_OFFSET
 0x1000

	)

40 
	#SLAVE_IFACE_OFFSET
(
ödex
Ë
SLAVE_IFACE0_OFFSET
 + (0x1000 * index)

	)

43 
	#CTRL_OVERRIDE_REG
 0x0

	)

44 
	#SPEC_CTRL_REG
 0x4

	)

45 
	#SECURE_ACCESS_REG
 0x8

	)

46 
	#STATUS_REG
 0xc

	)

47 
	#IMPRECISE_ERR_REG
 0x10

	)

48 
	#PERFMON_CTRL_REG
 0x100

	)

51 
	#SNOOP_CTRL_REG
 0x0

	)

52 
	#SH_OVERRIDE_REG
 0x4

	)

53 
	#READ_CHNL_QOS_VAL_OVERRIDE_REG
 0x100

	)

54 
	#WRITE_CHNL_QOS_VAL_OVERRIDE_REG
 0x104

	)

55 
	#QOS_CTRL_REG
 0x10c

	)

56 
	#MAX_OT_REG
 0x110

	)

57 
	#TARGET_LATENCY_REG
 0x130

	)

58 
	#LATENCY_REGULATION_REG
 0x134

	)

59 
	#QOS_RANGE_REG
 0x138

	)

62 
	#DVM_EN_BIT
 (1 << 1)

	)

63 
	#SNOOP_EN_BIT
 (1 << 0)

	)

66 
	#CHANGE_PENDING_BIT
 (1 << 0)

	)

69 
cci_íabÀ_cohîícy
(
mpidr
);

70 
cci_dißbÀ_cohîícy
(
mpidr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/arm/gic_v2.h

31 #i‚de‡
__GIC_V2_H__


32 
	#__GIC_V2_H__


	)

35 
	#GIC400_NUM_SPIS
 480

	)

36 
	#MAX_PPIS
 14

	)

37 
	#MAX_SGIS
 16

	)

39 
	#GRP0
 0

	)

40 
	#GRP1
 1

	)

41 
	#GIC_PRI_MASK
 0xff

	)

42 
	#GIC_HIGHEST_SEC_PRIORITY
 0

	)

43 
	#GIC_LOWEST_SEC_PRIORITY
 127

	)

44 
	#GIC_HIGHEST_NS_PRIORITY
 128

	)

45 
	#GIC_LOWEST_NS_PRIORITY
 254

	)

46 
	#GIC_SPURIOUS_INTERRUPT
 1023

	)

48 
	#ENABLE_GRP0
 (1 << 0)

	)

49 
	#ENABLE_GRP1
 (1 << 1)

	)

52 
	#GICD_CTLR
 0x0

	)

53 
	#GICD_TYPER
 0x4

	)

54 
	#GICD_IGROUPR
 0x80

	)

55 
	#GICD_ISENABLER
 0x100

	)

56 
	#GICD_ICENABLER
 0x180

	)

57 
	#GICD_ISPENDR
 0x200

	)

58 
	#GICD_ICPENDR
 0x280

	)

59 
	#GICD_ISACTIVER
 0x300

	)

60 
	#GICD_ICACTIVER
 0x380

	)

61 
	#GICD_IPRIORITYR
 0x400

	)

62 
	#GICD_ITARGETSR
 0x800

	)

63 
	#GICD_ICFGR
 0xC00

	)

64 
	#GICD_SGIR
 0xF00

	)

65 
	#GICD_CPENDSGIR
 0xF10

	)

66 
	#GICD_SPENDSGIR
 0xF20

	)

68 
	#IGROUPR_SHIFT
 5

	)

69 
	#ISENABLER_SHIFT
 5

	)

70 
	#ICENABLER_SHIFT
 
ISENABLER_SHIFT


	)

71 
	#ISPENDR_SHIFT
 5

	)

72 
	#ICPENDR_SHIFT
 
ISPENDR_SHIFT


	)

73 
	#ISACTIVER_SHIFT
 5

	)

74 
	#ICACTIVER_SHIFT
 
ISACTIVER_SHIFT


	)

75 
	#IPRIORITYR_SHIFT
 2

	)

76 
	#ITARGETSR_SHIFT
 2

	)

77 
	#ICFGR_SHIFT
 4

	)

78 
	#CPENDSGIR_SHIFT
 2

	)

79 
	#SPENDSGIR_SHIFT
 
CPENDSGIR_SHIFT


	)

82 
	#IT_LINES_NO_MASK
 0x1f

	)

85 
	#GICC_CTLR
 0x0

	)

86 
	#GICC_PMR
 0x4

	)

87 
	#GICC_BPR
 0x8

	)

88 
	#GICC_IAR
 0xC

	)

89 
	#GICC_EOIR
 0x10

	)

90 
	#GICC_RPR
 0x14

	)

91 
	#GICC_HPPIR
 0x18

	)

92 
	#GICC_AHPPIR
 0x28

	)

93 
	#GICC_IIDR
 0xFC

	)

94 
	#GICC_DIR
 0x1000

	)

95 
	#GICC_PRIODROP
 
GICC_EOIR


	)

98 
	#EOI_MODE_NS
 (1 << 10)

	)

99 
	#EOI_MODE_S
 (1 << 9)

	)

100 
	#IRQ_BYP_DIS_GRP1
 (1 << 8)

	)

101 
	#FIQ_BYP_DIS_GRP1
 (1 << 7)

	)

102 
	#IRQ_BYP_DIS_GRP0
 (1 << 6)

	)

103 
	#FIQ_BYP_DIS_GRP0
 (1 << 5)

	)

104 
	#CBPR
 (1 << 4)

	)

105 
	#FIQ_EN
 (1 << 3)

	)

106 
	#ACK_CTL
 (1 << 2)

	)

109 
	#GICC_IIDR_PID_SHIFT
 20

	)

110 
	#GICC_IIDR_ARCH_SHIFT
 16

	)

111 
	#GICC_IIDR_REV_SHIFT
 12

	)

112 
	#GICC_IIDR_IMP_SHIFT
 0

	)

114 
	#GICC_IIDR_PID_MASK
 0xfff

	)

115 
	#GICC_IIDR_ARCH_MASK
 0xf

	)

116 
	#GICC_IIDR_REV_MASK
 0xf

	)

117 
	#GICC_IIDR_IMP_MASK
 0xfff

	)

120 
	#GICH_CTL
 0x0

	)

121 
	#GICH_VTR
 0x4

	)

122 
	#GICH_ELRSR0
 0x30

	)

123 
	#GICH_ELRSR1
 0x34

	)

124 
	#GICH_APR0
 0xF0

	)

125 
	#GICH_LR_BASE
 0x100

	)

128 
	#GICV_CTL
 0x0

	)

129 
	#GICV_PRIMASK
 0x4

	)

130 
	#GICV_BP
 0x8

	)

131 
	#GICV_INTACK
 0xC

	)

132 
	#GICV_EOI
 0x10

	)

133 
	#GICV_RUNNINGPRI
 0x14

	)

134 
	#GICV_HIGHESTPEND
 0x18

	)

135 
	#GICV_DEACTIVATE
 0x1000

	)

137 #i‚de‡
__ASSEMBLY__


139 
	~<mmio.h
>

146 
gicd_ªad_igrou¥
(, );

147 
gicd_ªad_i£«bÀr
(, );

148 
gicd_ªad_i˚«bÀr
(, );

149 
gicd_ªad_i•ídr
(, );

150 
gicd_ªad_i˝ídr
(, );

151 
gicd_ªad_iß˘ivî
(, );

152 
gicd_ªad_iˇ˘ivî
(, );

153 
gicd_ªad_ùri‹ôyr
(, );

154 
gicd_ªad_ô¨gë§
(, );

155 
gicd_ªad_icfgr
(, );

156 
gicd_ªad_˝ídsgú
(, );

157 
gicd_ªad_•ídsgú
(, );

158 
gicd_wrôe_igrou¥
(, , );

159 
gicd_wrôe_i£«bÀr
(, , );

160 
gicd_wrôe_i˚«bÀr
(, , );

161 
gicd_wrôe_i•ídr
(, , );

162 
gicd_wrôe_i˝ídr
(, , );

163 
gicd_wrôe_iß˘ivî
(, , );

164 
gicd_wrôe_iˇ˘ivî
(, , );

165 
gicd_wrôe_ùri‹ôyr
(, , );

166 
gicd_wrôe_ô¨gë§
(, , );

167 
gicd_wrôe_icfgr
(, , );

168 
gicd_wrôe_˝ídsgú
(, , );

169 
gicd_wrôe_•ídsgú
(, , );

170 
gicd_gë_igrou¥
(, );

171 
gicd_£t_igrou¥
(, );

172 
gicd_˛r_igrou¥
(, );

173 
gicd_£t_i£«bÀr
(, );

174 
gicd_£t_i˚«bÀr
(, );

175 
gicd_£t_i•ídr
(, );

176 
gicd_£t_i˝ídr
(, );

177 
gicd_£t_iß˘ivî
(, );

178 
gicd_£t_iˇ˘ivî
(, );

179 
gicd_£t_ùri‹ôyr
(, , );

180 
gicd_£t_ô¨gë§
(, , );

187 
ölöe
 
	$gicd_ªad_˘Ã
(
ba£
)

189  
	`mmio_ªad_32
(
ba£
 + 
GICD_CTLR
);

190 
	}
}

192 
ölöe
 
	$gicd_ªad_ty≥r
(
ba£
)

194  
	`mmio_ªad_32
(
ba£
 + 
GICD_TYPER
);

195 
	}
}

197 
ölöe
 
	$gicd_ªad_sgú
(
ba£
)

199  
	`mmio_ªad_32
(
ba£
 + 
GICD_SGIR
);

200 
	}
}

207 
ölöe
 
	$gicd_wrôe_˘Ã
(
ba£
, 
vÆ
)

209 
	`mmio_wrôe_32
(
ba£
 + 
GICD_CTLR
, 
vÆ
);

210 
	}
}

212 
ölöe
 
	$gicd_wrôe_sgú
(
ba£
, 
vÆ
)

214 
	`mmio_wrôe_32
(
ba£
 + 
GICD_SGIR
, 
vÆ
);

215 
	}
}

222 
ölöe
 
	$gicc_ªad_˘Ã
(
ba£
)

224  
	`mmio_ªad_32
(
ba£
 + 
GICC_CTLR
);

225 
	}
}

227 
ölöe
 
	$gicc_ªad_pmr
(
ba£
)

229  
	`mmio_ªad_32
(
ba£
 + 
GICC_PMR
);

230 
	}
}

232 
ölöe
 
	$gicc_ªad_BPR
(
ba£
)

234  
	`mmio_ªad_32
(
ba£
 + 
GICC_BPR
);

235 
	}
}

237 
ölöe
 
	$gicc_ªad_IAR
(
ba£
)

239  
	`mmio_ªad_32
(
ba£
 + 
GICC_IAR
);

240 
	}
}

242 
ölöe
 
	$gicc_ªad_EOIR
(
ba£
)

244  
	`mmio_ªad_32
(
ba£
 + 
GICC_EOIR
);

245 
	}
}

247 
ölöe
 
	$gicc_ªad_hµú
(
ba£
)

249  
	`mmio_ªad_32
(
ba£
 + 
GICC_HPPIR
);

250 
	}
}

252 
ölöe
 
	$gicc_ªad_ahµú
(
ba£
)

254  
	`mmio_ªad_32
(
ba£
 + 
GICC_AHPPIR
);

255 
	}
}

257 
ölöe
 
	$gicc_ªad_dú
(
ba£
)

259  
	`mmio_ªad_32
(
ba£
 + 
GICC_DIR
);

260 
	}
}

262 
ölöe
 
	$gicc_ªad_iidr
(
ba£
)

264  
	`mmio_ªad_32
(
ba£
 + 
GICC_IIDR
);

265 
	}
}

272 
ölöe
 
	$gicc_wrôe_˘Ã
(
ba£
, 
vÆ
)

274 
	`mmio_wrôe_32
(
ba£
 + 
GICC_CTLR
, 
vÆ
);

275 
	}
}

277 
ölöe
 
	$gicc_wrôe_pmr
(
ba£
, 
vÆ
)

279 
	`mmio_wrôe_32
(
ba£
 + 
GICC_PMR
, 
vÆ
);

280 
	}
}

282 
ölöe
 
	$gicc_wrôe_BPR
(
ba£
, 
vÆ
)

284 
	`mmio_wrôe_32
(
ba£
 + 
GICC_BPR
, 
vÆ
);

285 
	}
}

288 
ölöe
 
	$gicc_wrôe_IAR
(
ba£
, 
vÆ
)

290 
	`mmio_wrôe_32
(
ba£
 + 
GICC_IAR
, 
vÆ
);

291 
	}
}

293 
ölöe
 
	$gicc_wrôe_EOIR
(
ba£
, 
vÆ
)

295 
	`mmio_wrôe_32
(
ba£
 + 
GICC_EOIR
, 
vÆ
);

296 
	}
}

298 
ölöe
 
	$gicc_wrôe_hµú
(
ba£
, 
vÆ
)

300 
	`mmio_wrôe_32
(
ba£
 + 
GICC_HPPIR
, 
vÆ
);

301 
	}
}

303 
ölöe
 
	$gicc_wrôe_dú
(
ba£
, 
vÆ
)

305 
	`mmio_wrôe_32
(
ba£
 + 
GICC_DIR
, 
vÆ
);

306 
	}
}

312 
uöt32_t
 
gicv2_öãºu±_ty≥_to_löe
(uöt32_à
˝uif_ba£
, uöt32_à
ty≥
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/arm/gic_v3.h

31 #i‚de‡
__GIC_V3_H__


32 
	#__GIC_V3_H__


	)

34 
	~<mmio.h
>

35 
	~<°döt.h
>

39 
	#GICR_PCPUBASE_SHIFT
 0x11

	)

40 
	#GICR_TYPER
 0x08

	)

41 
	#GICR_WAKER
 0x14

	)

44 
	#WAKER_CA
 (1UL << 2)

	)

45 
	#WAKER_PS
 (1UL << 1)

	)

48 
	#GICR_TYPER_AFF_SHIFT
 32

	)

49 
	#GICR_TYPER_AFF_MASK
 0xffffffff

	)

50 
	#GICR_TYPER_LAST
 (1UL << 4)

	)

53 
	#ICC_SRE_EN
 (1UL << 3)

	)

54 
	#ICC_SRE_SRE
 (1UL << 0)

	)

59 
	#GICV3_AFFLVL_MASK
 0xff

	)

60 
	#GICV3_AFF0_SHIFT
 0

	)

61 
	#GICV3_AFF1_SHIFT
 8

	)

62 
	#GICV3_AFF2_SHIFT
 16

	)

63 
	#GICV3_AFF3_SHIFT
 24

	)

64 
	#GICV3_AFFINITY_MASK
 0xffffffff

	)

69 
uöçå_t
 
gicv3_gë_rdi°
(uöçå_à
gi¸_ba£
, 
uöt64_t
 
mpidr
);

71 
ªad_icc_§e_ñ1
();

72 
ªad_icc_§e_ñ2
();

73 
ªad_icc_§e_ñ3
();

74 
wrôe_icc_§e_ñ1
();

75 
wrôe_icc_§e_ñ2
();

76 
wrôe_icc_§e_ñ3
();

77 
wrôe_icc_pmr_ñ1
();

82 
ölöe
 
uöt32_t
 
	$gi¸_ªad_wakî
(
uöçå_t
 
ba£
)

84  
	`mmio_ªad_32
(
ba£
 + 
GICR_WAKER
);

85 
	}
}

87 
ölöe
 
	$gi¸_wrôe_wakî
(
uöçå_t
 
ba£
, 
uöt32_t
 
vÆ
)

89 
	`mmio_wrôe_32
(
ba£
 + 
GICR_WAKER
, 
vÆ
);

90 
	}
}

92 
ölöe
 
uöt64_t
 
	$gi¸_ªad_ty≥r
(
uöçå_t
 
ba£
)

94  
	`mmio_ªad_64
(
ba£
 + 
GICR_TYPER
);

95 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/arm/pl011.h

31 #i‚de‡
__PL011_H__


32 
	#__PL011_H__


	)

34 
	~<mmio.h
>

38 
	#UARTDR
 0x000

	)

39 
	#UARTRSR
 0x004

	)

40 
	#UARTECR
 0x004

	)

41 
	#UARTFR
 0x018

	)

42 
	#UARTILPR
 0x020

	)

43 
	#UARTIBRD
 0x024

	)

44 
	#UARTFBRD
 0x028

	)

45 
	#UARTLCR_H
 0x02C

	)

46 
	#UARTCR
 0x030

	)

47 
	#UARTIFLS
 0x034

	)

48 
	#UARTIMSC
 0x038

	)

49 
	#UARTRIS
 0x03C

	)

50 
	#UARTMIS
 0x040

	)

51 
	#UARTICR
 0x044

	)

52 
	#UARTDMACR
 0x048

	)

55 
	#UART_DATA_ERROR_MASK
 0x0F00

	)

58 
	#UART_STATUS_ERROR_MASK
 0x0F

	)

61 
	#PL011_UARTFR_RI
 (1 << 8Ë

	)

62 
	#PL011_UARTFR_TXFE
 (1 << 7Ë

	)

63 
	#PL011_UARTFR_RXFF
 (1 << 6Ë

	)

64 
	#PL011_UARTFR_TXFF
 (1 << 5Ë

	)

65 
	#PL011_UARTFR_RXFE
 (1 << 4Ë

	)

66 
	#PL011_UARTFR_BUSY
 (1 << 3Ë

	)

67 
	#PL011_UARTFR_DCD
 (1 << 2Ë

	)

68 
	#PL011_UARTFR_DSR
 (1 << 1Ë

	)

69 
	#PL011_UARTFR_CTS
 (1 << 0Ë

	)

72 
	#PL011_UARTCR_CTSEN
 (1 << 15Ë

	)

73 
	#PL011_UARTCR_RTSEN
 (1 << 14Ë

	)

74 
	#PL011_UARTCR_RTS
 (1 << 11Ë

	)

75 
	#PL011_UARTCR_DTR
 (1 << 10Ë

	)

76 
	#PL011_UARTCR_RXE
 (1 << 9Ë

	)

77 
	#PL011_UARTCR_TXE
 (1 << 8Ë

	)

78 
	#PL011_UARTCR_LBE
 (1 << 7Ë

	)

79 
	#PL011_UARTCR_UARTEN
 (1 << 0Ë

	)

81 #i‡!
deföed
(
PL011_BAUDRATE
)

82 
	#PL011_BAUDRATE
 115200

	)

85 #i‡!
deföed
(
PL011_CLK_IN_HZ
)

86 
	#PL011_CLK_IN_HZ
 24000000

	)

89 #i‡!
deföed
(
PL011_LINE_CONTROL
)

91 
	#PL011_LINE_CONTROL
 (
PL011_UARTLCR_H_FEN
 | 
PL011_UARTLCR_H_WLEN_8
)

	)

95 
	#PL011_UARTLCR_H_SPS
 (1 << 7Ë

	)

96 
	#PL011_UARTLCR_H_WLEN_8
 (3 << 5)

	)

97 
	#PL011_UARTLCR_H_WLEN_7
 (2 << 5)

	)

98 
	#PL011_UARTLCR_H_WLEN_6
 (1 << 5)

	)

99 
	#PL011_UARTLCR_H_WLEN_5
 (0 << 5)

	)

100 
	#PL011_UARTLCR_H_FEN
 (1 << 4Ë

	)

101 
	#PL011_UARTLCR_H_STP2
 (1 << 3Ë

	)

102 
	#PL011_UARTLCR_H_EPS
 (1 << 2Ë

	)

103 
	#PL011_UARTLCR_H_PEN
 (1 << 1Ë

	)

104 
	#PL011_UARTLCR_H_BRK
 (1 << 0Ë

	)

110 
ölöe
 
	$∂011_wrôe_ibrd
(
ba£
, 
vÆ
)

112 
	`mmio_wrôe_32
(
ba£
 + 
UARTIBRD
, 
vÆ
);

113 
	}
}

115 
ölöe
 
	$∂011_wrôe_fbrd
(
ba£
, 
vÆ
)

117 
	`mmio_wrôe_32
(
ba£
 + 
UARTFBRD
, 
vÆ
);

118 
	}
}

120 
ölöe
 
	$∂011_wrôe_l¸_h
(
ba£
, 
vÆ
)

122 
	`mmio_wrôe_32
(
ba£
 + 
UARTLCR_H
, 
vÆ
);

123 
	}
}

125 
ölöe
 
	$∂011_wrôe_e¸
(
ba£
, 
vÆ
)

127 
	`mmio_wrôe_32
(
ba£
 + 
UARTECR
, 
vÆ
);

128 
	}
}

130 
ölöe
 
	$∂011_wrôe_¸
(
ba£
, 
vÆ
)

132 
	`mmio_wrôe_32
(
ba£
 + 
UARTCR
, 
vÆ
);

133 
	}
}

135 
ölöe
 
	$∂011_wrôe_dr
(
ba£
, 
vÆ
)

137 
	`mmio_wrôe_32
(
ba£
 + 
UARTDR
, 
vÆ
);

138 
	}
}

144 
ölöe
 
	$∂011_ªad_‰
(
ba£
)

146  
	`mmio_ªad_32
(
ba£
 + 
UARTFR
);

147 
	}
}

149 
ölöe
 
	$∂011_ªad_dr
(
ba£
)

151  
	`mmio_ªad_32
(
ba£
 + 
UARTDR
);

152 
	}
}

158 
∂011_£tbaudøã
(
ba£_addr
, 
baudøã
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/arm/tzc400.h

31 #i‚de‡
__TZC400_H__


32 
	#__TZC400_H__


	)

34 
	~<°döt.h
>

36 
	#BUILD_CONFIG_OFF
 0x000

	)

37 
	#ACTION_OFF
 0x004

	)

38 
	#GATE_KEEPER_OFF
 0x008

	)

39 
	#SPECULATION_CTRL_OFF
 0x00c

	)

40 
	#INT_STATUS
 0x010

	)

41 
	#INT_CLEAR
 0x014

	)

43 
	#FAIL_ADDRESS_LOW_OFF
 0x020

	)

44 
	#FAIL_ADDRESS_HIGH_OFF
 0x024

	)

45 
	#FAIL_CONTROL_OFF
 0x028

	)

46 
	#FAIL_ID
 0x02c

	)

48 
	#REGION_BASE_LOW_OFF
 0x100

	)

49 
	#REGION_BASE_HIGH_OFF
 0x104

	)

50 
	#REGION_TOP_LOW_OFF
 0x108

	)

51 
	#REGION_TOP_HIGH_OFF
 0x10c

	)

52 
	#REGION_ATTRIBUTES_OFF
 0x110

	)

53 
	#REGION_ID_ACCESS_OFF
 0x114

	)

54 
	#REGION_NUM_OFF
(
ªgi⁄
Ë(0x20 *Ñegi⁄)

	)

57 
	#PID0_OFF
 0x„0

	)

58 
	#PID1_OFF
 0x„4

	)

59 
	#PID2_OFF
 0x„8

	)

60 
	#PID3_OFF
 0x„c

	)

61 
	#PID4_OFF
 0xfd0

	)

62 
	#PID5_OFF
 0xfd4

	)

63 
	#PID6_OFF
 0xfd8

	)

64 
	#PID7_OFF
 0xfdc

	)

65 
	#CID0_OFF
 0xff0

	)

66 
	#CID1_OFF
 0xff4

	)

67 
	#CID2_OFF
 0xff8

	)

68 
	#CID3_OFF
 0xffc

	)

70 
	#BUILD_CONFIG_NF_SHIFT
 24

	)

71 
	#BUILD_CONFIG_NF_MASK
 0x3

	)

72 
	#BUILD_CONFIG_AW_SHIFT
 8

	)

73 
	#BUILD_CONFIG_AW_MASK
 0x3f

	)

74 
	#BUILD_CONFIG_NR_SHIFT
 0

	)

75 
	#BUILD_CONFIG_NR_MASK
 0x1f

	)

78 
	#ACTION_RV_SHIFT
 0

	)

79 
	#ACTION_RV_MASK
 0x3

	)

80 
	#ACTION_RV_LOWOK
 0x0

	)

81 
	#ACTION_RV_LOWERR
 0x1

	)

82 
	#ACTION_RV_HIGHOK
 0x2

	)

83 
	#ACTION_RV_HIGHERR
 0x3

	)

89 
	#GATE_KEEPER_OS_SHIFT
 16

	)

90 
	#GATE_KEEPER_OS_MASK
 0xf

	)

91 
	#GATE_KEEPER_OR_SHIFT
 0

	)

92 
	#GATE_KEEPER_OR_MASK
 0xf

	)

95 
	#SPECULATION_CTRL_WRITE_DISABLE
 (1 << 1)

	)

96 
	#SPECULATION_CTRL_READ_DISABLE
 (1 << 0)

	)

99 
	#INT_STATUS_OVERLAP_SHIFT
 16

	)

100 
	#INT_STATUS_OVERLAP_MASK
 0xf

	)

101 
	#INT_STATUS_OVERRUN_SHIFT
 8

	)

102 
	#INT_STATUS_OVERRUN_MASK
 0xf

	)

103 
	#INT_STATUS_STATUS_SHIFT
 0

	)

104 
	#INT_STATUS_STATUS_MASK
 0xf

	)

106 
	#INT_CLEAR_CLEAR_SHIFT
 0

	)

107 
	#INT_CLEAR_CLEAR_MASK
 0xf

	)

109 
	#FAIL_CONTROL_DIR_SHIFT
 (1 << 24)

	)

110 
	#FAIL_CONTROL_DIR_READ
 0x0

	)

111 
	#FAIL_CONTROL_DIR_WRITE
 0x1

	)

112 
	#FAIL_CONTROL_NS_SHIFT
 (1 << 21)

	)

113 
	#FAIL_CONTROL_NS_SECURE
 0x0

	)

114 
	#FAIL_CONTROL_NS_NONSECURE
 0x1

	)

115 
	#FAIL_CONTROL_PRIV_SHIFT
 (1 << 20)

	)

116 
	#FAIL_CONTROL_PRIV_PRIV
 0x0

	)

117 
	#FAIL_CONTROL_PRIV_UNPRIV
 0x1

	)

123 
	#FAIL_ID_VNET_SHIFT
 24

	)

124 
	#FAIL_ID_VNET_MASK
 0xf

	)

125 
	#FAIL_ID_ID_SHIFT
 0

	)

128 
	#REGION_ATTRIBUTES_SEC_SHIFT
 30

	)

129 
	#REGION_ATTRIBUTES_F_EN_SHIFT
 0

	)

130 
	#REGION_ATTRIBUTES_F_EN_MASK
 0xf

	)

132 
	#REGION_ID_ACCESS_NSAID_WR_EN_SHIFT
 16

	)

133 
	#REGION_ID_ACCESS_NSAID_RD_EN_SHIFT
 0

	)

134 
	#REGION_ID_ACCESS_NSAID_ID_MASK
 0xf

	)

138 
	#TZC_REGION_ACCESS_RD
(
id
) \

139 ((1 << (
id
 & 
REGION_ID_ACCESS_NSAID_ID_MASK
)) << \

140 
REGION_ID_ACCESS_NSAID_RD_EN_SHIFT
)

	)

141 
	#TZC_REGION_ACCESS_WR
(
id
) \

142 ((1 << (
id
 & 
REGION_ID_ACCESS_NSAID_ID_MASK
)) << \

143 
REGION_ID_ACCESS_NSAID_WR_EN_SHIFT
)

	)

144 
	#TZC_REGION_ACCESS_RDWR
(
id
) \

145 (
	`TZC_REGION_ACCESS_RD
(
id
Ë| 
	`TZC_REGION_ACCESS_WR
(id))

	)

148 
	#TZC400_COMPONENT_ID
 0xb105f00d

	)

167 
	mTZC_ACTION_NONE
 = 0,

168 
	mTZC_ACTION_ERR
 = 1,

169 
	mTZC_ACTION_INT
 = 2,

170 
	mTZC_ACTION_ERR_INT
 = (
TZC_ACTION_ERR
 | 
TZC_ACTION_INT
)

171 } 
	ttzc_a˘i⁄_t
;

178 
	mTZC_REGION_S_NONE
 = 0,

179 
	mTZC_REGION_S_RD
 = 1,

180 
	mTZC_REGION_S_WR
 = 2,

181 
	mTZC_REGION_S_RDWR
 = (
TZC_REGION_S_RD
 | 
TZC_REGION_S_WR
)

182 } 
	ttzc_ªgi⁄_©åibuãs_t
;

190 
	stzc_ö°™˚
 {

191 
uöt64_t
 
	mba£
;

192 
uöt32_t
 
	maid_width
;

193 
uöt8_t
 
	maddr_width
;

194 
uöt8_t
 
	mnum_fûãrs
;

195 
uöt8_t
 
	mnum_ªgi⁄s
;

196 } 
	ttzc_ö°™˚_t
 ;

198 
tzc_öô
(
tzc_ö°™˚_t
 *
c⁄åﬁÀr
);

199 
tzc_c⁄figuª_ªgi⁄
(c⁄° 
tzc_ö°™˚_t
 *
c⁄åﬁÀr
, 
uöt32_t
 
fûãrs
,

200 
uöt8_t
 
ªgi⁄
, 
uöt64_t
 
ªgi⁄_ba£
, uöt64_à
ªgi⁄_t›
,

201 
tzc_ªgi⁄_©åibuãs_t
 
£c_©å
, 
uöt32_t
 
ns_devi˚_ac˚ss
);

202 
tzc_íabÀ_fûãrs
(c⁄° 
tzc_ö°™˚_t
 *
c⁄åﬁÀr
);

203 
tzc_dißbÀ_fûãrs
(c⁄° 
tzc_ö°™˚_t
 *
c⁄åﬁÀr
);

204 
tzc_£t_a˘i⁄
(c⁄° 
tzc_ö°™˚_t
 *
c⁄åﬁÀr
, 
tzc_a˘i⁄_t
 
a˘i⁄
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/console.h

31 #i‚de‡
__CONSOLE_H__


32 
	#__CONSOLE_H__


	)

34 
c⁄sﬁe_öô
(
ba£_addr
);

35 
c⁄sﬁe_putc
(
c
);

36 
c⁄sﬁe_gëc
();

37 
£t_u¨t_Êag
();

38 
˛ór_u¨t_Êag
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/io_driver.h

31 #i‚de‡
__IO_DRIVER_H__


32 
	#__IO_DRIVER_H__


	)

34 
	~<io_°‹age.h
>

35 
	~<∂©f‹m_def.h
>

36 
	~<°döt.h
>

41 
	sio_ítôy
 {

42 
io_dev_öfo
 *
	mdev_h™dÀ
;

43 
uöçå_t
 
	möfo
;

44 } 
	tio_ítôy_t
;

49 
	sio_dev_öfo
 {

50 c⁄° 
io_dev_funcs
 *
	mfuncs
;

51 
uöçå_t
 
	möfo
;

52 } 
	tio_dev_öfo_t
;

56 
	sio_dev_c⁄√˘‹
 {

58 (*
	mdev_›í
)(c⁄° 
uöçå_t
 
	mdev_•ec
, 
io_dev_öfo_t
 **
	mdev_öfo
);

59 } 
	tio_dev_c⁄√˘‹_t
;

63 
	sio_dev_funcs
 {

64 
io_ty≥_t
 (*
ty≥
)();

65 (*
	m›í
)(
io_dev_öfo_t
 *
	mdev_öfo
, c⁄° 
uöçå_t
 
	m•ec
,

66 
io_ítôy_t
 *
	mítôy
);

67 (*
	m£ek
)(
io_ítôy_t
 *
	mítôy
, 
	mmode
, 
ssize_t
 
	moff£t
);

68 (*
	msize
)(
io_ítôy_t
 *
	mítôy
, 
size_t
 *
	mÀngth
);

69 (*
	mªad
)(
io_ítôy_t
 *
	mítôy
, 
uöçå_t
 
	mbuf„r
, 
size_t
 
	mÀngth
,

70 
size_t
 *
	mÀngth_ªad
);

71 (*
	mwrôe
)(
io_ítôy_t
 *
	mítôy
, c⁄° 
uöçå_t
 
	mbuf„r
,

72 
size_t
 
	mÀngth
, size_à*
	mÀngth_wrôãn
);

73 (*
	m˛o£
)(
io_ítôy_t
 *
	mítôy
);

74 (*
	mdev_öô
)(
io_dev_öfo_t
 *
	mdev_öfo
, c⁄° 
uöçå_t
 
	möô_∑øms
);

75 (*
	mdev_˛o£
)(
io_dev_öfo_t
 *
	mdev_öfo
);

76 } 
	tio_dev_funcs_t
;

81 
	sio_∂©_d©a
 {

82 c⁄° 
io_dev_öfo_t
 *
	mdevi˚s
[
MAX_IO_DEVICES
];

83 
	mdev_cou¡
;

84 } 
	tio_∂©_d©a_t
;

90 
io_öô
(
io_∂©_d©a_t
 *
d©a
);

93 
io_ªgi°î_devi˚
(c⁄° 
io_dev_öfo_t
 *
dev_öfo
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/io_fip.h

31 #i‚de‡
__IO_FIP_H__


32 
	#__IO_FIP_H__


	)

34 
	gio_dev_c⁄√˘‹
;

36 
ªgi°î_io_dev_fù
(c⁄° 
io_dev_c⁄√˘‹
 **
dev_c⁄
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/io_memmap.h

31 #i‚de‡
__IO_MEMMAP_H__


32 
	#__IO_MEMMAP_H__


	)

34 
	gio_dev_c⁄√˘‹
;

36 
ªgi°î_io_dev_memm≠
(c⁄° 
io_dev_c⁄√˘‹
 **
dev_c⁄
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/io_semihosting.h

31 #i‚de‡
__IO_SH_H__


32 
	#__IO_SH_H__


	)

34 
	gio_dev_c⁄√˘‹
;

36 
ªgi°î_io_dev_sh
(c⁄° 
io_dev_c⁄√˘‹
 **
dev_c⁄
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/aarch64/arch.h

31 #i‚de‡
__ARCH_H__


32 
	#__ARCH_H__


	)

38 
	#MIDR_PN_MASK
 0xfff

	)

39 
	#MIDR_PN_SHIFT
 0x4

	)

40 
	#MIDR_PN_AEM
 0xd0f

	)

41 
	#MIDR_PN_A57
 0xd07

	)

42 
	#MIDR_PN_A53
 0xd03

	)

47 
	#MPIDR_CPU_MASK
 
MPIDR_AFFLVL_MASK


	)

48 
	#MPIDR_CLUSTER_MASK
 
MPIDR_AFFLVL_MASK
 << 
MPIDR_AFFINITY_BITS


	)

49 
	#MPIDR_AFFINITY_BITS
 8

	)

50 
	#MPIDR_AFFLVL_MASK
 0xff

	)

51 
	#MPIDR_AFF0_SHIFT
 0

	)

52 
	#MPIDR_AFF1_SHIFT
 8

	)

53 
	#MPIDR_AFF2_SHIFT
 16

	)

54 
	#MPIDR_AFF3_SHIFT
 32

	)

55 
	#MPIDR_AFFINITY_MASK
 0xff00ffffff

	)

56 
	#MPIDR_AFFLVL_SHIFT
 3

	)

57 
	#MPIDR_AFFLVL0
 0

	)

58 
	#MPIDR_AFFLVL1
 1

	)

59 
	#MPIDR_AFFLVL2
 2

	)

60 
	#MPIDR_AFFLVL3
 3

	)

62 
	#MPIDR_MAX_AFFLVL
 2

	)

65 
	#FIRST_MPIDR
 0

	)

70 
	#CPUECTLR_EL1
 
S3_1_C15_C2_1


	)

75 
	#CNTCR_OFF
 0x000

	)

76 
	#CNTFID_OFF
 0x020

	)

78 
	#CNTCR_EN
 (1 << 0)

	)

79 
	#CNTCR_HDBG
 (1 << 1)

	)

80 
	#CNTCR_FCREQ
(
x
Ë((xË<< 8)

	)

86 
	#LOUIS_SHIFT
 21

	)

87 
	#LOC_SHIFT
 24

	)

88 
	#CLIDR_FIELD_WIDTH
 3

	)

91 
	#LEVEL_SHIFT
 1

	)

94 
	#DCISW
 0x0

	)

95 
	#DCCISW
 0x1

	)

96 
	#DCCSW
 0x2

	)

99 
	#ID_AA64PFR0_EL0_SHIFT
 0

	)

100 
	#ID_AA64PFR0_EL1_SHIFT
 4

	)

101 
	#ID_AA64PFR0_EL2_SHIFT
 8

	)

102 
	#ID_AA64PFR0_EL3_SHIFT
 12

	)

103 
	#ID_AA64PFR0_ELX_MASK
 0xf

	)

106 
	#ID_PFR1_VIRTEXT_SHIFT
 12

	)

107 
	#ID_PFR1_VIRTEXT_MASK
 0xf

	)

108 
	#GET_VIRT_EXT
(
id
Ë((id >> 
ID_PFR1_VIRTEXT_SHIFT
) \

109 & 
ID_PFR1_VIRTEXT_MASK
)

	)

112 
	#SCTLR_EL2_RES1
 ((1 << 29) | (1 << 28) | (1 << 23) | (1 << 22) | \

114 (1 << 4))

	)

116 
	#SCTLR_EL1_RES1
 ((1 << 29) | (1 << 28) | (1 << 23) | (1 << 22) | \

117 (1 << 11))

	)

118 
	#SCTLR_M_BIT
 (1 << 0)

	)

119 
	#SCTLR_A_BIT
 (1 << 1)

	)

120 
	#SCTLR_C_BIT
 (1 << 2)

	)

121 
	#SCTLR_SA_BIT
 (1 << 3)

	)

122 
	#SCTLR_B_BIT
 (1 << 7)

	)

123 
	#SCTLR_Z_BIT
 (1 << 11)

	)

124 
	#SCTLR_I_BIT
 (1 << 12)

	)

125 
	#SCTLR_WXN_BIT
 (1 << 19)

	)

126 
	#SCTLR_EXCEPTION_BITS
 (0x3 << 6)

	)

127 
	#SCTLR_EE_BIT
 (1 << 25)

	)

130 
	#CPUECTLR_SMP_BIT
 (1 << 6)

	)

133 
	#CPACR_EL1_FPEN
(
x
Ë(x << 20)

	)

134 
	#CPACR_EL1_FP_TRAP_EL0
 0x1

	)

135 
	#CPACR_EL1_FP_TRAP_ALL
 0x2

	)

136 
	#CPACR_EL1_FP_TRAP_NONE
 0x3

	)

139 
	#SCR_RES1_BITS
 ((1 << 4Ë| (1 << 5))

	)

140 
	#SCR_TWE_BIT
 (1 << 13)

	)

141 
	#SCR_TWI_BIT
 (1 << 12)

	)

142 
	#SCR_ST_BIT
 (1 << 11)

	)

143 
	#SCR_RW_BIT
 (1 << 10)

	)

144 
	#SCR_SIF_BIT
 (1 << 9)

	)

145 
	#SCR_HCE_BIT
 (1 << 8)

	)

146 
	#SCR_SMD_BIT
 (1 << 7)

	)

147 
	#SCR_EA_BIT
 (1 << 3)

	)

148 
	#SCR_FIQ_BIT
 (1 << 2)

	)

149 
	#SCR_IRQ_BIT
 (1 << 1)

	)

150 
	#SCR_NS_BIT
 (1 << 0)

	)

151 
	#SCR_VALID_BIT_MASK
 0x2f8f

	)

154 
	#HCR_RW_BIT
 (1uŒ << 31)

	)

155 
	#HCR_AMO_BIT
 (1 << 5)

	)

156 
	#HCR_IMO_BIT
 (1 << 4)

	)

157 
	#HCR_FMO_BIT
 (1 << 3)

	)

160 
	#EL1PCEN_BIT
 (1 << 1)

	)

161 
	#EL1PCTEN_BIT
 (1 << 0)

	)

164 
	#EL0PTEN_BIT
 (1 << 9)

	)

165 
	#EL0VTEN_BIT
 (1 << 8)

	)

166 
	#EL0PCTEN_BIT
 (1 << 0)

	)

167 
	#EL0VCTEN_BIT
 (1 << 1)

	)

170 
	#TCPAC_BIT
 (1 << 31)

	)

171 
	#TTA_BIT
 (1 << 20)

	)

172 
	#TFP_BIT
 (1 << 10)

	)

175 
	#DAIF_FIQ_BIT
 (1 << 0)

	)

176 
	#DAIF_IRQ_BIT
 (1 << 1)

	)

177 
	#DAIF_ABT_BIT
 (1 << 2)

	)

178 
	#DAIF_DBG_BIT
 (1 << 3)

	)

179 
	#SPSR_DAIF_SHIFT
 6

	)

180 
	#SPSR_DAIF_MASK
 0xf

	)

182 
	#SPSR_AIF_SHIFT
 6

	)

183 
	#SPSR_AIF_MASK
 0x7

	)

185 
	#SPSR_E_SHIFT
 9

	)

186 
	#SPSR_E_MASK
 0x1

	)

187 
	#SPSR_E_LITTLE
 0x0

	)

188 
	#SPSR_E_BIG
 0x1

	)

190 
	#SPSR_T_SHIFT
 5

	)

191 
	#SPSR_T_MASK
 0x1

	)

192 
	#SPSR_T_ARM
 0x0

	)

193 
	#SPSR_T_THUMB
 0x1

	)

195 
	#DISABLE_ALL_EXCEPTIONS
 \

196 (
DAIF_FIQ_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_ABT_BIT
 | 
DAIF_DBG_BIT
)

	)

202 
	#TCR_EL3_RES1
 ((1UL << 31Ë| (1UL << 23))

	)

204 
	#TCR_T0SZ_4GB
 32

	)

206 
	#TCR_RGN_INNER_NC
 (0x0 << 8)

	)

207 
	#TCR_RGN_INNER_WBA
 (0x1 << 8)

	)

208 
	#TCR_RGN_INNER_WT
 (0x2 << 8)

	)

209 
	#TCR_RGN_INNER_WBNA
 (0x3 << 8)

	)

211 
	#TCR_RGN_OUTER_NC
 (0x0 << 10)

	)

212 
	#TCR_RGN_OUTER_WBA
 (0x1 << 10)

	)

213 
	#TCR_RGN_OUTER_WT
 (0x2 << 10)

	)

214 
	#TCR_RGN_OUTER_WBNA
 (0x3 << 10)

	)

216 
	#TCR_SH_NON_SHAREABLE
 (0x0 << 12)

	)

217 
	#TCR_SH_OUTER_SHAREABLE
 (0x2 << 12)

	)

218 
	#TCR_SH_INNER_SHAREABLE
 (0x3 << 12)

	)

220 
	#MODE_SP_SHIFT
 0x0

	)

221 
	#MODE_SP_MASK
 0x1

	)

222 
	#MODE_SP_EL0
 0x0

	)

223 
	#MODE_SP_ELX
 0x1

	)

225 
	#MODE_RW_SHIFT
 0x4

	)

226 
	#MODE_RW_MASK
 0x1

	)

227 
	#MODE_RW_64
 0x0

	)

228 
	#MODE_RW_32
 0x1

	)

230 
	#MODE_EL_SHIFT
 0x2

	)

231 
	#MODE_EL_MASK
 0x3

	)

232 
	#MODE_EL3
 0x3

	)

233 
	#MODE_EL2
 0x2

	)

234 
	#MODE_EL1
 0x1

	)

235 
	#MODE_EL0
 0x0

	)

237 
	#MODE32_SHIFT
 0

	)

238 
	#MODE32_MASK
 0xf

	)

239 
	#MODE32_u§
 0x0

	)

240 
	#MODE32_fiq
 0x1

	)

241 
	#MODE32_úq
 0x2

	)

242 
	#MODE32_svc
 0x3

	)

243 
	#MODE32_m⁄
 0x6

	)

244 
	#MODE32_abt
 0x7

	)

245 
	#MODE32_hyp
 0xa

	)

246 
	#MODE32_und
 0xb

	)

247 
	#MODE32_sys
 0xf

	)

249 
	#GET_RW
(
mode
Ë(((modeË>> 
MODE_RW_SHIFT
Ë& 
MODE_RW_MASK
)

	)

250 
	#GET_EL
(
mode
Ë(((modeË>> 
MODE_EL_SHIFT
Ë& 
MODE_EL_MASK
)

	)

251 
	#GET_SP
(
mode
Ë(((modeË>> 
MODE_SP_SHIFT
Ë& 
MODE_SP_MASK
)

	)

252 
	#GET_M32
(
mode
Ë(((modeË>> 
MODE32_SHIFT
Ë& 
MODE32_MASK
)

	)

254 
	#SPSR_64
(
ñ
, 
•
, 
daif
) \

255 (
MODE_RW_64
 << 
MODE_RW_SHIFT
 | \

256 ((
ñ
Ë& 
MODE_EL_MASK
Ë<< 
MODE_EL_SHIFT
 | \

257 ((
•
Ë& 
MODE_SP_MASK
Ë<< 
MODE_SP_SHIFT
 | \

258 ((
daif
Ë& 
SPSR_DAIF_MASK
Ë<< 
SPSR_DAIF_SHIFT
)

	)

260 
	#SPSR_MODE32
(
mode
, 
iß
, 
ídün
, 
aif
) \

261 (
MODE_RW_32
 << 
MODE_RW_SHIFT
 | \

262 ((
mode
Ë& 
MODE32_MASK
Ë<< 
MODE32_SHIFT
 | \

263 ((
iß
Ë& 
SPSR_T_MASK
Ë<< 
SPSR_T_SHIFT
 | \

264 ((
ídün
Ë& 
SPSR_E_MASK
Ë<< 
SPSR_E_SHIFT
 | \

265 ((
aif
Ë& 
SPSR_AIF_MASK
Ë<< 
SPSR_AIF_SHIFT
)

	)

269 
	#CNTP_CTL_ENABLE_SHIFT
 0

	)

270 
	#CNTP_CTL_IMASK_SHIFT
 1

	)

271 
	#CNTP_CTL_ISTATUS_SHIFT
 2

	)

273 
	#CNTP_CTL_ENABLE_MASK
 1

	)

274 
	#CNTP_CTL_IMASK_MASK
 1

	)

275 
	#CNTP_CTL_ISTATUS_MASK
 1

	)

277 
	#gë_˙ç_˘l_íabÀ
(
x
Ë((x >> 
CNTP_CTL_ENABLE_SHIFT
) & \

278 
CNTP_CTL_ENABLE_MASK
)

	)

279 
	#gë_˙ç_˘l_imask
(
x
Ë((x >> 
CNTP_CTL_IMASK_SHIFT
) & \

280 
CNTP_CTL_IMASK_MASK
)

	)

281 
	#gë_˙ç_˘l_i°©us
(
x
Ë((x >> 
CNTP_CTL_ISTATUS_SHIFT
) & \

282 
CNTP_CTL_ISTATUS_MASK
)

	)

284 
	#£t_˙ç_˘l_íabÀ
(
x
Ë(x |1 << 
CNTP_CTL_ENABLE_SHIFT
)

	)

285 
	#£t_˙ç_˘l_imask
(
x
Ë(x |1 << 
CNTP_CTL_IMASK_SHIFT
)

	)

287 
	#˛r_˙ç_˘l_íabÀ
(
x
Ë(x &~(1 << 
CNTP_CTL_ENABLE_SHIFT
))

	)

288 
	#˛r_˙ç_˘l_imask
(
x
Ë(x &~(1 << 
CNTP_CTL_IMASK_SHIFT
))

	)

291 
	#NUM_2MB_IN_GB
 (1 << 9)

	)

292 
	#NUM_4K_IN_2MB
 (1 << 9)

	)

293 
	#NUM_GB_IN_4GB
 (1 << 2)

	)

295 
	#TWO_MB_SHIFT
 21

	)

296 
	#ONE_GB_SHIFT
 30

	)

297 
	#FOUR_KB_SHIFT
 12

	)

299 
	#ONE_GB_INDEX
(
x
Ë((xË>> 
ONE_GB_SHIFT
)

	)

300 
	#TWO_MB_INDEX
(
x
Ë((xË>> 
TWO_MB_SHIFT
)

	)

301 
	#FOUR_KB_INDEX
(
x
Ë((xË>> 
FOUR_KB_SHIFT
)

	)

303 
	#INVALID_DESC
 0x0

	)

304 
	#BLOCK_DESC
 0x1

	)

305 
	#TABLE_DESC
 0x3

	)

307 
	#FIRST_LEVEL_DESC_N
 
ONE_GB_SHIFT


	)

308 
	#SECOND_LEVEL_DESC_N
 
TWO_MB_SHIFT


	)

309 
	#THIRD_LEVEL_DESC_N
 
FOUR_KB_SHIFT


	)

311 
	#LEVEL1
 1

	)

312 
	#LEVEL2
 2

	)

313 
	#LEVEL3
 3

	)

315 
	#XN
 (1uŒ << 2)

	)

316 
	#PXN
 (1uŒ << 1)

	)

317 
	#CONT_HINT
 (1uŒ << 0)

	)

319 
	#UPPER_ATTRS
(
x
Ë(x & 0x7Ë<< 52

	)

320 
	#NON_GLOBAL
 (1 << 9)

	)

321 
	#ACCESS_FLAG
 (1 << 8)

	)

322 
	#NSH
 (0x0 << 6)

	)

323 
	#OSH
 (0x2 << 6)

	)

324 
	#ISH
 (0x3 << 6)

	)

326 
	#PAGE_SIZE_SHIFT
 
FOUR_KB_SHIFT


	)

327 
	#PAGE_SIZE
 (1 << 
PAGE_SIZE_SHIFT
)

	)

328 
	#PAGE_SIZE_MASK
 (
PAGE_SIZE
 - 1)

	)

329 
	#IS_PAGE_ALIGNED
(
addr
Ë((◊ddrË& 
PAGE_SIZE_MASK
Ë=0)

	)

331 
	#PAGE_SIZE_2MB_SHIFT
 
TWO_MB_SHIFT


	)

332 
	#PAGE_SIZE_2MB
 (1 << 
PAGE_SIZE_2MB_SHIFT
)

	)

333 
	#PAGE_SIZE_2MB_MASK
 (
PAGE_SIZE_2MB
 - 1)

	)

334 
	#IS_PAGE_2MB_ALIGNED
(
addr
Ë((◊ddrË& 
PAGE_SIZE_2MB_MASK
Ë=0)

	)

336 
	#XLAT_ENTRY_SIZE_SHIFT
 3

	)

337 
	#XLAT_ENTRY_SIZE
 (1 << 
XLAT_ENTRY_SIZE_SHIFT
)

	)

339 
	#XLAT_TABLE_SIZE_SHIFT
 
PAGE_SIZE_SHIFT


	)

340 
	#XLAT_TABLE_SIZE
 (1 << 
XLAT_TABLE_SIZE_SHIFT
)

	)

343 
	#XLAT_TABLE_ENTRIES_SHIFT
 (
XLAT_TABLE_SIZE_SHIFT
 - 
XLAT_ENTRY_SIZE_SHIFT
)

	)

344 
	#XLAT_TABLE_ENTRIES
 (1 << 
XLAT_TABLE_ENTRIES_SHIFT
)

	)

345 
	#XLAT_TABLE_ENTRIES_MASK
 (
XLAT_TABLE_ENTRIES
 - 1)

	)

348 
	#L3_XLAT_ADDRESS_SHIFT
 
PAGE_SIZE_SHIFT


	)

349 
	#L2_XLAT_ADDRESS_SHIFT
 (
L3_XLAT_ADDRESS_SHIFT
 + 
XLAT_TABLE_ENTRIES_SHIFT
)

	)

350 
	#L1_XLAT_ADDRESS_SHIFT
 (
L2_XLAT_ADDRESS_SHIFT
 + 
XLAT_TABLE_ENTRIES_SHIFT
)

	)

356 
	#AP_RO
 (0x1 << 5)

	)

357 
	#AP_RW
 (0x0 << 5)

	)

359 
	#NS
 (0x1 << 3)

	)

360 
	#ATTR_SO_INDEX
 0x2

	)

361 
	#ATTR_DEVICE_INDEX
 0x1

	)

362 
	#ATTR_IWBWA_OWBWA_NTR_INDEX
 0x0

	)

363 
	#LOWER_ATTRS
(
x
Ë(((xË& 0xfffË<< 2)

	)

364 
	#ATTR_SO
 (0x0)

	)

365 
	#ATTR_DEVICE
 (0x4)

	)

366 
	#ATTR_IWBWA_OWBWA_NTR
 (0xff)

	)

367 
	#MAIR_ATTR_SET
(
©å
, 
ödex
Ë◊â∏<< (ödex << 3))

	)

370 
	#ESR_EC_SHIFT
 26

	)

371 
	#ESR_EC_MASK
 0x3f

	)

372 
	#ESR_EC_LENGTH
 6

	)

373 
	#EC_UNKNOWN
 0x0

	)

374 
	#EC_WFE_WFI
 0x1

	)

375 
	#EC_AARCH32_CP15_MRC_MCR
 0x3

	)

376 
	#EC_AARCH32_CP15_MRRC_MCRR
 0x4

	)

377 
	#EC_AARCH32_CP14_MRC_MCR
 0x5

	)

378 
	#EC_AARCH32_CP14_LDC_STC
 0x6

	)

379 
	#EC_FP_SIMD
 0x7

	)

380 
	#EC_AARCH32_CP10_MRC
 0x8

	)

381 
	#EC_AARCH32_CP14_MRRC_MCRR
 0xc

	)

382 
	#EC_ILLEGAL
 0xe

	)

383 
	#EC_AARCH32_SVC
 0x11

	)

384 
	#EC_AARCH32_HVC
 0x12

	)

385 
	#EC_AARCH32_SMC
 0x13

	)

386 
	#EC_AARCH64_SVC
 0x15

	)

387 
	#EC_AARCH64_HVC
 0x16

	)

388 
	#EC_AARCH64_SMC
 0x17

	)

389 
	#EC_AARCH64_SYS
 0x18

	)

390 
	#EC_IABORT_LOWER_EL
 0x20

	)

391 
	#EC_IABORT_CUR_EL
 0x21

	)

392 
	#EC_PC_ALIGN
 0x22

	)

393 
	#EC_DABORT_LOWER_EL
 0x24

	)

394 
	#EC_DABORT_CUR_EL
 0x25

	)

395 
	#EC_SP_ALIGN
 0x26

	)

396 
	#EC_AARCH32_FP
 0x28

	)

397 
	#EC_AARCH64_FP
 0x2c

	)

398 
	#EC_SERROR
 0x2f

	)

400 
	#EC_BITS
(
x
Ë(x >> 
ESR_EC_SHIFT
Ë& 
ESR_EC_MASK


	)

406 
	#CNTNSAR
 0x4

	)

407 
	#CNTNSAR_NS_SHIFT
(
x
Ë
	)
x

409 
	#CNTACR_BASE
(
x
Ë(0x40 + (x << 2))

	)

410 
	#CNTACR_RPCT_SHIFT
 0x0

	)

411 
	#CNTACR_RVCT_SHIFT
 0x1

	)

412 
	#CNTACR_RFRQ_SHIFT
 0x2

	)

413 
	#CNTACR_RVOFF_SHIFT
 0x3

	)

414 
	#CNTACR_RWVT_SHIFT
 0x4

	)

415 
	#CNTACR_RWPT_SHIFT
 0x5

	)

418 
	#ACTLR_CPUECTLR_BIT
 (1 << 1)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/aarch64/arch_helpers.h

31 #i‚de‡
__ARCH_HELPERS_H__


32 
	#__ARCH_HELPERS_H__


	)

34 
	~<cdefs.h
>

40 
¸óã_èbÀ_desc
(*
√xt_èbÀ_±r
);

41 
¸óã_block_desc
(
desc
,

42 
addr
,

43 
Àvñ
);

44 
¸óã_devi˚_block
(
ouçut_addr
,

45 
Àvñ
,

46 
ns
);

47 
¸óã_romem_block
(
ouçut_addr
,

48 
Àvñ
,

49 
ns
);

50 
¸óã_rwmem_block
(
ouçut_addr
,

51 
Àvñ
,

52 
ns
);

57 
ébüŒe1
();

58 
ébüŒe1is
();

59 
ébüŒe2
();

60 
ébüŒe2is
();

61 
ébüŒe3
();

62 
ébüŒe3is
();

63 
ébivmÆÀ1
();

68 
dcisw
();

69 
dccisw
();

70 
dccsw
();

71 
dccvac
();

72 
dcivac
();

73 
dccivac
();

74 
dccvau
();

75 
dczva
();

76 
Êush_dˇche_ønge
(, );

77 
öv_dˇche_ønge
(, );

78 
dcsw_›_louis
();

79 
dcsw_›_Æl
();

80 
dis_i_d_dcsw_›_Æl
();

81 
íabÀ_ˇche
();

83 
dißbÀ_mmu_ñ3
();

84 
dißbÀ_mmu_iˇche_ñ3
();

89 
íabÀ_úq
();

90 
íabÀ_fiq
();

91 
íabÀ_£º‹
();

92 
íabÀ_debug_ex˚±i⁄s
();

94 
dißbÀ_úq
();

95 
dißbÀ_fiq
();

96 
dißbÀ_£º‹
();

97 
dißbÀ_debug_ex˚±i⁄s
();

99 
ªad_id_p‰1_ñ1
();

100 
ªad_id_Ø64p‰0_ñ1
();

101 
ªad_cuºít_ñ
();

102 
ªad_daif
();

103 
ªad_•§_ñ1
();

104 
ªad_•§_ñ2
();

105 
ªad_•§_ñ3
();

106 
ªad_ñr_ñ1
();

107 
ªad_ñr_ñ2
();

108 
ªad_ñr_ñ3
();

110 
wrôe_daif
();

111 
wrôe_•§_ñ1
();

112 
wrôe_•§_ñ2
();

113 
wrôe_•§_ñ3
();

114 
wrôe_ñr_ñ1
();

115 
wrôe_ñr_ñ2
();

116 
wrôe_ñr_ñ3
();

118 
wfi
();

119 
w„
();

120 
r„
();

121 
£v
();

122 
dsb
();

123 
isb
();

125 
gë_afÊvl_shi·
();

126 
mpidr_mask_lowî_afÊvls
(, );

128 
__dód2
 
îë
(, ,

133 
__dód2
 
smc
(, ,

141 
ªad_midr
();

142 
ªad_mpidr
();

144 
ªad_s¸
();

145 
ªad_h¸
();

147 
ªad_vb¨_ñ1
();

148 
ªad_vb¨_ñ2
();

149 
ªad_vb¨_ñ3
();

151 
ªad_s˘Ã_ñ1
();

152 
ªad_s˘Ã_ñ2
();

153 
ªad_s˘Ã_ñ3
();

155 
ªad_a˘Ã_ñ1
();

156 
ªad_a˘Ã_ñ2
();

157 
ªad_a˘Ã_ñ3
();

159 
ªad_e§_ñ1
();

160 
ªad_e§_ñ2
();

161 
ªad_e§_ñ3
();

163 
ªad_af§0_ñ1
();

164 
ªad_af§0_ñ2
();

165 
ªad_af§0_ñ3
();

167 
ªad_af§1_ñ1
();

168 
ªad_af§1_ñ2
();

169 
ªad_af§1_ñ3
();

171 
ªad_Ár_ñ1
();

172 
ªad_Ár_ñ2
();

173 
ªad_Ár_ñ3
();

175 
ªad_maú_ñ1
();

176 
ªad_maú_ñ2
();

177 
ªad_maú_ñ3
();

179 
ªad_amaú_ñ1
();

180 
ªad_amaú_ñ2
();

181 
ªad_amaú_ñ3
();

183 
ªad_rvb¨_ñ1
();

184 
ªad_rvb¨_ñ2
();

185 
ªad_rvb¨_ñ3
();

187 
ªad_rmr_ñ1
();

188 
ªad_rmr_ñ2
();

189 
ªad_rmr_ñ3
();

191 
ªad_t¸_ñ1
();

192 
ªad_t¸_ñ2
();

193 
ªad_t¸_ñ3
();

195 
ªad_âbr0_ñ1
();

196 
ªad_âbr0_ñ2
();

197 
ªad_âbr0_ñ3
();

199 
ªad_âbr1_ñ1
();

201 
ªad_˝å_ñ2
();

202 
ªad_˝å_ñ3
();

204 
ªad_˝a¸
();

205 
ªad_˝ue˘Ã
();

206 
ªad_˙t‰q_ñ0
();

207 
ªad_˙çs_˘l_ñ1
();

208 
ªad_˙çs_tvÆ_ñ1
();

209 
ªad_˙çs_cvÆ_ñ1
();

210 
ªad_˙ç˘_ñ0
();

211 
ªad_˙th˘l_ñ2
();

212 
ªad_˙tvoff_ñ2
();

214 
ªad_çidr_ñ3
();

216 
wrôe_s¸
();

217 
wrôe_h¸
();

218 
wrôe_˝a¸
();

219 
wrôe_˙t‰q_ñ0
();

220 
wrôe_˙çs_˘l_ñ1
();

221 
wrôe_˙çs_tvÆ_ñ1
();

222 
wrôe_˙çs_cvÆ_ñ1
();

223 
wrôe_˙th˘l_ñ2
();

224 
wrôe_˙tvoff_ñ2
();

226 
wrôe_vb¨_ñ1
();

227 
wrôe_vb¨_ñ2
();

228 
wrôe_vb¨_ñ3
();

230 
wrôe_s˘Ã_ñ1
();

231 
wrôe_s˘Ã_ñ2
();

232 
wrôe_s˘Ã_ñ3
();

234 
wrôe_a˘Ã_ñ1
();

235 
wrôe_a˘Ã_ñ2
();

236 
wrôe_a˘Ã_ñ3
();

238 
wrôe_e§_ñ1
();

239 
wrôe_e§_ñ2
();

240 
wrôe_e§_ñ3
();

242 
wrôe_af§0_ñ1
();

243 
wrôe_af§0_ñ2
();

244 
wrôe_af§0_ñ3
();

246 
wrôe_af§1_ñ1
();

247 
wrôe_af§1_ñ2
();

248 
wrôe_af§1_ñ3
();

250 
wrôe_Ár_ñ1
();

251 
wrôe_Ár_ñ2
();

252 
wrôe_Ár_ñ3
();

254 
wrôe_maú_ñ1
();

255 
wrôe_maú_ñ2
();

256 
wrôe_maú_ñ3
();

258 
wrôe_amaú_ñ1
();

259 
wrôe_amaú_ñ2
();

260 
wrôe_amaú_ñ3
();

262 
wrôe_rmr_ñ1
();

263 
wrôe_rmr_ñ2
();

264 
wrôe_rmr_ñ3
();

266 
wrôe_t¸_ñ1
();

267 
wrôe_t¸_ñ2
();

268 
wrôe_t¸_ñ3
();

270 
wrôe_âbr0_ñ1
();

271 
wrôe_âbr0_ñ2
();

272 
wrôe_âbr0_ñ3
();

274 
wrôe_âbr1_ñ1
();

276 
wrôe_˝ue˘Ã
();

277 
wrôe_˝å_ñ2
();

278 
wrôe_˝å_ñ3
();

280 
wrôe_çidr_ñ3
();

282 
	#IS_IN_EL
(
x
) \

283 (
	`GET_EL
(
	`ªad_cuºít_ñ
()Ë=
MODE_EL
##
x
)

	)

285 
	#IS_IN_EL1
(Ë
	`IS_IN_EL
(1)

	)

286 
	#IS_IN_EL3
(Ë
	`IS_IN_EL
(3)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/aarch64/xlat_tables.h

31 #i‚de‡
__XLAT_TABLES_H__


32 
	#__XLAT_TABLES_H__


	)

34 
	~<°döt.h
>

44 
	mMT_DEVICE
 = 0 << 0,

45 
	mMT_MEMORY
 = 1 << 0,

47 
	mMT_RO
 = 0 << 1,

48 
	mMT_RW
 = 1 << 1,

50 
	mMT_SECURE
 = 0 << 2,

51 
	mMT_NS
 = 1 << 2

52 } 
	tmm≠_©å_t
;

57 
	smm≠_ªgi⁄
 {

58 
	mba£
;

59 
	msize
;

60 
mm≠_©å_t
 
	m©å
;

61 } 
	tmm≠_ªgi⁄_t
;

63 
mm≠_add_ªgi⁄
(
ba£
, 
size
,

64 
©å
);

65 
mm≠_add
(c⁄° 
mm≠_ªgi⁄_t
 *
mm
);

67 
öô_xœt_èbÀs
();

69 
íabÀ_mmu_ñ1
();

70 
íabÀ_mmu_ñ3
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/bakery_lock.h

31 #i‚de‡
__BAKERY_LOCK_H__


32 
	#__BAKERY_LOCK_H__


	)

34 
	~<∂©f‹m_def.h
>

36 
	#BAKERY_LOCK_MAX_CPUS
 
PLATFORM_CORE_COUNT


	)

38 
	sbakîy_lock
 {

39 
	mow√r
;

40 vﬁ©ûê
	míãrög
[
BAKERY_LOCK_MAX_CPUS
];

41 vﬁ©ûê
	mnumbî
[
BAKERY_LOCK_MAX_CPUS
];

42 } 
	tbakîy_lock_t
;

44 
	#NO_OWNER
 (-1)

	)

46 
bakîy_lock_öô
(
bakîy_lock_t
 *
bakîy
);

47 
bakîy_lock_gë
(
mpidr
, 
bakîy_lock_t
 *
bakîy
);

48 
bakîy_lock_ªÀa£
(
mpidr
, 
bakîy_lock_t
 *
bakîy
);

49 
bakîy_lock_åy
(
mpidr
, 
bakîy_lock_t
 *
bakîy
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/cassert.h

31 #i‚de‡
__CASSERT_H__


32 
	#__CASSERT_H__


	)

40 
	#CASSERT
(
c⁄d
, 
msg
Ë
	tmsg
[(c⁄dË? 1 : -1]

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/io_storage.h

31 #i‚de‡
__IO_H__


32 
	#__IO_H__


	)

34 
	~<°döt.h
>

35 
	~<°dio.h
>

41 
	mIO_TYPE_INVALID
,

42 
	mIO_TYPE_SEMIHOSTING
,

43 
	mIO_TYPE_MEMMAP
,

44 
	mIO_TYPE_FIRMWARE_IMAGE_PACKAGE
,

45 
	mIO_TYPE_MAX


46 } 
	tio_ty≥_t
;

51 
	mIO_SEEK_INVALID
,

52 
	mIO_SEEK_SET
,

53 
	mIO_SEEK_END
,

54 
	mIO_SEEK_CUR
,

55 
	mIO_SEEK_MAX


56 } 
	tio_£ek_mode_t
;

60 
	gio_dev_c⁄√˘‹
;

65 
	sio_fûe_•ec
 {

66 c⁄° *
	m∑th
;

67 
	mmode
;

68 } 
	tio_fûe_•ec_t
;

73 
	sio_block_•ec
 {

74 
size_t
 
	moff£t
;

75 
size_t
 
	mÀngth
;

76 } 
	tio_block_•ec_t
;

80 
	#IO_MODE_INVALID
 (0)

	)

81 
	#IO_MODE_RO
 (1 << 0)

	)

82 
	#IO_MODE_RW
 (1 << 1)

	)

86 
	#IO_SUCCESS
 (0)

	)

87 
	#IO_FAIL
 (-1)

	)

88 
	#IO_NOT_SUPPORTED
 (-2)

	)

89 
	#IO_RESOURCES_EXHAUSTED
 (-3)

	)

93 
io_dev_›í
(c⁄° 
io_dev_c⁄√˘‹
 *
dev_c⁄
,

94 c⁄° 
uöçå_t
 
dev_•ec
,

95 
uöçå_t
 *
dev_h™dÀ
);

100 
io_dev_öô
(
uöçå_t
 
dev_h™dÀ
, c⁄° uöçå_à
öô_∑øms
);

105 
io_dev_˛o£
(
uöçå_t
 
dev_h™dÀ
);

109 
io_›í
(
uöçå_t
 
dev_h™dÀ
, c⁄° uöçå_à
•ec
, uöçå_à*
h™dÀ
);

111 
io_£ek
(
uöçå_t
 
h™dÀ
, 
io_£ek_mode_t
 
mode
, 
ssize_t
 
off£t
);

113 
io_size
(
uöçå_t
 
h™dÀ
, 
size_t
 *
Àngth
);

115 
io_ªad
(
uöçå_t
 
h™dÀ
, uöçå_à
buf„r
, 
size_t
 
Àngth
,

116 
size_t
 *
Àngth_ªad
);

118 
io_wrôe
(
uöçå_t
 
h™dÀ
, c⁄° uöçå_à
buf„r
, 
size_t
 
Àngth
,

119 
size_t
 *
Àngth_wrôãn
);

121 
io_˛o£
(
uöçå_t
 
h™dÀ
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/mmio.h

31 #i‚de‡
__MMIO_H__


32 
	#__MMIO_H__


	)

34 
	~<°döt.h
>

36 
mmio_wrôe_8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

37 
uöt8_t
 
mmio_ªad_8
(
uöçå_t
 
addr
);

39 
mmio_wrôe_32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

40 
uöt32_t
 
mmio_ªad_32
(
uöçå_t
 
addr
);

42 
mmio_wrôe_64
(
uöçå_t
 
addr
, 
uöt64_t
 
vÆue
);

43 
uöt64_t
 
mmio_ªad_64
(
uöçå_t
 
addr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/semihosting.h

31 #i‚de‡
__SEMIHOSTING_H__


32 
	#__SEMIHOSTING_H__


	)

34 
	~<°döt.h
>

35 
	~<°dio.h
>

38 
	#SEMIHOSTING_SYS_OPEN
 0x01

	)

39 
	#SEMIHOSTING_SYS_CLOSE
 0x02

	)

40 
	#SEMIHOSTING_SYS_WRITE0
 0x04

	)

41 
	#SEMIHOSTING_SYS_WRITEC
 0x03

	)

42 
	#SEMIHOSTING_SYS_WRITE
 0x05

	)

43 
	#SEMIHOSTING_SYS_READ
 0x06

	)

44 
	#SEMIHOSTING_SYS_READC
 0x07

	)

45 
	#SEMIHOSTING_SYS_SEEK
 0x0A

	)

46 
	#SEMIHOSTING_SYS_FLEN
 0x0C

	)

47 
	#SEMIHOSTING_SYS_REMOVE
 0x0E

	)

48 
	#SEMIHOSTING_SYS_SYSTEM
 0x12

	)

49 
	#SEMIHOSTING_SYS_ERRNO
 0x13

	)

51 
	#FOPEN_MODE_R
 0x0

	)

52 
	#FOPEN_MODE_RB
 0x1

	)

53 
	#FOPEN_MODE_RPLUS
 0x2

	)

54 
	#FOPEN_MODE_RPLUSB
 0x3

	)

55 
	#FOPEN_MODE_W
 0x4

	)

56 
	#FOPEN_MODE_WB
 0x5

	)

57 
	#FOPEN_MODE_WPLUS
 0x6

	)

58 
	#FOPEN_MODE_WPLUSB
 0x7

	)

59 
	#FOPEN_MODE_A
 0x8

	)

60 
	#FOPEN_MODE_AB
 0x9

	)

61 
	#FOPEN_MODE_APLUS
 0xa

	)

62 
	#FOPEN_MODE_APLUSB
 0xb

	)

64 
£miho°ög_c⁄√˘i⁄_suµ‹ãd
();

65 
£miho°ög_fûe_›í
(c⁄° *
fûe_«me
, 
size_t
 
mode
);

66 
£miho°ög_fûe_£ek
(
fûe_h™dÀ
, 
ssize_t
 
off£t
);

67 
£miho°ög_fûe_ªad
(
fûe_h™dÀ
, 
size_t
 *
Àngth
, 
uöçå_t
 
buf„r
);

68 
£miho°ög_fûe_wrôe
(
fûe_h™dÀ
,

69 
size_t
 *
Àngth
,

70 c⁄° 
uöçå_t
 
buf„r
);

71 
£miho°ög_fûe_˛o£
(
fûe_h™dÀ
);

72 
£miho°ög_fûe_Àngth
(
fûe_h™dÀ
);

73 
£miho°ög_sy°em
(*
comm™d_löe
);

74 
£miho°ög_gë_Êí
(c⁄° *
fûe_«me
);

75 
£miho°ög_dow∆ﬂd_fûe
(c⁄° *
fûe_«me
,

76 
size_t
 
buf_size
,

77 
uöçå_t
 
buf
);

78 
£miho°ög_wrôe_ch¨
(
ch¨a˘î
);

79 
£miho°ög_wrôe_°rög
(*
°rög
);

80 
£miho°ög_ªad_ch¨
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/spinlock.h

31 #i‚de‡
__SPINLOCK_H__


32 
	#__SPINLOCK_H__


	)

34 
	s•ölock
 {

35 vﬁ©ûê
	mlock
;

36 } 
	t•ölock_t
;

38 
•ö_lock
(
•ölock_t
 *
lock
);

39 
•ö_u∆ock
(
•ölock_t
 *
lock
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/plat/common/fiq_smp_call.h

1 #i‚de‡
_INTER_CPU_CALL_H


2 
	#_INTER_CPU_CALL_H


	)

4 (*
	töãr_˝u_ˇŒ_func_t
)(*
	töfo
);

6 
	sˇŒ_fun˘i⁄_d©a


8 
öãr_˝u_ˇŒ_func_t
 
func
;

9 *
öfo
;

10 
lock
;

13 
	`fiq_smp_ˇŒ_fun˘i⁄
(
m≠
, 
öãr_˝u_ˇŒ_func_t
 
func
, *
öfo
, 
waô
);

14 
	`fiq_icc_i§
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/plat/common/platform.h

31 #i‚de‡
__PLATFORM_H__


32 
	#__PLATFORM_H__


	)

34 
	~<°döt.h
>

35 
	~<fiq_smp_ˇŒ.h
>

41 
	g∂©_pm_›s
;

42 
	gmemöfo
;

43 
	gimage_öfo
;

44 
	gíåy_poöt_öfo
;

45 
	gbl31_∑øms
;

53 
uöt64_t
 
∂©_gë_sys˙t_‰eq
();

54 
∂©_gë_image_sour˚
(c⁄° *
image_«me
,

55 
uöçå_t
 *
dev_h™dÀ
,

56 
uöçå_t
 *
image_•ec
);

57 
∂©_gë_ns_image_íåypoöt
();

62 
uöt32_t
 
∂©_ic_gë_≥ndög_öãºu±_id
();

63 
uöt32_t
 
∂©_ic_gë_≥ndög_öãºu±_ty≥
();

64 
uöt32_t
 
∂©_ic_acknowÀdge_öãºu±
();

65 
uöt32_t
 
∂©_ic_gë_öãºu±_ty≥
(uöt32_à
id
);

66 
∂©_ic_íd_of_öãºu±
(
uöt32_t
 
id
);

67 
uöt32_t
 
∂©_öãºu±_ty≥_to_löe
(uöt32_à
ty≥
,

68 
uöt32_t
 
£curôy_°©e
);

69 
úq_øi£_so·úq
(
m≠
, 
úq
);

70 
gë_ack_öfo
();

71 
ack_sgi
(
ür
);

72 
mt_©f_åiggî_úq
();

73 
mask_wdt_fiq
();

74 
gic_di°_ßve
();

75 
gic_di°_ª°‹e
();

78 
uöt64_t
 
mt_úq_dump_°©us
(
uöt32_t
 
úq
);

82 
∂©f‹m_gë_c‹e_pos
(
mpidr
);

83 
∂©f‹m_gë_°ack
(
mpidr
);

84 
∂©_ªp‹t_ex˚±i⁄
();

89 
bl1_∂©_¨ch_£tup
();

90 
bl1_∂©f‹m_£tup
();

91 
memöfo
 *
bl1_∂©_£c_mem_œyout
();

97 
bl1_∂©_£t_bl2_ï_öfo
(
image_öfo
 *
image
,

98 
íåy_poöt_öfo
 *
ï
);

103 
öô_bl2_mem_œyout
(
memöfo
 *,

104 
memöfo
 *,

111 
bl2_∂©_¨ch_£tup
();

112 
bl2_∂©f‹m_£tup
();

113 
memöfo
 *
bl2_∂©_£c_mem_œyout
();

120 
bl31_∑øms
 *
bl2_∂©_gë_bl31_∑øms
();

126 
íåy_poöt_öfo
 *
bl2_∂©_gë_bl31_ï_öfo
();

132 
bl2_∂©_Êush_bl31_∑øms
();

139 
bl2_∂©_£t_bl31_ï_öfo
(
image_öfo
 *
image
,

140 
íåy_poöt_öfo
 *
ï
);

142 
bl2_∂©_£t_bl32_ï_öfo
(
image_öfo
 *
image
,

143 
íåy_poöt_öfo
 *
ï
);

145 
bl2_∂©_£t_bl33_ï_öfo
(
image_öfo
 *
image
,

146 
íåy_poöt_öfo
 *
ï
);

149 
bl2_∂©_gë_bl32_memöfo
(
memöfo
 *
mem_öfo
);

152 
bl2_∂©_gë_bl33_memöfo
(
memöfo
 *
mem_öfo
);

161 
bl31_óæy_∂©f‹m_£tup
(
bl31_∑øms
 *
‰om_bl2
,

162 *
∂©_∑øms_‰om_bl2
);

163 
bl31_∂©_¨ch_£tup
();

164 
bl31_∂©f‹m_£tup
();

165 
íåy_poöt_öfo
 *
bl31_∂©_gë_√xt_image_ï_öfo
(
uöt32_t
 
ty≥
);

170 
∂©f‹m_£tup_pm
(c⁄° 
∂©_pm_›s
 **);

171 
∂©_gë_max_afÊvl
();

172 
∂©_gë_aff_cou¡
(, );

173 
∂©_gë_aff_°©e
(, );

178 
bl31_∂©_íabÀ_mmu
();

183 
bl32_∂©f‹m_£tup
();

188 
bl32_∂©_íabÀ_mmu
();

194 
	mBOOT_OPT_64S3
 = 0,

195 
	mBOOT_OPT_64S1
,

196 
	mBOOT_OPT_32S3
,

197 
	mBOOT_OPT_32S1
,

198 
	mBOOT_OPT_64N2
,

199 
	mBOOT_OPT_64N1
,

200 
	mBOOT_OPT_32N2
,

201 
	mBOOT_OPT_32N1
,

202 
	mBOOT_OPT_UNKNOWN


203 } 
	tboŸ_›ti⁄_t
;

205 
	#DEVINFO_SIZE
 4

	)

206 
	#ATF_AEE_BUFFER_SIZE
 (0x4000)

207 °ru˘ {

	)

208 
	m©f_magic
;

209 
	mãe_suµ‹t
;

210 
	mãe_íåy
;

211 
	mãe_boŸ_¨g_addr
;

212 
	mhwuid
[4];

213 
	mHRID
[2];

214 
	m©f_log_p‹t
;

215 
	m©f_log_baudøã
;

216 
	m©f_log_buf_°¨t
;

217 
	m©f_log_buf_size
;

218 
	m©f_úq_num
;

219 
	mdevöfo
[
DEVINFO_SIZE
];

220 
	m©f_´e_debug_buf_°¨t
;

221 
	m©f_´e_debug_buf_size
;

222 } 
	t©f_¨g_t
, *
	t©f_¨g_t_±r
;

224 
BOOT_ARGUMENT_LOCATION
;

225 
BOOT_ARGUMENT_SIZE
;

226 
BL33_START_ADDRESS
;

227 
TEE_BOOT_INFO_ADDR
;

229 
	s©f_´e_ªgs
 {

230 
uöt64_t
 
	mªgs
[31];

231 
uöt64_t
 
	m•
;

232 
uöt64_t
 
	mpc
;

233 
uöt64_t
 
	mp°©e
;

237 
´e_wdt_dump
();

238 
uöt64_t
 
wdt_kî√l_cb_addr
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/assert.h

38 
	~<sys/cdefs.h
>

45 #unde‡
as£π


46 #unde‡
_as£π


48 #ifde‡
NDEBUG


49 
	#as£π
(
e
Ë(()0)

	)

50 
	#_as£π
(
e
Ë(()0)

	)

52 
	#_as£π
(
e
Ë
	`as£π
”)

	)

54 
	#as£π
(
e
Ë(”Ë? ()0 : 
	`__as£π
(
__func__
, 
__FILE__
, \

55 
__LINE__
, #e))

	)

58 #i‚de‡
_ASSERT_H_


59 
	#_ASSERT_H_


	)

60 
__BEGIN_DECLS


61 
	$__as£π
(c⁄° *, c⁄° *, , c⁄° *Ë
__dód2
;

62 
__END_DECLS


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/machine/_limits.h

30 #i‚def 
_MACHINE__LIMITS_H_


31 
	#_MACHINE__LIMITS_H_


	)

42 
	#__CHAR_BIT
 8

	)

44 
	#__SCHAR_MAX
 0x7‡

	)

45 
	#__SCHAR_MIN
 (-0x7f-1Ë

	)

47 
	#__UCHAR_MAX
 0xf‡

	)

49 
	#__USHRT_MAX
 0xfff‡

	)

50 
	#__SHRT_MAX
 0x7ff‡

	)

51 
	#__SHRT_MIN
 (-0x7fff-1Ë

	)

53 
	#__UINT_MAX
 0xfffffff‡

	)

54 
	#__INT_MAX
 0x7ffffff‡

	)

55 
	#__INT_MIN
 (-0x7fffffff-1Ë

	)

57 
	#__ULONG_MAX
 0xfffffffffffffff‡

	)

58 
	#__LONG_MAX
 0x7ffffffffffffff‡

	)

59 
	#__LONG_MIN
 (-0x7fffffffffffffff-1Ë

	)

63 
	#__ULLONG_MAX
 0xffffffffffffffffULL

	)

64 
	#__LLONG_MAX
 0x7fffffffffffffffLL

	)

65 
	#__LLONG_MIN
 (-0x7fffffffffffffffLL-1Ë

	)

67 
	#__SSIZE_MAX
 
__LONG_MAX


	)

69 
	#__SIZE_T_MAX
 
__ULONG_MAX


	)

71 
	#__OFF_MAX
 
__LONG_MAX


	)

72 
	#__OFF_MIN
 
__LONG_MIN


	)

75 
	#__UQUAD_MAX
 (
__ULONG_MAX
Ë

	)

76 
	#__QUAD_MAX
 (
__LONG_MAX
Ë

	)

77 
	#__QUAD_MIN
 (
__LONG_MIN
Ë

	)

79 
	#__LONG_BIT
 64

	)

80 
	#__WORD_BIT
 32

	)

83 
	#__MINSIGSTKSZ
 (1024 * 4)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/machine/_stdint.h

33 #i‚def 
_MACHINE__STDINT_H_


34 
	#_MACHINE__STDINT_H_


	)

36 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_CONSTANT_MACROS
)

38 
	#INT8_C
(
c
Ë(c)

	)

39 
	#INT16_C
(
c
Ë(c)

	)

40 
	#INT32_C
(
c
Ë(c)

	)

41 
	#INT64_C
(
c
Ë(¯## 
L
)

	)

43 
	#UINT8_C
(
c
Ë(c)

	)

44 
	#UINT16_C
(
c
Ë(c)

	)

45 
	#UINT32_C
(
c
Ë(¯## 
U
)

	)

46 
	#UINT64_C
(
c
Ë(¯## 
UL
)

	)

48 
	#INTMAX_C
(
c
Ë
	`INT64_C
(c)

	)

49 
	#UINTMAX_C
(
c
Ë
	`UINT64_C
(c)

	)

53 #i‡!
deföed
(
__˝lu•lus
Ë|| deföed(
__STDC_LIMIT_MACROS
)

60 
	#INT8_MIN
 (-0x7f-1)

	)

61 
	#INT16_MIN
 (-0x7fff-1)

	)

62 
	#INT32_MIN
 (-0x7fffffff-1)

	)

63 
	#INT64_MIN
 (-0x7fffffffffffffffL-1)

	)

66 
	#INT8_MAX
 0x7f

	)

67 
	#INT16_MAX
 0x7fff

	)

68 
	#INT32_MAX
 0x7fffffff

	)

69 
	#INT64_MAX
 0x7fffffffffffffffL

	)

72 
	#UINT8_MAX
 0xff

	)

73 
	#UINT16_MAX
 0xffff

	)

74 
	#UINT32_MAX
 0xffffffffU

	)

75 
	#UINT64_MAX
 0xffffffffffffffffUL

	)

82 
	#INT_LEAST8_MIN
 
INT8_MIN


	)

83 
	#INT_LEAST16_MIN
 
INT16_MIN


	)

84 
	#INT_LEAST32_MIN
 
INT32_MIN


	)

85 
	#INT_LEAST64_MIN
 
INT64_MIN


	)

88 
	#INT_LEAST8_MAX
 
INT8_MAX


	)

89 
	#INT_LEAST16_MAX
 
INT16_MAX


	)

90 
	#INT_LEAST32_MAX
 
INT32_MAX


	)

91 
	#INT_LEAST64_MAX
 
INT64_MAX


	)

94 
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)

95 
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)

96 
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)

97 
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)

104 
	#INT_FAST8_MIN
 
INT32_MIN


	)

105 
	#INT_FAST16_MIN
 
INT32_MIN


	)

106 
	#INT_FAST32_MIN
 
INT32_MIN


	)

107 
	#INT_FAST64_MIN
 
INT64_MIN


	)

110 
	#INT_FAST8_MAX
 
INT32_MAX


	)

111 
	#INT_FAST16_MAX
 
INT32_MAX


	)

112 
	#INT_FAST32_MAX
 
INT32_MAX


	)

113 
	#INT_FAST64_MAX
 
INT64_MAX


	)

116 
	#UINT_FAST8_MAX
 
UINT32_MAX


	)

117 
	#UINT_FAST16_MAX
 
UINT32_MAX


	)

118 
	#UINT_FAST32_MAX
 
UINT32_MAX


	)

119 
	#UINT_FAST64_MAX
 
UINT64_MAX


	)

125 
	#INTPTR_MIN
 
INT64_MIN


	)

126 
	#INTPTR_MAX
 
INT64_MAX


	)

127 
	#UINTPTR_MAX
 
UINT64_MAX


	)

133 
	#INTMAX_MIN
 
INT64_MIN


	)

134 
	#INTMAX_MAX
 
INT64_MAX


	)

135 
	#UINTMAX_MAX
 
UINT64_MAX


	)

142 
	#PTRDIFF_MIN
 
INT64_MIN


	)

143 
	#PTRDIFF_MAX
 
INT64_MAX


	)

146 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

147 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

150 
	#SIZE_MAX
 
UINT64_MAX


	)

152 #i‚de‡
WCHAR_MIN


154 
	#WCHAR_MIN
 
INT32_MIN


	)

155 
	#WCHAR_MAX
 
INT32_MAX


	)

159 
	#WINT_MIN
 
INT32_MIN


	)

160 
	#WINT_MAX
 
INT32_MAX


	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/machine/_types.h

35 #i‚de‡
_MACHINE__TYPES_H_


36 
	#_MACHINE__TYPES_H_


	)

38 #i‚de‡
_SYS_CDEFS_H_


39 #îr‹ 
this
 
fûe
 
√eds
 
sys
/
cdefs
.
h
 
as
 
a
 
¥îequisôe


45 
__sig√d
 
	t__öt8_t
;

46 
	t__uöt8_t
;

47 
	t__öt16_t
;

48 
	t__uöt16_t
;

49 
	t__öt32_t
;

50 
	t__uöt32_t
;

51 
	t__öt64_t
;

52 
	t__uöt64_t
;

57 
__öt32_t
 
	t__˛ock_t
;

58 
__öt64_t
 
	t__¸ôiˇl_t
;

59 
	t__doubÀ_t
;

60 
	t__Êﬂt_t
;

61 
__öt64_t
 
	t__ötÂå_t
;

62 
__öt64_t
 
	t__ötmax_t
;

63 
__öt64_t
 
	t__öçå_t
;

64 
__öt32_t
 
	t__öt_Á°8_t
;

65 
__öt32_t
 
	t__öt_Á°16_t
;

66 
__öt32_t
 
	t__öt_Á°32_t
;

67 
__öt64_t
 
	t__öt_Á°64_t
;

68 
__öt8_t
 
	t__öt_Àa°8_t
;

69 
__öt16_t
 
	t__öt_Àa°16_t
;

70 
__öt32_t
 
	t__öt_Àa°32_t
;

71 
__öt64_t
 
	t__öt_Àa°64_t
;

72 
__öt64_t
 
	t__±rdiff_t
;

73 
__öt64_t
 
	t__ªgi°î_t
;

74 
__öt64_t
 
	t__£gsz_t
;

75 
__uöt64_t
 
	t__size_t
;

76 
__öt64_t
 
	t__ssize_t
;

77 
__öt64_t
 
	t__time_t
;

78 
__uöt64_t
 
	t__uötÂå_t
;

79 
__uöt64_t
 
	t__uötmax_t
;

80 
__uöt64_t
 
	t__uöçå_t
;

81 
__uöt32_t
 
	t__uöt_Á°8_t
;

82 
__uöt32_t
 
	t__uöt_Á°16_t
;

83 
__uöt32_t
 
	t__uöt_Á°32_t
;

84 
__uöt64_t
 
	t__uöt_Á°64_t
;

85 
__uöt8_t
 
	t__uöt_Àa°8_t
;

86 
__uöt16_t
 
	t__uöt_Àa°16_t
;

87 
__uöt32_t
 
	t__uöt_Àa°32_t
;

88 
__uöt64_t
 
	t__uöt_Àa°64_t
;

89 
__uöt64_t
 
	t__u_ªgi°î_t
;

90 
__uöt64_t
 
	t__vm_off£t_t
;

91 
__öt64_t
 
	t__vm_ooff£t_t
;

92 
__uöt64_t
 
	t__vm_∑ddr_t
;

93 
__uöt64_t
 
	t__vm_pödex_t
;

94 
__uöt64_t
 
	t__vm_size_t
;

99 #ifde‡
__GNUCLIKE_BUILTIN_VARARGS


100 
__buûtö_va_li°
 
	t__va_li°
;

102 * 
	t__va_li°
;

104 #i‡
deföed
(
__GNUCLIKE_BUILTIN_VAALIST
Ë&& !deföed(
__GNUC_VA_LIST
) \

105 && !
	$deföed
(
__NO_GNUC_VA_LIST
)

106 
	#__GNUC_VA_LIST


	)

107 
__va_li°
 
	t__gnuc_va_li°
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/stddef.h

34 #i‚de‡
_STDDEF_H_


35 
	#_STDDEF_H_


	)

37 
	~<sys/cdefs.h
>

38 
	~<sys/_nuŒ.h
>

39 
	~<sys/_ty≥s.h
>

41 
__±rdiff_t
 
	t±rdiff_t
;

43 #i‡
__BSD_VISIBLE


44 #i‚de‡
_RUNE_T_DECLARED


45 
__ru√_t
 
	tru√_t
;

46 
	#_RUNE_T_DECLARED


	)

50 #i‚de‡
_SIZE_T_DECLARED


51 
__size_t
 
	tsize_t
;

52 
	#_SIZE_T_DECLARED


	)

55 #i‚def 
__˝lu•lus


56 #i‚de‡
_WCHAR_T_DECLARED


57 
__wch¨_t
 
	twch¨_t
;

58 
	#_WCHAR_T_DECLARED


	)

62 
	#off£tof
(
ty≥
, 
membî
Ë
	`__off£tof
—y≥, membî)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/stdio.h

42 #i‚def 
_STDIO_H_


43 
	#_STDIO_H_


	)

45 
	~<sys/cdefs.h
>

46 
	~<sys/_nuŒ.h
>

47 
	~<sys/_ty≥s.h
>

49 #i‚de‡
_SIZE_T_DECLARED


50 
__size_t
 
	tsize_t
;

51 
	#_SIZE_T_DECLARED


	)

54 #i‚de‡
_SSIZE_T_DECLARED


55 
	#_SSIZE_T_DECLARED


	)

56 
__ssize_t
 
	tssize_t
;

59 
	#EOF
 (-1)

	)

61 
¥ötf
(c⁄° * 
__ª°ri˘
, ...);

62 
putch¨
();

63 
puts
(const *);

64 
•rötf
(* 
__ª°ri˘
, const * __restrict, ...);

65 
v•rötf
(* 
__ª°ri˘
, const * __restrict,

66 
__va_li°
);

68 #i‡
__ISO_C_VISIBLE
 >= 1999

69 
	$¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

70 ...Ë
	`__¥ötÊike
(3, 4);

71 
	$v¢¥ötf
(* 
__ª°ri˘
, 
size_t
, const * __restrict,

72 
__va_li°
Ë
	`__¥ötÊike
(3, 0);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/string.h

38 #i‚de‡
_STRING_H_


39 
	#_STRING_H_


	)

41 
	~<sys/cdefs.h
>

42 
	~<sys/_nuŒ.h
>

43 
	~<sys/_ty≥s.h
>

45 #i‚de‡
_SIZE_T_DECLARED


46 
__size_t
 
	tsize_t
;

47 
	#_SIZE_T_DECLARED


	)

50 
__BEGIN_DECLS


52 *
	$memchr
(c⁄° *, , 
size_t
Ë
__puª
;

53 
	$memcmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

54 *
	`mem˝y
(* 
__ª°ri˘
, c⁄° * __ª°ri˘, 
size_t
);

55 *
	`memmove
(*, c⁄° *, 
size_t
);

56 *
	`mem£t
(*, , 
size_t
);

58 *
	$°rchr
(c⁄° *, Ë
__puª
;

59 
	$°rcmp
(c⁄° *, c⁄° *Ë
__puª
;

60 
size_t
 
	$°æí
(c⁄° *Ë
__puª
;

61 
	$°∫cmp
(c⁄° *, c⁄° *, 
size_t
Ë
__puª
;

63 
__END_DECLS


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/_null.h

29 #i‚de‡
NULL


31 #i‡!
deföed
(
__˝lu•lus
)

32 
	#NULL
 ((*)0)

	)

34 #i‡
__˝lu•lus
 >= 201103L

35 
	#NULL
 
nuŒ±r


	)

36 #ñi‡
deföed
(
__GNUG__
Ë&& deföed(
__GNUC__
) && __GNUC__ >= 4

37 
	#NULL
 
__nuŒ


	)

39 #i‡
deföed
(
__LP64__
)

40 
	#NULL
 (0L)

	)

42 
	#NULL
 0

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/_stdint.h

30 #i‚de‡
_SYS__STDINT_H_


31 
	#_SYS__STDINT_H_


	)

33 #i‚de‡
_INT8_T_DECLARED


34 
__öt8_t
 
	töt8_t
;

35 
	#_INT8_T_DECLARED


	)

38 #i‚de‡
_INT16_T_DECLARED


39 
__öt16_t
 
	töt16_t
;

40 
	#_INT16_T_DECLARED


	)

43 #i‚de‡
_INT32_T_DECLARED


44 
__öt32_t
 
	töt32_t
;

45 
	#_INT32_T_DECLARED


	)

48 #i‚de‡
_INT64_T_DECLARED


49 
__öt64_t
 
	töt64_t
;

50 
	#_INT64_T_DECLARED


	)

53 #i‚de‡
_UINT8_T_DECLARED


54 
__uöt8_t
 
	tuöt8_t
;

55 
	#_UINT8_T_DECLARED


	)

58 #i‚de‡
_UINT16_T_DECLARED


59 
__uöt16_t
 
	tuöt16_t
;

60 
	#_UINT16_T_DECLARED


	)

63 #i‚de‡
_UINT32_T_DECLARED


64 
__uöt32_t
 
	tuöt32_t
;

65 
	#_UINT32_T_DECLARED


	)

68 #i‚de‡
_UINT64_T_DECLARED


69 
__uöt64_t
 
	tuöt64_t
;

70 
	#_UINT64_T_DECLARED


	)

73 #i‚de‡
_INTPTR_T_DECLARED


74 
__öçå_t
 
	töçå_t
;

75 
	#_INTPTR_T_DECLARED


	)

77 #i‚de‡
_UINTPTR_T_DECLARED


78 
__uöçå_t
 
	tuöçå_t
;

79 
	#_UINTPTR_T_DECLARED


	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/_types.h

29 #i‚de‡
_SYS__TYPES_H_


30 
	#_SYS__TYPES_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<machöe/_ty≥s.h
>

38 
__uöt32_t
 
	t__blksize_t
;

39 
__öt64_t
 
	t__blk˙t_t
;

40 
__öt32_t
 
	t__˛ockid_t
;

41 
__uöt64_t
 
	t__ˇp_rights_t
;

42 
__uöt32_t
 
	t__fÊags_t
;

43 
__uöt64_t
 
	t__fsblk˙t_t
;

44 
__uöt64_t
 
	t__fsfû˙t_t
;

45 
__uöt32_t
 
	t__gid_t
;

46 
__öt64_t
 
	t__id_t
;

47 
__uöt32_t
 
	t__öo_t
;

48 
	t__key_t
;

49 
__öt32_t
 
	t__lwpid_t
;

50 
__uöt16_t
 
	t__mode_t
;

51 
	t__accmode_t
;

52 
	t__∆_ôem
;

53 
__uöt16_t
 
	t__∆ök_t
;

54 
__öt64_t
 
	t__off_t
;

55 
__öt32_t
 
	t__pid_t
;

56 
__öt64_t
 
	t__æim_t
;

59 
__uöt8_t
 
	t__ß_Ámûy_t
;

60 
__uöt32_t
 
	t__sockÀn_t
;

61 
	t__su£c⁄ds_t
;

62 
__timî
 *
	t__timî_t
;

63 
__mq
 *
	t__mqd_t
;

64 
__uöt32_t
 
	t__uid_t
;

65 
	t__u£c⁄ds_t
;

66 
	t__˝uwhich_t
;

67 
	t__˝uÀvñ_t
;

68 
	t__˝u£tid_t
;

88 
	t__˘_ru√_t
;

89 
__˘_ru√_t
 
	t__ru√_t
;

90 
__˘_ru√_t
 
	t__wch¨_t
;

91 
__˘_ru√_t
 
	t__wöt_t
;

93 
__uöt32_t
 
	t__dev_t
;

95 
__uöt32_t
 
	t__fix±_t
;

102 
	m__mb°©e8
[128];

103 
__öt64_t
 
	m_mb°©eL
;

104 } 
	t__mb°©e_t
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/cdefs.h

36 #i‚def 
_SYS_CDEFS_H_


37 
	#_SYS_CDEFS_H_


	)

39 #i‡
deföed
(
__˝lu•lus
)

40 
	#__BEGIN_DECLS
 "C" {

	)

41 
	#__END_DECLS
 }

	)

43 
	#__BEGIN_DECLS


	)

44 
	#__END_DECLS


	)

53 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

55 #i‡
__GNUC__
 >3 || 
deföed
(
__INTEL_COMPILER
)

56 
	#__GNUCLIKE_ASM
 3

	)

57 
	#__GNUCLIKE_MATH_BUILTIN_CONSTANTS


	)

59 
	#__GNUCLIKE_ASM
 2

	)

61 
	#__GNUCLIKE___TYPEOF
 1

	)

62 
	#__GNUCLIKE___OFFSETOF
 1

	)

63 
	#__GNUCLIKE___SECTION
 1

	)

65 #i‚de‡
__INTEL_COMPILER


66 
	#__GNUCLIKE_CTOR_SECTION_HANDLING
 1

	)

69 
	#__GNUCLIKE_BUILTIN_CONSTANT_P
 1

	)

70 #i‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
__˝lu•lus
) \

71 && 
__INTEL_COMPILER
 < 800

72 #unde‡
__GNUCLIKE_BUILTIN_CONSTANT_P


75 #i‡(
__GNUC_MINOR__
 > 95 || 
__GNUC__
 >3Ë&& !
deföed
(
__INTEL_COMPILER
)

76 
	#__GNUCLIKE_BUILTIN_VARARGS
 1

	)

77 
	#__GNUCLIKE_BUILTIN_STDARG
 1

	)

78 
	#__GNUCLIKE_BUILTIN_VAALIST
 1

	)

81 #i‡
deföed
(
__GNUC__
)

82 
	#__GNUC_VA_LIST_COMPATIBILITY
 1

	)

85 #i‚de‡
__INTEL_COMPILER


86 
	#__GNUCLIKE_BUILTIN_NEXT_ARG
 1

	)

87 
	#__GNUCLIKE_MATH_BUILTIN_RELOPS


	)

90 
	#__GNUCLIKE_BUILTIN_MEMCPY
 1

	)

93 
	#__CC_SUPPORTS_INLINE
 1

	)

94 
	#__CC_SUPPORTS___INLINE
 1

	)

95 
	#__CC_SUPPORTS___INLINE__
 1

	)

97 
	#__CC_SUPPORTS___FUNC__
 1

	)

98 
	#__CC_SUPPORTS_WARNING
 1

	)

100 
	#__CC_SUPPORTS_VARADIC_XXX
 1

	)

102 
	#__CC_SUPPORTS_DYNAMIC_ARRAY_INIT
 1

	)

109 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__INTEL_COMPILER
)

110 
	#__GNUC_PREREQ__
(
ma
, 
mi
) \

111 (
__GNUC__
 > (
ma
Ë|| __GNUC__ =(maË&& 
__GNUC_MINOR__
 >(
mi
))

	)

113 
	#__GNUC_PREREQ__
(
ma
, 
mi
Ë0

	)

128 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
)

129 
	#__P
(
¥Ÿos
Ë¥Ÿo†

	)

130 
	#__CONCAT1
(
x
,
y
Ëx ## 
	)
y

131 
	#__CONCAT
(
x
,
y
Ë
	`__CONCAT1
(x,y)

	)

132 
	#__STRING
(
x
Ë#x

	)

133 
	#__XSTRING
(
x
Ë
	`__STRING
(xË

	)

135 
	#__c⁄°
 c⁄°

	)

136 
	#__sig√d
 sig√d

	)

137 
	#__vﬁ©ûe
 vﬁ©ûe

	)

138 #i‡
deföed
(
__˝lu•lus
)

139 
	#__ölöe
 
ölöe


	)

141 #i‡!(
deföed
(
__CC_SUPPORTS___INLINE
))

142 
	#__ölöe


	)

147 
	#__P
(
¥Ÿos
Ë(Ë

	)

148 
	#__CONCAT
(
x
,
y
Ëx 
	)
y

149 
	#__STRING
(
x
Ë"x"

	)

151 #i‡!
deföed
(
__CC_SUPPORTS___INLINE
)

152 
	#__c⁄°


	)

153 
	#__ölöe


	)

154 
	#__sig√d


	)

155 
	#__vﬁ©ûe


	)

164 #i‚def 
NO_ANSI_KEYWORDS


165 c⁄°

	)

166 
	#ölöe


	)

167 sig√d

	)

168 vﬁ©ûe

	)

182 #ifde‡
löt


183 
	#__dód2


	)

184 
	#__puª2


	)

185 
	#__unu£d


	)

186 
	#__∑cked


	)

187 
	#__Æig√d
(
x
)

	)

188 
	#__£˘i⁄
(
x
)

	)

190 #i‡!
__GNUC_PREREQ__
(2, 5Ë&& !
deföed
(
__INTEL_COMPILER
)

191 
	#__dód2


	)

192 
	#__puª2


	)

193 
	#__unu£d


	)

195 #i‡
__GNUC__
 =2 && 
__GNUC_MINOR__
 >5 && __GNUC_MINOR__ < 7 && !
deföed
(
__INTEL_COMPILER
)

196 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

197 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

198 
	#__unu£d


	)

201 #i‡
__GNUC_PREREQ__
(2, 7)

202 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

203 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

204 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

205 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

206 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

207 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

208 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

210 #i‡
deföed
(
__INTEL_COMPILER
)

211 
	#__dód2
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

212 
	#__puª2
 
	`__©åibuã__
((
__c⁄°__
))

	)

213 
	#__unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

214 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

215 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

216 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

217 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

221 #i‡!
__GNUC_PREREQ__
(2, 95)

222 
	#__Æignof
(
x
Ë
	`__off£tof
(°ru˘ { 
__a
; x 
__b
; }, __b)

	)

228 #i‡
deföed
(
__˝lu•lus
) && __cplusplus >= 201103L

229 
	#_Alig«s
(
e
Ë
	`Æig«s
”)

	)

230 
	#_Alignof
(
e
Ë
	`Æignof
”)

	)

231 
	#_N‹ëu∫
 [[
n‹ëu∫
]]

	)

232 
	#_Sètic_as£π
(
e
, 
s
Ë
	`°©ic_as£π
”, s)

	)

234 
	#_Thªad_loˇl
 
__thªad


	)

235 #ñi‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

239 
	#_Alig«s
(
x
Ë
	`__Æig√d
(x)

	)

240 
	#_Alignof
(
x
Ë
	`__Æignof
(x)

	)

241 
	#_N‹ëu∫
 
__dód2


	)

242 
	#_Thªad_loˇl
 
__thªad


	)

243 #ifde‡
__COUNTER__


244 
	#_Sètic_as£π
(
x
, 
y
Ë
	`__Sètic_as£π
(x, 
__COUNTER__
)

	)

245 
	#__Sètic_as£π
(
x
, 
y
Ë
	`___Sètic_as£π
(x, y)

	)

246 
	#___Sètic_as£π
(
x
, 
y
Ë
	t__as£π_
 ## 
	ty
[(xË? 1 : -1]

	)

248 
	t_Sètic_as£π
(
	tx
, 
	ty
Ë
	t__hack


	)

261 #i‡
	tdeföed
(
	t__STDC_VERSION__
) && __STDC_VERSION__ >= 201112L

262 
	t__gíîic
(
	tex¥
, 
	tt
, 
	tyes
, 
	tno
) \

263 
	t_Gíîic
(
	tex¥
, 
	tt
: 
	tyes
, : 
	tno
)

	)

264 #ñi‡
	t__GNUC_PREREQ__
(3, 1Ë&& !
	tdeföed
(
	t__˝lu•lus
)

265 
	t__gíîic
(
	tex¥
, 
	tt
, 
	tyes
, 
	tno
) \

266 
	t__buûtö_choo£_ex¥
( \

267 
	t__buûtö_ty≥s_com∑tibÀ_p
(
	t__ty≥of
(
	tex¥
), 
	tt
), 
	tyes
, 
	tno
)

	)

270 #i‡
	t__GNUC_PREREQ__
(2, 96)

271 
	t__mÆloc_like
 
	t__©åibuã__
((
	t__mÆloc__
))

	)

272 
	t__puª
 
	t__©åibuã__
((
	t__puª__
))

	)

274 
	t__mÆloc_like


	)

275 
	t__puª


	)

278 #i‡
	t__GNUC_PREREQ__
(3, 1Ë|| (
	tdeföed
(
	t__INTEL_COMPILER
) && __INTEL_COMPILER >= 800)

279 
	t__Æways_ölöe
 
	t__©åibuã__
((
	t__Æways_ölöe__
))

	)

281 
	t__Æways_ölöe


	)

284 #i‡
	t__GNUC_PREREQ__
(3, 1)

285 
	t__noölöe
 
	t__©åibuã__
 ((
	t__noölöe__
))

	)

287 
	t__noölöe


	)

290 #i‡
	t__GNUC_PREREQ__
(3, 3)

291 
	t__n⁄nuŒ
(
	tx
Ë
	t__©åibuã__
((
	t__n⁄nuŒ__
(x)))

	)

293 
	t__n⁄nuŒ
(
	tx
)

	)

296 #i‡
	t__GNUC_PREREQ__
(3, 4)

297 
	t__Á°ˇŒ
 
	t__©åibuã__
((
	t__Á°ˇŒ__
))

	)

299 
	t__Á°ˇŒ


	)

302 #i‡
	t__GNUC_PREREQ__
(4, 1)

303 
	t__ªtu∫s_twi˚
 
	t__©åibuã__
((
	t__ªtu∫s_twi˚__
))

	)

305 
	t__ªtu∫s_twi˚


	)

309 #i‡!
	t__GNUC_PREREQ__
(2, 7Ë&& !
	tdeföed
(
	t__INTEL_COMPILER
)

310 
	t__func__
 
	tNULL


	)

313 #i‡(
	tdeföed
(
	t__INTEL_COMPILER
Ë|| (deföed(
	t__GNUC__
Ë&& __GNUC__ >2)Ë&& !deföed(
	t__STRICT_ANSI__
Ë|| 
	t__STDC_VERSION__
 >= 199901

314 
	t__LONG_LONG_SUPPORTED


	)

318 #i‡
	tdeföed
(
	t__˝lu•lus
) && __cplusplus >= 201103L

319 
	t__LONG_LONG_SUPPORTED


	)

320 #i‚def 
	t__STDC_LIMIT_MACROS


321 
	t__STDC_LIMIT_MACROS


	)

323 #i‚def 
	t__STDC_CONSTANT_MACROS


324 
	t__STDC_CONSTANT_MACROS


	)

334 #i‡!(
	t__GNUC__
 =2 && 
	t__GNUC_MINOR__
 == 95)

335 #i‡!
	tdeföed
(
	t__STDC_VERSION__
Ë|| __STDC_VERSION__ < 199901 || deföed(
	tlöt
)

336 
	t__ª°ri˘


	)

338 
	t__ª°ri˘
 
	tª°ri˘


	)

370 #i‡
	t__GNUC_PREREQ__
(2, 96)

371 
	t__¥edi˘_åue
(
	texp
Ë
	t__buûtö_ex≥˘
(”xp), 1)

	)

372 
	t__¥edi˘_Ál£
(
	texp
Ë
	t__buûtö_ex≥˘
(”xp), 0)

	)

374 
	t__¥edi˘_åue
(
	texp
Ë”xp)

	)

375 
	t__¥edi˘_Ál£
(
	texp
Ë”xp)

	)

378 #i‡
	t__GNUC_PREREQ__
(4, 2)

379 
	t__hiddí
 
	t__©åibuã__
((
	t__visibûôy__
("hiddí")))

	)

380 
	t__exp‹ãd
 
	t__©åibuã__
((
	t__visibûôy__
("deÁu…")))

	)

382 
	t__hiddí


	)

383 
	t__exp‹ãd


	)

390 #i‡
	t__GNUC_PREREQ__
(4, 1)

391 
	t__off£tof
(
	tty≥
, 
	tfõld
Ë
	t__buûtö_off£tof
—y≥, fõld)

	)

393 #i‚de‡
	t__˝lu•lus


394 
	t__off£tof
(
	tty≥
, 
	tfõld
) \

395 ((
	t__size_t
)(
	t__uöçå_t
)((c⁄° vﬁ©ûê*)&((
	tty≥
 *)0)->
	tfõld
))

	)

397 
	t__off£tof
(
	tty≥
, 
	tfõld
) \

398 (
	t__off£tof__
 (
	tªöãΩªt_ˇ°
 <
	t__size_t
> \

399 (&
	tªöãΩªt_ˇ°
 <const volatile &> \

400 (
	t°©ic_ˇ°
<
	tty≥
 *> (0)->
	tfõld
))))

	)

403 
	t__øngeof
(
	tty≥
, 
	t°¨t
, 
	tíd
) \

404 (
	t__off£tof
(
	tty≥
, 
	tíd
Ë- __off£tof—y≥, 
	t°¨t
))

	)

412 #i‡
	t__GNUC_PREREQ__
(3, 1)

413 
	t__c⁄èöîof
(
	tx
, 
	ts
, 
	tm
) ({ \

414 c⁄° vﬁ©ûê
	`__ty≥of
(((
s
 *)0)->
m
Ë*
__x
 = (
x
); \

415 
	`__DEQUALIFY
(
s
 *, (c⁄° vﬁ©ûê*)
__x
 - 
	`__off£tof
(s, 
m
));\

416 })

	)

418 
	t__c⁄èöîof
(
	tx
, 
	ts
, 
	tm
) \

419 
	t__DEQUALIFY
(
	ts
 *, (c⁄° vﬁ©ûê*)(
	tx
Ë- 
	t__off£tof
(s, 
	tm
))

	)

428 #i‡!
	t__GNUC_PREREQ__
(2, 7Ë&& !
	tdeföed
(
	t__INTEL_COMPILER
)

429 
	t__¥ötÊike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

430 
	t__sˇnÊike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

431 
	t__f‹m©_¨g
(
	tfmèrg
)

	)

432 
	t__°rfm⁄like
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

433 
	t__°r·imñike
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

435 
	t__¥ötÊike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

436 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__¥ötf__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

437 
	t__sˇnÊike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

438 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__sˇnf__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

439 
	t__f‹m©_¨g
(
	tfmèrg
Ë
	t__©åibuã__
((
	t__f‹m©_¨g__
 (fmèrg)))

	)

440 
	t__°rfm⁄like
(
	tfmèrg
, 
	tfú°v¨¨g
) \

441 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__°rfm⁄__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

442 
	t__°r·imñike
(
	tfmèrg
, 
	tfú°v¨¨g
) \

443 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__°r·ime__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

447 #i‡
	t__FªeBSD_cc_vîsi⁄
 >300001 && 
	tdeföed
(
	t__GNUC__
Ë&& !deföed(
	t__INTEL_COMPILER
)

448 
	t__¥ötf0like
(
	tfmèrg
, 
	tfú°v¨¨g
) \

449 
	t__©åibuã__
((
	t__f‹m©__
 (
	t__¥ötf0__
, 
	tfmèrg
, 
	tfú°v¨¨g
)))

	)

451 
	t__¥ötf0like
(
	tfmèrg
, 
	tfú°v¨¨g
)

	)

454 #i‡
	tdeföed
(
	t__GNUC__
Ë|| deföed(
	t__INTEL_COMPILER
)

455 #i‚de‡
	t__INTEL_COMPILER


456 
	t__°r⁄g_ª„ªn˚
(
	tsym
,
	tÆüssym
) \

457 
	t__ty≥of
 (
	tsym
Ë
	tÆüssym
 
	t__©åibuã__
 ((
	t__Æüs__
 (#sym)))

	)

459 #ifde‡
	t__STDC__


460 
	t__wók_ª„ªn˚
(
	tsym
,
	tÆüs
) \

461 
	t__asm__
(".weak " #alias); \

462 
	`__asm__
(".equ " #Æü†", " #sym)

	)

463 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

464 
	`__asm__
(".section .gnu.warning." #sym); \

465 
	`__asm__
(".asciz \"" 
msg
 "\""); \

466 
	`__asm__
(".¥evious")

	)

467 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

468 
	`__asm__
(".symvî " #im∂ ", " #sym "@" #vîid)

	)

469 
	#__sym_deÁu…
(
sym
,
im∂
,
vîid
) \

470 
	`__asm__
(".symvî " #im∂ ", " #sym "@@" #vîid)

	)

472 
	#__wók_ª„ªn˚
(
sym
,
Æüs
) \

473 
	`__asm__
(".weakálias"); \

474 
	`__asm__
(".equálüs, sym")

	)

475 
	#__w¨n_ª„ªn˚s
(
sym
,
msg
) \

476 
	`__asm__
(".section .gnu.warning.sym"); \

477 
	`__asm__
(".asciz \"msg\""); \

478 
	`__asm__
(".¥evious")

	)

479 
	#__sym_com∑t
(
sym
,
im∂
,
vîid
) \

480 
	`__asm__
(".symvî im∂, sym@vîid")

	)

481 
	#__sym_deÁu…
(
im∂
,
sym
,
vîid
) \

482 
	`__asm__
(".symvî im∂, sym@@vîid")

	)

486 
	#__GLOBL1
(
sym
Ë
	`__asm__
(".glob»" #sym)

	)

487 
	#__GLOBL
(
sym
Ë
	`__GLOBL1
(sym)

	)

489 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__INTEL_COMPILER
)

490 
	#__IDSTRING
(
«me
,
°rög
Ë
	`__asm__
(".idít\t\"" såög "\"")

	)

498 
	#__IDSTRING
(
«me
,
°rög
Ëc⁄° «me[] 
__unu£d
 = 
	)
°rög

507 #i‚def 
__FBSDID


508 #i‡!
deföed
(
löt
Ë&& !deföed(
STRIP_FBSDID
)

509 
	#__FBSDID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

511 
	#__FBSDID
(
s
Ë
__hack


	)

515 #i‚def 
__RCSID


516 #i‚def 
NO__RCSID


517 
	#__RCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_
,
__LINE__
),s)

	)

519 
	#__RCSID
(
s
Ë
__hack


	)

523 #i‚def 
__RCSID_SOURCE


524 #i‚def 
NO__RCSID_SOURCE


525 
	#__RCSID_SOURCE
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__rcsid_sour˚_
,
__LINE__
),s)

	)

527 
	#__RCSID_SOURCE
(
s
Ë
__hack


	)

531 #i‚def 
__SCCSID


532 #i‚def 
NO__SCCSID


533 
	#__SCCSID
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__sccsid_
,
__LINE__
),s)

	)

535 
	#__SCCSID
(
s
Ë
__hack


	)

539 #i‚def 
__COPYRIGHT


540 #i‚def 
NO__COPYRIGHT


541 
	#__COPYRIGHT
(
s
Ë
	`__IDSTRING
(
	`__CONCAT
(
__c›yright_
,
__LINE__
),s)

	)

543 
	#__COPYRIGHT
(
s
Ë
__hack


	)

547 #i‚def 
__DECONST


548 
	#__DECONST
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(c⁄° *)(v¨))

	)

551 #i‚def 
__DEVOLATILE


552 
	#__DEVOLATILE
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(vﬁ©ûê*)(v¨))

	)

555 #i‚def 
__DEQUALIFY


556 
	#__DEQUALIFY
(
ty≥
, 
v¨
Ë(—y≥)(
__uöçå_t
)(c⁄° vﬁ©ûê*)(v¨))

	)

583 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 1

584 #unde‡
_POSIX_C_SOURCE


585 
	#_POSIX_C_SOURCE
 199009

	)

589 #i‡
deföed
(
_POSIX_C_SOURCE
) && _POSIX_C_SOURCE == 2

590 #unde‡
_POSIX_C_SOURCE


591 
	#_POSIX_C_SOURCE
 199209

	)

595 #ifde‡
_XOPEN_SOURCE


596 #i‡
_XOPEN_SOURCE
 - 0 >= 700

597 
	#__XSI_VISIBLE
 700

	)

598 #unde‡
_POSIX_C_SOURCE


599 
	#_POSIX_C_SOURCE
 200809

	)

600 #ñi‡
_XOPEN_SOURCE
 - 0 >= 600

601 
	#__XSI_VISIBLE
 600

	)

602 #unde‡
_POSIX_C_SOURCE


603 
	#_POSIX_C_SOURCE
 200112

	)

604 #ñi‡
_XOPEN_SOURCE
 - 0 >= 500

605 
	#__XSI_VISIBLE
 500

	)

606 #unde‡
_POSIX_C_SOURCE


607 
	#_POSIX_C_SOURCE
 199506

	)

615 #i‡
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

616 
	#_POSIX_C_SOURCE
 198808

	)

618 #ifde‡
_POSIX_C_SOURCE


619 #i‡
_POSIX_C_SOURCE
 >= 200809

620 
	#__POSIX_VISIBLE
 200809

	)

621 
	#__ISO_C_VISIBLE
 1999

	)

622 #ñi‡
_POSIX_C_SOURCE
 >= 200112

623 
	#__POSIX_VISIBLE
 200112

	)

624 
	#__ISO_C_VISIBLE
 1999

	)

625 #ñi‡
_POSIX_C_SOURCE
 >= 199506

626 
	#__POSIX_VISIBLE
 199506

	)

627 
	#__ISO_C_VISIBLE
 1990

	)

628 #ñi‡
_POSIX_C_SOURCE
 >= 199309

629 
	#__POSIX_VISIBLE
 199309

	)

630 
	#__ISO_C_VISIBLE
 1990

	)

631 #ñi‡
_POSIX_C_SOURCE
 >= 199209

632 
	#__POSIX_VISIBLE
 199209

	)

633 
	#__ISO_C_VISIBLE
 1990

	)

634 #ñi‡
_POSIX_C_SOURCE
 >= 199009

635 
	#__POSIX_VISIBLE
 199009

	)

636 
	#__ISO_C_VISIBLE
 1990

	)

638 
	#__POSIX_VISIBLE
 198808

	)

639 
	#__ISO_C_VISIBLE
 0

	)

654 #i‡
deföed
(
_ANSI_SOURCE
)

655 
	#__POSIX_VISIBLE
 0

	)

656 
	#__XSI_VISIBLE
 0

	)

657 
	#__BSD_VISIBLE
 0

	)

658 
	#__ISO_C_VISIBLE
 1990

	)

659 #ñi‡
deföed
(
_C99_SOURCE
)

660 
	#__POSIX_VISIBLE
 0

	)

661 
	#__XSI_VISIBLE
 0

	)

662 
	#__BSD_VISIBLE
 0

	)

663 
	#__ISO_C_VISIBLE
 1999

	)

665 
	#__POSIX_VISIBLE
 200809

	)

666 
	#__XSI_VISIBLE
 700

	)

667 
	#__BSD_VISIBLE
 1

	)

668 
	#__ISO_C_VISIBLE
 1999

	)

672 #i‚def 
__has_„©uª


673 
	#__has_„©uª
(
x
Ë0

	)

675 #i‚def 
__has_ö˛ude


676 
	#__has_ö˛ude
(
x
Ë0

	)

678 #i‚def 
__has_buûtö


679 
	#__has_buûtö
(
x
Ë0

	)

682 #i‡
deföed
(
__mùs
Ë|| deföed(
__powîpc64__
Ë|| deföed(
__¨m__
)

683 
	#__NO_TLS
 1

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/ctype.h

42 #i‚de‡
_SYS_CTYPE_H_


43 
	#_SYS_CTYPE_H_


	)

45 
	#is•a˚
(
c
Ë((cË=' ' || ((cË>'\t' && (cË<'\r'))

	)

46 
	#ißscii
(
c
Ë(((cË& ~0x7fË=0)

	)

47 
	#isuµî
(
c
Ë((cË>'A' && (cË<'Z')

	)

48 
	#i¶owî
(
c
Ë((cË>'a' && (cË<'z')

	)

49 
	#ißÕha
(
c
Ë(
	`isuµî
(cË|| 
	`i¶owî
(c))

	)

50 
	#isdigô
(
c
Ë((cË>'0' && (cË<'9')

	)

51 
	#isxdigô
(
c
Ë(
	`isdigô
(c) \

52 || ((
c
) >= 'A' && (c) <= 'F') \

53 || ((
c
Ë>'a' && (cË<'f'))

	)

54 
	#i•röt
(
c
Ë((cË>' ' && (cË<'~')

	)

56 
	#touµî
(
c
Ë((cË- 0x20 * (((cË>'a'Ë&& ((cË<'z')))

	)

57 
	#tﬁowî
(
c
Ë((cË+ 0x20 * (((cË>'A'Ë&& ((cË<'Z')))

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/errno.h

38 #i‚de‡
_SYS_ERRNO_H_


39 
	#_SYS_ERRNO_H_


	)

41 #i‚de‡
_KERNEL


42 
	~<sys/cdefs.h
>

43 
__BEGIN_DECLS


44 * 
__îr‹
();

45 
	g__END_DECLS


46 
	#î∫o
 (* 
	`__îr‹
())

	)

49 
	#EPERM
 1

	)

50 
	#ENOENT
 2

	)

51 
	#ESRCH
 3

	)

52 
	#EINTR
 4

	)

53 
	#EIO
 5

	)

54 
	#ENXIO
 6

	)

55 
	#E2BIG
 7

	)

56 
	#ENOEXEC
 8

	)

57 
	#EBADF
 9

	)

58 
	#ECHILD
 10

	)

59 
	#EDEADLK
 11

	)

61 
	#ENOMEM
 12

	)

62 
	#EACCES
 13

	)

63 
	#EFAULT
 14

	)

64 #i‚de‡
_POSIX_SOURCE


65 
	#ENOTBLK
 15

	)

67 
	#EBUSY
 16

	)

68 
	#EEXIST
 17

	)

69 
	#EXDEV
 18

	)

70 
	#ENODEV
 19

	)

71 
	#ENOTDIR
 20

	)

72 
	#EISDIR
 21

	)

73 
	#EINVAL
 22

	)

74 
	#ENFILE
 23

	)

75 
	#EMFILE
 24

	)

76 
	#ENOTTY
 25

	)

77 #i‚de‡
_POSIX_SOURCE


78 
	#ETXTBSY
 26

	)

80 
	#EFBIG
 27

	)

81 
	#ENOSPC
 28

	)

82 
	#ESPIPE
 29

	)

83 
	#EROFS
 30

	)

84 
	#EMLINK
 31

	)

85 
	#EPIPE
 32

	)

88 
	#EDOM
 33

	)

89 
	#ERANGE
 34

	)

92 
	#EAGAIN
 35

	)

93 #i‚de‡
_POSIX_SOURCE


94 
	#EWOULDBLOCK
 
EAGAIN


	)

95 
	#EINPROGRESS
 36

	)

96 
	#EALREADY
 37

	)

99 
	#ENOTSOCK
 38

	)

100 
	#EDESTADDRREQ
 39

	)

101 
	#EMSGSIZE
 40

	)

102 
	#EPROTOTYPE
 41

	)

103 
	#ENOPROTOOPT
 42

	)

104 
	#EPROTONOSUPPORT
 43

	)

105 
	#ESOCKTNOSUPPORT
 44

	)

106 
	#EOPNOTSUPP
 45

	)

107 
	#ENOTSUP
 
EOPNOTSUPP


	)

108 
	#EPFNOSUPPORT
 46

	)

109 
	#EAFNOSUPPORT
 47

	)

110 
	#EADDRINUSE
 48

	)

111 
	#EADDRNOTAVAIL
 49

	)

114 
	#ENETDOWN
 50

	)

115 
	#ENETUNREACH
 51

	)

116 
	#ENETRESET
 52

	)

117 
	#ECONNABORTED
 53

	)

118 
	#ECONNRESET
 54

	)

119 
	#ENOBUFS
 55

	)

120 
	#EISCONN
 56

	)

121 
	#ENOTCONN
 57

	)

122 
	#ESHUTDOWN
 58

	)

123 
	#ETOOMANYREFS
 59

	)

124 
	#ETIMEDOUT
 60

	)

125 
	#ECONNREFUSED
 61

	)

127 
	#ELOOP
 62

	)

129 
	#ENAMETOOLONG
 63

	)

132 #i‚de‡
_POSIX_SOURCE


133 
	#EHOSTDOWN
 64

	)

134 
	#EHOSTUNREACH
 65

	)

136 
	#ENOTEMPTY
 66

	)

139 #i‚de‡
_POSIX_SOURCE


140 
	#EPROCLIM
 67

	)

141 
	#EUSERS
 68

	)

142 
	#EDQUOT
 69

	)

145 
	#ESTALE
 70

	)

146 
	#EREMOTE
 71

	)

147 
	#EBADRPC
 72

	)

148 
	#ERPCMISMATCH
 73

	)

149 
	#EPROGUNAVAIL
 74

	)

150 
	#EPROGMISMATCH
 75

	)

151 
	#EPROCUNAVAIL
 76

	)

154 
	#ENOLCK
 77

	)

155 
	#ENOSYS
 78

	)

157 #i‚de‡
_POSIX_SOURCE


158 
	#EFTYPE
 79

	)

159 
	#EAUTH
 80

	)

160 
	#ENEEDAUTH
 81

	)

161 
	#EIDRM
 82

	)

162 
	#ENOMSG
 83

	)

163 
	#EOVERFLOW
 84

	)

164 
	#ECANCELED
 85

	)

165 
	#EILSEQ
 86

	)

166 
	#ENOATTR
 87

	)

168 
	#EDOOFUS
 88

	)

171 
	#EBADMSG
 89

	)

172 
	#EMULTIHOP
 90

	)

173 
	#ENOLINK
 91

	)

174 
	#EPROTO
 92

	)

176 #i‚de‡
_POSIX_SOURCE


177 
	#ENOTCAPABLE
 93

	)

178 
	#ECAPMODE
 94

	)

181 #i‚de‡
_POSIX_SOURCE


182 
	#ELAST
 94

	)

185 #ifde‡
_KERNEL


187 
	#ERESTART
 (-1Ë

	)

188 
	#EJUSTRETURN
 (-2Ë

	)

189 
	#ENOIOCTL
 (-3Ë

	)

190 
	#EDIRIOCTL
 (-4Ë

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/limits.h

32 #i‚de‡
_SYS_LIMITS_H_


33 
	#_SYS_LIMITS_H_


	)

35 
	~<sys/cdefs.h
>

36 
	~<machöe/_limôs.h
>

38 
	#CHAR_BIT
 
__CHAR_BIT


	)

40 
	#SCHAR_MAX
 
__SCHAR_MAX


	)

41 
	#SCHAR_MIN
 
__SCHAR_MIN


	)

43 
	#UCHAR_MAX
 
__UCHAR_MAX


	)

45 #ifde‡
__CHAR_UNSIGNED__


46 
	#CHAR_MAX
 
UCHAR_MAX


	)

47 
	#CHAR_MIN
 0

	)

49 
	#CHAR_MAX
 
SCHAR_MAX


	)

50 
	#CHAR_MIN
 
SCHAR_MIN


	)

53 
	#USHRT_MAX
 
__USHRT_MAX


	)

54 
	#SHRT_MAX
 
__SHRT_MAX


	)

55 
	#SHRT_MIN
 
__SHRT_MIN


	)

57 
	#UINT_MAX
 
__UINT_MAX


	)

58 
	#INT_MAX
 
__INT_MAX


	)

59 
	#INT_MIN
 
__INT_MIN


	)

61 
	#ULONG_MAX
 
__ULONG_MAX


	)

62 
	#LONG_MAX
 
__LONG_MAX


	)

63 
	#LONG_MIN
 
__LONG_MIN


	)

65 #ifde‡
__LONG_LONG_SUPPORTED


66 
	#ULLONG_MAX
 
__ULLONG_MAX


	)

67 
	#LLONG_MAX
 
__LLONG_MAX


	)

68 
	#LLONG_MIN
 
__LLONG_MIN


	)

71 #i‡
__POSIX_VISIBLE
 || 
__XSI_VISIBLE


72 
	#SSIZE_MAX
 
__SSIZE_MAX


	)

75 #i‡
__POSIX_VISIBLE
 >200112 || 
__XSI_VISIBLE


76 
	#SIZE_T_MAX
 
__SIZE_T_MAX


	)

78 
	#OFF_MAX
 
__OFF_MAX


	)

79 
	#OFF_MIN
 
__OFF_MIN


	)

82 #i‡
__BSD_VISIBLE


83 
	#GID_MAX
 
UINT_MAX


	)

84 
	#UID_MAX
 
UINT_MAX


	)

86 
	#UQUAD_MAX
 (
__UQUAD_MAX
Ë

	)

87 
	#QUAD_MAX
 (
__QUAD_MAX
Ë

	)

88 
	#QUAD_MIN
 (
__QUAD_MIN
Ë

	)

91 #i‡
__XSI_VISIBLE
 || 
__POSIX_VISIBLE
 >= 200809

92 
	#LONG_BIT
 
__LONG_BIT


	)

93 
	#WORD_BIT
 
__WORD_BIT


	)

96 #i‡
__POSIX_VISIBLE


97 
	#MQ_PRIO_MAX
 64

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/stdarg.h

31 #i‚de‡
_MACHINE_STDARG_H_


32 
	#_MACHINE_STDARG_H_


	)

34 
	~<sys/cdefs.h
>

35 
	~<sys/_ty≥s.h
>

37 #i‚de‡
_VA_LIST_DECLARED


38 
	#_VA_LIST_DECLARED


	)

39 
__va_li°
 
	tva_li°
;

42 #ifde‡
__GNUCLIKE_BUILTIN_STDARG


44 
	#va_°¨t
(
≠
, 
œ°
) \

45 
	`__buûtö_va_°¨t
((
≠
), (
œ°
))

	)

47 
	#va_¨g
(
≠
, 
ty≥
) \

48 
	`__buûtö_va_¨g
((
≠
), 
ty≥
)

	)

50 
	#__va_c›y
(
de°
, 
§c
) \

51 
	`__buûtö_va_c›y
((
de°
), (
§c
))

	)

53 #i‡
__ISO_C_VISIBLE
 >= 1999

54 
	#va_c›y
(
de°
, 
§c
) \

55 
	`__va_c›y
(
de°
, 
§c
)

	)

58 
	#va_íd
(
≠
) \

59 
	`__buûtö_va_íd
(
≠
)

	)

61 #ñi‡
deföed
(
löt
)

63 
	#__va_size
(
ty≥
) \

64 ((((
ty≥
Ë+ (Ë- 1Ë/ ()Ë* ())

	)

65 
	#va_°¨t
(
≠
, 
œ°
) \

66 ((
≠
Ë(
va_li°
)&(
œ°
Ë+ 
	`__va_size
÷a°))

	)

67 
	#va_¨g
(
≠
, 
ty≥
) \

68 (*(
ty≥
 *)((
≠
Ë+
	`__va_size
—y≥), (≠Ë- __va_size—y≥)))

	)

69 
	#va_íd
(
≠
)

	)

72 #îr‹ 
this
 
fûe
 
√eds
 
to
 
be
 
p‹ãd
Åÿ
your
 
compûî


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/stdint.h

29 #i‚de‡
_SYS_STDINT_H_


30 
	#_SYS_STDINT_H_


	)

32 
	~<sys/cdefs.h
>

33 
	~<sys/_ty≥s.h
>

35 
	~<machöe/_°döt.h
>

36 
	~<sys/_°döt.h
>

38 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

39 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

40 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

41 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

43 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

44 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

45 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

46 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

48 
__öt_Á°8_t
 
	töt_Á°8_t
;

49 
__öt_Á°16_t
 
	töt_Á°16_t
;

50 
__öt_Á°32_t
 
	töt_Á°32_t
;

51 
__öt_Á°64_t
 
	töt_Á°64_t
;

53 
__uöt_Á°8_t
 
	tuöt_Á°8_t
;

54 
__uöt_Á°16_t
 
	tuöt_Á°16_t
;

55 
__uöt_Á°32_t
 
	tuöt_Á°32_t
;

56 
__uöt_Á°64_t
 
	tuöt_Á°64_t
;

58 #i‚de‡
_INTMAX_T_DECLARED


59 
__ötmax_t
 
	tötmax_t
;

60 
	#_INTMAX_T_DECLARED


	)

62 #i‚de‡
_UINTMAX_T_DECLARED


63 
__uötmax_t
 
	tuötmax_t
;

64 
	#_UINTMAX_T_DECLARED


	)

68 #i‡
deföed
(
UINTPTR_MAX
Ë&& deföed(
UINT64_MAX
) && (UINTPTR_MAX == UINT64_MAX)

69 
	#__WORDSIZE
 64

	)

71 
	#__WORDSIZE
 32

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/uuid.h

34 #i‚de‡
_SYS_UUID_H_


35 
	#_SYS_UUID_H_


	)

37 
	~<sys/cdefs.h
>

40 
	#_UUID_NODE_LEN
 6

	)

49 
	suuid
 {

50 
uöt32_t
 
	mtime_low
;

51 
uöt16_t
 
	mtime_mid
;

52 
uöt16_t
 
	mtime_hi_™d_vîsi⁄
;

53 
uöt8_t
 
	m˛ock_£q_hi_™d_ª£rved
;

54 
uöt8_t
 
	m˛ock_£q_low
;

55 
uöt8_t
 
	mnode
[
_UUID_NODE_LEN
];

59 
uuid
 
	tuuid_t
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/cache_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

34 .
globl
 
	gdcisw


35 .
globl
 
	gdccisw


36 .
globl
 
	gdccsw


37 .
globl
 
	gdccvac


38 .
globl
 
	gdcivac


39 .
globl
 
	gdccivac


40 .
globl
 
	gdccvau


41 .
globl
 
	gdczva


42 .
globl
 
	gÊush_dˇche_ønge


43 .
globl
 
	göv_dˇche_ønge


44 .
globl
 
	gdcsw_›_louis


45 .
globl
 
	gdcsw_›_Æl


46 .
globl
 
	gdis_i_d_dcsw_›_Æl


47 .
globl
 
íabÀ_ˇche


49 
func
 
dcisw


50 
dc
 
	gisw
, 
x0


51 
ªt


54 
func
 
dccisw


55 
dc
 
	gcisw
, 
x0


56 
ªt


59 
func
 
dccsw


60 
dc
 
	gcsw
, 
x0


61 
ªt


64 
func
 
dccvac


65 
dc
 
	gcvac
, 
x0


66 
ªt


69 
func
 
dcivac


70 
dc
 
	givac
, 
x0


71 
ªt


74 
func
 
dccivac


75 
dc
 
	gcivac
, 
x0


76 
ªt


79 
func
 
dccvau


80 
dc
 
	gcvau
, 
x0


81 
ªt


84 
func
 
dczva


85 
dc
 
	gzva
, 
x0


86 
ªt


94 
func
 
Êush_dˇche_ønge


95 
dˇche_löe_size
 
	gx2
, 
x3


96 
add
 
	gx1
, 
	gx0
, 
x1


97 
sub
 
	gx3
, 
	gx2
, #1

98 
bic
 
	gx0
, x0, 
x3


99 
	gÊush_lo›
:

100 
dc
 
civac
, 
x0


101 
add
 
	gx0
, x0, 
x2


102 
cmp
 
	gx0
, 
x1


103 
	gb
.
lo
 
Êush_lo›


104 
dsb
 
sy


105 
ªt


113 
func
 
öv_dˇche_ønge


114 
dˇche_löe_size
 
	gx2
, 
x3


115 
add
 
	gx1
, 
	gx0
, 
x1


116 
sub
 
	gx3
, 
	gx2
, #1

117 
bic
 
	gx0
, x0, 
x3


118 
	göv_lo›
:

119 
dc
 
ivac
, 
x0


120 
add
 
	gx0
, x0, 
x2


121 
cmp
 
	gx0
, 
x1


122 
	gb
.
lo
 
öv_lo›


123 
dsb
 
sy


124 
	gªt


142 .
ma¸o
 
dcsw_›
 
	gshi·
, 
	gfw
, 
ls


143 
mrs
 
	gx9
, 
˛idr_ñ1


144 
ubfx
 
	gx3
, 
	gx9
, \
	gshi·
, \
fw


145 
l¶
 
	gx3
, x3, \
ls


146 
b
 
	gdo_dcsw_›


147 .
	gídm


149 .
ma¸o
 
dis_i_d_dcsw_›
 
	gshi·
, 
	gfw
, 
ls


150 
mov
 
	gx1
, #(
	gSCTLR_C_BIT
 | 
	gSCTLR_I_BIT
)

151 
mrs
 
	gx2
, 
s˘Ã_ñ3


152 
bic
 
	gx2
, x2, 
x1


153 
m§
 
	gs˘Ã_ñ3
, 
x2


154 
isb


155 
dsb
 
sy


156 
mrs
 
	gx9
, 
˛idr_ñ1


157 
ubfx
 
	gx3
, 
	gx9
, \
	gshi·
, \
fw


158 
l¶
 
	gx3
, x3, \
ls


159 
b
 
	gdo_dcsw_›


160 .
ídm


162 
func
 
do_dcsw_›


163 
cbz
 
	gx3
, 
exô


164 
mov
 
	gx10
, 
xzr


165 
adr
 
	gx14
, 
dcsw_lo›_èbÀ


166 
add
 
	gx14
, x14, 
	gx0
, 
	gl¶
 #5

167 
mov
 
	gx0
, 
x9


168 
mov
 
	gw8
, #1

169 
	glo›1
:

170 
add
 
x2
, 
	gx10
, x10, 
	gl§
 #1

171 
l§
 
	gx1
, 
	gx0
, 
x2


172 
™d
 
	gx1
, x1, #7

173 
cmp
 
	gx1
, #2

174 
	gb
.
…
 
Àvñ_d⁄e


176 
m§
 
	gcs£Ã_ñ1
, 
x10


177 
isb


178 
mrs
 
	gx1
, 
ccsidr_ñ1


179 
™d
 
	gx2
, 
	gx1
, #7

180 
add
 
	gx2
, x2, #4

181 
ubfx
 
	gx4
, 
	gx1
, #3, #10

182 
˛z
 
	gw5
, 
w4


183 
l¶
 
	gw9
, 
	gw4
, 
w5


184 
l¶
 
	gw16
, 
	gw8
, 
w5


185 
‹r
 
	gw9
, 
	gw10
, 
w9


186 
ubfx
 
	gw6
, 
	gw1
, #13, #15

187 
l¶
 
	gw17
, 
	gw8
, 
w2


188 
dsb
 
sy


189 
br
 
	gx14


191 .
ma¸o
 
dcsw_lo›
 
_›


192 
	glo›2_
\
	g_›
:

193 
l¶
 
w7
, 
	gw6
, 
w2


195 
	glo›3_
\
	g_›
:

196 
‹r
 
w11
, 
	gw9
, 
w7


197 
	gdc
 \
	g_›
, 
x11


198 
subs
 
	gw7
, w7, 
w17


199 
	gb
.
ge
 
	glo›3_
\
_›


201 
subs
 
	gx9
, x9, 
x16


202 
	gb
.
ge
 
	glo›2_
\
_›


204 
b
 
	gÀvñ_d⁄e


205 .
ídm


207 
	gÀvñ_d⁄e
:

208 
add
 
x10
, 
	gx10
, #2

209 
cmp
 
	gx3
, 
x10


210 
	gb
.
gt
 
lo›1


211 
m§
 
	gcs£Ã_ñ1
, 
xzr


212 
dsb
 
sy


213 
isb


214 
	gexô
:

215 
ªt


217 
dcsw_lo›_èbÀ
:

218 
dcsw_lo›
 
isw


219 
dcsw_lo›
 
cisw


220 
dcsw_lo›
 
csw


223 
func
 
dcsw_›_louis


224 
dcsw_›
 #LOUIS_SHIFT, #CLIDR_FIELD_WIDTH, #LEVEL_SHIFT

227 
func
 
dcsw_›_Æl


228 
	gdcsw_›
 #LOC_SHIFT, #CLIDR_FIELD_WIDTH, #LEVEL_SHIFT

230 
func
 
dis_i_d_dcsw_›_Æl


231 
	gdis_i_d_dcsw_›
 #LOC_SHIFT, #CLIDR_FIELD_WIDTH, #LEVEL_SHIFT

233 
func
 
íabÀ_ˇche


234 
mov
 
	gx1
, #(
	gSCTLR_C_BIT
 | 
	gSCTLR_I_BIT
)

235 
mrs
 
	gx2
, 
s˘Ã_ñ3


236 
‹r
 
	gx2
, x2, 
x1


237 
m§
 
	gs˘Ã_ñ3
, 
x2


238 
isb


239 
dsb
 
sy


240 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/cpu_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

34 .
wók
 
˝u_ª£t_h™dÀr


37 
func
 
˝u_ª£t_h™dÀr


42 
mrs
 
	gx0
, 
midr_ñ1


43 
l§
 
	gx0
, x0, #MIDR_PN_SHIFT

44 
™d
 
	gx0
, x0, #MIDR_PN_MASK

45 
cmp
 
	gx0
, #MIDR_PN_A57

46 
	gb
.
eq
 
smp_£tup_begö


47 
cmp
 
	gx0
, #MIDR_PN_A53

48 
	gb
.
√
 
smp_£tup_íd


49 
	gsmp_£tup_begö
:

50 
mrs
 
x0
, 
CPUECTLR_EL1


51 
‹r
 
	gx0
, x0, #CPUECTLR_SMP_BIT

52 
m§
 
	gCPUECTLR_EL1
, 
x0


53 
isb


54 
	gsmp_£tup_íd
:

55 
ªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/misc_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

34 .
globl
 
	gíabÀ_úq


35 .
globl
 
	gdißbÀ_úq


37 .
globl
 
	gíabÀ_fiq


38 .
globl
 
	gdißbÀ_fiq


40 .
globl
 
	gíabÀ_£º‹


41 .
globl
 
	gdißbÀ_£º‹


43 .
globl
 
	gíabÀ_debug_ex˚±i⁄s


44 .
globl
 
	gdißbÀ_debug_ex˚±i⁄s


46 .
globl
 
	gªad_daif


47 .
globl
 
	gwrôe_daif


49 .
globl
 
	gªad_•§_ñ1


50 .
globl
 
	gªad_•§_ñ2


51 .
globl
 
	gªad_•§_ñ3


53 .
globl
 
	gwrôe_•§_ñ1


54 .
globl
 
	gwrôe_•§_ñ2


55 .
globl
 
	gwrôe_•§_ñ3


57 .
globl
 
	gªad_ñr_ñ1


58 .
globl
 
	gªad_ñr_ñ2


59 .
globl
 
	gªad_ñr_ñ3


61 .
globl
 
	gwrôe_ñr_ñ1


62 .
globl
 
	gwrôe_ñr_ñ2


63 .
globl
 
	gwrôe_ñr_ñ3


65 .
globl
 
	ggë_afÊvl_shi·


66 .
globl
 
	gmpidr_mask_lowî_afÊvls


67 .
globl
 
	gdsb


68 .
globl
 
	gisb


69 .
globl
 
	g£v


70 .
globl
 
	gw„


71 .
globl
 
	gwfi


72 .
globl
 
	gîë


73 .
globl
 
	gsmc


75 .
globl
 
	gzîomem16


76 .
globl
 
	gmem˝y16


78 .
globl
 
	gdißbÀ_mmu_ñ3


79 .
globl
 
dißbÀ_mmu_iˇche_ñ3


82 
func
 
gë_afÊvl_shi·


83 
cmp
 
	gx0
, #3

84 
cöc
 
	gx0
, x0, 
eq


85 
mov
 
	gx1
, #MPIDR_AFFLVL_SHIFT

86 
l¶
 
	gx0
, x0, 
x1


87 
ªt


89 
func
 
mpidr_mask_lowî_afÊvls


90 
cmp
 
	gx1
, #3

91 
cöc
 
	gx1
, x1, 
eq


92 
mov
 
	gx2
, #MPIDR_AFFLVL_SHIFT

93 
l¶
 
	gx2
, 
	gx1
, 
x2


94 
l§
 
	gx0
, x0, 
x2


95 
l¶
 
	gx0
, x0, 
x2


96 
ªt


102 
func
 
íabÀ_úq


103 
m§
 
	gdaif˛r
, #DAIF_IRQ_BIT

104 
ªt


107 
func
 
íabÀ_fiq


108 
m§
 
	gdaif˛r
, #DAIF_FIQ_BIT

109 
ªt


112 
func
 
íabÀ_£º‹


113 
m§
 
	gdaif˛r
, #DAIF_ABT_BIT

114 
ªt


117 
func
 
íabÀ_debug_ex˚±i⁄s


118 
m§
 
	gdaif˛r
, #DAIF_DBG_BIT

119 
ªt


122 
func
 
dißbÀ_úq


123 
m§
 
	gdaif£t
, #DAIF_IRQ_BIT

124 
ªt


127 
func
 
dißbÀ_fiq


128 
m§
 
	gdaif£t
, #DAIF_FIQ_BIT

129 
ªt


132 
func
 
dißbÀ_£º‹


133 
m§
 
	gdaif£t
, #DAIF_ABT_BIT

134 
ªt


137 
func
 
dißbÀ_debug_ex˚±i⁄s


138 
m§
 
	gdaif£t
, #DAIF_DBG_BIT

139 
ªt


142 
func
 
ªad_daif


143 
mrs
 
	gx0
, 
daif


144 
ªt


147 
func
 
wrôe_daif


148 
m§
 
	gdaif
, 
x0


149 
ªt


152 
func
 
ªad_•§_ñ1


153 
mrs
 
	gx0
, 
•§_ñ1


154 
ªt


157 
func
 
ªad_•§_ñ2


158 
mrs
 
	gx0
, 
•§_ñ2


159 
ªt


162 
func
 
ªad_•§_ñ3


163 
mrs
 
	gx0
, 
•§_ñ3


164 
ªt


167 
func
 
wrôe_•§_ñ1


168 
m§
 
	g•§_ñ1
, 
x0


169 
ªt


172 
func
 
wrôe_•§_ñ2


173 
m§
 
	g•§_ñ2
, 
x0


174 
ªt


177 
func
 
wrôe_•§_ñ3


178 
m§
 
	g•§_ñ3
, 
x0


179 
ªt


182 
func
 
ªad_ñr_ñ1


183 
mrs
 
	gx0
, 
ñr_ñ1


184 
ªt


187 
func
 
ªad_ñr_ñ2


188 
mrs
 
	gx0
, 
ñr_ñ2


189 
ªt


192 
func
 
ªad_ñr_ñ3


193 
mrs
 
	gx0
, 
ñr_ñ3


194 
ªt


197 
func
 
wrôe_ñr_ñ1


198 
m§
 
	gñr_ñ1
, 
x0


199 
ªt


202 
func
 
wrôe_ñr_ñ2


203 
m§
 
	gñr_ñ2
, 
x0


204 
ªt


207 
func
 
wrôe_ñr_ñ3


208 
m§
 
	gñr_ñ3
, 
x0


209 
ªt


212 
func
 
dsb


213 
dsb
 
sy


214 
ªt


217 
func
 
isb


218 
isb


219 
ªt


222 
func
 
£v


223 
£v


224 
ªt


227 
func
 
w„


228 
w„


229 
ªt


232 
func
 
wfi


233 
wfi


234 
ªt


237 
func
 
îë


238 
îë


241 
func
 
smc


242 
	gsmc
 #0

251 
func
 
zîomem16


252 
add
 
	gx2
, 
	gx0
, 
x1


254 
	gz_lo›16
:

255 
sub
 
x3
, 
	gx2
, 
x0


256 
cmp
 
	gx3
, #16

257 
	gb
.
…
 
z_lo›1


258 
°p
 
	gxzr
, xzr, [
x0
], #16

259 
b
 
z_lo›16


261 
	gz_lo›1
:

262 
cmp
 
x0
, 
x2


263 
	gb
.
eq
 
z_íd


264 
°rb
 
	gwzr
, [
x0
], #1

265 
b
 
z_lo›1


266 
	gz_íd
: 
ªt


277 
func
 
mem˝y16


279 
m_lo›16
:

280 
cmp
 
x2
, #16

281 
	gb
.
…
 
m_lo›1


282 
ldp
 
	gx3
, 
	gx4
, [
x1
], #16

283 
°p
 
	gx3
, 
	gx4
, [
x0
], #16

284 
sub
 
	gx2
, x2, #16

285 
b
 
m_lo›16


287 
	gm_lo›1
:

288 
cbz
 
x2
, 
m_íd


289 
ldrb
 
	gw3
, [
x1
], #1

290 
°rb
 
	gw3
, [
x0
], #1

291 
subs
 
	gx2
, x2, #1

292 
	gb
.
√
 
m_lo›1


293 
	gm_íd
: 
ªt


303 
func
 
dißbÀ_mmu_ñ3


304 
mov
 
x1
, #(
	gSCTLR_M_BIT
 | 
	gSCTLR_C_BIT
)

305 
	gdo_dißbÀ_mmu
:

306 
mrs
 
x0
, 
s˘Ã_ñ3


307 
bic
 
	gx0
, x0, 
x1


308 
m§
 
	gs˘Ã_ñ3
, 
x0


309 
isb


310 
mov
 
	gx0
, #DCCISW

311 
b
 
dcsw_›_Æl


314 
func
 
dißbÀ_mmu_iˇche_ñ3


315 
mov
 
	gx1
, #(
	gSCTLR_M_BIT
 | 
	gSCTLR_C_BIT
 | 
	gSCTLR_I_BIT
)

316 
b
 
	gdo_dißbÀ_mmu


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/sysreg_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

34 .
globl
 
	gªad_vb¨_ñ1


35 .
globl
 
	gªad_vb¨_ñ2


36 .
globl
 
	gªad_vb¨_ñ3


37 .
globl
 
	gwrôe_vb¨_ñ1


38 .
globl
 
	gwrôe_vb¨_ñ2


39 .
globl
 
	gwrôe_vb¨_ñ3


41 .
globl
 
	gªad_s˘Ã_ñ1


42 .
globl
 
	gªad_s˘Ã_ñ2


43 .
globl
 
	gªad_s˘Ã_ñ3


44 .
globl
 
	gwrôe_s˘Ã_ñ1


45 .
globl
 
	gwrôe_s˘Ã_ñ2


46 .
globl
 
	gwrôe_s˘Ã_ñ3


48 .
globl
 
	gªad_a˘Ã_ñ1


49 .
globl
 
	gªad_a˘Ã_ñ2


50 .
globl
 
	gªad_a˘Ã_ñ3


51 .
globl
 
	gwrôe_a˘Ã_ñ1


52 .
globl
 
	gwrôe_a˘Ã_ñ2


53 .
globl
 
	gwrôe_a˘Ã_ñ3


55 .
globl
 
	gªad_e§_ñ1


56 .
globl
 
	gªad_e§_ñ2


57 .
globl
 
	gªad_e§_ñ3


58 .
globl
 
	gwrôe_e§_ñ1


59 .
globl
 
	gwrôe_e§_ñ2


60 .
globl
 
	gwrôe_e§_ñ3


62 .
globl
 
	gªad_af§0_ñ1


63 .
globl
 
	gªad_af§0_ñ2


64 .
globl
 
	gªad_af§0_ñ3


65 .
globl
 
	gwrôe_af§0_ñ1


66 .
globl
 
	gwrôe_af§0_ñ2


67 .
globl
 
	gwrôe_af§0_ñ3


69 .
globl
 
	gªad_af§1_ñ1


70 .
globl
 
	gªad_af§1_ñ2


71 .
globl
 
	gªad_af§1_ñ3


72 .
globl
 
	gwrôe_af§1_ñ1


73 .
globl
 
	gwrôe_af§1_ñ2


74 .
globl
 
	gwrôe_af§1_ñ3


76 .
globl
 
	gªad_Ár_ñ1


77 .
globl
 
	gªad_Ár_ñ2


78 .
globl
 
	gªad_Ár_ñ3


79 .
globl
 
	gwrôe_Ár_ñ1


80 .
globl
 
	gwrôe_Ár_ñ2


81 .
globl
 
	gwrôe_Ár_ñ3


83 .
globl
 
	gªad_maú_ñ1


84 .
globl
 
	gªad_maú_ñ2


85 .
globl
 
	gªad_maú_ñ3


86 .
globl
 
	gwrôe_maú_ñ1


87 .
globl
 
	gwrôe_maú_ñ2


88 .
globl
 
	gwrôe_maú_ñ3


90 .
globl
 
	gªad_amaú_ñ1


91 .
globl
 
	gªad_amaú_ñ2


92 .
globl
 
	gªad_amaú_ñ3


93 .
globl
 
	gwrôe_amaú_ñ1


94 .
globl
 
	gwrôe_amaú_ñ2


95 .
globl
 
	gwrôe_amaú_ñ3


97 .
globl
 
	gªad_rvb¨_ñ1


98 .
globl
 
	gªad_rvb¨_ñ2


99 .
globl
 
	gªad_rvb¨_ñ3


101 .
globl
 
	gªad_rmr_ñ1


102 .
globl
 
	gªad_rmr_ñ2


103 .
globl
 
	gªad_rmr_ñ3


104 .
globl
 
	gwrôe_rmr_ñ1


105 .
globl
 
	gwrôe_rmr_ñ2


106 .
globl
 
	gwrôe_rmr_ñ3


108 .
globl
 
	gªad_t¸_ñ1


109 .
globl
 
	gªad_t¸_ñ2


110 .
globl
 
	gªad_t¸_ñ3


111 .
globl
 
	gwrôe_t¸_ñ1


112 .
globl
 
	gwrôe_t¸_ñ2


113 .
globl
 
	gwrôe_t¸_ñ3


115 .
globl
 
	gªad_˝å_ñ2


116 .
globl
 
	gªad_˝å_ñ3


117 .
globl
 
	gwrôe_˝å_ñ2


118 .
globl
 
	gwrôe_˝å_ñ3


120 .
globl
 
	gªad_âbr0_ñ1


121 .
globl
 
	gªad_âbr0_ñ2


122 .
globl
 
	gªad_âbr0_ñ3


123 .
globl
 
	gwrôe_âbr0_ñ1


124 .
globl
 
	gwrôe_âbr0_ñ2


125 .
globl
 
	gwrôe_âbr0_ñ3


127 .
globl
 
	gªad_âbr1_ñ1


128 .
globl
 
	gwrôe_âbr1_ñ1


130 .
globl
 
	gªad_˝a¸


131 .
globl
 
	gwrôe_˝a¸


133 .
globl
 
	gªad_˙t‰q


134 .
globl
 
	gwrôe_˙t‰q


136 .
globl
 
	gªad_˝ue˘Ã


137 .
globl
 
	gwrôe_˝ue˘Ã


139 .
globl
 
	gªad_˙th˘l_ñ2


140 .
globl
 
	gwrôe_˙th˘l_ñ2


142 .
globl
 
	gªad_˙tvoff_ñ2


143 .
globl
 
	gwrôe_˙tvoff_ñ2


145 .
globl
 
	gªad_˙t‰q_ñ0


146 .
globl
 
	gwrôe_˙t‰q_ñ0


148 .
globl
 
	gªad_˙çs_˘l_ñ1


149 .
globl
 
	gwrôe_˙çs_˘l_ñ1


151 .
globl
 
	gªad_˙çs_cvÆ_ñ1


152 .
globl
 
	gwrôe_˙çs_cvÆ_ñ1


154 .
globl
 
	gªad_˙çs_tvÆ_ñ1


155 .
globl
 
	gwrôe_˙çs_tvÆ_ñ1


157 .
globl
 
	gªad_s¸


158 .
globl
 
	gwrôe_s¸


160 .
globl
 
	gªad_h¸


161 .
globl
 
	gwrôe_h¸


163 .
globl
 
	gªad_midr


164 .
globl
 
	gªad_mpidr


166 .
globl
 
	gªad_˙ç˘_ñ0


167 .
globl
 
	gªad_cuºít_ñ


168 .
globl
 
	gªad_id_p‰1_ñ1


169 .
globl
 
	gªad_id_Ø64p‰0_ñ1


171 .
globl
 
	gwrôe_çidr_ñ3


172 .
globl
 
	gªad_çidr_ñ3


174 #i‡
SUPPORT_VFP


175 .
globl
 
	gíabÀ_vÂ


179 
func
 
ªad_cuºít_ñ


180 
mrs
 
	gx0
, 
CuºítEl


181 
ªt


184 
func
 
ªad_id_p‰1_ñ1


185 
mrs
 
	gx0
, 
id_p‰1_ñ1


186 
ªt


189 
func
 
ªad_id_Ø64p‰0_ñ1


190 
mrs
 
	gx0
, 
id_Ø64p‰0_ñ1


191 
ªt


198 
func
 
ªad_vb¨_ñ1


199 
mrs
 
	gx0
, 
vb¨_ñ1


200 
ªt


203 
func
 
ªad_vb¨_ñ2


204 
mrs
 
	gx0
, 
vb¨_ñ2


205 
ªt


208 
func
 
ªad_vb¨_ñ3


209 
mrs
 
	gx0
, 
vb¨_ñ3


210 
ªt


213 
func
 
wrôe_vb¨_ñ1


214 
m§
 
	gvb¨_ñ1
, 
x0


215 
ªt


218 
func
 
wrôe_vb¨_ñ2


219 
m§
 
	gvb¨_ñ2
, 
x0


220 
ªt


223 
func
 
wrôe_vb¨_ñ3


224 
m§
 
	gvb¨_ñ3
, 
x0


225 
ªt


232 
func
 
ªad_af§0_ñ1


233 
mrs
 
	gx0
, 
af§0_ñ1


234 
ªt


237 
func
 
ªad_af§0_ñ2


238 
mrs
 
	gx0
, 
af§0_ñ2


239 
ªt


242 
func
 
ªad_af§0_ñ3


243 
mrs
 
	gx0
, 
af§0_ñ3


244 
ªt


247 
func
 
wrôe_af§0_ñ1


248 
m§
 
	gaf§0_ñ1
, 
x0


249 
ªt


252 
func
 
wrôe_af§0_ñ2


253 
m§
 
	gaf§0_ñ2
, 
x0


254 
ªt


257 
func
 
wrôe_af§0_ñ3


258 
m§
 
	gaf§0_ñ3
, 
x0


259 
ªt


266 
func
 
ªad_Ár_ñ1


267 
mrs
 
	gx0
, 
Ár_ñ1


268 
ªt


271 
func
 
ªad_Ár_ñ2


272 
mrs
 
	gx0
, 
Ár_ñ2


273 
ªt


276 
func
 
ªad_Ár_ñ3


277 
mrs
 
	gx0
, 
Ár_ñ3


278 
ªt


281 
func
 
wrôe_Ár_ñ1


282 
m§
 
	gÁr_ñ1
, 
x0


283 
ªt


286 
func
 
wrôe_Ár_ñ2


287 
m§
 
	gÁr_ñ2
, 
x0


288 
ªt


291 
func
 
wrôe_Ár_ñ3


292 
m§
 
	gÁr_ñ3
, 
x0


293 
ªt


300 
func
 
ªad_maú_ñ1


301 
mrs
 
	gx0
, 
maú_ñ1


302 
ªt


305 
func
 
ªad_maú_ñ2


306 
mrs
 
	gx0
, 
maú_ñ2


307 
ªt


310 
func
 
ªad_maú_ñ3


311 
mrs
 
	gx0
, 
maú_ñ3


312 
ªt


315 
func
 
wrôe_maú_ñ1


316 
m§
 
	gmaú_ñ1
, 
x0


317 
ªt


320 
func
 
wrôe_maú_ñ2


321 
m§
 
	gmaú_ñ2
, 
x0


322 
ªt


325 
func
 
wrôe_maú_ñ3


326 
m§
 
	gmaú_ñ3
, 
x0


327 
ªt


334 
func
 
ªad_amaú_ñ1


335 
mrs
 
	gx0
, 
amaú_ñ1


336 
ªt


339 
func
 
ªad_amaú_ñ2


340 
mrs
 
	gx0
, 
amaú_ñ2


341 
ªt


344 
func
 
ªad_amaú_ñ3


345 
mrs
 
	gx0
, 
amaú_ñ3


346 
ªt


349 
func
 
wrôe_amaú_ñ1


350 
m§
 
	gamaú_ñ1
, 
x0


351 
ªt


354 
func
 
wrôe_amaú_ñ2


355 
m§
 
	gamaú_ñ2
, 
x0


356 
ªt


359 
func
 
wrôe_amaú_ñ3


360 
m§
 
	gamaú_ñ3
, 
x0


361 
ªt


368 
func
 
ªad_rvb¨_ñ1


369 
mrs
 
	gx0
, 
rvb¨_ñ1


370 
ªt


373 
func
 
ªad_rvb¨_ñ2


374 
mrs
 
	gx0
, 
rvb¨_ñ2


375 
ªt


378 
func
 
ªad_rvb¨_ñ3


379 
mrs
 
	gx0
, 
rvb¨_ñ3


380 
ªt


387 
func
 
ªad_rmr_ñ1


388 
mrs
 
	gx0
, 
rmr_ñ1


389 
ªt


392 
func
 
ªad_rmr_ñ2


393 
mrs
 
	gx0
, 
rmr_ñ2


394 
ªt


397 
func
 
ªad_rmr_ñ3


398 
mrs
 
	gx0
, 
rmr_ñ3


399 
ªt


402 
func
 
wrôe_rmr_ñ1


403 
m§
 
	grmr_ñ1
, 
x0


404 
ªt


407 
func
 
wrôe_rmr_ñ2


408 
m§
 
	grmr_ñ2
, 
x0


409 
ªt


412 
func
 
wrôe_rmr_ñ3


413 
m§
 
	grmr_ñ3
, 
x0


414 
ªt


421 
func
 
ªad_af§1_ñ1


422 
mrs
 
	gx0
, 
af§1_ñ1


423 
ªt


426 
func
 
ªad_af§1_ñ2


427 
mrs
 
	gx0
, 
af§1_ñ2


428 
ªt


431 
func
 
ªad_af§1_ñ3


432 
mrs
 
	gx0
, 
af§1_ñ3


433 
ªt


436 
func
 
wrôe_af§1_ñ1


437 
m§
 
	gaf§1_ñ1
, 
x0


438 
ªt


441 
func
 
wrôe_af§1_ñ2


442 
m§
 
	gaf§1_ñ2
, 
x0


443 
ªt


446 
func
 
wrôe_af§1_ñ3


447 
m§
 
	gaf§1_ñ3
, 
x0


448 
ªt


455 
func
 
ªad_s˘Ã_ñ1


456 
mrs
 
	gx0
, 
s˘Ã_ñ1


457 
ªt


460 
func
 
ªad_s˘Ã_ñ2


461 
mrs
 
	gx0
, 
s˘Ã_ñ2


462 
ªt


465 
func
 
ªad_s˘Ã_ñ3


466 
mrs
 
	gx0
, 
s˘Ã_ñ3


467 
ªt


470 
func
 
wrôe_s˘Ã_ñ1


471 
m§
 
	gs˘Ã_ñ1
, 
x0


472 
ªt


475 
func
 
wrôe_s˘Ã_ñ2


476 
m§
 
	gs˘Ã_ñ2
, 
x0


477 
ªt


480 
func
 
wrôe_s˘Ã_ñ3


481 
m§
 
	gs˘Ã_ñ3
, 
x0


482 
ªt


489 
func
 
ªad_a˘Ã_ñ1


490 
mrs
 
	gx0
, 
a˘Ã_ñ1


491 
ªt


494 
func
 
ªad_a˘Ã_ñ2


495 
mrs
 
	gx0
, 
a˘Ã_ñ2


496 
ªt


499 
func
 
ªad_a˘Ã_ñ3


500 
mrs
 
	gx0
, 
a˘Ã_ñ3


501 
ªt


504 
func
 
wrôe_a˘Ã_ñ1


505 
m§
 
	ga˘Ã_ñ1
, 
x0


506 
ªt


509 
func
 
wrôe_a˘Ã_ñ2


510 
m§
 
	ga˘Ã_ñ2
, 
x0


511 
ªt


514 
func
 
wrôe_a˘Ã_ñ3


515 
m§
 
	ga˘Ã_ñ3
, 
x0


516 
ªt


523 
func
 
ªad_e§_ñ1


524 
mrs
 
	gx0
, 
e§_ñ1


525 
ªt


528 
func
 
ªad_e§_ñ2


529 
mrs
 
	gx0
, 
e§_ñ2


530 
ªt


533 
func
 
ªad_e§_ñ3


534 
mrs
 
	gx0
, 
e§_ñ3


535 
ªt


538 
func
 
wrôe_e§_ñ1


539 
m§
 
	ge§_ñ1
, 
x0


540 
ªt


543 
func
 
wrôe_e§_ñ2


544 
m§
 
	ge§_ñ2
, 
x0


545 
ªt


548 
func
 
wrôe_e§_ñ3


549 
m§
 
	ge§_ñ3
, 
x0


550 
ªt


557 
func
 
ªad_t¸_ñ1


558 
mrs
 
	gx0
, 
t¸_ñ1


559 
ªt


562 
func
 
ªad_t¸_ñ2


563 
mrs
 
	gx0
, 
t¸_ñ2


564 
ªt


567 
func
 
ªad_t¸_ñ3


568 
mrs
 
	gx0
, 
t¸_ñ3


569 
ªt


572 
func
 
wrôe_t¸_ñ1


573 
m§
 
	gt¸_ñ1
, 
x0


574 
ªt


577 
func
 
wrôe_t¸_ñ2


578 
m§
 
	gt¸_ñ2
, 
x0


579 
ªt


582 
func
 
wrôe_t¸_ñ3


583 
m§
 
	gt¸_ñ3
, 
x0


584 
ªt


591 
func
 
ªad_˝å_ñ2


592 
mrs
 
	gx0
, 
˝å_ñ2


593 
ªt


596 
func
 
ªad_˝å_ñ3


597 
mrs
 
	gx0
, 
˝å_ñ3


598 
ªt


601 
func
 
wrôe_˝å_ñ2


602 
m§
 
	g˝å_ñ2
, 
x0


603 
ªt


606 
func
 
wrôe_˝å_ñ3


607 
m§
 
	g˝å_ñ3
, 
x0


608 
ªt


615 
func
 
ªad_âbr0_ñ1


616 
mrs
 
	gx0
, 
âbr0_ñ1


617 
ªt


620 
func
 
ªad_âbr0_ñ2


621 
mrs
 
	gx0
, 
âbr0_ñ2


622 
ªt


625 
func
 
ªad_âbr0_ñ3


626 
mrs
 
	gx0
, 
âbr0_ñ3


627 
ªt


630 
func
 
wrôe_âbr0_ñ1


631 
m§
 
	gâbr0_ñ1
, 
x0


632 
ªt


635 
func
 
wrôe_âbr0_ñ2


636 
m§
 
	gâbr0_ñ2
, 
x0


637 
ªt


640 
func
 
wrôe_âbr0_ñ3


641 
m§
 
	gâbr0_ñ3
, 
x0


642 
ªt


649 
func
 
ªad_âbr1_ñ1


650 
mrs
 
	gx0
, 
âbr1_ñ1


651 
ªt


654 
func
 
wrôe_âbr1_ñ1


655 
m§
 
	gâbr1_ñ1
, 
x0


656 
ªt


659 
func
 
ªad_h¸


660 
mrs
 
	gx0
, 
h¸_ñ2


661 
ªt


664 
func
 
wrôe_h¸


665 
m§
 
	gh¸_ñ2
, 
x0


666 
ªt


669 
func
 
ªad_˝a¸


670 
mrs
 
	gx0
, 
˝a¸_ñ1


671 
ªt


674 
func
 
wrôe_˝a¸


675 
m§
 
	g˝a¸_ñ1
, 
x0


676 
ªt


679 
func
 
ªad_˙t‰q_ñ0


680 
mrs
 
	gx0
, 
˙t‰q_ñ0


681 
ªt


684 
func
 
wrôe_˙t‰q_ñ0


685 
m§
 
	g˙t‰q_ñ0
, 
x0


686 
ªt


688 
func
 
ªad_˙çs_˘l_ñ1


689 
mrs
 
	gx0
, 
˙çs_˘l_ñ1


690 
ªt


692 
func
 
wrôe_˙çs_˘l_ñ1


693 
m§
 
	g˙çs_˘l_ñ1
, 
x0


694 
ªt


696 
func
 
ªad_˙çs_cvÆ_ñ1


697 
mrs
 
	gx0
, 
˙çs_cvÆ_ñ1


698 
ªt


700 
func
 
wrôe_˙çs_cvÆ_ñ1


701 
m§
 
	g˙çs_cvÆ_ñ1
, 
x0


702 
ªt


704 
func
 
ªad_˙çs_tvÆ_ñ1


705 
mrs
 
	gx0
, 
˙çs_tvÆ_ñ1


706 
ªt


708 
func
 
wrôe_˙çs_tvÆ_ñ1


709 
m§
 
	g˙çs_tvÆ_ñ1
, 
x0


710 
ªt


712 
func
 
ªad_˙ç˘_ñ0


713 
mrs
 
	gx0
, 
˙ç˘_ñ0


714 
ªt


716 
func
 
ªad_˝ue˘Ã


717 
mrs
 
	gx0
, 
CPUECTLR_EL1


718 
ªt


721 
func
 
wrôe_˝ue˘Ã


722 
m§
 
	gCPUECTLR_EL1
, 
x0


723 
ªt


726 
func
 
ªad_˙th˘l_ñ2


727 
mrs
 
	gx0
, 
˙th˘l_ñ2


728 
ªt


731 
func
 
wrôe_˙th˘l_ñ2


732 
m§
 
	g˙th˘l_ñ2
, 
x0


733 
ªt


735 
func
 
ªad_˙tvoff_ñ2


736 
mrs
 
	gx0
, 
˙tvoff_ñ2


737 
ªt


740 
func
 
wrôe_˙tvoff_ñ2


741 
m§
 
	g˙tvoff_ñ2
, 
x0


742 
ªt


746 
func
 
ªad_˙t‰q


747 
mrs
 
	gx0
, 
˙t‰q_ñ0


748 
ªt


751 
func
 
wrôe_˙t‰q


752 
m§
 
	g˙t‰q_ñ0
, 
x0


753 
ªt


756 
func
 
wrôe_s¸


757 
m§
 
	gs¸_ñ3
, 
x0


758 
ªt


761 
func
 
ªad_s¸


762 
mrs
 
	gx0
, 
s¸_ñ3


763 
ªt


766 
func
 
ªad_midr


767 
mrs
 
	gx0
, 
midr_ñ1


768 
ªt


771 
func
 
ªad_mpidr


772 
mrs
 
	gx0
, 
mpidr_ñ1


773 
ªt


775 
func
 
wrôe_çidr_ñ3


776 
m§
 
	gçidr_ñ3
, 
x0


777 
ªt


779 
func
 
ªad_çidr_ñ3


780 
mrs
 
	gx0
, 
çidr_ñ3


781 
	gªt


783 #i‡
SUPPORT_VFP


784 
func
 
íabÀ_vÂ


785 
mrs
 
	gx0
, 
˝a¸_ñ1


786 
‹r
 
	gx0
, x0, #CPACR_VFP_BITS

787 
m§
 
	g˝a¸_ñ1
, 
x0


788 
mrs
 
	gx0
, 
˝å_ñ3


789 
mov
 
	gx1
, #AARCH64_CPTR_TFP

790 
bic
 
	gx0
, x0, 
x1


791 
m§
 
	g˝å_ñ3
, 
x0


792 
isb


793 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/tlb_helpers.S

31 
	~<asm_ma¸os.S
>

33 .
globl
 
	gébüŒe1


34 .
globl
 
	gébüŒe1is


35 .
globl
 
	gébüŒe2


36 .
globl
 
	gébüŒe2is


37 .
globl
 
	gébüŒe3


38 .
globl
 
	gébüŒe3is


39 .
globl
 
ébivmÆÀ1


42 
func
 
ébüŒe1


43 
ébi
 
ÆÀ1


44 
ªt


47 
func
 
ébüŒe1is


48 
ébi
 
ÆÀ1is


49 
ªt


52 
func
 
ébüŒe2


53 
ébi
 
ÆÀ2


54 
ªt


57 
func
 
ébüŒe2is


58 
ébi
 
ÆÀ2is


59 
ªt


62 
func
 
ébüŒe3


63 
ébi
 
ÆÀ3


64 
ªt


67 
func
 
ébüŒe3is


68 
ébi
 
ÆÀ3is


69 
ªt


71 
func
 
ébivmÆÀ1


72 
ébi
 
vmÆÀ1


73 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/xlat_helpers.c

31 
	~<¨ch.h
>

32 
	~<as£π.h
>

38 
	$¸óã_èbÀ_desc
(*
√xt_èbÀ_±r
)

40 
desc
 = (Ë
√xt_èbÀ_±r
;

43 
desc
 >>
FOUR_KB_SHIFT
;

44 
desc
 <<
FOUR_KB_SHIFT
;

46 
desc
 |
TABLE_DESC
;

48  
desc
;

49 
	}
}

54 
	$¸óã_block_desc
(
desc
,

55 
addr
,

56 
Àvñ
)

58 
Àvñ
) {

59 
LEVEL1
:

60 
desc
 |(
addr
 << 
FIRST_LEVEL_DESC_N
Ë| 
BLOCK_DESC
;

62 
LEVEL2
:

63 
desc
 |(
addr
 << 
SECOND_LEVEL_DESC_N
Ë| 
BLOCK_DESC
;

65 
LEVEL3
:

66 
desc
 |(
addr
 << 
THIRD_LEVEL_DESC_N
Ë| 
TABLE_DESC
;

69 
	`as£π
(0);

72  
desc
;

73 
	}
}

79 
	$¸óã_devi˚_block
(
ouçut_addr
,

80 
Àvñ
,

81 
ns
)

83 
uµî_©ås
, 
lowî_©ås
, 
desc
;

85 
lowî_©ås
 = 
	`LOWER_ATTRS
(
ACCESS_FLAG
 | 
OSH
 | 
AP_RW
);

86 
lowî_©ås
 |
	`LOWER_ATTRS
(
ns
 | 
ATTR_DEVICE_INDEX
);

87 
uµî_©ås
 = 
	`UPPER_ATTRS
(
XN
);

88 
desc
 = 
uµî_©ås
 | 
lowî_©ås
;

90  
	`¸óã_block_desc
(
desc
, 
ouçut_addr
, 
Àvñ
);

91 
	}
}

97 
	$¸óã_romem_block
(
ouçut_addr
,

98 
Àvñ
,

99 
ns
)

101 
uµî_©ås
, 
lowî_©ås
, 
desc
;

103 
lowî_©ås
 = 
	`LOWER_ATTRS
(
ACCESS_FLAG
 | 
ISH
 | 
AP_RO
);

104 
lowî_©ås
 |
	`LOWER_ATTRS
(
ns
 | 
ATTR_IWBWA_OWBWA_NTR_INDEX
);

105 
uµî_©ås
 = 
	`UPPER_ATTRS
(0ull);

106 
desc
 = 
uµî_©ås
 | 
lowî_©ås
;

108  
	`¸óã_block_desc
(
desc
, 
ouçut_addr
, 
Àvñ
);

109 
	}
}

115 
	$¸óã_rwmem_block
(
ouçut_addr
,

116 
Àvñ
,

117 
ns
)

119 
uµî_©ås
, 
lowî_©ås
, 
desc
;

121 
lowî_©ås
 = 
	`LOWER_ATTRS
(
ACCESS_FLAG
 | 
ISH
 | 
AP_RW
);

122 
lowî_©ås
 |
	`LOWER_ATTRS
(
ns
 | 
ATTR_IWBWA_OWBWA_NTR_INDEX
);

123 
uµî_©ås
 = 
	`UPPER_ATTRS
(
XN
);

124 
desc
 = 
uµî_©ås
 | 
lowî_©ås
;

126  
	`¸óã_block_desc
(
desc
, 
ouçut_addr
, 
Àvñ
);

127 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/xlat_tables.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<∂©f‹m_def.h
>

35 
	~<°rög.h
>

36 
	~<xœt_èbÀs.h
>

37 
	~<°dio.h
>

40 #i‚de‡
DEBUG_XLAT_TABLE


41 
	#DEBUG_XLAT_TABLE
 0

	)

44 #i‡
DEBUG_XLAT_TABLE


45 
	#debug_¥öt
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

47 
	#debug_¥öt
(...Ë(()0)

	)

51 
	#UNSET_DESC
 ~0ul

	)

53 
	#NUM_L1_ENTRIES
 (
ADDR_SPACE_SIZE
 >> 
L1_XLAT_ADDRESS_SHIFT
)

	)

55 
uöt64_t
 
	gl1_xœti⁄_èbÀ
[
NUM_L1_ENTRIES
]

56 
__Æig√d
(
NUM_L1_ENTRIES
 * (
uöt64_t
));

58 
uöt64_t
 
	gxœt_èbÀs
[
MAX_XLAT_TABLES
][
XLAT_TABLE_ENTRIES
]

59 
	$__Æig√d
(
XLAT_TABLE_SIZE
Ë
	`__©åibuã__
((
	`£˘i⁄
("xlat_table")));

61 
√xt_xœt
;

67 
mm≠_ªgi⁄_t
 
mm≠
[
MAX_MMAP_REGIONS
 + 1];

70 
	$¥öt_mm≠
()

72 #i‡
DEBUG_XLAT_TABLE


73 
	`debug_¥öt
("mmap:\n");

74 
mm≠_ªgi⁄_t
 *
mm
 = 
mm≠
;

75 
mm
->
size
) {

76 
	`debug_¥öt
(" %010lx %10lx %x\n", 
mm
->
ba£
, mm->
size
, mm->
©å
);

77 ++
mm
;

79 
	`debug_¥öt
("\n");

81 
	}
}

83 
	$mm≠_add_ªgi⁄
(
ba£
, 
size
, 
©å
)

85 
mm≠_ªgi⁄_t
 *
mm
 = 
mm≠
;

86 
mm≠_ªgi⁄_t
 *
mm_œ°
 = 
mm
 + (
mm≠
) / (mmap[0]) - 1;

88 
	`as£π
(
	`IS_PAGE_ALIGNED
(
ba£
));

89 
	`as£π
(
	`IS_PAGE_ALIGNED
(
size
));

91 i‡(!
size
)

95 
mm
->
ba£
 < ba£ && mm->
size
)

96 ++
mm
;

99 
	`memmove
(
mm
 + 1, mm, (
uöçå_t
)
mm_œ°
 - (uintptr_t)mm);

102 
	`as£π
(
mm_œ°
->
size
 == 0);

104 
mm
->
ba£
 = base;

105 
mm
->
size
 = size;

106 
mm
->
©å
 =áttr;

107 
	}
}

109 
	$mm≠_add
(c⁄° 
mm≠_ªgi⁄_t
 *
mm
)

111 
mm
->
size
) {

112 
	`mm≠_add_ªgi⁄
(
mm
->
ba£
, mm->
size
, mm->
©å
);

113 ++
mm
;

115 
	}
}

117 
	$mm≠_desc
(
©å
, 
addr
,

118 
Àvñ
)

120 
desc
 = 
addr
;

122 
desc
 |
Àvñ
 =3 ? 
TABLE_DESC
 : 
BLOCK_DESC
;

124 
desc
 |
©å
 & 
MT_NS
 ? 
	`LOWER_ATTRS
(
NS
) : 0;

126 
desc
 |
©å
 & 
MT_RW
 ? 
	`LOWER_ATTRS
(
AP_RW
Ë: LOWER_ATTRS(
AP_RO
);

128 
desc
 |
	`LOWER_ATTRS
(
ACCESS_FLAG
);

130 i‡(
©å
 & 
MT_MEMORY
) {

131 
desc
 |
	`LOWER_ATTRS
(
ATTR_IWBWA_OWBWA_NTR_INDEX
 | 
ISH
);

132 i‡(
©å
 & 
MT_RW
)

133 
desc
 |
	`UPPER_ATTRS
(
XN
);

135 
desc
 |
	`LOWER_ATTRS
(
ATTR_DEVICE_INDEX
 | 
OSH
);

136 
desc
 |
	`UPPER_ATTRS
(
XN
);

139 
	`debug_¥öt
(
©å
 & 
MT_MEMORY
 ? "MEM" : "DEV");

140 
	`debug_¥öt
(
©å
 & 
MT_RW
 ? "-RW" : "-RO");

141 
	`debug_¥öt
(
©å
 & 
MT_NS
 ? "-NS" : "-S");

143  
desc
;

144 
	}
}

146 
	$mm≠_ªgi⁄_©å
(
mm≠_ªgi⁄_t
 *
mm
, 
ba£
,

147 
size
)

149 
©å
 = 
mm
->attr;

152 ++
mm
;

154 i‡(!
mm
->
size
)

155  
©å
;

157 i‡(
mm
->
ba£
 >ba£ + 
size
)

158  
©å
;

160 i‡(
mm
->
ba£
 + mm->
size
 <= base)

163 i‡((
mm
->
©å
 &áttr) ==áttr)

166 
©å
 &
mm
->attr;

168 i‡(
mm
->
ba£
 > ba£ || mm->ba£ + mm->
size
 < base + size)

171 
	}
}

173 
mm≠_ªgi⁄_t
 *
	$öô_xœti⁄_èbÀ
(
mm≠_ªgi⁄_t
 *
mm
, 
ba£
,

174 *
èbÀ
, 
Àvñ
)

176 
Àvñ_size_shi·
 = 
L1_XLAT_ADDRESS_SHIFT
 - (
Àvñ
 - 1) *

177 
XLAT_TABLE_ENTRIES_SHIFT
;

178 
Àvñ_size
 = 1 << 
Àvñ_size_shi·
;

179 
Àvñ_ödex_mask
 = 
XLAT_TABLE_ENTRIES_MASK
 << 
Àvñ_size_shi·
;

181 
	`as£π
(
Àvñ
 <= 3);

183 
	`debug_¥öt
("New xlatÅable:\n");

186 
desc
 = 
UNSET_DESC
;

188 i‡(
mm
->
ba£
 + mm->
size
 <= base) {

190 ++
mm
;

194 
	`debug_¥öt
(" %010lx %8lx " + 6 - 2 * 
Àvñ
, 
ba£
, 
Àvñ_size
);

196 i‡(
mm
->
ba£
 >ba£ + 
Àvñ_size
) {

198 
desc
 = 
INVALID_DESC
;

199 } i‡(
mm
->
ba£
 <= base &&

200 
mm
->
ba£
 + mm->
size
 >ba£ + 
Àvñ_size
) {

202 
©å
 = 
	`mm≠_ªgi⁄_©å
(
mm
, 
ba£
, 
Àvñ_size
);

203 i‡(
©å
 >= 0)

204 
desc
 = 
	`mm≠_desc
(
©å
, 
ba£
, 
Àvñ
);

208 i‡(
desc
 =
UNSET_DESC
) {

210 *
√w_èbÀ
 = 
xœt_èbÀs
[
√xt_xœt
++];

211 
	`as£π
(
√xt_xœt
 <
MAX_XLAT_TABLES
);

212 
desc
 = 
TABLE_DESC
 | ()
√w_èbÀ
;

215 
mm
 = 
	`öô_xœti⁄_èbÀ
(mm, 
ba£
, 
√w_èbÀ
, 
Àvñ
+1);

218 
	`debug_¥öt
("\n");

220 *
èbÀ
++ = 
desc
;

221 
ba£
 +
Àvñ_size
;

222 } 
mm
->
size
 && (
ba£
 & 
Àvñ_ödex_mask
));

224  
mm
;

225 
	}
}

227 
	$öô_xœt_èbÀs
()

229 
	`¥öt_mm≠
();

230 
	`öô_xœti⁄_èbÀ
(
mm≠
, 0, 
l1_xœti⁄_èbÀ
, 1);

231 
	}
}

243 
	#DEFINE_ENABLE_MMU_EL
(
_ñ
, 
_t¸_exåa
, 
_ébi_f˘
) \

244 
íabÀ_mmu_ñ
##
	`_ñ
() \

246 
uöt64_t
 
maú
, 
t¸
, 
âbr
; \

247 
uöt32_t
 
s˘Ã
; \

249 
	`as£π
(
	`IS_IN_EL
(
_ñ
)); \

250 
	`as£π
((
ªad_s˘Ã_ñ
##
	`_ñ
(Ë& 
SCTLR_M_BIT
) == 0); \

253 
maú
 = 
	`MAIR_ATTR_SET
(
ATTR_DEVICE
, 
ATTR_DEVICE_INDEX
); \

254 
maú
 |
	`MAIR_ATTR_SET
(
ATTR_IWBWA_OWBWA_NTR
, \

255 
ATTR_IWBWA_OWBWA_NTR_INDEX
); \

256 
wrôe_maú_ñ
##
	`_ñ
(
maú
); \

259 
	`_ébi_f˘
(); \

263 
t¸
 = 
TCR_SH_INNER_SHAREABLE
 | 
TCR_RGN_OUTER_WBA
 | \

264 
TCR_RGN_INNER_WBA
 | 
TCR_T0SZ_4GB
; \

265 
t¸
 |
_t¸_exåa
; \

266 
wrôe_t¸_ñ
##
	`_ñ
(
t¸
); \

269 
âbr
 = (
uöt64_t
Ë
l1_xœti⁄_èbÀ
; \

270 
wrôe_âbr0_ñ
##
	`_ñ
(
âbr
); \

276 
	`dsb
(); \

277 
	`isb
(); \

279 
s˘Ã
 = 
ªad_s˘Ã_ñ
##
	`_ñ
(); \

280 
s˘Ã
 |
SCTLR_WXN_BIT
 | 
SCTLR_M_BIT
 | 
SCTLR_I_BIT
; \

281 
s˘Ã
 |
SCTLR_A_BIT
 | 
SCTLR_C_BIT
; \

282 
wrôe_s˘Ã_ñ
##
	`_ñ
(
s˘Ã
); \

285 
	`isb
(); \

286 }

	)

289 
	$DEFINE_ENABLE_MMU_EL
(1, 0, 
ébivmÆÀ1
)

290 
	`DEFINE_ENABLE_MMU_EL
(3, 
TCR_EL3_RES1
, 
ébüŒe3
)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/io_storage.c

31 
	~<as£π.h
>

32 
	~<io_drivî.h
>

33 
	~<io_°‹age.h
>

34 
	~<°ddef.h
>

37 
	#MAX_DEVICES
(
∂©_d©a
) \

38 (((
∂©_d©a
)->
devi˚s
)/(’œt_d©a)->devi˚s[0]))

	)

42 
io_ítôy_t
 
	gítôy_poﬁ
[
MAX_IO_HANDLES
];

46 
io_ítôy_t
 *
	gítôy_m≠
[
MAX_IO_HANDLES
];

49 
	gítôy_cou¡
;

53 
io_∂©_d©a_t
 *
	g∂©f‹m_d©a
;

56 #i‡
DEBUG


59 
	$is_vÆid_dev_c⁄√˘‹
(c⁄° 
io_dev_c⁄√˘‹_t
 *
dev_c⁄
)

61 
ªsu…
 = (
dev_c⁄
 !
NULL
Ë&& (dev_c⁄->
dev_›í
 != NULL);

62  
ªsu…
;

63 
	}
}

67 
	$is_vÆid_dev
(c⁄° 
uöçå_t
 
dev_h™dÀ
)

69 c⁄° 
io_dev_öfo_t
 *
dev
 = (io_dev_öfo_à*)
dev_h™dÀ
;

70 
ªsu…
 = (
dev
 !
NULL
Ë&& (dev->
funcs
 != NULL) &&

71 (
dev
->
funcs
->
ty≥
 !
NULL
) &&

72 (
dev
->
funcs
->
	`ty≥
(Ë< 
IO_TYPE_MAX
);

73  
ªsu…
;

74 
	}
}

78 
	$is_vÆid_ítôy
(c⁄° 
uöçå_t
 
h™dÀ
)

80 c⁄° 
io_ítôy_t
 *
ítôy
 = (io_ítôy_à*)
h™dÀ
;

81 
ªsu…
 = (
ítôy
 !
NULL
) &&

82 (
	`is_vÆid_dev
((
uöçå_t
)
ítôy
->
dev_h™dÀ
));

83  
ªsu…
;

84 
	}
}

88 
	$is_vÆid_£ek_mode
(
io_£ek_mode_t
 
mode
)

90  ((
mode
 !
IO_SEEK_INVALID
Ë&& (modê< 
IO_SEEK_MAX
));

91 
	}
}

97 
	$dev_›í
(c⁄° 
io_dev_c⁄√˘‹_t
 *
dev_c⁄
, c⁄° 
uöçå_t
 
dev_•ec
,

98 
io_dev_öfo_t
 **
dev_öfo
)

100 
ªsu…
 = 
IO_FAIL
;

101 
	`as£π
(
dev_öfo
 !
NULL
);

102 
	`as£π
(
	`is_vÆid_dev_c⁄√˘‹
(
dev_c⁄
));

104 
ªsu…
 = 
dev_c⁄
->
	`dev_›í
(
dev_•ec
, 
dev_öfo
);

105  
ªsu…
;

106 
	}
}

110 
	$£t_h™dÀ
(
uöçå_t
 *
h™dÀ
, 
io_ítôy_t
 *
ítôy
)

112 
	`as£π
(
h™dÀ
 !
NULL
);

113 *
h™dÀ
 = (
uöçå_t
)
ítôy
;

114 
	}
}

118 
	$föd_fú°_ítôy
(c⁄° 
io_ítôy_t
 *
ítôy
, *
ödex_out
)

120 
ªsu…
 = 
IO_FAIL
;

121 
ödex
 = 0; index < 
MAX_IO_HANDLES
; ++index) {

122 i‡(
ítôy_m≠
[
ödex
] =
ítôy
) {

123 
ªsu…
 = 
IO_SUCCESS
;

124 *
ödex_out
 = 
ödex
;

128  
ªsu…
;

129 
	}
}

133 
	$Æloˇã_ítôy
(
io_ítôy_t
 **
ítôy
)

135 
ªsu…
 = 
IO_FAIL
;

136 
	`as£π
(
ítôy
 !
NULL
);

138 i‡(
ítôy_cou¡
 < 
MAX_IO_HANDLES
) {

139 
ödex
 = 0;

140 
ªsu…
 = 
	`föd_fú°_ítôy
(
NULL
, &
ödex
);

141 
	`as£π
(
ªsu…
 =
IO_SUCCESS
);

142 *
ítôy
 = 
ítôy_m≠
[
ödex
] = &
ítôy_poﬁ
[index];

143 ++
ítôy_cou¡
;

145 
ªsu…
 = 
IO_RESOURCES_EXHAUSTED
;

147  
ªsu…
;

148 
	}
}

152 
	$‰ì_ítôy
(c⁄° 
io_ítôy_t
 *
ítôy
)

154 
ªsu…
 = 
IO_FAIL
;

155 
ödex
 = 0;

156 
	`as£π
(
ítôy
 !
NULL
);

158 
ªsu…
 = 
	`föd_fú°_ítôy
(
ítôy
, &
ödex
);

159 i‡(
ªsu…
 =
IO_SUCCESS
) {

160 
ítôy_m≠
[
ödex
] = 
NULL
;

161 --
ítôy_cou¡
;

164  
ªsu…
;

165 
	}
}

172 
	$io_öô
(
io_∂©_d©a_t
 *
d©a
)

174 
	`as£π
(
d©a
 !
NULL
);

175 
∂©f‹m_d©a
 = 
d©a
;

176 
	}
}

180 
	$io_ªgi°î_devi˚
(c⁄° 
io_dev_öfo_t
 *
dev_öfo
)

182 
ªsu…
 = 
IO_FAIL
;

183 
	`as£π
(
dev_öfo
 !
NULL
);

184 
	`as£π
(
∂©f‹m_d©a
 !
NULL
);

186 
dev_cou¡
 = 
∂©f‹m_d©a
->dev_count;

188 i‡(
dev_cou¡
 < 
	`MAX_DEVICES
(
∂©f‹m_d©a
)) {

189 
∂©f‹m_d©a
->
devi˚s
[
dev_cou¡
] = 
dev_öfo
;

190 
∂©f‹m_d©a
->
dev_cou¡
++;

191 
ªsu…
 = 
IO_SUCCESS
;

193 
ªsu…
 = 
IO_RESOURCES_EXHAUSTED
;

196  
ªsu…
;

197 
	}
}

201 
	$io_dev_›í
(c⁄° 
io_dev_c⁄√˘‹_t
 *
dev_c⁄
, c⁄° 
uöçå_t
 
dev_•ec
,

202 
uöçå_t
 *
h™dÀ
)

204 
ªsu…
 = 
IO_FAIL
;

205 
	`as£π
(
h™dÀ
 !
NULL
);

207 
ªsu…
 = 
	`dev_›í
(
dev_c⁄
, 
dev_•ec
, (
io_dev_öfo_t
 **)
h™dÀ
);

208  
ªsu…
;

209 
	}
}

214 
	$io_dev_öô
(
uöçå_t
 
dev_h™dÀ
, c⁄° uöçå_à
öô_∑øms
)

216 
ªsu…
 = 
IO_FAIL
;

217 
	`as£π
(
dev_h™dÀ
 !(
uöçå_t
)
NULL
);

218 
	`as£π
(
	`is_vÆid_dev
(
dev_h™dÀ
));

220 
io_dev_öfo_t
 *
dev
 = (io_dev_öfo_à*)
dev_h™dÀ
;

222 i‡(
dev
->
funcs
->
dev_öô
 !
NULL
) {

223 
ªsu…
 = 
dev
->
funcs
->
	`dev_öô
(dev, 
öô_∑øms
);

226 
ªsu…
 = 
IO_SUCCESS
;

228  
ªsu…
;

229 
	}
}

235 
	$io_dev_˛o£
(
uöçå_t
 
dev_h™dÀ
)

237 
ªsu…
 = 
IO_FAIL
;

238 
	`as£π
(
dev_h™dÀ
 !(
uöçå_t
)
NULL
);

239 
	`as£π
(
	`is_vÆid_dev
(
dev_h™dÀ
));

241 
io_dev_öfo_t
 *
dev
 = (io_dev_öfo_à*)
dev_h™dÀ
;

243 i‡(
dev
->
funcs
->
dev_˛o£
 !
NULL
) {

244 
ªsu…
 = 
dev
->
funcs
->
	`dev_˛o£
(dev);

247 
ªsu…
 = 
IO_SUCCESS
;

250  
ªsu…
;

251 
	}
}

258 
	$io_›í
(
uöçå_t
 
dev_h™dÀ
, c⁄° uöçå_à
•ec
, uöçå_à*
h™dÀ
)

260 
ªsu…
 = 
IO_FAIL
;

261 
	`as£π
((
•ec
 !(
uöçå_t
)
NULL
Ë&& (
h™dÀ
 != NULL));

262 
	`as£π
(
	`is_vÆid_dev
(
dev_h™dÀ
));

264 
io_dev_öfo_t
 *
dev
 = (io_dev_öfo_à*)
dev_h™dÀ
;

265 
io_ítôy_t
 *
ítôy
;

267 
ªsu…
 = 
	`Æloˇã_ítôy
(&
ítôy
);

269 i‡(
ªsu…
 =
IO_SUCCESS
) {

270 
	`as£π
(
dev
->
funcs
->
›í
 !
NULL
);

271 
ªsu…
 = 
dev
->
funcs
->
	`›í
(dev, 
•ec
, 
ítôy
);

273 i‡(
ªsu…
 =
IO_SUCCESS
) {

274 
ítôy
->
dev_h™dÀ
 = 
dev
;

275 
	`£t_h™dÀ
(
h™dÀ
, 
ítôy
);

277 
	`‰ì_ítôy
(
ítôy
);

279  
ªsu…
;

280 
	}
}

284 
	$io_£ek
(
uöçå_t
 
h™dÀ
, 
io_£ek_mode_t
 
mode
, 
ssize_t
 
off£t
)

286 
ªsu…
 = 
IO_FAIL
;

287 
	`as£π
(
	`is_vÆid_ítôy
(
h™dÀ
Ë&& 
	`is_vÆid_£ek_mode
(
mode
));

289 
io_ítôy_t
 *
ítôy
 = (io_ítôy_à*)
h™dÀ
;

291 
io_dev_öfo_t
 *
dev
 = 
ítôy
->
dev_h™dÀ
;

293 i‡(
dev
->
funcs
->
£ek
 !
NULL
)

294 
ªsu…
 = 
dev
->
funcs
->
	`£ek
(
ítôy
, 
mode
, 
off£t
);

296 
ªsu…
 = 
IO_NOT_SUPPORTED
;

298  
ªsu…
;

299 
	}
}

303 
	$io_size
(
uöçå_t
 
h™dÀ
, 
size_t
 *
Àngth
)

305 
ªsu…
 = 
IO_FAIL
;

306 
	`as£π
(
	`is_vÆid_ítôy
(
h™dÀ
Ë&& (
Àngth
 !
NULL
));

308 
io_ítôy_t
 *
ítôy
 = (io_ítôy_à*)
h™dÀ
;

310 
io_dev_öfo_t
 *
dev
 = 
ítôy
->
dev_h™dÀ
;

312 i‡(
dev
->
funcs
->
size
 !
NULL
)

313 
ªsu…
 = 
dev
->
funcs
->
	`size
(
ítôy
, 
Àngth
);

315 
ªsu…
 = 
IO_NOT_SUPPORTED
;

317  
ªsu…
;

318 
	}
}

322 
	$io_ªad
(
uöçå_t
 
h™dÀ
,

323 
uöçå_t
 
buf„r
,

324 
size_t
 
Àngth
,

325 
size_t
 *
Àngth_ªad
)

327 
ªsu…
 = 
IO_FAIL
;

328 
	`as£π
(
	`is_vÆid_ítôy
(
h™dÀ
Ë&& (
buf„r
 !(
uöçå_t
)
NULL
));

330 
io_ítôy_t
 *
ítôy
 = (io_ítôy_à*)
h™dÀ
;

332 
io_dev_öfo_t
 *
dev
 = 
ítôy
->
dev_h™dÀ
;

334 i‡(
dev
->
funcs
->
ªad
 !
NULL
)

335 
ªsu…
 = 
dev
->
funcs
->
	`ªad
(
ítôy
, 
buf„r
, 
Àngth
, 
Àngth_ªad
);

337 
ªsu…
 = 
IO_NOT_SUPPORTED
;

339  
ªsu…
;

340 
	}
}

344 
	$io_wrôe
(
uöçå_t
 
h™dÀ
,

345 c⁄° 
uöçå_t
 
buf„r
,

346 
size_t
 
Àngth
,

347 
size_t
 *
Àngth_wrôãn
)

349 
ªsu…
 = 
IO_FAIL
;

350 
	`as£π
(
	`is_vÆid_ítôy
(
h™dÀ
Ë&& (
buf„r
 !(
uöçå_t
)
NULL
));

352 
io_ítôy_t
 *
ítôy
 = (io_ítôy_à*)
h™dÀ
;

354 
io_dev_öfo_t
 *
dev
 = 
ítôy
->
dev_h™dÀ
;

356 i‡(
dev
->
funcs
->
wrôe
 !
NULL
) {

357 
ªsu…
 = 
dev
->
funcs
->
	`wrôe
(
ítôy
, 
buf„r
, 
Àngth
,

358 
Àngth_wrôãn
);

360 
ªsu…
 = 
IO_NOT_SUPPORTED
;

362  
ªsu…
;

363 
	}
}

367 
	$io_˛o£
(
uöçå_t
 
h™dÀ
)

369 
ªsu…
 = 
IO_FAIL
;

370 
	`as£π
(
	`is_vÆid_ítôy
(
h™dÀ
));

372 
io_ítôy_t
 *
ítôy
 = (io_ítôy_à*)
h™dÀ
;

374 
io_dev_öfo_t
 *
dev
 = 
ítôy
->
dev_h™dÀ
;

376 i‡(
dev
->
funcs
->
˛o£
 !
NULL
)

377 
ªsu…
 = 
dev
->
funcs
->
	`˛o£
(
ítôy
);

380 
ªsu…
 = 
IO_SUCCESS
;

383 ()
	`‰ì_ítôy
(
ítôy
);

385  
ªsu…
;

386 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/locks/bakery/bakery_lock.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bakîy_lock.h
>

34 
	~<∂©f‹m.h
>

35 
	~<°rög.h
>

59 
	#as£π_bakîy_íåy_vÆid
(
íåy
, 
bakîy
) do { \

60 
	`as£π
(
bakîy
); \

61 
	`as£π
(
íåy
 < 
BAKERY_LOCK_MAX_CPUS
); \

62 } 0)

	)

65 
	#PRIORITY
(
t
, 
pos
Ë((—Ë<< 8Ë| (pos))

	)

69 
	$bakîy_lock_öô
(
bakîy_lock_t
 *
bakîy
)

71 
	`as£π
(
bakîy
);

74 
	`mem£t
(
bakîy
, 0, (*bakery));

75 
bakîy
->
ow√r
 = 
NO_OWNER
;

76 
	}
}

80 
	$bakîy_gë_tickë
(
bakîy_lock_t
 *
bakîy
, 
me
)

82 
my_tickë
, 
theú_tickë
;

83 
they
;

95 
my_tickë
 = 0;

96 
bakîy
->
íãrög
[
me
] = 1;

97 
they
 = 0;Åhey < 
BAKERY_LOCK_MAX_CPUS
;Åhey++) {

98 
theú_tickë
 = 
bakîy
->
numbî
[
they
];

99 i‡(
theú_tickë
 > 
my_tickë
)

100 
my_tickë
 = 
theú_tickë
;

107 ++
my_tickë
;

108 
bakîy
->
numbî
[
me
] = 
my_tickë
;

109 
bakîy
->
íãrög
[
me
] = 0;

110 
	`£v
();

112  
my_tickë
;

113 
	}
}

127 
	$bakîy_lock_gë
(
mpidr
, 
bakîy_lock_t
 *
bakîy
)

129 
they
, 
me
;

130 
my_tickë
, 
my_¥io
, 
theú_tickë
;

132 
me
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

134 
	`as£π_bakîy_íåy_vÆid
(
me
, 
bakîy
);

137 
	`as£π
(
bakîy
->
ow√r
 !
me
);

140 
my_tickë
 = 
	`bakîy_gë_tickë
(
bakîy
, 
me
);

146 
my_¥io
 = 
	`PRIORITY
(
my_tickë
, 
me
);

147 
they
 = 0;Åhey < 
BAKERY_LOCK_MAX_CPUS
;Åhey++) {

148 i‡(
me
 =
they
)

152 
bakîy
->
íãrög
[
they
])

153 
	`w„
();

159 
theú_tickë
 = 
bakîy
->
numbî
[
they
];

160 i‡(
theú_tickë
 && (
	`PRIORITY
—heú_tickë, 
they
Ë< 
my_¥io
)) {

168 
	`w„
();

169 } 
theú_tickë
 =
bakîy
->
numbî
[
they
]);

174 
bakîy
->
ow√r
 = 
me
;

175 
	}
}

179 
	$bakîy_lock_ªÀa£
(
mpidr
, 
bakîy_lock_t
 *
bakîy
)

181 
me
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

183 
	`as£π_bakîy_íåy_vÆid
(
me
, 
bakîy
);

184 
	`as£π
(
bakîy
->
ow√r
 =
me
);

190 
bakîy
->
ow√r
 = 
NO_OWNER
;

191 
bakîy
->
numbî
[
me
] = 0;

192 
	`£v
();

193 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/locks/exclusive/spinlock.S

31 
	~<asm_ma¸os.S
>

33 .
globl
 
	g•ö_lock


34 .
globl
 
•ö_u∆ock


37 
func
 
•ö_lock


38 
mov
 
	gw2
, #1

39 
£vl


40 
	gl1
: 
w„


41 
l2
: 
ldaxr
 
w1
, [
x0
]

42 
cbnz
 
	gw1
, 
l1


43 
°xr
 
	gw1
, 
	gw2
, [
x0
]

44 
cbnz
 
	gw1
, 
l2


45 
ªt


48 
func
 
•ö_u∆ock


49 
°Ã
 
	gwzr
, [
x0
]

50 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/mmio.c

31 
	~<°döt.h
>

33 
	$mmio_wrôe_8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
)

35 *(vﬁ©ûê
uöt8_t
*)
addr
 = 
vÆue
;

36 
	}
}

38 
uöt8_t
 
	$mmio_ªad_8
(
uöçå_t
 
addr
)

40  *(vﬁ©ûê
uöt8_t
*)
addr
;

41 
	}
}

43 
	$mmio_wrôe_32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
)

45 *(vﬁ©ûê
uöt32_t
*)
addr
 = 
vÆue
;

46 
	}
}

48 
uöt32_t
 
	$mmio_ªad_32
(
uöçå_t
 
addr
)

50  *(vﬁ©ûê
uöt32_t
*)
addr
;

51 
	}
}

53 
	$mmio_wrôe_64
(
uöçå_t
 
addr
, 
uöt64_t
 
vÆue
)

55 *(vﬁ©ûê
uöt64_t
*)
addr
 = 
vÆue
;

56 
	}
}

58 
uöt64_t
 
	$mmio_ªad_64
(
uöçå_t
 
addr
)

60  *(vﬁ©ûê
uöt64_t
*)
addr
;

61 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/semihosting/aarch64/semihosting_call.S

31 
	~<asm_ma¸os.S
>

33 .
globl
 
£miho°ög_ˇŒ


35 
func
 
£miho°ög_ˇŒ


36 
	gh…
 #0
xf000


37 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/semihosting/semihosting.c

31 
	~<as£π.h
>

32 
	~<î∫o.h
>

33 
	~<£miho°ög.h
>

34 
	~<°rög.h
>

36 #i‚de‡
SEMIHOSTING_SUPPORTED


37 
	#SEMIHOSTING_SUPPORTED
 1

	)

40 
£miho°ög_ˇŒ
(
›î©i⁄
,

41 *
sy°em_block_addªss
);

44 c⁄° *
	mfûe_«me
;

45 
	mmode
;

46 
size_t
 
	m«me_Àngth
;

47 } 
	tsmh_fûe_›í_block_t
;

50 
	mh™dÀ
;

51 
uöçå_t
 
	mbuf„r
;

52 
size_t
 
	mÀngth
;

53 } 
	tsmh_fûe_ªad_wrôe_block_t
;

56 
	mh™dÀ
;

57 
ssize_t
 
	mloˇti⁄
;

58 } 
	tsmh_fûe_£ek_block_t
;

61 *
	mcomm™d_löe
;

62 
size_t
 
	mcomm™d_Àngth
;

63 } 
	tsmh_sy°em_block_t
;

65 
	$£miho°ög_c⁄√˘i⁄_suµ‹ãd
()

67  
SEMIHOSTING_SUPPORTED
;

68 
	}
}

70 
	$£miho°ög_fûe_›í
(c⁄° *
fûe_«me
, 
size_t
 
mode
)

72 
smh_fûe_›í_block_t
 
›í_block
;

74 
›í_block
.
fûe_«me
 = file_name;

75 
›í_block
.
mode
 = mode;

76 
›í_block
.
«me_Àngth
 = 
	`°æí
(
fûe_«me
);

78  
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_OPEN
,

79 (*Ë&
›í_block
);

80 
	}
}

82 
	$£miho°ög_fûe_£ek
(
fûe_h™dÀ
, 
ssize_t
 
off£t
)

84 
smh_fûe_£ek_block_t
 
£ek_block
;

85 
ªsu…
;

87 
£ek_block
.
h™dÀ
 = 
fûe_h™dÀ
;

88 
£ek_block
.
loˇti⁄
 = 
off£t
;

90 
ªsu…
 = 
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_SEEK
,

91 (*Ë&
£ek_block
);

93 i‡(
ªsu…
)

94 
ªsu…
 = 
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_ERRNO
, 0);

96  
ªsu…
;

97 
	}
}

99 
	$£miho°ög_fûe_ªad
(
fûe_h™dÀ
, 
size_t
 *
Àngth
, 
uöçå_t
 
buf„r
)

101 
smh_fûe_ªad_wrôe_block_t
 
ªad_block
;

102 
ªsu…
 = -
EINVAL
;

104 i‡((
Àngth
 =
NULL
Ë|| (
buf„r
 =(
uöçå_t
)NULL))

105  
ªsu…
;

107 
ªad_block
.
h™dÀ
 = 
fûe_h™dÀ
;

108 
ªad_block
.
buf„r
 = buffer;

109 
ªad_block
.
Àngth
 = *length;

111 
ªsu…
 = 
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_READ
,

112 (*Ë&
ªad_block
);

114 i‡(
ªsu…
 =*
Àngth
) {

115  -
EINVAL
;

116 } i‡(
ªsu…
 < *
Àngth
) {

117 *
Àngth
 -
ªsu…
;

120  
ªsu…
;

121 
	}
}

123 
	$£miho°ög_fûe_wrôe
(
fûe_h™dÀ
,

124 
size_t
 *
Àngth
,

125 c⁄° 
uöçå_t
 
buf„r
)

127 
smh_fûe_ªad_wrôe_block_t
 
wrôe_block
;

129 i‡((
Àngth
 =
NULL
Ë|| (
buf„r
 =(
uöçå_t
)NULL))

130  -
EINVAL
;

132 
wrôe_block
.
h™dÀ
 = 
fûe_h™dÀ
;

133 
wrôe_block
.
buf„r
 = (
uöçå_t
)buffer;

134 
wrôe_block
.
Àngth
 = *length;

136 *
Àngth
 = 
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_WRITE
,

137 (*Ë&
wrôe_block
);

139  *
Àngth
;

140 
	}
}

142 
	$£miho°ög_fûe_˛o£
(
fûe_h™dÀ
)

144  
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_CLOSE
,

145 (*Ë&
fûe_h™dÀ
);

146 
	}
}

148 
	$£miho°ög_fûe_Àngth
(
fûe_h™dÀ
)

150  
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_FLEN
,

151 (*Ë&
fûe_h™dÀ
);

152 
	}
}

154 
	$£miho°ög_ªad_ch¨
()

156  
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_READC
, 
NULL
);

157 
	}
}

159 
	$£miho°ög_wrôe_ch¨
(
ch¨a˘î
)

161 
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_WRITEC
, (*Ë&
ch¨a˘î
);

162 
	}
}

164 
	$£miho°ög_wrôe_°rög
(*
°rög
)

166 
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_WRITE0
, (*Ë
°rög
);

167 
	}
}

169 
	$£miho°ög_sy°em
(*
comm™d_löe
)

171 
smh_sy°em_block_t
 
sy°em_block
;

173 
sy°em_block
.
comm™d_löe
 = command_line;

174 
sy°em_block
.
comm™d_Àngth
 = 
	`°æí
(
comm™d_löe
);

176  
	`£miho°ög_ˇŒ
(
SEMIHOSTING_SYS_SYSTEM
,

177 (*Ë&
sy°em_block
);

178 
	}
}

180 
	$£miho°ög_gë_Êí
(c⁄° *
fûe_«me
)

182 
fûe_h™dÀ
;

183 
size_t
 
Àngth
;

185 
	`as£π
(
	`£miho°ög_c⁄√˘i⁄_suµ‹ãd
());

187 
fûe_h™dÀ
 = 
	`£miho°ög_fûe_›í
(
fûe_«me
, 
FOPEN_MODE_RB
);

188 i‡(
fûe_h™dÀ
 == -1)

189  
fûe_h™dÀ
;

192 
Àngth
 = 
	`£miho°ög_fûe_Àngth
(
fûe_h™dÀ
);

194  
	`£miho°ög_fûe_˛o£
(
fûe_h™dÀ
Ë? -1 : 
Àngth
;

195 
	}
}

197 
	$£miho°ög_dow∆ﬂd_fûe
(c⁄° *
fûe_«me
,

198 
size_t
 
buf_size
,

199 
uöçå_t
 
buf
)

201 
ªt
 = -
EINVAL
;

202 
size_t
 
Àngth
;

203 
fûe_h™dÀ
;

206 i‡(!
buf
)

207  
ªt
;

209 
	`as£π
(
	`£miho°ög_c⁄√˘i⁄_suµ‹ãd
());

211 
fûe_h™dÀ
 = 
	`£miho°ög_fûe_›í
(
fûe_«me
, 
FOPEN_MODE_RB
);

212 i‡(
fûe_h™dÀ
 == -1)

213  
ªt
;

216 
Àngth
 = 
	`£miho°ög_fûe_Àngth
(
fûe_h™dÀ
);

217 i‡(
Àngth
 == -1)

218 
£miho°ög_Áû
;

221 i‡(
Àngth
 > 
buf_size
)

222 
£miho°ög_Áû
;

229 
ªt
 = 
	`£miho°ög_fûe_ªad
(
fûe_h™dÀ
, &
Àngth
, 
buf
);

230 i‡(
ªt
)

231 
£miho°ög_Áû
;

233 
ªt
 = 
Àngth
;

235 
£miho°ög_Áû
:

236 
	`£miho°ög_fûe_˛o£
(
fûe_h™dÀ
);

237  
ªt
;

238 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/abort.c

31 
	~<°dio.h
>

36 
	$ab‹t
 ()

38 
	`¥ötf
("ABORT\n\r");

40 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/assert.c

31 
	~<°dio.h
>

36 
	$__as£π
 (c⁄° *
fun˘i⁄
, c⁄° *
fûe
, 
löe
,

37 c⁄° *
as£πi⁄
)

39 
	`¥ötf
("ASSERT: %†<%d> : %s\n\r", 
fun˘i⁄
, 
löe
, 
as£πi⁄
);

41 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/mem.c

31 
	~<°ddef.h
>

36 *
	$mem£t
(*
d°
, 
vÆ
, 
size_t
 
cou¡
)

38 *
±r
 = 
d°
;

40 
cou¡
--)

41 *
±r
++ = 
vÆ
;

43  
d°
;

44 
	}
}

49 
	$memcmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
Àn
)

51 c⁄° *
s
 = 
s1
;

52 c⁄° *
d
 = 
s2
;

53 
dc
;

54 
sc
;

56 
Àn
--) {

57 
sc
 = *
s
++;

58 
dc
 = *
d
++;

59 i‡(
sc
 - 
dc
)

60  (
sc
 - 
dc
);

64 
	}
}

69 *
	$mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

71 c⁄° *
s
 = 
§c
;

72 *
d
 = 
d°
;

74 
Àn
--)

75 *
d
++ = *
s
++;

77  
d°
;

78 
	}
}

83 *
	$memmove
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

93 i‡((
size_t
)
d°
 - (size_t)
§c
 >
Àn
) {

95  
	`mem˝y
(
d°
, 
§c
, 
Àn
);

98 c⁄° *
íd
 = 
d°
;

99 c⁄° *
s
 = (c⁄° *)
§c
 + 
Àn
;

100 *
d
 = (*)
d°
 + 
Àn
;

101 
d
 !
íd
)

102 *--
d
 = *--
s
;

104  
d°
;

105 
	}
}

110 *
	$memchr
(c⁄° *
§c
, 
c
, 
size_t
 
Àn
)

112 c⁄° *
s
 = 
§c
;

114 
Àn
--) {

115 i‡(*
s
 =
c
)

116  (*Ë
s
;

117 
s
++;

120  
NULL
;

121 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/printf.c

31 
	~<°dio.h
>

32 
	~<°d¨g.h
>

33 
	~"mt_˝uxg±.h
"

35 (*
	glog_lock_acquúe
)();

36 (*
log_wrôe
)();

37 (*
log_lock_ªÀa£
)();

39 (*
log_lock_acquúe2
)();

40 (*
log_wrôe2
)();

41 (*
log_lock_ªÀa£2
)();

45 
	#PRINT_BUFFER_SIZE
 128

	)

46 
	#TIMESTAMP_BUFFER_SIZE
 32

	)

47 
	#ATF_SCHED_CLOCK_UNIT
 1000000000

48 

	)

50 
	$¥ötf
(c⁄° *
fmt
, ...)

52 
va_li°
 
¨gs
;

53 
buf
[
PRINT_BUFFER_SIZE
];

54 
cou¡
;

55 
time°amp_buf
[
TIMESTAMP_BUFFER_SIZE
];

56 
cur_time
;

57 
£c_time
;

58 
ns_time
;

61 i‡(
log_lock_acquúe
)

62 (*
log_lock_acquúe
)();

67 
cur_time
 = 
	`©f_sched_˛ock
();

68 
£c_time
 = 
cur_time
 / 
ATF_SCHED_CLOCK_UNIT
;

69 
ns_time
 = (
cur_time
 % 
ATF_SCHED_CLOCK_UNIT
)/1000;

71 
	`¢¥ötf
(
time°amp_buf
, (timestamp_buf) - 1,

72 "[ATF][%6Œu.%06Œu]", 
£c_time
, 
ns_time
);

74 
time°amp_buf
[
TIMESTAMP_BUFFER_SIZE
 - 1] = '\0';

75 
cou¡
 = 0;

76 
time°amp_buf
[
cou¡
])

79 i‡(
log_wrôe
)

80 (*
log_wrôe
)(
time°amp_buf
[
cou¡
]);

81 i‡(
	`putch¨
(
time°amp_buf
[
cou¡
]Ë!
EOF
) {

82 
cou¡
++;

84 
cou¡
 = 
EOF
;

89 
	`va_°¨t
(
¨gs
, 
fmt
);

90 
	`v¢¥ötf
(
buf
, (bufË- 1, 
fmt
, 
¨gs
);

91 
	`va_íd
(
¨gs
);

94 
buf
[
PRINT_BUFFER_SIZE
 - 1] = '\0';

95 
cou¡
 = 0;

96 
buf
[
cou¡
])

99 i‡(
log_wrôe
)

100 (*
log_wrôe
)(
buf
[
cou¡
]);

102 i‡(
	`putch¨
(
buf
[
cou¡
]Ë!
EOF
) {

103 
cou¡
++;

105 
cou¡
 = 
EOF
;

111 i‡(
log_lock_ªÀa£
)

112 (*
log_lock_ªÀa£
)();

114  
cou¡
;

115 
	}
}

117 
bl31_log_£rvi˚_ªgi°î
((*
lock_gë
)(),

118 (*
log_putc
)(),

119 (*
lock_ªÀa£
)())

121 
log_lock_acquúe
 = 
lock_gë
;

122 
log_wrôe
 = 
log_putc
;

123 
log_lock_ªÀa£
 = 
lock_ªÀa£
;

124 
	}
}

126 
bl31_log_£rvi˚_ªgi°î2
((*
lock_gë
)(),

127 (*
log_putc
)(),

128 (*
lock_ªÀa£
)())

130 
log_lock_acquúe2
 = 
lock_gë
;

131 
log_wrôe2
 = 
log_putc
;

132 
log_lock_ªÀa£2
 = 
lock_ªÀa£
;

133 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/putchar.c

31 
	~<°dio.h
>

32 
	~<c⁄sﬁe.h
>

39 
	$putch¨
(
c
)

41 
ªs
;

42 i‡(
	`c⁄sﬁe_putc
(()
c
) >= 0)

43 
ªs
 = 
c
;

45 
ªs
 = 
EOF
;

47  
ªs
;

48 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/puts.c

31 
	~<°dio.h
>

33 
	$puts
(c⁄° *
s
)

35 
cou¡
 = 0;

36 *
s
)

38 i‡(
	`putch¨
(*
s
++Ë!
EOF
) {

39 
cou¡
++;

41 
cou¡
 = 
EOF
;

49 i‡((
cou¡
 !
EOF
Ë&& (
	`putch¨
('\n') != EOF))

50 
cou¡
++;

52 
cou¡
 = 
EOF
;

54  
cou¡
;

55 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/std.c

33 
	~"ab‹t.c
"

34 
	~"as£π.c
"

35 
	~"mem.c
"

36 
	~"¥ötf.c
"

37 
	~"putch¨.c
"

38 
	~"puts.c
"

39 
	~"°rchr.c
"

40 
	~"°rcmp.c
"

41 
	~"°æí.c
"

42 
	~"°∫cmp.c
"

43 
	~"subr_¥f.c
"

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/strchr.c

35 
	~<sys/cdefs.h
>

36 
	~<°ddef.h
>

37 
	~<°rög.h
>

40 
	$°rchr
(c⁄° *
p
, 
ch
)

42 
c
;

44 
c
 = 
ch
;

45 ;; ++
p
) {

46 i‡(*
p
 =
c
)

47  ((*)
p
);

48 i‡(*
p
 == '\0')

49  (
NULL
);

52 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/strcmp.c

38 
	~<sys/cdefs.h
>

39 
	~<°rög.h
>

45 
	$°rcmp
(c⁄° *
s1
, c⁄° *
s2
)

47 *
s1
 =*
s2
++)

48 i‡(*
s1
++ == '\0')

50  *(c⁄° *)
s1
 - *(c⁄° *)(
s2
 - 1);

51 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/strlen.c

34 
	~<°ddef.h
>

36 
size_t


37 
	$°æí
(
°r
)

38 c⁄° *
°r
;

40 c⁄° *
s
;

42 
s
 = 
°r
; *s; ++s);

43 (
s
 - 
°r
);

44 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/strncmp.c

35 
	~<sys/cdefs.h
>

36 
	~<°rög.h
>

39 
	$°∫cmp
(c⁄° *
s1
, c⁄° *
s2
, 
size_t
 
n
)

42 i‡(
n
 == 0)

45 i‡(*
s1
 !*
s2
++)

46  (*(c⁄° *)
s1
 -

47 *(c⁄° *)(
s2
 - 1));

48 i‡(*
s1
++ == '\0')

50 } --
n
 != 0);

52 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/subr_prf.c

42 
	~<°dio.h
>

43 
	~<°döt.h
>

44 
	~<°d¨g.h
>

45 
	~<°ddef.h
>

46 
	~<°rög.h
>

47 
	~<˘y≥.h
>

49 
	tu_ch¨
;

50 
	tu_öt
;

51 
öt64_t
 
	tquad_t
;

52 
uöt64_t
 
	tu_quad_t
;

53 
	tu_l⁄g
;

54 
	tu_sh‹t
;

56 
ölöe
 
	$imax
(
a
, 
b
Ë{  (®> b ?á : b); 
	}
}

63 
	#TOCONS
 0x01

	)

64 
	#TOTTY
 0x02

	)

65 
	#TOLOG
 0x04

	)

68 
	#MAXNBUF
 ((
ötmax_t
Ë* 8 + 1)

	)

70 
	sputch¨_¨g
 {

71 
	mÊags
;

72 
	m¥i
;

73 
ây
 *
	mây
;

74 *
	mp_bu‰
;

75 
size_t
 
	mn_bu‰
;

76 *
	mp_√xt
;

77 
size_t
 
	mªmaö
;

80 
	s¢¥ötf_¨g
 {

81 *
	m°r
;

82 
size_t
 
	mªmaö
;

85 
log_›í
;

87 *
k•röä
(*
nbuf
, 
uötmax_t
 
num
, 
ba£
, *
Àn
, 
uµî
);

88 
¢¥ötf_func
(
ch
, *
¨g
);

89 
kv¥ötf
(c⁄° *
fmt
, (*
func
)(, *), *
¨g
, 
ødix
, 
va_li°
 
≠
);

91 
	`v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

93 c⁄° 
hex2ascii_d©a
[] = "0123456789abcdefghijklmnopqrstuvwxyz";

94 
	#hex2ascii
(
hex
Ë(
hex2ascii_d©a
[hex])

	)

100 
	$•rötf
(*
buf
, c⁄° *
cfmt
, ...)

102 
ªtvÆ
;

103 
va_li°
 
≠
;

105 
	`va_°¨t
(
≠
, 
cfmt
);

106 
ªtvÆ
 = 
	`kv¥ötf
(
cfmt
, 
NULL
, (*)
buf
, 10, 
≠
);

107 
buf
[
ªtvÆ
] = '\0';

108 
	`va_íd
(
≠
);

109  (
ªtvÆ
);

110 
	}
}

116 
	$v•rötf
(*
buf
, c⁄° *
cfmt
, 
va_li°
 
≠
)

118 
ªtvÆ
;

120 
ªtvÆ
 = 
	`kv¥ötf
(
cfmt
, 
NULL
, (*)
buf
, 10, 
≠
);

121 
buf
[
ªtvÆ
] = '\0';

122  (
ªtvÆ
);

123 
	}
}

129 
	$¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, ...)

131 
ªtvÆ
;

132 
va_li°
 
≠
;

134 
	`va_°¨t
(
≠
, 
f‹m©
);

135 
ªtvÆ
 = 
	`v¢¥ötf
(
°r
, 
size
, 
f‹m©
, 
≠
);

136 
	`va_íd
(
≠
);

137 (
ªtvÆ
);

138 
	}
}

144 
	$v¢¥ötf
(*
°r
, 
size_t
 
size
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

146 
¢¥ötf_¨g
 
öfo
;

147 
ªtvÆ
;

149 
öfo
.
°r
 = str;

150 
öfo
.
ªmaö
 = 
size
;

151 
ªtvÆ
 = 
	`kv¥ötf
(
f‹m©
, 
¢¥ötf_func
, &
öfo
, 10, 
≠
);

152 i‡(
öfo
.
ªmaö
 >= 1)

153 *
öfo
.
°r
++ = '\0';

154  (
ªtvÆ
);

155 
	}
}

158 
	$¢¥ötf_func
(
ch
, *
¨g
)

160 
¢¥ötf_¨g
 *c⁄° 
öfo
 = 
¨g
;

162 i‡(
öfo
->
ªmaö
 >= 2) {

163 *
öfo
->
°r
++ = 
ch
;

164 
öfo
->
ªmaö
--;

166 
	}
}

173 
	$v¢Ωrötf
(*
°r
, 
size_t
 
size
, 
ødix
, c⁄° *
f‹m©
, 
va_li°
 
≠
)

175 
¢¥ötf_¨g
 
öfo
;

176 
ªtvÆ
;

178 
öfo
.
°r
 = str;

179 
öfo
.
ªmaö
 = 
size
;

180 
ªtvÆ
 = 
	`kv¥ötf
(
f‹m©
, 
¢¥ötf_func
, &
öfo
, 
ødix
, 
≠
);

181 i‡(
öfo
.
ªmaö
 >= 1)

182 *
öfo
.
°r
++ = '\0';

183  (
ªtvÆ
);

184 
	}
}

194 
	$k•röä
(*
nbuf
, 
uötmax_t
 
num
, 
ba£
, *
À≈
, 
uµî
)

196 *
p
, 
c
;

198 
p
 = 
nbuf
;

199 *
p
 = '\0';

201 
c
 = 
	`hex2ascii
(
num
 % 
ba£
);

202 *++
p
 = 
uµî
 ? 
	`touµî
(
c
) : c;

203 } 
num
 /
ba£
);

204 i‡(
À≈
)

205 *
À≈
 = 
p
 - 
nbuf
;

206  (
p
);

207 
	}
}

236 
kv¥ötf
(c⁄° *
fmt
, (*
func
)(, *), *
¨g
, 
ødix
, 
va_li°
 
≠
)

238 
	#PCHAR
(
c
Ë{
cc
=(c); i‡(
func
Ë(*func)(cc,
¨g
); *
d
++ = cc; 
ªtvÆ
++; }

	)

239 
nbuf
[
MAXNBUF
];

240 *
d
;

241 c⁄° *
p
, *
≥r˚¡
, *
q
;

242 
u_ch¨
 *
up
;

243 
ch
, 
n
;

244 
uötmax_t
 
num
;

245 
ba£
, 
lÊag
, 
qÊag
, 
tmp
, 
width
, 
œdju°
, 
sh¨pÊag
, 
√g
, 
sign
, 
dŸ
;

246 
cÊag
, 
hÊag
, 
jÊag
, 
tÊag
, 
zÊag
;

247 
dwidth
, 
uµî
;

248 
∑dc
;

249 
°›
 = 0, 
ªtvÆ
 = 0;

251 
num
 = 0;

252 i‡(!
func
)

253 
d
 = (*Ë
¨g
;

255 
d
 = 
NULL
;

257 i‡(
fmt
 =
NULL
)

258 
fmt
 = "(fmtÇull)\n";

260 i‡(
ødix
 < 2 ||Ñadix > 36)

261 
ødix
 = 10;

264 
∑dc
 = ' ';

265 
width
 = 0;

266 (
ch
 = (
u_ch¨
)*
fmt
++Ë!'%' || 
°›
) {

267 i‡(
ch
 == '\0')

268  (
ªtvÆ
);

269 
	`PCHAR
(
ch
);

271 
≥r˚¡
 = 
fmt
 - 1;

272 
qÊag
 = 0; 
lÊag
 = 0; 
œdju°
 = 0; 
sh¨pÊag
 = 0; 
√g
 = 0;

273 
sign
 = 0; 
dŸ
 = 0; 
dwidth
 = 0; 
uµî
 = 0;

274 
cÊag
 = 0; 
hÊag
 = 0; 
jÊag
 = 0; 
tÊag
 = 0; 
zÊag
 = 0;

275 
ªswôch
: 
ch
 = (
u_ch¨
)*
fmt
++) {

277 
dŸ
 = 1;

278 
ªswôch
;

280 
sh¨pÊag
 = 1;

281 
ªswôch
;

283 
sign
 = 1;

284 
ªswôch
;

286 
œdju°
 = 1;

287 
ªswôch
;

289 
	`PCHAR
(
ch
);

292 i‡(!
dŸ
) {

293 
width
 = 
	`va_¨g
(
≠
, );

294 i‡(
width
 < 0) {

295 
œdju°
 = !ladjust;

296 
width
 = -width;

299 
dwidth
 = 
	`va_¨g
(
≠
, );

301 
ªswôch
;

303 i‡(!
dŸ
) {

304 
∑dc
 = '0';

305 
ªswôch
;

309 
n
 = 0;; ++
fmt
) {

310 
n
 =Ç * 10 + 
ch
 - '0';

311 
ch
 = *
fmt
;

312 i‡(
ch
 < '0' || ch > '9')

315 i‡(
dŸ
)

316 
dwidth
 = 
n
;

318 
width
 = 
n
;

319 
ªswôch
;

321 
num
 = (
u_öt
)
	`va_¨g
(
≠
, );

322 
p
 = 
	`va_¨g
(
≠
, *);

323 
q
 = 
	`k•röä
(
nbuf
, 
num
, *
p
++, 
NULL
, 0); *q;)

324 
	`PCHAR
(*
q
--);

326 i‡(
num
 == 0)

329 
tmp
 = 0; *
p
;) {

330 
n
 = *
p
++;

331 i‡(
num
 & (1 << (
n
 - 1))) {

332 
	`PCHAR
(
tmp
 ? ',' : '<');

333 ; (
n
 = *
p
) > ' '; ++p)

334 
	`PCHAR
(
n
);

335 
tmp
 = 1;

337 ; *
p
 > ' '; ++p)

340 i‡(
tmp
)

341 
	`PCHAR
('>');

344 
	`PCHAR
(
	`va_¨g
(
≠
, ));

347 
up
 = 
	`va_¨g
(
≠
, 
u_ch¨
 *);

348 
p
 = 
	`va_¨g
(
≠
, *);

349 i‡(!
width
)

350 
width
 = 16;

351 
width
--) {

352 
	`PCHAR
(
	`hex2ascii
(*
up
 >> 4));

353 
	`PCHAR
(
	`hex2ascii
(*
up
 & 0x0f));

354 
up
++;

355 i‡(
width
)

356 
q
=
p
;*q;q++)

357 
	`PCHAR
(*
q
);

362 
ba£
 = 10;

363 
sign
 = 1;

364 
h™dÀ_sign
;

366 i‡(
hÊag
) {

367 
hÊag
 = 0;

368 
cÊag
 = 1;

370 
hÊag
 = 1;

371 
ªswôch
;

373 
jÊag
 = 1;

374 
ªswôch
;

376 i‡(
lÊag
) {

377 
lÊag
 = 0;

378 
qÊag
 = 1;

380 
lÊag
 = 1;

381 
ªswôch
;

383 i‡(
jÊag
)

384 *(
	`va_¨g
(
≠
, 
ötmax_t
 *)Ë
ªtvÆ
;

385 i‡(
qÊag
)

386 *(
	`va_¨g
(
≠
, 
quad_t
 *)Ë
ªtvÆ
;

387 i‡(
lÊag
)

388 *(
	`va_¨g
(
≠
, *)Ë
ªtvÆ
;

389 i‡(
zÊag
)

390 *(
	`va_¨g
(
≠
, 
size_t
 *)Ë
ªtvÆ
;

391 i‡(
hÊag
)

392 *(
	`va_¨g
(
≠
, *)Ë
ªtvÆ
;

393 i‡(
cÊag
)

394 *(
	`va_¨g
(
≠
, *)Ë
ªtvÆ
;

396 *(
	`va_¨g
(
≠
, *)Ë
ªtvÆ
;

399 
ba£
 = 8;

400 
h™dÀ_nosign
;

402 
ba£
 = 16;

403 
sh¨pÊag
 = (
width
 == 0);

404 
sign
 = 0;

405 
num
 = (
uöçå_t
)
	`va_¨g
(
≠
, *);

406 
numbî
;

408 
qÊag
 = 1;

409 
ªswôch
;

411 
ba£
 = 
ødix
;

412 i‡(
sign
)

413 
h™dÀ_sign
;

414 
h™dÀ_nosign
;

416 
p
 = 
	`va_¨g
(
≠
, *);

417 i‡(
p
 =
NULL
)

418 
p
 = "(null)";

419 i‡(!
dŸ
)

420 
n
 = 
	`°æí
 (
p
);

422 
n
 = 0;Ç < 
dwidth
 && 
p
[n];Ç++)

425 
width
 -
n
;

427 i‡(!
œdju°
 && 
width
 > 0)

428 
width
--)

429 
	`PCHAR
(
∑dc
);

430 
n
--)

431 
	`PCHAR
(*
p
++);

432 i‡(
œdju°
 && 
width
 > 0)

433 
width
--)

434 
	`PCHAR
(
∑dc
);

437 
tÊag
 = 1;

438 
ªswôch
;

440 
ba£
 = 10;

441 
h™dÀ_nosign
;

443 
uµî
 = 1;

445 
ba£
 = 16;

446 
h™dÀ_nosign
;

448 
ba£
 = 16;

449 
sign
 = 1;

450 
h™dÀ_sign
;

452 
zÊag
 = 1;

453 
ªswôch
;

454 
h™dÀ_nosign
:

455 
sign
 = 0;

456 i‡(
jÊag
)

457 
num
 = 
	`va_¨g
(
≠
, 
uötmax_t
);

458 i‡(
qÊag
)

459 
num
 = 
	`va_¨g
(
≠
, 
u_quad_t
);

460 i‡(
tÊag
)

461 
num
 = 
	`va_¨g
(
≠
, 
±rdiff_t
);

462 i‡(
lÊag
)

463 
num
 = 
	`va_¨g
(
≠
, 
u_l⁄g
);

464 i‡(
zÊag
)

465 
num
 = 
	`va_¨g
(
≠
, 
size_t
);

466 i‡(
hÊag
)

467 
num
 = (
u_sh‹t
)
	`va_¨g
(
≠
, );

468 i‡(
cÊag
)

469 
num
 = (
u_ch¨
)
	`va_¨g
(
≠
, );

471 
num
 = 
	`va_¨g
(
≠
, 
u_öt
);

472 
numbî
;

473 
h™dÀ_sign
:

474 i‡(
jÊag
)

475 
num
 = 
	`va_¨g
(
≠
, 
ötmax_t
);

476 i‡(
qÊag
)

477 
num
 = 
	`va_¨g
(
≠
, 
quad_t
);

478 i‡(
tÊag
)

479 
num
 = 
	`va_¨g
(
≠
, 
±rdiff_t
);

480 i‡(
lÊag
)

481 
num
 = 
	`va_¨g
(
≠
, );

482 i‡(
zÊag
)

483 
num
 = 
	`va_¨g
(
≠
, 
ssize_t
);

484 i‡(
hÊag
)

485 
num
 = ()
	`va_¨g
(
≠
, );

486 i‡(
cÊag
)

487 
num
 = ()
	`va_¨g
(
≠
, );

489 
num
 = 
	`va_¨g
(
≠
, );

490 
numbî
:

491 i‡(
sign
 && (
ötmax_t
)
num
 < 0) {

492 
√g
 = 1;

493 
num
 = -(
ötmax_t
)num;

495 
p
 = 
	`k•röä
(
nbuf
, 
num
, 
ba£
, &
n
, 
uµî
);

496 
tmp
 = 0;

497 i‡(
sh¨pÊag
 && 
num
 != 0) {

498 i‡(
ba£
 == 8)

499 
tmp
++;

500 i‡(
ba£
 == 16)

501 
tmp
 += 2;

503 i‡(
√g
)

504 
tmp
++;

506 i‡(!
œdju°
 && 
∑dc
 == '0')

507 
dwidth
 = 
width
 - 
tmp
;

508 
width
 -
tmp
 + 
	`imax
(
dwidth
, 
n
);

509 
dwidth
 -
n
;

510 i‡(!
œdju°
)

511 
width
-- > 0)

512 
	`PCHAR
(' ');

513 i‡(
√g
)

514 
	`PCHAR
('-');

515 i‡(
sh¨pÊag
 && 
num
 != 0) {

516 i‡(
ba£
 == 8) {

517 
	`PCHAR
('0');

518 } i‡(
ba£
 == 16) {

519 
	`PCHAR
('0');

520 
	`PCHAR
('x');

523 
dwidth
-- > 0)

524 
	`PCHAR
('0');

526 *
p
)

527 
	`PCHAR
(*
p
--);

529 i‡(
œdju°
)

530 
width
-- > 0)

531 
	`PCHAR
(' ');

535 
≥r˚¡
 < 
fmt
)

536 
	`PCHAR
(*
≥r˚¡
++);

543 
°›
 = 1;

547 #unde‡
PCHAR


548 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/local_build.sh

1 #!/
bö
/
bash


3 
	gCFLAGS
='-O0 -gdwarf-2' \

4 
CROSS_COMPILE
=../../../
¥ebuûts
/
gcc
/
löux
-
x86
/
Ørch64
/
lö¨o
-Ørch64-löux-
gnu
-4.8/
bö
/aarch64-linux-gnu- \

6 #makê
DEBUG
=1 
PLAT
=
mt6752
 
Æl


7 
make
 
DEBUG
=1 
PLAT
=
mt6795
 
Æl


9 #makê
DEBUG
=1 
PLAT
=
mt6752
 
SPD
=
t•d
 
Æl


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/common/aarch64/plat_common.c

31 
	~<xœt_èbÀs.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<∂©f‹m.h
>

34 
	~<∂©f‹m_def.h
>

35 
	~<debug.h
>

36 
	~<c⁄ãxt.h
>

37 
	~<c⁄ãxt_mgmt.h
>

38 
	~<fiq_smp_ˇŒ.h
>

39 
	~<gic_v2.h
>

40 
	~<gic_v3.h
>

41 
	~<ru¡ime_svc.h
>

42 
	~<c⁄sﬁe.h
>

43 
	~"∂©_¥iv©e.h
"

45 
mt_log_£t_¸ash_Êag
();

46 
uöt64_t
 
	gwdt_kî√l_cb_addr
 = 0;

53 #¥agm®
wók
 
bl31_∂©_íabÀ_mmu


54 #¥agm®
wók
 
bl32_∂©_íabÀ_mmu


56 
	$bl31_∂©_íabÀ_mmu
()

58 
	`íabÀ_mmu_ñ3
();

59 
	}
}

61 
	$bl32_∂©_íabÀ_mmu
()

63 
	`íabÀ_mmu_ñ1
();

64 
	}
}

66 
	$´e_wdt_dump
()

68 
©f_´e_ªgs
 *
ªgs
;

69 
˝u_c⁄ãxt_t
 *
ns_˝u_c⁄ãxt
;

70 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

71 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

73 
	`¥ötf
("=>áì_wdt_dump, cpu %d \n", ()
löór_id
);

75 
ns_˝u_c⁄ãxt
 = 
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

76 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

77 
ªgs
 = (*)(
ãórg
->
©f_´e_debug_buf_°¨t
 + (
löór_id
 * (
©f_´e_ªgs
)));

79 
ªgs
->
p°©e
 = 
	`SMC_GET_EL3
(
ns_˝u_c⁄ãxt
, 
CTX_SPSR_EL3
)

80 
ªgs
->
pc
 = 
	`SMC_GET_EL3
(
ns_˝u_c⁄ãxt
, 
CTX_ELR_EL3
)

81 
ªgs
->
•
 = 
	`ªad_˘x_ªg
(
	`gë_sy§egs_˘x
(
ns_˝u_c⁄ãxt
), 
CTX_SP_EL1
);

82 
ªgs
->ªgs[0] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X0
)

83 
ªgs
->ªgs[1] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X1
)

84 
ªgs
->ªgs[2] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X2
)

85 
ªgs
->ªgs[3] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X3
)

86 
ªgs
->ªgs[4] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X4
)

87 
ªgs
->ªgs[5] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X5
)

88 
ªgs
->ªgs[6] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X6
)

89 
ªgs
->ªgs[7] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X7
)

90 
ªgs
->ªgs[8] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X8
)

91 
ªgs
->ªgs[9] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X9
)

92 
ªgs
->ªgs[10] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X10
)

93 
ªgs
->ªgs[11] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X11
)

94 
ªgs
->ªgs[12] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X12
)

95 
ªgs
->ªgs[13] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X13
)

96 
ªgs
->ªgs[14] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X14
)

97 
ªgs
->ªgs[15] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X15
)

98 
ªgs
->ªgs[16] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X16
)

99 
ªgs
->ªgs[17] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X17
)

100 
ªgs
->ªgs[18] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X18
)

101 
ªgs
->ªgs[19] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X19
)

102 
ªgs
->ªgs[20] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X20
)

103 
ªgs
->ªgs[21] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X21
)

104 
ªgs
->ªgs[22] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X22
)

105 
ªgs
->ªgs[23] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X23
)

106 
ªgs
->ªgs[24] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X24
)

107 
ªgs
->ªgs[25] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X25
)

108 
ªgs
->ªgs[26] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X26
)

109 
ªgs
->ªgs[27] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X27
)

110 
ªgs
->ªgs[28] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X28
)

111 
ªgs
->ªgs[29] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_X29
)

112 
ªgs
->ªgs[30] = 
	`SMC_GET_GP
(
ns_˝u_c⁄ãxt
, 
CTX_GPREG_LR
)

114 if(0 =
wdt_kî√l_cb_addr
) {

115 
	`£t_u¨t_Êag
();

116 
	`¥ötf
("=> wdt_kî√l_cb_addr=0,Éº‹ bef‹êWDT suc˚ssfuŒy inôülized. cpu %d\n", ()
löór_id
);

117 
	`mt_log_£t_¸ash_Êag
();

122 
	`SMC_SET_EL3
(
ns_˝u_c⁄ãxt
, 
CTX_ELR_EL3
, 
wdt_kî√l_cb_addr
);

123 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/common/aarch64/platform_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<∂©f‹m_def.h
>

36 .
wók
 
	g∂©f‹m_gë_c‹e_pos


37 .
wók
 
	g∂©f‹m_is_¥im¨y_˝u


38 .
wók
 
	g∂©f‹m_check_mpidr


39 .
wók
 
∂©_ªp‹t_ex˚±i⁄


47 
func
 
∂©f‹m_gë_c‹e_pos


48 
™d
 
	gx1
, 
	gx0
, #MPIDR_CPU_MASK

49 
™d
 
	gx0
, x0, #MPIDR_CLUSTER_MASK

50 
add
 
	gx0
, 
	gx1
, x0, 
	gLSR
 #6

51 
ªt


60 
func
 
∂©f‹m_is_¥im¨y_˝u


61 
™d
 
	gx0
, x0, #(
	gMPIDR_CLUSTER_MASK
 | 
	gMPIDR_CPU_MASK
)

62 
cmp
 
	gx0
, #PRIMARY_CPU

63 
c£t
 
	gx0
, 
eq


64 
ªt


71 
func
 
∂©f‹m_check_mpidr


72 
mov
 
	gx0
, 
xzr


73 
ªt


80 
func
 
∂©_ªp‹t_ex˚±i⁄


81 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/common/aarch64/platform_mp_stack.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<∂©f‹m_def.h
>

36 .
loˇl
 
	gp˝u_dv_mem_°ack


37 .
loˇl
 
	g∂©f‹m_n‹mÆ_°acks


38 .
wók
 
	g∂©f‹m_£t_°ack


39 .
wók
 
	g∂©f‹m_gë_°ack


40 .
wók
 
∂©f‹m_£t_cohîít_°ack


52 
func
 
∂©f‹m_£t_cohîít_°ack


53 
mov
 
	gx5
, 
x30


54 
gë_mp_°ack
 
	gp˝u_dv_mem_°ack
, 
PCPU_DV_MEM_STACK_SIZE


55 
mov
 
	g•
, 
x0


56 
ªt
 
x5


65 
func
 
∂©f‹m_gë_°ack


66 
mov
 
	gx10
, 
x30


67 
gë_mp_°ack
 
	g∂©f‹m_n‹mÆ_°acks
, 
PLATFORM_STACK_SIZE


68 
ªt
 
x10


77 
func
 
∂©f‹m_£t_°ack


78 
mov
 
	gx9
, 
x30


79 
bl
 
∂©f‹m_gë_°ack


80 
mov
 
	g•
, 
x0


81 
ªt
 
x9


90 
de˛¨e_°ack
 
	g∂©f‹m_n‹mÆ_°acks
, 
	gtzfw_n‹mÆ_°acks
, \

91 
	gPLATFORM_STACK_SIZE
, 
PLATFORM_CORE_COUNT


101 
de˛¨e_°ack
 
	gp˝u_dv_mem_°ack
, 
	gtzfw_cohîít_mem
, \

102 
	gPCPU_DV_MEM_STACK_SIZE
, 
	gPLATFORM_CORE_COUNT


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/common/aarch64/platform_up_stack.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<∂©f‹m_def.h
>

36 .
loˇl
 
	gp˝u_dv_mem_°ack


37 .
loˇl
 
	g∂©f‹m_n‹mÆ_°acks


38 .
globl
 
	g∂©f‹m_£t_°ack


39 .
globl
 
	g∂©f‹m_gë_°ack


40 .
globl
 
∂©f‹m_£t_cohîít_°ack


51 
func
 
∂©f‹m_£t_cohîít_°ack


52 
gë_up_°ack
 
	gp˝u_dv_mem_°ack
, 
PCPU_DV_MEM_STACK_SIZE


53 
mov
 
	g•
, 
x0


54 
ªt


65 
func
 
∂©f‹m_gë_°ack


66 
gë_up_°ack
 
	g∂©f‹m_n‹mÆ_°acks
, 
PLATFORM_STACK_SIZE


67 
ªt


77 
func
 
∂©f‹m_£t_°ack


78 
gë_up_°ack
 
	g∂©f‹m_n‹mÆ_°acks
, 
PLATFORM_STACK_SIZE


79 
mov
 
	g•
, 
x0


80 
ªt


88 
de˛¨e_°ack
 
	g∂©f‹m_n‹mÆ_°acks
, 
	gtzfw_n‹mÆ_°acks
, \

89 
	gPLATFORM_STACK_SIZE
, 1

96 
de˛¨e_°ack
 
	gp˝u_dv_mem_°ack
, 
	gtzfw_cohîít_mem
, \

97 
	gPCPU_DV_MEM_STACK_SIZE
, 1

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/common/fiq_smp_call.c

1 
	~<¨ch_hñ≥rs.h
>

2 
	~<as£π.h
>

3 
	~<bl_comm⁄.h
>

4 
	~<debug.h
>

5 
	~<gic_v2.h
>

6 
	~<gic_v3.h
>

7 
	~<öãºu±_mgmt.h
>

8 
	~<∂©f‹m.h
>

9 
	~<°döt.h
>

10 
	~<∂©f‹m_def.h
>

11 
	~<fiq_smp_ˇŒ.h
>

12 
	~<°dio.h
>

15 vﬁ©ûê
ˇŒ_fun˘i⁄_d©a
 
	gcfd
[
PLATFORM_CORE_COUNT
];

18 
	$fiq_smp_ˇŒ_fun˘i⁄
(
m≠
, 
öãr_˝u_ˇŒ_func_t
 
func
, *
öfo
, 
waô
)

20 
˝u
;

21 
lockvÆ
, 
tmp
;

24 i‡(!
func
) {

25 
	`¥ötf
("inter-cpu call is failed dueÅo invalid func\n");

29 
˝u
 = 0; cpu < 
PLATFORM_CORE_COUNT
; cpu++) {

30 i‡(
m≠
 & (1 << 
˝u
)) {

31 
	`¥ötf
("Waô u¡û cpu %d i†ªady f‹ i¡î-˝u cÆl\n", 
˝u
);

33 
__asm__
 volatile(

38 : "=&r" (
lockvÆ
), "=&r" (
tmp
Ë: "r" (&(
cfd
[
˝u
].
lock
)), "Ir" (1): "cc");

41 
__asm__
 volatile(

47 : "=&r" (
lockvÆ
), "=&r" (
tmp
), "=&r" ((
cfd
[
˝u
].
lock
));

52 
cfd
[
˝u
].
func
 = func;

53 
cfd
[
˝u
].
öfo
 = info;

59 
	`¥ötf
("Síd SGIÅÿ˝u (m≠: 0x%xËf‹ i¡î-˝u cÆl\n", 
m≠
);

60 
	`úq_øi£_so·úq
(
m≠
, 
FIQ_SMP_CALL_SGI
);

62 i‡(
waô
) {

63 
˝u
 = 0; cpu < 
PLATFORM_CORE_COUNT
; cpu++) {

64 i‡(
m≠
 & (1 << 
˝u
)) {

65 
	`¥ötf
("Waô u¡û cpu %d i†d⁄e\n", 
˝u
);

66 
cfd
[
˝u
].
lock
 != 0) {

68 
	`¥ötf
("˝u %d i†d⁄e\n", 
˝u
);

70 
i
 !
TIMEOUT
)

73 if(
cfd
[
˝u
].
lock
 == 0)

75 
i
++;

78 if(
i
==
TIMEOUT
)

80 
	`¥ötf
("[Eº‹] Waô cpu %dÅimeout!\n", 
˝u
);

84 
	`¥ötf
("˝u %d i†d⁄e\n", 
˝u
);

91 
	}
}

93 
	$fiq_icc_i§
()

95 
˝u
;

96 
lockvÆ
, 
tmp
;

97 
uöt64_t
 
mpidr
;

98 
ür
;

100 
	`¥ötf
("inter-cpu-call interrupt isÅriggered\n");

102 
mpidr
 = 
	`ªad_mpidr
();

103 
˝u
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

105 
ür
 = 
	`gë_ack_öfo
();

107 i‡((
cfd
[
˝u
].
func
 !
NULL
Ë&& (cfd[˝u].
lock
 == 1)) {

108 
cfd
[
˝u
].
	`func
(cfd[˝u].
öfo
);

109 
cfd
[
˝u
].
func
 = 
NULL
;

110 
cfd
[
˝u
].
öfo
 = 
NULL
;

112 
__asm__
 volatile(

117 : "=&r" (
lockvÆ
), "=&r" (
tmp
)

118 : "r" (&(
cfd
[
˝u
].
lock
)), "Ir" (1)

121 
asm
 volatile(

126 : "=&r" (
lockvÆ
), "=&r" (
tmp
), "+Q" (
cfd
[
˝u
].
lock
)

133 
	`¥ötf
("cfd[%d] i†övÆid (fun¯0x%x,Üock = %d)\n", 
˝u
, \

134 
cfd
[
˝u
].
func
, cfd[˝u].
lock
);

137 
	`¥ötf
("CPU_%d cfdÜock = %d\n", 
˝u
, 
cfd
[˝u].
lock
);

139 
	`ack_sgi
(
ür
);

141 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/aarch64/fvp_common.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<cci400.h
>

36 
	~<debug.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<xœt_èbÀs.h
>

40 
	~"../fvp_def.h
"

49 
	gfvp_c⁄fig
[
CONFIG_LIMIT
];

56 c⁄° 
mm≠_ªgi⁄_t
 
	gfvp_mm≠
[] = {

57 { 
TZROM_BASE
, 
TZROM_SIZE
, 
MT_MEMORY
 | 
MT_RO
 | 
MT_SECURE
 },

58 { 
TZDRAM_BASE
, 
TZDRAM_SIZE
, 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
 },

59 { 
FLASH0_BASE
, 
FLASH0_SIZE
, 
MT_MEMORY
 | 
MT_RO
 | 
MT_SECURE
 },

60 { 
FLASH1_BASE
, 
FLASH1_SIZE
, 
MT_MEMORY
 | 
MT_RO
 | 
MT_SECURE
 },

61 { 
VRAM_BASE
, 
VRAM_SIZE
, 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
 },

62 { 
DEVICE0_BASE
, 
DEVICE0_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

63 { 
NSRAM_BASE
, 
NSRAM_SIZE
, 
MT_MEMORY
 | 
MT_RW
 | 
MT_NS
 },

64 { 
DEVICE1_BASE
, 
DEVICE1_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

66 { 0x40000000, 0x40000000, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

67 { 
DRAM1_BASE
, 
DRAM1_SIZE
, 
MT_MEMORY
 | 
MT_RW
 | 
MT_NS
 },

75 
	#DEFINE_CONFIGURE_MMU_EL
(
_ñ
) \

76 
fvp_c⁄figuª_mmu_ñ
##
	`_ñ
(
tŸÆ_ba£
, \

77 
tŸÆ_size
, \

78 
ro_°¨t
, \

79 
ro_limô
, \

80 
coh_°¨t
, \

81 
coh_limô
) \

83 
	`mm≠_add_ªgi⁄
(
tŸÆ_ba£
, \

84 
tŸÆ_size
, \

85 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
); \

86 
	`mm≠_add_ªgi⁄
(
ro_°¨t
, 
ro_limô
 -Ño_start, \

87 
MT_MEMORY
 | 
MT_RO
 | 
MT_SECURE
); \

88 
	`mm≠_add_ªgi⁄
(
coh_°¨t
, 
coh_limô
 - coh_start, \

89 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
); \

90 
	`mm≠_add
(
fvp_mm≠
); \

91 
	`öô_xœt_èbÀs
(); \

93 
íabÀ_mmu_ñ
##
	`_ñ
(); \

94 }

	)

97 
	$DEFINE_CONFIGURE_MMU_EL
(1)

98 
	$DEFINE_CONFIGURE_MMU_EL
(3)

101 
	$fvp_gë_cfgv¨
(
v¨_id
)

103 
	`as£π
(
v¨_id
 < 
CONFIG_LIMIT
);

104  
fvp_c⁄fig
[
v¨_id
];

105 
	}
}

114 
	$fvp_c⁄fig_£tup
()

116 
ªv
, 
hbi
, 
bld
, 
¨ch
, 
sys_id
, 
midr_≤
;

118 
sys_id
 = 
	`mmio_ªad_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_ID
);

119 
ªv
 = (
sys_id
 >> 
SYS_ID_REV_SHIFT
Ë& 
SYS_ID_REV_MASK
;

120 
hbi
 = (
sys_id
 >> 
SYS_ID_HBI_SHIFT
Ë& 
SYS_ID_HBI_MASK
;

121 
bld
 = (
sys_id
 >> 
SYS_ID_BLD_SHIFT
Ë& 
SYS_ID_BLD_MASK
;

122 
¨ch
 = (
sys_id
 >> 
SYS_ID_ARCH_SHIFT
Ë& 
SYS_ID_ARCH_MASK
;

124 i‡((
ªv
 !
REV_FVP
Ë|| (
¨ch
 !
ARCH_MODEL
))

125 
	`∑nic
();

131 
bld
) {

132 
BLD_GIC_VE_MMAP
:

133 
fvp_c⁄fig
[
CONFIG_GICD_ADDR
] = 
VE_GICD_BASE
;

134 
fvp_c⁄fig
[
CONFIG_GICC_ADDR
] = 
VE_GICC_BASE
;

135 
fvp_c⁄fig
[
CONFIG_GICH_ADDR
] = 
VE_GICH_BASE
;

136 
fvp_c⁄fig
[
CONFIG_GICV_ADDR
] = 
VE_GICV_BASE
;

138 
BLD_GIC_A53A57_MMAP
:

139 
fvp_c⁄fig
[
CONFIG_GICD_ADDR
] = 
BASE_GICD_BASE
;

140 
fvp_c⁄fig
[
CONFIG_GICC_ADDR
] = 
BASE_GICC_BASE
;

141 
fvp_c⁄fig
[
CONFIG_GICH_ADDR
] = 
BASE_GICH_BASE
;

142 
fvp_c⁄fig
[
CONFIG_GICV_ADDR
] = 
BASE_GICV_BASE
;

145 
	`as£π
(0);

152 
hbi
) {

153 
HBI_FOUNDATION
:

154 
fvp_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

155 
fvp_c⁄fig
[
CONFIG_MAX_AFF1
] = 1;

156 
fvp_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

157 
fvp_c⁄fig
[
CONFIG_BASE_MMAP
] = 0;

158 
fvp_c⁄fig
[
CONFIG_HAS_CCI
] = 0;

159 
fvp_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

161 
HBI_FVP_BASE
:

162 
midr_≤
 = (
	`ªad_midr
(Ë>> 
MIDR_PN_SHIFT
Ë& 
MIDR_PN_MASK
;

163 i‡((
midr_≤
 =
MIDR_PN_A57
Ë|| (midr_≤ =
MIDR_PN_A53
))

164 
fvp_c⁄fig
[
CONFIG_CPU_SETUP
] = 1;

166 
fvp_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

168 
fvp_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

169 
fvp_c⁄fig
[
CONFIG_MAX_AFF1
] = 2;

170 
fvp_c⁄fig
[
CONFIG_BASE_MMAP
] = 1;

171 
fvp_c⁄fig
[
CONFIG_HAS_CCI
] = 1;

172 
fvp_c⁄fig
[
CONFIG_HAS_TZC
] = 1;

175 
	`as£π
(0);

179 
	}
}

181 
	$∂©_gë_ns_image_íåypoöt
()

183  
NS_IMAGE_OFFSET
;

184 
	}
}

186 
uöt64_t
 
	$∂©_gë_sys˙t_‰eq
()

188 
uöt64_t
 
cou¡î_ba£_‰equícy
;

191 
cou¡î_ba£_‰equícy
 = 
	`mmio_ªad_32
(
SYS_CNTCTL_BASE
 + 
CNTFID_OFF
);

194 
	`as£π
(
cou¡î_ba£_‰equícy
 != 0);

196  
cou¡î_ba£_‰equícy
;

197 
	}
}

199 
	$fvp_cci_£tup
()

201 
cci_£tup
;

208 
cci_£tup
 = 
	`fvp_gë_cfgv¨
(
CONFIG_HAS_CCI
);

209 i‡(
cci_£tup
)

210 
	`cci_íabÀ_cohîícy
(
	`ªad_mpidr
());

211 
	}
}

217 
	$fvp_£t_bl32_ï_öfo
(
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

219 
	`SET_SECURITY_STATE
(
bl32_ï_öfo
->
h
.
©å
, 
SECURE
);

224 
bl32_ï_öfo
->
•§
 = 0;

225 
	}
}

230 
	$fvp_£t_bl33_ï_öfo
(
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

232 
ñ_°©us
;

233 
mode
;

236 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

237 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

239 i‡(
ñ_°©us
)

240 
mode
 = 
MODE_EL2
;

242 
mode
 = 
MODE_EL1
;

249 
bl33_ï_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

250 
	`SET_SECURITY_STATE
(
bl33_ï_öfo
->
h
.
©å
, 
NON_SECURE
);

251 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/aarch64/fvp_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<bl_comm⁄.h
>

34 
	~<gic_v2.h
>

35 
	~"../drivîs/pwrc/fvp_pwrc.h
"

36 
	~"../fvp_def.h
"

38 .
globl
 
	g∂©f‹m_gë_íåypoöt


39 .
globl
 
	g∂©_£c⁄d¨y_cﬁd_boŸ_£tup


40 .
globl
 
	g∂©f‹m_mem_öô


41 .
globl
 
	g∂©_ªp‹t_ex˚±i⁄


43 .
ma¸o
 
fvp_choo£_gicmm≠
 
	g∑øm1
, 
	g∑øm2
, 
	gx_tmp
, 
	gw_tmp
, 
ªs


44 
	gldr
 \
	gx_tmp
, =
VE_SYSREGS_BASE
 + 
V2M_SYS_ID


45 
ldr
 \
w_tmp
, [\
x_tmp
]

46 
	gubfx
 \
	gw_tmp
, \w_tmp, #SYS_ID_BLD_SHIFT, #SYS_ID_BLD_LENGTH

47 
	gcmp
 \
	gw_tmp
, #BLD_GIC_VE_MMAP

48 
	gc£l
 \
	gªs
, \
	g∑øm1
, \
	g∑øm2
, 
	geq


49 .
ídm


62 
func
 
∂©_£c⁄d¨y_cﬁd_boŸ_£tup


71 
mrs
 
	gx0
, 
mpidr_ñ1


72 
ldr
 
	gx1
, =
PWRC_BASE


73 
°r
 
w0
, [
x1
, #PPOFFR_OFF]

79 
ldr
 
	gx0
, =
VE_GICC_BASE


80 
ldr
 
x1
, =
BASE_GICC_BASE


81 
fvp_choo£_gicmm≠
 
x0
, 
	gx1
, 
	gx2
, 
	gw2
, 
x1


82 
mov
 
	gw0
, #(
	gIRQ_BYP_DIS_GRP1
 | 
	gFIQ_BYP_DIS_GRP1
)

83 
‹r
 
	gw0
, w0, #(
	gIRQ_BYP_DIS_GRP0
 | 
	gFIQ_BYP_DIS_GRP0
)

84 
°r
 
	gw0
, [
x1
, #GICC_CTLR]

92 
dsb
 
sy


93 
wfi


94 
	gcb_∑nic
:

95 
b
 
cb_∑nic


118 
func
 
∂©f‹m_gë_íåypoöt


119 
mov
 
x9
, 
x30


120 
mov
 
	gx2
, 
x0


121 
ldr
 
	gx1
, =
PWRC_BASE


122 
°r
 
w2
, [
x1
, #PSYSR_OFF]

123 
ldr
 
	gw2
, [
x1
, #PSYSR_OFF]

124 
ubfx
 
	gw2
, w2, #PSYSR_WK_SHIFT, #PSYSR_WK_MASK

125 
cbnz
 
	gw2
, 
w¨m_ª£t


126 
mov
 
	gx0
, 
x2


127 
b
 
exô


128 
	gw¨m_ª£t
:

136 
ldr
 
x10
, =
TZDRAM_BASE
 + 
MBOX_OFF


137 
bl
 
∂©f‹m_gë_c‹e_pos


138 
l¶
 
x0
, 
	gx0
, #CACHE_WRITEBACK_SHIFT

139 
ldr
 
	gx0
, [
x10
, 
x0
]

140 
cbz
 
	gx0
, 
_∑nic


141 
	gexô
:

142 
ªt
 
x9


143 
_∑nic
: 
b
 _panic

158 
func
 
∂©f‹m_mem_öô


159 
ldr
 
x0
, =
TZDRAM_BASE
 + 
MBOX_OFF


160 
mov
 
w1
, #PLATFORM_CORE_COUNT

161 
	glo›
:

162 
°r
 
xzr
, [
x0
], #CACHE_WRITEBACK_GRANULE

163 
subs
 
	gw1
, w1, #1

164 
	gb
.
gt
 
lo›


165 
ªt


175 
func
 
∂©_ªp‹t_ex˚±i⁄


176 
mrs
 
	gx1
, 
CuºítEl


177 
l§
 
	gx1
, x1, #MODE_EL_SHIFT

178 
l¶
 
	gx1
, x1, #SYS_LED_EL_SHIFT

179 
l¶
 
	gx0
, x0, #SYS_LED_EC_SHIFT

180 
mov
 
	gx2
, #(
	gSECURE
 << 
	gSYS_LED_SS_SHIFT
)

181 
‹r
 
	gx0
, x0, 
x2


182 
‹r
 
	gx0
, x0, 
x1


183 
mov
 
	gx1
, #VE_SYSREGS_BASE

184 
add
 
	gx1
, x1, #V2M_SYS_LED

185 
°r
 
	gw0
, [
x1
]

186 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/bl1_fvp_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<mmio.h
>

36 
	~<∂©f‹m.h
>

37 
	~<∂©f‹m_def.h
>

38 
	~"fvp_def.h
"

39 
	~"fvp_¥iv©e.h
"

45 
__COHERENT_RAM_START__
;

46 
__COHERENT_RAM_END__
;

48 
__BL1_RAM_START__
;

49 
__BL1_RAM_END__
;

58 
	#BL1_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

59 
	#BL1_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

61 
	#BL1_RAM_BASE
 ()(&
__BL1_RAM_START__
)

	)

62 
	#BL1_RAM_LIMIT
 ()(&
__BL1_RAM_END__
)

	)

66 
memöfo_t
 
	gbl1_tzøm_œyout
;

68 
memöfo_t
 *
	$bl1_∂©_£c_mem_œyout
()

70  &
bl1_tzøm_œyout
;

71 
	}
}

76 
	$bl1_óæy_∂©f‹m_£tup
()

78 c⁄° 
bl1_øm_ba£
 = 
BL1_RAM_BASE
;

79 c⁄° 
bl1_øm_limô
 = 
BL1_RAM_LIMIT
;

80 c⁄° 
tzøm_limô
 = 
TZRAM_BASE
 + 
TZRAM_SIZE
;

83 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

93 
bl1_tzøm_œyout
.
tŸÆ_ba£
 = 
TZRAM_BASE
;

94 
bl1_tzøm_œyout
.
tŸÆ_size
 = 
TZRAM_SIZE
;

96 i‡(
bl1_øm_limô
 =
tzøm_limô
) {

98 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
TZRAM_BASE
;

99 
bl1_tzøm_œyout
.
‰ì_size
 = 
bl1_øm_ba£
 - 
TZRAM_BASE
;

102 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
bl1_øm_limô
;

103 
bl1_tzøm_œyout
.
‰ì_size
 =

104 
tzøm_limô
 - 
bl1_øm_limô
;

108 
	`fvp_c⁄fig_£tup
();

109 
	}
}

116 
	$bl1_∂©f‹m_£tup
()

119 
	`fvp_io_£tup
();

120 
	}
}

128 
	$bl1_∂©_¨ch_£tup
()

130 
	`fvp_cci_£tup
();

132 
	`fvp_c⁄figuª_mmu_ñ3
(
bl1_tzøm_œyout
.
tŸÆ_ba£
,

133 
bl1_tzøm_œyout
.
tŸÆ_size
,

134 
TZROM_BASE
,

135 
TZROM_BASE
 + 
TZROM_SIZE
,

136 
BL1_COHERENT_RAM_BASE
,

137 
BL1_COHERENT_RAM_LIMIT
);

138 
	}
}

147 
	$bl1_∂©_£t_bl2_ï_öfo
(
image_öfo_t
 *
bl2_image
,

148 
íåy_poöt_öfo_t
 *
bl2_ï
)

150 
	`SET_SECURITY_STATE
(
bl2_ï
->
h
.
©å
, 
SECURE
);

151 
bl2_ï
->
•§
 = 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

152 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/bl2_fvp_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<∂©f‹m.h
>

36 
	~<∂©f‹m_def.h
>

37 
	~<°rög.h
>

38 
	~"fvp_def.h
"

39 
	~"fvp_¥iv©e.h
"

45 
__RO_START__
;

46 
__RO_END__
;

48 
__COHERENT_RAM_START__
;

49 
__COHERENT_RAM_END__
;

57 
	#BL2_RO_BASE
 ()(&
__RO_START__
)

	)

58 
	#BL2_RO_LIMIT
 ()(&
__RO_END__
)

	)

67 
	#BL2_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

68 
	#BL2_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

71 **
bl2_ñ_ch™ge_mem_±r
;

74 
memöfo_t
 
bl2_tzøm_œyout


75 
__©åibuã__
 ((
Æig√d
(
PLATFORM_CACHE_LINE_SIZE
),

76 
£˘i⁄
("tzfw_coherent_mem")));

82 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

83 
íåy_poöt_öfo_t
 *
	gbl31_ï_öfo
;

85 
memöfo_t
 *
	$bl2_∂©_£c_mem_œyout
()

87  &
bl2_tzøm_œyout
;

88 
	}
}

99 
bl31_∑øms_t
 *
	$bl2_∂©_gë_bl31_∑øms
()

101 
bl2_to_bl31_∑øms_mem_t
 *
bl31_∑øms_mem
;

103 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


108 
	`as£π
(
BL32_BASE
 > 
PARAMS_BASE
 + (
bl2_to_bl31_∑øms_mem_t
));

115 
bl31_∑øms_mem
 = (
bl2_to_bl31_∑øms_mem_t
 *)
PARAMS_BASE
;

116 
	`mem£t
((*)
PARAMS_BASE
, 0, (
bl2_to_bl31_∑øms_mem_t
));

119 
bl2_to_bl31_∑øms
 = &
bl31_∑øms_mem
->
bl31_∑øms
;

120 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
, 
PARAM_BL31
, 
VERSION_1
, 0);

123 
bl31_ï_öfo
 = &
bl31_∑øms_mem
->bl31_ep_info;

124 
bl2_to_bl31_∑øms
->
bl31_image_öfo
 = &
bl31_∑øms_mem
->bl31_image_info;

125 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl31_image_öfo
, 
PARAM_IMAGE_BINARY
,

126 
VERSION_1
, 0);

129 i‡(
BL32_BASE
) {

130 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
 =

131 &
bl31_∑øms_mem
->
bl32_ï_öfo
;

132 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_ï_öfo
,

133 
PARAM_EP
, 
VERSION_1
, 0);

134 
bl2_to_bl31_∑øms
->
bl32_image_öfo
 =

135 &
bl31_∑øms_mem
->
bl32_image_öfo
;

136 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_image_öfo
,

137 
PARAM_IMAGE_BINARY
,

138 
VERSION_1
, 0);

142 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 = &
bl31_∑øms_mem
->bl33_ep_info;

143 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_ï_öfo
,

144 
PARAM_EP
, 
VERSION_1
, 0);

145 
bl2_to_bl31_∑øms
->
bl33_image_öfo
 = &
bl31_∑øms_mem
->bl33_image_info;

146 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_image_öfo
, 
PARAM_IMAGE_BINARY
,

147 
VERSION_1
, 0);

149  
bl2_to_bl31_∑øms
;

150 
	}
}

157 
íåy_poöt_öfo
 *
	$bl2_∂©_gë_bl31_ï_öfo
()

159 #i‡
DEBUG


160 
bl31_ï_öfo
->
¨gs
.
¨g1
 = 
FVP_BL31_PLAT_PARAM_VAL
;

162  
bl31_ï_öfo
;

163 
	}
}

171 
	$bl2_óæy_∂©f‹m_£tup
(
memöfo_t
 *
mem_œyout
)

174 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

177 
bl2_tzøm_œyout
.
tŸÆ_ba£
 = 
mem_œyout
->total_base;

178 
bl2_tzøm_œyout
.
tŸÆ_size
 = 
mem_œyout
->total_size;

179 
bl2_tzøm_œyout
.
‰ì_ba£
 = 
mem_œyout
->free_base;

180 
bl2_tzøm_œyout
.
‰ì_size
 = 
mem_œyout
->free_size;

181 
bl2_tzøm_œyout
.
©å
 = 
mem_œyout
->attr;

182 
bl2_tzøm_œyout
.
√xt
 = 0;

185 
	`fvp_c⁄fig_£tup
();

186 
	}
}

192 
	$bl2_∂©f‹m_£tup
()

200 
	`fvp_£curôy_£tup
();

203 
	`fvp_io_£tup
();

204 
	}
}

207 
	$bl2_∂©_Êush_bl31_∑øms
()

209 
	`Êush_dˇche_ønge
(()
PARAMS_BASE
, \

210 (
bl2_to_bl31_∑øms_mem_t
));

211 
	}
}

218 
	$bl2_∂©_¨ch_£tup
()

220 
	`fvp_c⁄figuª_mmu_ñ1
(
bl2_tzøm_œyout
.
tŸÆ_ba£
,

221 
bl2_tzøm_œyout
.
tŸÆ_size
,

222 
BL2_RO_BASE
,

223 
BL2_RO_LIMIT
,

224 
BL2_COHERENT_RAM_BASE
,

225 
BL2_COHERENT_RAM_LIMIT
);

226 
	}
}

234 
	$bl2_∂©_£t_bl31_ï_öfo
(
image_öfo_t
 *
bl31_image_öfo
,

235 
íåy_poöt_öfo_t
 *
bl31_ï_öfo
)

237 
	`SET_SECURITY_STATE
(
bl31_ï_öfo
->
h
.
©å
, 
SECURE
);

238 
bl31_ï_öfo
->
•§
 = 
	`SPSR_64
(
MODE_EL3
, 
MODE_SP_ELX
,

239 
DISABLE_ALL_EXCEPTIONS
);

240 
	}
}

249 
	$bl2_∂©_£t_bl32_ï_öfo
(
image_öfo_t
 *
bl32_image_öfo
,

250 
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

252 
	`fvp_£t_bl32_ï_öfo
(
bl32_ï_öfo
);

253 
	}
}

261 
	$bl2_∂©_£t_bl33_ï_öfo
(
image_öfo_t
 *
image
,

262 
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

264 
	`fvp_£t_bl33_ï_öfo
(
bl33_ï_öfo
);

265 
	}
}

271 
	$bl2_∂©_gë_bl32_memöfo
(
memöfo_t
 *
bl32_memöfo
)

276 
bl32_memöfo
->
tŸÆ_ba£
 = 
BL32_BASE
;

277 
bl32_memöfo
->
‰ì_ba£
 = 
BL32_BASE
;

278 
bl32_memöfo
->
tŸÆ_size
 =

279 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

280 
bl32_memöfo
->
‰ì_size
 =

281 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

282 
bl32_memöfo
->
©å
 = 
BOT_LOAD
;

283 
bl32_memöfo
->
√xt
 = 0;

284 
	}
}

290 
	$bl2_∂©_gë_bl33_memöfo
(
memöfo_t
 *
bl33_memöfo
)

292 
bl33_memöfo
->
tŸÆ_ba£
 = 
DRAM_BASE
;

293 
bl33_memöfo
->
tŸÆ_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

294 
bl33_memöfo
->
‰ì_ba£
 = 
DRAM_BASE
;

295 
bl33_memöfo
->
‰ì_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

296 
bl33_memöfo
->
©å
 = 0;

297 
bl33_memöfo
->
©å
 = 0;

298 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/bl31_fvp_setup.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<c⁄sﬁe.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°ddef.h
>

40 
	~"drivîs/pwrc/fvp_pwrc.h
"

41 
	~"fvp_def.h
"

42 
	~"fvp_¥iv©e.h
"

48 
__RO_START__
;

49 
__RO_END__
;

51 
__COHERENT_RAM_START__
;

52 
__COHERENT_RAM_END__
;

60 
	#BL31_RO_BASE
 ()(&
__RO_START__
)

	)

61 
	#BL31_RO_LIMIT
 ()(&
__RO_END__
)

	)

70 
	#BL31_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

71 
	#BL31_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

74 #i‡
RESET_TO_BL31


75 
íåy_poöt_öfo_t
 
	gbl32_íåypoöt_öfo
;

76 
íåy_poöt_öfo_t
 
	gbl33_íåypoöt_öfo
;

82 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

91 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_image_ï_öfo
(
uöt32_t
 
ty≥
)

93 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

95 #i‡
RESET_TO_BL31


97 i‡(
ty≥
 =
NON_SECURE
)

98 
	`fvp_gë_íåy_poöt_öfo
(
NON_SECURE
, &
bl33_íåypoöt_öfo
);

100 
	`fvp_gë_íåy_poöt_öfo
(
SECURE
, &
bl32_íåypoöt_öfo
);

102 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

103 &
bl33_íåypoöt_öfo
 :

104 &
bl32_íåypoöt_öfo
;

106 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

107 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

108 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

113 i‡(
√xt_image_öfo
->
pc
)

114  
√xt_image_öfo
;

116  
NULL
;

117 
	}
}

130 
	$bl31_óæy_∂©f‹m_£tup
(
bl31_∑øms_t
 *
‰om_bl2
,

131 *
∂©_∑øms_‰om_bl2
)

134 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

137 
	`fvp_c⁄fig_£tup
();

139 #i‡
RESET_TO_BL31


141 
	`as£π
(
‰om_bl2
 =
NULL
);

142 
	`as£π
(
∂©_∑øms_‰om_bl2
 =
NULL
);

151 
	`fvp_£curôy_£tup
();

157 
	`as£π
(
‰om_bl2
 !
NULL
);

158 
	`as£π
(
‰om_bl2
->
h
.
ty≥
 =
PARAM_BL31
);

159 
	`as£π
(
‰om_bl2
->
h
.
vîsi⁄
 >
VERSION_1
);

161 
bl2_to_bl31_∑øms
 = 
‰om_bl2
;

162 
	`as£π
((()
∂©_∑øms_‰om_bl2
Ë=
FVP_BL31_PLAT_PARAM_VAL
);

164 
	}
}

170 
	$bl31_∂©f‹m_£tup
()

172 
ªg_vÆ
;

175 
	`gic_£tup
();

182 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGDATA
, 0);

183 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGCTRL
,

187 
	`mmio_wrôe_32
(
SYS_CNTCTL_BASE
 + 
CNTCR_OFF
, 
	`CNTCR_FCREQ
(0Ë| 
CNTCR_EN
);

190 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

191 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

192 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

193 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

194 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

196 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) | (1 << CNTNSAR_NS_SHIFT(1));

197 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

200 
	`fvp_pwrc_£tup
();

203 
	`fvp_£tup_t›ﬁogy
();

204 
	}
}

210 
	$bl31_∂©_¨ch_£tup
()

212 #i‡
RESET_TO_BL31


213 
	`fvp_cci_£tup
();

216 
	`fvp_c⁄figuª_mmu_ñ3
(
BL31_RO_BASE
,

217 (
BL31_COHERENT_RAM_LIMIT
 - 
BL31_RO_BASE
),

218 
BL31_RO_BASE
,

219 
BL31_RO_LIMIT
,

220 
BL31_COHERENT_RAM_BASE
,

221 
BL31_COHERENT_RAM_LIMIT
);

222 
	}
}

224 #i‡
RESET_TO_BL31


229 
	$fvp_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

230 
íåy_poöt_öfo_t
 *
èrgë_íåy_öfo
)

232 i‡(
èrgë_£curôy
 =
NON_SECURE
) {

233 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

234 
PARAM_EP
,

235 
VERSION_1
,

241 
èrgë_íåy_öfo
->
pc
 = 
	`∂©_gë_ns_image_íåypoöt
();

243 
	`fvp_£t_bl33_ï_öfo
(
èrgë_íåy_öfo
);

246 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

247 
PARAM_EP
,

248 
VERSION_1
,

250 i‡(
BL32_BASE
 != 0) {

252 
èrgë_íåy_öfo
->
pc
 = 
BL32_BASE
;

253 
	`fvp_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

256 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/bl32_fvp_setup.c

31 
	~<bl_comm⁄.h
>

32 
	~<c⁄sﬁe.h
>

33 
	~<∂©f‹m.h
>

34 
	~"fvp_def.h
"

35 
	~"fvp_¥iv©e.h
"

41 
__RO_START__
;

42 
__RO_END__
;

44 
__COHERENT_RAM_START__
;

45 
__COHERENT_RAM_END__
;

53 
	#BL32_RO_BASE
 ()(&
__RO_START__
)

	)

54 
	#BL32_RO_LIMIT
 ()(&
__RO_END__
)

	)

63 
	#BL32_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

64 
	#BL32_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

69 
	$bl32_óæy_∂©f‹m_£tup
()

75 
	`c⁄sﬁe_öô
(
PL011_UART1_BASE
);

78 
	`fvp_c⁄fig_£tup
();

79 
	}
}

84 
	$bl32_∂©f‹m_£tup
()

87 
	}
}

93 
	$bl32_∂©_¨ch_£tup
()

95 
	`fvp_c⁄figuª_mmu_ñ1
(
BL32_RO_BASE
,

96 (
BL32_COHERENT_RAM_LIMIT
 - 
BL32_RO_BASE
),

97 
BL32_RO_BASE
,

98 
BL32_RO_LIMIT
,

99 
BL32_COHERENT_RAM_BASE
,

100 
BL32_COHERENT_RAM_LIMIT
);

101 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/drivers/pwrc/fvp_pwrc.c

31 
	~<bakîy_lock.h
>

32 
	~<mmio.h
>

33 
	~"../../fvp_def.h
"

34 
	~"fvp_pwrc.h
"

40 
bakîy_lock_t
 
pwrc_lock
 
__©åibuã__
 ((
£˘i⁄
("tzfw_coherent_mem")));

42 
	$fvp_pwrc_gë_˝u_wkr
(
mpidr
)

44 
rc
 = 0;

45 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

46 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PSYSR_OFF
, (Ë
mpidr
);

47 
rc
 = 
	`PSYSR_WK
(
	`mmio_ªad_32
(
PWRC_BASE
 + 
PSYSR_OFF
));

48 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

49  
rc
;

50 
	}
}

52 
	$fvp_pwrc_ªad_psy§
(
mpidr
)

54 
rc
 = 0;

55 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

56 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PSYSR_OFF
, (Ë
mpidr
);

57 
rc
 = 
	`mmio_ªad_32
(
PWRC_BASE
 + 
PSYSR_OFF
);

58 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

59  
rc
;

60 
	}
}

62 
	$fvp_pwrc_wrôe_µ⁄r
(
mpidr
)

64 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

65 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PPONR_OFF
, (Ë
mpidr
);

66 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

67 
	}
}

69 
	$fvp_pwrc_wrôe_µof‰
(
mpidr
)

71 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

72 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PPOFFR_OFF
, (Ë
mpidr
);

73 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

74 
	}
}

76 
	$fvp_pwrc_£t_wí
(
mpidr
)

78 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

79 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PWKUPR_OFF
,

80 (Ë(
PWKUPR_WEN
 | 
mpidr
));

81 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

82 
	}
}

84 
	$fvp_pwrc_˛r_wí
(
mpidr
)

86 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

87 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PWKUPR_OFF
,

88 (Ë
mpidr
);

89 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

90 
	}
}

92 
	$fvp_pwrc_wrôe_pcof‰
(
mpidr
)

94 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

95 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PCOFFR_OFF
, (Ë
mpidr
);

96 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

97 
	}
}

100 
	$fvp_pwrc_£tup
()

102 
	`bakîy_lock_öô
(&
pwrc_lock
);

104 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/drivers/pwrc/fvp_pwrc.h

31 #i‚de‡
__FVP_PWRC_H__


32 
	#__FVP_PWRC_H__


	)

35 
	#PPOFFR_OFF
 0x0

	)

36 
	#PPONR_OFF
 0x4

	)

37 
	#PCOFFR_OFF
 0x8

	)

38 
	#PWKUPR_OFF
 0xc

	)

39 
	#PSYSR_OFF
 0x10

	)

41 
	#PWKUPR_WEN
 (1uŒ << 31)

	)

43 
	#PSYSR_AFF_L2
 (1 << 31)

	)

44 
	#PSYSR_AFF_L1
 (1 << 30)

	)

45 
	#PSYSR_AFF_L0
 (1 << 29)

	)

46 
	#PSYSR_WEN
 (1 << 28)

	)

47 
	#PSYSR_PC
 (1 << 27)

	)

48 
	#PSYSR_PP
 (1 << 26)

	)

50 
	#PSYSR_WK_SHIFT
 24

	)

51 
	#PSYSR_WK_MASK
 0x3

	)

52 
	#PSYSR_WK
(
x
Ë(x >> 
PSYSR_WK_SHIFT
Ë& 
PSYSR_WK_MASK


	)

54 
	#WKUP_COLD
 0x0

	)

55 
	#WKUP_RESET
 0x1

	)

56 
	#WKUP_PPONR
 0x2

	)

57 
	#WKUP_GICREQ
 0x3

	)

59 
	#PSYSR_INVALID
 0xffffffff

	)

61 #i‚de‡
__ASSEMBLY__


66 
fvp_pwrc_£tup
();

67 
fvp_pwrc_wrôe_pcof‰
();

68 
fvp_pwrc_wrôe_µof‰
();

69 
fvp_pwrc_wrôe_µ⁄r
();

70 
fvp_pwrc_£t_wí
();

71 
fvp_pwrc_˛r_wí
();

72 
fvp_pwrc_ªad_psy§
();

73 
fvp_pwrc_gë_˝u_wkr
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_def.h

31 #i‚de‡
__FVP_DEF_H__


32 
	#__FVP_DEF_H__


	)

34 
	~<∂©f‹m_def.h
>

38 
	#FIP_IMAGE_NAME
 "fù.bö"

	)

41 
	#CONFIG_GICD_ADDR
 0

	)

42 
	#CONFIG_GICC_ADDR
 1

	)

43 
	#CONFIG_GICH_ADDR
 2

	)

44 
	#CONFIG_GICV_ADDR
 3

	)

45 
	#CONFIG_MAX_AFF0
 4

	)

46 
	#CONFIG_MAX_AFF1
 5

	)

48 
	#CONFIG_CPU_SETUP
 6

	)

49 
	#CONFIG_BASE_MMAP
 7

	)

51 
	#CONFIG_HAS_CCI
 8

	)

52 
	#CONFIG_HAS_TZC
 9

	)

53 
	#CONFIG_LIMIT
 10

	)

59 
	#FLASH0_BASE
 0x08000000

	)

60 
	#FLASH0_SIZE
 
TZROM_SIZE


	)

62 
	#FLASH1_BASE
 0x0c000000

	)

63 
	#FLASH1_SIZE
 0x04000000

	)

65 
	#PSRAM_BASE
 0x14000000

	)

66 
	#PSRAM_SIZE
 0x04000000

	)

68 
	#VRAM_BASE
 0x18000000

	)

69 
	#VRAM_SIZE
 0x02000000

	)

72 
	#DEVICE0_BASE
 0x1a000000

	)

73 
	#DEVICE0_SIZE
 0x12200000

	)

75 
	#DEVICE1_BASE
 0x2f000000

	)

76 
	#DEVICE1_SIZE
 0x200000

	)

78 
	#NSRAM_BASE
 0x2e000000

	)

79 
	#NSRAM_SIZE
 0x10000

	)

81 
	#MBOX_OFF
 0x1000

	)

84 
	#PARAMS_BASE
 
TZDRAM_BASE


	)

86 
	#DRAM1_BASE
 0x80000000uŒ

	)

87 
	#DRAM1_SIZE
 0x80000000uŒ

	)

88 
	#DRAM1_END
 (
DRAM1_BASE
 + 
DRAM1_SIZE
 - 1)

	)

89 
	#DRAM1_SEC_SIZE
 0x01000000uŒ

	)

91 
	#DRAM_BASE
 
DRAM1_BASE


	)

92 
	#DRAM_SIZE
 
DRAM1_SIZE


	)

94 
	#DRAM2_BASE
 0x880000000uŒ

	)

95 
	#DRAM2_SIZE
 0x780000000uŒ

	)

96 
	#DRAM2_END
 (
DRAM2_BASE
 + 
DRAM2_SIZE
 - 1)

	)

98 
	#PCIE_EXP_BASE
 0x40000000

	)

99 
	#TZRNG_BASE
 0x7„60000

	)

100 
	#TZNVCTR_BASE
 0x7„70000

	)

101 
	#TZROOTKEY_BASE
 0x7„80000

	)

104 
	#SYS_CNTCTL_BASE
 0x2a430000

	)

105 
	#SYS_CNTREAD_BASE
 0x2a800000

	)

106 
	#SYS_TIMCTL_BASE
 0x2a810000

	)

109 
	#VE_SYSREGS_BASE
 0x1c010000

	)

110 
	#V2M_SYS_ID
 0x0

	)

111 
	#V2M_SYS_LED
 0x8

	)

112 
	#V2M_SYS_CFGDATA
 0xa0

	)

113 
	#V2M_SYS_CFGCTRL
 0xa4

	)

116 
	#NS_IMAGE_OFFSET
 (
DRAM1_BASE
 + 0x8000000Ë

	)

119 
	#FVP_BL31_PLAT_PARAM_VAL
 0x0f1e2d3c4b5a6978ULL

	)

131 
	#SYS_LED_SS_SHIFT
 0x0

	)

132 
	#SYS_LED_EL_SHIFT
 0x1

	)

133 
	#SYS_LED_EC_SHIFT
 0x3

	)

135 
	#SYS_LED_SS_MASK
 0x1

	)

136 
	#SYS_LED_EL_MASK
 0x3

	)

137 
	#SYS_LED_EC_MASK
 0x1f

	)

140 
	#SYS_ID_REV_SHIFT
 27

	)

141 
	#SYS_ID_HBI_SHIFT
 16

	)

142 
	#SYS_ID_BLD_SHIFT
 12

	)

143 
	#SYS_ID_ARCH_SHIFT
 8

	)

144 
	#SYS_ID_FPGA_SHIFT
 0

	)

146 
	#SYS_ID_REV_MASK
 0xf

	)

147 
	#SYS_ID_HBI_MASK
 0xfff

	)

148 
	#SYS_ID_BLD_MASK
 0xf

	)

149 
	#SYS_ID_ARCH_MASK
 0xf

	)

150 
	#SYS_ID_FPGA_MASK
 0xff

	)

152 
	#SYS_ID_BLD_LENGTH
 4

	)

154 
	#REV_FVP
 0x0

	)

155 
	#HBI_FVP_BASE
 0x020

	)

156 
	#HBI_FOUNDATION
 0x010

	)

158 
	#BLD_GIC_VE_MMAP
 0x0

	)

159 
	#BLD_GIC_A53A57_MMAP
 0x1

	)

161 
	#ARCH_MODEL
 0x1

	)

164 
	#PWRC_BASE
 0x1c100000

	)

170 
	#CCI400_BASE
 0x2c090000

	)

171 
	#CCI400_SL_IFACE_CLUSTER0
 3

	)

172 
	#CCI400_SL_IFACE_CLUSTER1
 4

	)

173 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

174 
CCI400_SL_IFACE_CLUSTER1
 : \

175 
CCI400_SL_IFACE_CLUSTER0
)

	)

181 
	#VE_GICD_BASE
 0x2c001000

	)

182 
	#VE_GICC_BASE
 0x2c002000

	)

183 
	#VE_GICH_BASE
 0x2c004000

	)

184 
	#VE_GICV_BASE
 0x2c006000

	)

187 
	#BASE_GICD_BASE
 0x2f000000

	)

188 
	#BASE_GICR_BASE
 0x2f100000

	)

189 
	#BASE_GICC_BASE
 0x2c000000

	)

190 
	#BASE_GICH_BASE
 0x2c010000

	)

191 
	#BASE_GICV_BASE
 0x2c02f000

	)

193 
	#IRQ_TZ_WDOG
 56

	)

194 
	#IRQ_SEC_PHY_TIMER
 29

	)

195 
	#IRQ_SEC_SGI_0
 8

	)

196 
	#IRQ_SEC_SGI_1
 9

	)

197 
	#IRQ_SEC_SGI_2
 10

	)

198 
	#IRQ_SEC_SGI_3
 11

	)

199 
	#IRQ_SEC_SGI_4
 12

	)

200 
	#IRQ_SEC_SGI_5
 13

	)

201 
	#IRQ_SEC_SGI_6
 14

	)

202 
	#IRQ_SEC_SGI_7
 15

	)

203 
	#IRQ_SEC_SGI_8
 16

	)

208 
	#PL011_UART0_BASE
 0x1c090000

	)

209 
	#PL011_UART1_BASE
 0x1c0a0000

	)

210 
	#PL011_UART2_BASE
 0x1c0b0000

	)

211 
	#PL011_UART3_BASE
 0x1c0c0000

	)

216 
	#TZC400_BASE
 0x2a4a0000

	)

223 
	#FVP_AID_WIDTH
 4

	)

226 
	#FVP_NSAID_DEFAULT
 0

	)

227 
	#FVP_NSAID_PCI
 1

	)

228 
	#FVP_NSAID_VIRTIO
 8

	)

229 
	#FVP_NSAID_AP
 9

	)

230 
	#FVP_NSAID_VIRTIO_OLD
 15

	)

233 
	#FVP_NSAID_HDLCD0
 2

	)

234 
	#FVP_NSAID_CLCD
 7

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_gic.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<debug.h
>

35 
	~<gic_v2.h
>

36 
	~<gic_v3.h
>

37 
	~<öãºu±_mgmt.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°döt.h
>

40 
	~"fvp_def.h
"

41 
	~"fvp_¥iv©e.h
"

49 
	$gicv3_˝uif_£tup
()

51 
s¸_vÆ
, 
vÆ
;

52 
uöçå_t
 
ba£
;

62 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

63 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

67 
	`∑nic
();

70 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

72 
vÆ
 &~
WAKER_PS
;

73 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

74 
	`dsb
();

77 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

78 
vÆ
 & 
WAKER_CA
) {

79 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

86 
s¸_vÆ
 = 
	`ªad_s¸
();

87 
	`wrôe_s¸
(
s¸_vÆ
 | 
SCR_NS_BIT
);

88 
	`isb
();

99 
vÆ
 = 
	`ªad_icc_§e_ñ3
();

100 
	`wrôe_icc_§e_ñ3
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

102 
vÆ
 = 
	`ªad_icc_§e_ñ2
();

103 
	`wrôe_icc_§e_ñ2
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

105 
	`wrôe_icc_pmr_ñ1
(
GIC_PRI_MASK
);

106 
	`isb
();

109 
	`wrôe_s¸
(
s¸_vÆ
);

110 
	`isb
();

111 
	}
}

117 
	$gicv3_˝uif_dó˘iv©e
()

119 
vÆ
;

120 
uöçå_t
 
ba£
;

129 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

130 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

134 
	`∑nic
();

137 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

138 
vÆ
 |
WAKER_PS
;

139 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

140 
	`dsb
();

143 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

144 (
vÆ
 & 
WAKER_CA
) == 0) {

145 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

147 
	}
}

154 
	$gic_˝uif_£tup
(
gicc_ba£
)

156 
vÆ
;

158 
vÆ
 = 
	`gicc_ªad_iidr
(
gicc_ba£
);

165 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

166 
	`gicv3_˝uif_£tup
();

169 
vÆ
 = 
ENABLE_GRP0
 | 
FIQ_EN
 | 
FIQ_BYP_DIS_GRP0
;

170 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
FIQ_BYP_DIS_GRP1
 | 
IRQ_BYP_DIS_GRP1
;

172 
	`gicc_wrôe_pmr
(
gicc_ba£
, 
GIC_PRI_MASK
);

173 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

174 
	}
}

180 
	$gic_˝uif_dó˘iv©e
(
gicc_ba£
)

182 
vÆ
;

185 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

186 
vÆ
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

187 
vÆ
 |
FIQ_BYP_DIS_GRP1
 | 
FIQ_BYP_DIS_GRP0
;

188 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
IRQ_BYP_DIS_GRP1
;

189 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

191 
vÆ
 = 
	`gicc_ªad_iidr
(
gicc_ba£
);

197 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

198 
	`gicv3_˝uif_dó˘iv©e
();

200 
	}
}

206 
	$gic_p˝u_di°if_£tup
(
gicd_ba£
)

208 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 0, ~0);

210 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

211 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

212 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

213 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

214 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

215 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

216 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

217 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

218 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

220 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
, 
GIC_HIGHEST_SEC_PRIORITY
);

221 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
, 
GIC_HIGHEST_SEC_PRIORITY
);

222 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
, 
GIC_HIGHEST_SEC_PRIORITY
);

223 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
, 
GIC_HIGHEST_SEC_PRIORITY
);

224 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
, 
GIC_HIGHEST_SEC_PRIORITY
);

225 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
, 
GIC_HIGHEST_SEC_PRIORITY
);

226 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
, 
GIC_HIGHEST_SEC_PRIORITY
);

227 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
, 
GIC_HIGHEST_SEC_PRIORITY
);

228 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
, 
GIC_HIGHEST_SEC_PRIORITY
);

230 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

231 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

232 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

233 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

234 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

235 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

236 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

237 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

238 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

239 
	}
}

246 
	$gic_di°if_£tup
(
gicd_ba£
)

248 
˘r
, 
num_öts
, 
˘Ã
;

251 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
gicd_ba£
);

252 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

253 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
);

260 
num_öts
 = 
	`gicd_ªad_ty≥r
(
gicd_ba£
Ë& 
IT_LINES_NO_MASK
;

261 
num_öts
++;

262 
˘r
 = 0; cå < 
num_öts
; ctr++)

263 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 
˘r
 << 
IGROUPR_SHIFT
, ~0);

266 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

267 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_TZ_WDOG
, 
GIC_HIGHEST_SEC_PRIORITY
);

268 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
IRQ_TZ_WDOG
,

269 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

270 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

271 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

273 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
 | 
ENABLE_GRP0
);

274 
	}
}

276 
	$gic_£tup
()

278 
gicd_ba£
, 
gicc_ba£
;

280 
gicd_ba£
 = 
	`fvp_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

281 
gicc_ba£
 = 
	`fvp_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

283 
	`gic_˝uif_£tup
(
gicc_ba£
);

284 
	`gic_di°if_£tup
(
gicd_ba£
);

285 
	}
}

299 
uöt32_t
 
	$∂©_öãºu±_ty≥_to_löe
(
uöt32_t
 
ty≥
, uöt32_à
£curôy_°©e
)

301 
uöt32_t
 
gicc_ba£
 = 
	`fvp_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

303 
	`as£π
(
ty≥
 =
INTR_TYPE_S_EL1
 ||

304 
ty≥
 =
INTR_TYPE_EL3
 ||

305 
ty≥
 =
INTR_TYPE_NS
);

307 
	`as£π
(
£curôy_°©e
 =
NON_SECURE
 || securôy_°©ê=
SECURE
);

314 #i‡
FVP_GIC_ARCH
 == 2

315  
	`gicv2_öãºu±_ty≥_to_löe
(
gicc_ba£
, 
ty≥
);

319 
	}
}

321 #i‡
FVP_GIC_ARCH
 == 2

327 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_ty≥
()

329 
uöt32_t
 
id
, 
gicc_ba£
;

331 
gicc_ba£
 = 
	`fvp_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

332 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
);

335 i‡(
id
 < 1022)

336  
INTR_TYPE_S_EL1
;

338 i‡(
id
 =
GIC_SPURIOUS_INTERRUPT
)

339  
INTR_TYPE_INVAL
;

341  
INTR_TYPE_NS
;

342 
	}
}

349 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_id
()

351 
uöt32_t
 
id
, 
gicc_ba£
;

353 
gicc_ba£
 = 
	`fvp_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

354 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
);

356 i‡(
id
 < 1022)

357  
id
;

359 i‡(
id
 == 1023)

360  
INTR_ID_UNAVAILABLE
;

366  
	`gicc_ªad_ahµú
(
gicc_ba£
);

367 
	}
}

373 
uöt32_t
 
	$∂©_ic_acknowÀdge_öãºu±
()

375  
	`gicc_ªad_IAR
(
	`fvp_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

376 
	}
}

382 
	$∂©_ic_íd_of_öãºu±
(
uöt32_t
 
id
)

384 
	`gicc_wrôe_EOIR
(
	`fvp_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
id
);

386 
	}
}

393 
uöt32_t
 
	$∂©_ic_gë_öãºu±_ty≥
(
uöt32_t
 
id
)

395 
uöt32_t
 
group
;

397 
group
 = 
	`gicd_gë_igrou¥
(
	`fvp_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
id
);

400 i‡(
group
 =
GRP0
)

401  
INTR_TYPE_S_EL1
;

403  
INTR_TYPE_NS
;

404 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_io_storage.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<io_drivî.h
>

34 
	~<io_fù.h
>

35 
	~<io_memm≠.h
>

36 
	~<io_°‹age.h
>

37 
	~<io_£miho°ög.h
>

38 
	~<£miho°ög.h
>

39 
	~<°rög.h
>

40 
	~"fvp_def.h
"

43 
io_∂©_d©a_t
 
	gio_d©a
;

44 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gsh_dev_c⁄
;

45 
uöçå_t
 
	gsh_dev_•ec
;

46 
uöçå_t
 
	gsh_öô_∑øms
;

47 
uöçå_t
 
	gsh_dev_h™dÀ
;

48 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gfù_dev_c⁄
;

49 
uöçå_t
 
	gfù_dev_•ec
;

50 
uöçå_t
 
	gfù_dev_h™dÀ
;

51 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gmemm≠_dev_c⁄
;

52 
uöçå_t
 
	gmemm≠_dev_•ec
;

53 
uöçå_t
 
	gmemm≠_öô_∑øms
;

54 
uöçå_t
 
	gmemm≠_dev_h™dÀ
;

56 c⁄° 
io_block_•ec_t
 
	gfù_block_•ec
 = {

57 .
off£t
 = 
FLASH0_BASE
,

58 .
	gÀngth
 = 
FLASH0_SIZE


61 c⁄° 
io_fûe_•ec_t
 
	gbl2_fûe_•ec
 = {

62 .
∑th
 = 
BL2_IMAGE_NAME
,

63 .
	gmode
 = 
FOPEN_MODE_RB


66 c⁄° 
io_fûe_•ec_t
 
	gbl31_fûe_•ec
 = {

67 .
∑th
 = 
BL31_IMAGE_NAME
,

68 .
	gmode
 = 
FOPEN_MODE_RB


71 c⁄° 
io_fûe_•ec_t
 
	gbl32_fûe_•ec
 = {

72 .
∑th
 = 
BL32_IMAGE_NAME
,

73 .
	gmode
 = 
FOPEN_MODE_RB


76 c⁄° 
io_fûe_•ec_t
 
	gbl33_fûe_•ec
 = {

77 .
∑th
 = 
BL33_IMAGE_NAME
,

78 .
	gmode
 = 
FOPEN_MODE_RB


81 
›í_fù
(c⁄° 
uöçå_t
 
•ec
);

82 
›í_memm≠
(c⁄° 
uöçå_t
 
•ec
);

84 
	s∂©_io_pﬁicy
 {

85 *
	mimage_«me
;

86 
uöçå_t
 *
	mdev_h™dÀ
;

87 
uöçå_t
 
	mimage_•ec
;

88 (*
	mcheck
)(c⁄° 
uöçå_t
 
	m•ec
);

91 c⁄° 
∂©_io_pﬁicy
 
	gpﬁicõs
[] = {

93 
FIP_IMAGE_NAME
,

94 &
memm≠_dev_h™dÀ
,

95 (
uöçå_t
)&
fù_block_•ec
,

96 
›í_memm≠


98 
BL2_IMAGE_NAME
,

99 &
fù_dev_h™dÀ
,

100 (
uöçå_t
)&
bl2_fûe_•ec
,

101 
›í_fù


103 
BL31_IMAGE_NAME
,

104 &
fù_dev_h™dÀ
,

105 (
uöçå_t
)&
bl31_fûe_•ec
,

106 
›í_fù


108 
BL32_IMAGE_NAME
,

109 &
fù_dev_h™dÀ
,

110 (
uöçå_t
)&
bl32_fûe_•ec
,

111 
›í_fù


113 
BL33_IMAGE_NAME
,

114 &
fù_dev_h™dÀ
,

115 (
uöçå_t
)&
bl33_fûe_•ec
,

116 
›í_fù


123 
	$›í_fù
(c⁄° 
uöçå_t
 
•ec
)

125 
ªsu…
 = 
IO_FAIL
;

128 
ªsu…
 = 
	`io_dev_öô
(
fù_dev_h™dÀ
, (
uöçå_t
)
FIP_IMAGE_NAME
);

129 i‡(
ªsu…
 =
IO_SUCCESS
) {

130 
	`INFO
("Using FIP\n");

133  
ªsu…
;

134 
	}
}

137 
	$›í_memm≠
(c⁄° 
uöçå_t
 
•ec
)

139 
ªsu…
 = 
IO_FAIL
;

140 
uöçå_t
 
loˇl_image_h™dÀ
;

142 
ªsu…
 = 
	`io_dev_öô
(
memm≠_dev_h™dÀ
, 
memm≠_öô_∑øms
);

143 i‡(
ªsu…
 =
IO_SUCCESS
) {

144 
ªsu…
 = 
	`io_›í
(
memm≠_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

145 i‡(
ªsu…
 =
IO_SUCCESS
) {

147 
	`io_˛o£
(
loˇl_image_h™dÀ
);

150  
ªsu…
;

151 
	}
}

154 
	$›í_£miho°ög
(c⁄° 
uöçå_t
 
•ec
)

156 
ªsu…
 = 
IO_FAIL
;

157 
uöçå_t
 
loˇl_image_h™dÀ
;

160 
ªsu…
 = 
	`io_dev_öô
(
sh_dev_h™dÀ
, 
sh_öô_∑øms
);

161 i‡(
ªsu…
 =
IO_SUCCESS
) {

162 
ªsu…
 = 
	`io_›í
(
sh_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

163 i‡(
ªsu…
 =
IO_SUCCESS
) {

164 
	`INFO
("Using Semi-hosting IO\n");

165 
	`io_˛o£
(
loˇl_image_h™dÀ
);

168  
ªsu…
;

169 
	}
}

171 
	$fvp_io_£tup
 ()

173 
io_ªsu…
 = 
IO_FAIL
;

176 
	`io_öô
(&
io_d©a
);

179 
io_ªsu…
 = 
	`ªgi°î_io_dev_sh
(&
sh_dev_c⁄
);

180 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

182 
io_ªsu…
 = 
	`ªgi°î_io_dev_fù
(&
fù_dev_c⁄
);

183 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

185 
io_ªsu…
 = 
	`ªgi°î_io_dev_memm≠
(&
memm≠_dev_c⁄
);

186 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

189 
io_ªsu…
 = 
	`io_dev_›í
(
sh_dev_c⁄
, 
sh_dev_•ec
, &
sh_dev_h™dÀ
);

190 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

192 
io_ªsu…
 = 
	`io_dev_›í
(
fù_dev_c⁄
, 
fù_dev_•ec
, &
fù_dev_h™dÀ
);

193 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

195 
io_ªsu…
 = 
	`io_dev_›í
(
memm≠_dev_c⁄
, 
memm≠_dev_•ec
,

196 &
memm≠_dev_h™dÀ
);

197 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

200 ()
io_ªsu…
;

201 
	}
}

206 
	$∂©_gë_image_sour˚
(c⁄° *
image_«me
, 
uöçå_t
 *
dev_h™dÀ
,

207 
uöçå_t
 *
image_•ec
)

209 
ªsu…
 = 
IO_FAIL
;

210 c⁄° 
∂©_io_pﬁicy
 *
pﬁicy
;

212 i‡((
image_«me
 !
NULL
Ë&& (
dev_h™dÀ
 != NULL) &&

213 (
image_•ec
 !
NULL
)) {

214 
pﬁicy
 = 
pﬁicõs
;

215 
pﬁicy
->
image_«me
 !
NULL
) {

216 i‡(
	`°rcmp
(
pﬁicy
->
image_«me
, image_name) == 0) {

217 
ªsu…
 = 
pﬁicy
->
	`check
’ﬁicy->
image_•ec
);

218 i‡(
ªsu…
 =
IO_SUCCESS
) {

219 *
image_•ec
 = 
pﬁicy
->image_spec;

220 *
dev_h™dÀ
 = *(
pﬁicy
->dev_handle);

223 
ªsu…
 = 
	`›í_£miho°ög
(

224 
pﬁicy
->
image_•ec
);

225 i‡(
ªsu…
 =
IO_SUCCESS
) {

226 *
dev_h™dÀ
 = 
sh_dev_h™dÀ
;

227 *
image_•ec
 =

228 
pﬁicy
->
image_•ec
;

232 
pﬁicy
++;

235 
ªsu…
 = 
IO_FAIL
;

237  
ªsu…
;

238 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_pm.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bakîy_lock.h
>

34 
	~<cci400.h
>

35 
	~<mmio.h
>

36 
	~<∂©f‹m.h
>

37 
	~<∂©f‹m_def.h
>

38 
	~<psci.h
>

39 
	~"drivîs/pwrc/fvp_pwrc.h
"

40 
	~"fvp_def.h
"

41 
	~"fvp_¥iv©e.h
"

46 
	$fvp_affö°_°™dby
(
powî_°©e
)

48 
èrgë_afÊvl
;

51 
èrgë_afÊvl
 = 
	`psci_gë_p°©e_afÊvl
(
powî_°©e
);

57 i‡(
èrgë_afÊvl
 !
MPIDR_AFFLVL0
)

58  
PSCI_E_INVALID_PARAMS
;

64 
	`dsb
();

65 
	`wfi
();

67  
PSCI_E_SUCCESS
;

68 
	}
}

74 
	$fvp_affö°_⁄
(
mpidr
,

75 
£c_íåypoöt
,

76 
ns_íåypoöt
,

77 
afÊvl
,

78 
°©e
)

80 
rc
 = 
PSCI_E_SUCCESS
;

81 
löór_id
;

82 
maûbox_t
 *
fvp_mboxes
;

83 
psy§
;

89 i‡(
afÊvl
 !
MPIDR_AFFLVL0
)

90 
exô
;

100 
psy§
 = 
	`fvp_pwrc_ªad_psy§
(
mpidr
);

101 } 
psy§
 & 
PSYSR_AFF_L0
);

103 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

104 
fvp_mboxes
 = (
maûbox_t
 *Ë(
TZDRAM_BASE
 + 
MBOX_OFF
);

105 
fvp_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

106 
	`Êush_dˇche_ønge
((Ë&
fvp_mboxes
[
löór_id
],

109 
	`fvp_pwrc_wrôe_µ⁄r
(
mpidr
);

111 
exô
:

112  
rc
;

113 
	}
}

127 
	$fvp_affö°_off
(
mpidr
,

128 
afÊvl
,

129 
°©e
)

131 
rc
 = 
PSCI_E_SUCCESS
;

132 
gicc_ba£
, 
e˘Ã
;

133 
˝u_£tup
, 
cci_£tup
;

135 
afÊvl
) {

136 
MPIDR_AFFLVL1
:

137 i‡(
°©e
 =
PSCI_STATE_OFF
) {

142 
cci_£tup
 = 
	`fvp_gë_cfgv¨
(
CONFIG_HAS_CCI
);

143 i‡(
cci_£tup
) {

144 
	`cci_dißbÀ_cohîícy
(
mpidr
);

151 
	`fvp_pwrc_wrôe_pcof‰
(
mpidr
);

156 
MPIDR_AFFLVL0
:

157 i‡(
°©e
 =
PSCI_STATE_OFF
) {

163 
˝u_£tup
 = 
	`fvp_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

164 i‡(
˝u_£tup
) {

165 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

166 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

167 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

174 
gicc_ba£
 = 
	`fvp_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

175 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

181 
	`fvp_pwrc_wrôe_µof‰
(
mpidr
);

186 
	`as£π
(0);

189  
rc
;

190 
	}
}

204 
	$fvp_affö°_su•íd
(
mpidr
,

205 
£c_íåypoöt
,

206 
ns_íåypoöt
,

207 
afÊvl
,

208 
°©e
)

210 
rc
 = 
PSCI_E_SUCCESS
;

211 
gicc_ba£
, 
e˘Ã
;

212 
˝u_£tup
, 
cci_£tup
, 
löór_id
;

213 
maûbox_t
 *
fvp_mboxes
;

215 
afÊvl
) {

216 
MPIDR_AFFLVL1
:

217 i‡(
°©e
 =
PSCI_STATE_OFF
) {

222 
cci_£tup
 = 
	`fvp_gë_cfgv¨
(
CONFIG_HAS_CCI
);

223 i‡(
cci_£tup
) {

224 
	`cci_dißbÀ_cohîícy
(
mpidr
);

231 
	`fvp_pwrc_wrôe_pcof‰
(
mpidr
);

236 
MPIDR_AFFLVL0
:

237 i‡(
°©e
 =
PSCI_STATE_OFF
) {

242 
˝u_£tup
 = 
	`fvp_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

243 i‡(
˝u_£tup
) {

244 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

245 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

246 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

250 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

251 
fvp_mboxes
 = (
maûbox_t
 *Ë(
TZDRAM_BASE
 + 
MBOX_OFF
);

252 
fvp_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

253 
	`Êush_dˇche_ønge
((Ë&
fvp_mboxes
[
löór_id
],

260 
gicc_ba£
 = 
	`fvp_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

261 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

267 
	`fvp_pwrc_£t_wí
(
mpidr
);

268 
	`fvp_pwrc_wrôe_µof‰
(
mpidr
);

273 
	`as£π
(0);

276  
rc
;

277 
	}
}

286 
	$fvp_affö°_⁄_föish
(
mpidr
,

287 
afÊvl
,

288 
°©e
)

290 
rc
 = 
PSCI_E_SUCCESS
;

291 
löór_id
, 
˝u_£tup
;

292 
maûbox_t
 *
fvp_mboxes
;

293 
gicd_ba£
, 
gicc_ba£
, 
ªg_vÆ
, 
e˘Ã
;

295 
afÊvl
) {

297 
MPIDR_AFFLVL1
:

299 i‡(
°©e
 =
PSCI_STATE_OFF
) {

312 
	`fvp_pwrc_wrôe_µ⁄r
(
mpidr
);

314 
	`fvp_cci_£tup
();

318 
MPIDR_AFFLVL0
:

328 
˝u_£tup
 = 
	`fvp_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

329 i‡(
˝u_£tup
) {

330 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

331 
e˘Ã
 |
CPUECTLR_SMP_BIT
;

332 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

339 
	`fvp_pwrc_˛r_wí
(
mpidr
);

342 
fvp_mboxes
 = (
maûbox_t
 *Ë(
TZDRAM_BASE
 + 
MBOX_OFF
);

343 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

344 
fvp_mboxes
[
löór_id
].
vÆue
 = 0;

345 
	`Êush_dˇche_ønge
((Ë&
fvp_mboxes
[
löór_id
],

348 
gicd_ba£
 = 
	`fvp_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

349 
gicc_ba£
 = 
	`fvp_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

352 
	`gic_˝uif_£tup
(
gicc_ba£
);

355 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

358 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

359 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

360 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

361 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

362 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

364 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) |

365 (1 << 
	`CNTNSAR_NS_SHIFT
(1));

366 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

371 
	`as£π
(0);

374  
rc
;

375 
	}
}

384 
	$fvp_affö°_su•íd_föish
(
mpidr
,

385 
afÊvl
,

386 
°©e
)

388  
	`fvp_affö°_⁄_föish
(
mpidr
, 
afÊvl
, 
°©e
);

389 
	}
}

395 c⁄° 
∂©_pm_›s_t
 
	gfvp_∂©_pm_›s
 = {

396 
fvp_affö°_°™dby
,

397 
fvp_affö°_⁄
,

398 
fvp_affö°_off
,

399 
fvp_affö°_su•íd
,

400 
fvp_affö°_⁄_föish
,

401 
fvp_affö°_su•íd_föish
,

407 
	$∂©f‹m_£tup_pm
(c⁄° 
∂©_pm_›s_t
 **
∂©_›s
)

409 *
∂©_›s
 = &
fvp_∂©_pm_›s
;

411 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_private.h

31 #i‚de‡
__FVP_PRIVATE_H__


32 
	#__FVP_PRIVATE_H__


	)

34 
	~<bl_comm⁄.h
>

35 
	~<∂©f‹m_def.h
>

38 vﬁ©ûê
	smaûbox
 {

39 
vÆue


40 
__©åibuã__
((
__Æig√d__
(
CACHE_WRITEBACK_GRANULE
)));

41 } 
	tmaûbox_t
;

48 
	sbl2_to_bl31_∑øms_mem
 {

49 
bl31_∑øms_t
 
	mbl31_∑øms
;

50 
image_öfo_t
 
	mbl31_image_öfo
;

51 
image_öfo_t
 
	mbl32_image_öfo
;

52 
image_öfo_t
 
	mbl33_image_öfo
;

53 
íåy_poöt_öfo_t
 
	mbl33_ï_öfo
;

54 
íåy_poöt_öfo_t
 
	mbl32_ï_öfo
;

55 
íåy_poöt_öfo_t
 
	mbl31_ï_öfo
;

56 } 
	tbl2_to_bl31_∑øms_mem_t
;

61 
	gmemöfo
;

66 
fvp_c⁄figuª_mmu_ñ1
(
tŸÆ_ba£
,

67 
tŸÆ_size
,

72 
fvp_c⁄figuª_mmu_ñ3
(
tŸÆ_ba£
,

73 
tŸÆ_size
,

78 
fvp_gë_cfgv¨
();

79 
fvp_c⁄fig_£tup
();

81 #i‡
RESET_TO_BL31


82 
fvp_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

83 
íåy_poöt_öfo
 *
èrgë_íåy_öfo
);

85 
fvp_cci_£tup
();

88 
gic_˝uif_dó˘iv©e
();

89 
gic_˝uif_£tup
();

90 
gic_p˝u_di°if_£tup
();

91 
gic_£tup
();

94 
fvp_£tup_t›ﬁogy
();

97 
fvp_io_£tup
();

100 
fvp_£curôy_£tup
();

103 
fvp_£t_bl32_ï_öfo
(
íåy_poöt_öfo
 *
bl32_ï
);

106 
fvp_£t_bl33_ï_öfo
(
íåy_poöt_öfo
 *
bl33_ï
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_security.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<tzc400.h
>

34 
	~"fvp_def.h
"

35 
	~"fvp_¥iv©e.h
"

38 
	#FILTER_SHIFT
(
fûãr
Ë(1 << fûãr)

	)

46 
	$fvp_£curôy_£tup
()

48 
tzc_ö°™˚_t
 
c⁄åﬁÀr
;

59 i‡(!
	`fvp_gë_cfgv¨
(
CONFIG_HAS_TZC
))

66 
	`INFO
("Configuring TrustZone Controller\n");

73 
c⁄åﬁÀr
.
ba£
 = 
TZC400_BASE
;

74 
c⁄åﬁÀr
.
aid_width
 = 
FVP_AID_WIDTH
;

75 
	`tzc_öô
(&
c⁄åﬁÀr
);

89 
	`tzc_dißbÀ_fûãrs
(&
c⁄åﬁÀr
);

103 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 1,

104 
DRAM1_BASE
, 
DRAM1_END
 - 
DRAM1_SEC_SIZE
,

105 
TZC_REGION_S_NONE
,

106 
	`TZC_REGION_ACCESS_RDWR
(
FVP_NSAID_DEFAULT
) |

107 
	`TZC_REGION_ACCESS_RDWR
(
FVP_NSAID_PCI
) |

108 
	`TZC_REGION_ACCESS_RDWR
(
FVP_NSAID_AP
) |

109 
	`TZC_REGION_ACCESS_RDWR
(
FVP_NSAID_VIRTIO
) |

110 
	`TZC_REGION_ACCESS_RDWR
(
FVP_NSAID_VIRTIO_OLD
));

113 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 3,

114 (
DRAM1_END
 - 
DRAM1_SEC_SIZE
) + 1 , DRAM1_END,

115 
TZC_REGION_S_RDWR
,

119 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 2,

120 
DRAM2_BASE
, 
DRAM2_END
, 
TZC_REGION_S_NONE
,

121 
	`TZC_REGION_ACCESS_RDWR
(
FVP_NSAID_DEFAULT
) |

122 
	`TZC_REGION_ACCESS_RDWR
(
FVP_NSAID_PCI
) |

123 
	`TZC_REGION_ACCESS_RDWR
(
FVP_NSAID_AP
) |

124 
	`TZC_REGION_ACCESS_RDWR
(
FVP_NSAID_VIRTIO
) |

125 
	`TZC_REGION_ACCESS_RDWR
(
FVP_NSAID_VIRTIO_OLD
));

132 
	`tzc_£t_a˘i⁄
(&
c⁄åﬁÀr
, 
TZC_ACTION_ERR
);

135 
	`tzc_íabÀ_fûãrs
(&
c⁄åﬁÀr
);

136 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_topology.c

31 
	~<as£π.h
>

32 
	~<∂©f‹m_def.h
>

34 
	~<psci.h
>

35 
	~"drivîs/pwrc/fvp_pwrc.h
"

38 
	#AFFINST_INVAL
 0xff

	)

48 
	safföôy_öfo
 {

49 
	msiblög
;

50 
	mchûd
;

51 
	m°©e
;

52 
	md©a
;

53 } 
	tafföôy_öfo_t
;

60 
afföôy_öfo_t
 
	gfvp_aff1_t›ﬁogy_m≠
[
PLATFORM_CLUSTER_COUNT
];

61 
afföôy_öfo_t
 
	gfvp_aff0_t›ﬁogy_m≠
[
PLATFORM_CORE_COUNT
];

64 
	gt›ﬁogy_£tup_d⁄e
;

77 
	$∂©_gë_aff_cou¡
(
aff_lvl
,

78 
mpidr
)

80 
aff_cou¡
 = 1, 
˘r
;

81 
∑ª¡_aff_id
;

83 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

85 
aff_lvl
) {

92 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF3_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

93 
	`as£π
(
∑ª¡_aff_id
 == 0);

102 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF2_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

103 
	`as£π
(
∑ª¡_aff_id
 == 0);

106 
˘r
 = 0;

107 
fvp_aff1_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

108 
˘r
 = 
fvp_aff1_t›ﬁogy_m≠
[˘r].
siblög
) {

109 
aff_cou¡
++;

115 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

116 
	`as£π
(
∑ª¡_aff_id
 < 
PLATFORM_CLUSTER_COUNT
);

119 
˘r
 = 
fvp_aff1_t›ﬁogy_m≠
[
∑ª¡_aff_id
].
chûd
;

120 
fvp_aff0_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

121 
˘r
 = 
fvp_aff0_t›ﬁogy_m≠
[˘r].
siblög
) {

122 
aff_cou¡
++;

127 
	`as£π
(0);

130  
aff_cou¡
;

131 
	}
}

147 
	$∂©_gë_aff_°©e
(
aff_lvl
,

148 
mpidr
)

150 
aff_°©e
 = 
PSCI_AFF_ABSENT
, 
idx
;

151 
idx
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

153 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

155 
aff_lvl
) {

161 
aff_°©e
 = 
fvp_aff1_t›ﬁogy_m≠
[
idx
].
°©e
;

168 
idx
 = 
fvp_aff1_t›ﬁogy_m≠
[idx].
chûd
;

169 
idx
 +(
mpidr
 >> 
MPIDR_AFF0_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

170 
aff_°©e
 = 
fvp_aff0_t›ﬁogy_m≠
[
idx
].
°©e
;

173 
	`as£π
(0);

176  
aff_°©e
;

177 
	}
}

183 
	$∂©_gë_max_afÊvl
()

185  
MPIDR_AFFLVL1
;

186 
	}
}

193 
	$fvp_£tup_t›ﬁogy
()

195 
aff0
, 
aff1
, 
aff_°©e
, 
aff0_off£t
 = 0;

196 
mpidr
;

198 
t›ﬁogy_£tup_d⁄e
 = 0;

200 
aff1
 = 0;áff1 < 
PLATFORM_CLUSTER_COUNT
;áff1++) {

202 
fvp_aff1_t›ﬁogy_m≠
[
aff1
].
chûd
 = 
aff0_off£t
;

203 
fvp_aff1_t›ﬁogy_m≠
[
aff1
].
siblög
 =áff1 + 1;

205 
aff0
 = 0;áff0 < 
PLATFORM_MAX_CPUS_PER_CLUSTER
;áff0++) {

207 
mpidr
 = 
aff1
 << 
MPIDR_AFF1_SHIFT
;

208 
mpidr
 |
aff0
 << 
MPIDR_AFF0_SHIFT
;

210 i‡(
	`fvp_pwrc_ªad_psy§
(
mpidr
Ë!
PSYSR_INVALID
) {

215 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

216 
fvp_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 =

217 
PSCI_AFF_PRESENT
;

219 
aff_°©e
 = 
PSCI_AFF_ABSENT
;

222 
fvp_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
chûd
 = 
AFFINST_INVAL
;

223 
fvp_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
°©e
 = 
aff_°©e
;

224 
fvp_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
siblög
 =

225 
aff0_off£t
 + 1;

228 
aff0_off£t
++;

232 
fvp_aff0_t›ﬁogy_m≠
[
aff0_off£t
 - 1].
siblög
 = 
AFFINST_INVAL
;

236 
fvp_aff1_t›ﬁogy_m≠
[
aff1
 - 1].
siblög
 = 
AFFINST_INVAL
;

238 
t›ﬁogy_£tup_d⁄e
 = 1;

240 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/include/plat_macros.S

31 
	~<gic_v2.h
>

32 
	~"../fvp_def.h
"

34 .
	g£˘i⁄
 .
	grod©a
.
	ggic_ªg_«me
, "aS"

35 
	ggic_ªgs
: .
asciz
 "gic_iar", "gic_ctlr", ""

38 
	#GIC_REG_SIZE
 (2 * 8)

	)

45 .
ma¸o
 
∂©_¥öt_gic_ªgs


46 
mov
 
	gx0
, #CONFIG_GICC_ADDR

47 
bl
 
fvp_gë_cfgv¨


49 
ldr
 
	gw1
, [
x0
, #GICC_IAR]

50 
ldr
 
	gw2
, [
x0
, #GICD_CTLR]

51 
sub
 
	g•
, sp, #GIC_REG_SIZE

52 
°p
 
	gx1
, 
	gx2
, [
•
]

53 
adr
 
	gx0
, 
gic_ªgs


54 
mov
 
	gx1
, 
•


55 
bl
 
¥öt_°rög_vÆue


56 
add
 
	g•
, sp, #GIC_REG_SIZE

57 .
	gídm


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/include/platform_def.h

31 #i‚de‡
__PLATFORM_DEF_H__


32 
	#__PLATFORM_DEF_H__


	)

34 
	~<¨ch.h
>

40 
	#PLATFORM_LINKER_FORMAT
 "ñf64-lôéó¨ch64"

	)

41 
	#PLATFORM_LINKER_ARCH
 
Ørch64


	)

48 
	#PLATFORM_STACK_SIZE
 0x800

	)

51 #i‡
DEBUG


52 
	#PCPU_DV_MEM_STACK_SIZE
 0x400

	)

54 
	#PCPU_DV_MEM_STACK_SIZE
 0x300

	)

57 
	#FIRMWARE_WELCOME_STR
 "BoŸögÅru°ed fúmw¨êboŸÜﬂdî sègê1\n\r"

	)

60 
	#BL2_IMAGE_NAME
 "bl2.bö"

	)

63 
	#BL31_IMAGE_NAME
 "bl31.bö"

	)

66 
	#BL32_IMAGE_NAME
 "bl32.bö"

	)

69 
	#BL33_IMAGE_NAME
 "bl33.bö"

	)

71 
	#PLATFORM_CACHE_LINE_SIZE
 64

	)

72 
	#PLATFORM_CLUSTER_COUNT
 2uŒ

	)

73 
	#PLATFORM_CLUSTER0_CORE_COUNT
 4

	)

74 
	#PLATFORM_CLUSTER1_CORE_COUNT
 4

	)

75 
	#PLATFORM_CORE_COUNT
 (
PLATFORM_CLUSTER1_CORE_COUNT
 + \

76 
PLATFORM_CLUSTER0_CORE_COUNT
)

	)

77 
	#PLATFORM_MAX_CPUS_PER_CLUSTER
 4

	)

78 
	#PRIMARY_CPU
 0x0

	)

79 
	#MAX_IO_DEVICES
 3

	)

80 
	#MAX_IO_HANDLES
 4

	)

85 
	#TZROM_BASE
 0x00000000

	)

86 
	#TZROM_SIZE
 0x04000000

	)

88 
	#TZRAM_BASE
 0x04000000

	)

89 
	#TZRAM_SIZE
 0x40000

	)

92 
	#TZDRAM_BASE
 0x06000000

	)

93 
	#TZDRAM_SIZE
 0x02000000

	)

100 
	#BL1_RO_BASE
 
TZROM_BASE


	)

101 
	#BL1_RO_LIMIT
 (
TZROM_BASE
 + 
TZROM_SIZE
)

	)

102 
	#BL1_RW_BASE
 
TZRAM_BASE


	)

103 
	#BL1_RW_LIMIT
 
BL31_BASE


	)

108 
	#BL2_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0xc000)

	)

109 
	#BL2_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

114 
	#BL31_BASE
 (
TZRAM_BASE
 + 0x6000)

	)

115 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


116 
	#BL31_LIMIT
 
BL32_BASE


	)

117 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


118 
	#BL31_LIMIT
 
BL2_BASE


	)

127 
	#TSP_IN_TZRAM
 0

	)

128 
	#TSP_IN_TZDRAM
 1

	)

130 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


131 
	#TSP_SEC_MEM_BASE
 
TZRAM_BASE


	)

132 
	#TSP_SEC_MEM_SIZE
 
TZRAM_SIZE


	)

133 
	#BL32_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0x1c000)

	)

134 
	#BL32_LIMIT
 
BL2_BASE


	)

135 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


136 
	#TSP_SEC_MEM_BASE
 
TZDRAM_BASE


	)

137 
	#TSP_SEC_MEM_SIZE
 
TZDRAM_SIZE


	)

138 
	#BL32_BASE
 (
TZDRAM_BASE
 + 0x2000)

	)

139 
	#BL32_LIMIT
 (
TZDRAM_BASE
 + (1 << 21))

	)

147 
	#ADDR_SPACE_SIZE
 (1uŒ << 32)

	)

148 
	#MAX_XLAT_TABLES
 3

	)

149 
	#MAX_MMAP_REGIONS
 16

	)

154 
	#IRQ_SEC_PHY_TIMER
 29

	)

159 
	#CCI400_BASE
 0x2c090000

	)

160 
	#CCI400_SL_IFACE_CLUSTER0
 3

	)

161 
	#CCI400_SL_IFACE_CLUSTER1
 4

	)

162 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

163 
CCI400_SL_IFACE_CLUSTER1
 : \

164 
CCI400_SL_IFACE_CLUSTER0
)

	)

176 
	#CACHE_WRITEBACK_SHIFT
 6

	)

177 
	#CACHE_WRITEBACK_GRANULE
 (1 << 
CACHE_WRITEBACK_SHIFT
)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/platform.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 #O¿
FVP
, 
the
 
TSP
 
ˇn
 
execuã
 
eôhî
 
‰om
 
Tru°ed
 
SRAM
 
‹
 Tru°ed 
DRAM
.

25 #Tru°ed 
SRAM
 
is
 
the
 .

26 
	gTSP_RAM_LOCATION
 :
t§am


28 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
t§am
)

29 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZRAM


30 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
tdøm
)

31 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZDRAM


33 
$
(
îr‹
 "Unsupported TSP_RAM_LOCATION value")

34 
ídif


36 #Pro˚s†
TSP_RAM_LOCATION_ID
 
Êag


37 
$
(
evÆ
 
	$$
(
ˇŒ
 
add_deföe
,
TSP_RAM_LOCATION_ID
))

39 
PLAT_INCLUDES
 :-
I∂©
/
fvp
/
ö˛ude
/

41 
PLAT_BL_COMMON_SOURCES
 :
drivîs
/
¨m
/
∂011
/∂011.
c
 \

42 
drivîs
/
¨m
/
∂011
/
∂011_c⁄sﬁe
.
c
 \

43 
drivîs
/
io
/
io_fù
.
c
 \

44 
drivîs
/
io
/
io_memm≠
.
c
 \

45 
drivîs
/
io
/
io_£miho°ög
.
c
 \

46 
lib
/
mmio
.
c
 \

47 
lib
/
Ørch64
/
sy§eg_hñ≥rs
.
S
 \

48 
lib
/
Ørch64
/
xœt_èbÀs
.
c
 \

49 
lib
/
£miho°ög
/£miho°ög.
c
 \

50 
lib
/
£miho°ög
/
Ørch64
/
£miho°ög_ˇŒ
.
S
 \

51 
∂©
/
comm⁄
/
Ørch64
/
∂©_comm⁄
.
c
 \

52 
∂©
/
fvp
/
fvp_io_°‹age
.
c


54 
BL1_SOURCES
 +
drivîs
/
¨m
/
cci400
/cci400.
c
 \

55 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

56 
∂©
/
fvp
/
bl1_fvp_£tup
.
c
 \

57 
∂©
/
fvp
/
Ørch64
/
fvp_comm⁄
.
c
 \

58 
∂©
/
fvp
/
Ørch64
/
fvp_hñ≥rs
.
S


60 
BL2_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

61 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

62 
∂©
/
fvp
/
bl2_fvp_£tup
.
c
 \

63 
∂©
/
fvp
/
fvp_£curôy
.
c
 \

64 
∂©
/
fvp
/
Ørch64
/
fvp_comm⁄
.
c


66 
BL31_SOURCES
 +
drivîs
/
¨m
/
gic
/
gic_v2
.
c
 \

67 
drivîs
/
¨m
/
gic
/
gic_v3
.
c
 \

68 
drivîs
/
¨m
/
gic
/
Ørch64
/
gic_v3_sy§egs
.
S
 \

69 
drivîs
/
¨m
/
cci400
/cci400.
c
 \

70 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_mp_°ack
.
S
 \

71 
∂©
/
fvp
/
bl31_fvp_£tup
.
c
 \

72 
∂©
/
fvp
/
fvp_gic
.
c
 \

73 
∂©
/
fvp
/
fvp_pm
.
c
 \

74 
∂©
/
fvp
/
fvp_t›ﬁogy
.
c
 \

75 
∂©
/
fvp
/
Ørch64
/
fvp_hñ≥rs
.
S
 \

76 
∂©
/
fvp
/
Ørch64
/
fvp_comm⁄
.
c
 \

77 
∂©
/
fvp
/
drivîs
/
pwrc
/
fvp_pwrc
.
c


79 
	`i„q
 (
$
{
RESET_TO_BL31
}, 1)

80 
	gBL31_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

81 
∂©
/
fvp
/
fvp_£curôy
.
c


82 
ídif


84 #Fœg 
u£d
 
by
 
the
 
FVP
 
p‹t
 
to
 
dëîmöe
Åhê
vîsi⁄
 
of
 
ARM
 
GIC
 
¨chôe˘uª


85 #tÿ
u£
 
öãºu±
 
m™agemít
 
ö
 
EL3
.

86 
FVP_GIC_ARCH
 := 2

87 
$
(
evÆ
 $(
ˇŒ
 
add_deföe
,
FVP_GIC_ARCH
))

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/aarch64/plat_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<bl_comm⁄.h
>

34 
	~<gic_v2.h
>

35 
	~"../drivîs/pwrc/∂©_pwrc.h
"

36 
	~"../∂©_def.h
"

38 .
globl
 
	g∂©f‹m_gë_íåypoöt


39 .
globl
 
	g∂©_£c⁄d¨y_cﬁd_boŸ_£tup


40 .
globl
 
	g∂©f‹m_mem_öô


41 .
globl
 
	g∂©_ªp‹t_ex˚±i⁄


43 .
ma¸o
 
mt_choo£_gicmm≠
 
	g∑øm1
, 
	g∑øm2
, 
	gx_tmp
, 
	gw_tmp
, 
ªs


44 
	gldr
 \
	gx_tmp
, =
VE_SYSREGS_BASE
 + 
V2M_SYS_ID


45 
ldr
 \
w_tmp
, [\
x_tmp
]

46 
	gubfx
 \
	gw_tmp
, \w_tmp, #SYS_ID_BLD_SHIFT, #SYS_ID_BLD_LENGTH

47 
	gcmp
 \
	gw_tmp
, #BLD_GIC_VE_MMAP

48 
	gc£l
 \
	gªs
, \
	g∑øm1
, \
	g∑øm2
, 
	geq


49 .
ídm


62 
func
 
∂©_£c⁄d¨y_cﬁd_boŸ_£tup


71 
mrs
 
	gx0
, 
mpidr_ñ1


72 
ldr
 
	gx1
, =
PWRC_BASE


73 
°r
 
w0
, [
x1
, #PPOFFR_OFF]

79 
ldr
 
	gx0
, =
VE_GICC_BASE


80 
ldr
 
x1
, =
BASE_GICC_BASE


81 
mt_choo£_gicmm≠
 
x0
, 
	gx1
, 
	gx2
, 
	gw2
, 
x1


82 
mov
 
	gw0
, #(
	gIRQ_BYP_DIS_GRP1
 | 
	gFIQ_BYP_DIS_GRP1
)

83 
‹r
 
	gw0
, w0, #(
	gIRQ_BYP_DIS_GRP0
 | 
	gFIQ_BYP_DIS_GRP0
)

84 
°r
 
	gw0
, [
x1
, #GICC_CTLR]

92 
dsb
 
sy


93 
wfi


94 
	gcb_∑nic
:

95 
b
 
cb_∑nic


118 
func
 
∂©f‹m_gë_íåypoöt


119 
mov
 
x9
, 
x30


125 
ldr
 
	gx1
, =
fú°_boŸ


126 
ldr
 
w2
, [
x1
]

127 
cmp
 
	gw2
, #0

128 
beq
 
w¨m_ª£t


129 
°r
 
	gwzr
, [
x1
]

130 
mov
 
	gx0
, #0

131 
b
 
exô


132 
	gw¨m_ª£t
:

140 
ldr
 
x10
, =
MBOX_OFF


141 
bl
 
∂©f‹m_gë_c‹e_pos


142 
l¶
 
x0
, 
	gx0
, #CACHE_WRITEBACK_SHIFT

143 
ldr
 
	gx0
, [
x10
, 
x0
]

144 
cbz
 
	gx0
, 
_∑nic


145 
	gexô
:

146 
ªt
 
x9


147 
_∑nic
: 
b
 _panic

161 
func
 
∂©f‹m_mem_öô


162 
ldr
 
x0
, =
MBOX_OFF


163 
mov
 
w1
, #PLATFORM_CORE_COUNT

164 
	glo›
:

165 
°r
 
xzr
, [
x0
], #CACHE_WRITEBACK_GRANULE

166 
subs
 
	gw1
, w1, #1

167 
	gb
.
gt
 
lo›


168 
ªt


178 
func
 
∂©_ªp‹t_ex˚±i⁄


179 
mrs
 
	gx1
, 
CuºítEl


180 
l§
 
	gx1
, x1, #MODE_EL_SHIFT

181 
l¶
 
	gx1
, x1, #SYS_LED_EL_SHIFT

182 
l¶
 
	gx0
, x0, #SYS_LED_EC_SHIFT

183 
mov
 
	gx2
, #(
	gSECURE
 << 
	gSYS_LED_SS_SHIFT
)

184 
‹r
 
	gx0
, x0, 
x2


185 
‹r
 
	gx0
, x0, 
x1


186 
mov
 
	gx1
, #VE_SYSREGS_BASE

187 
add
 
	gx1
, x1, #V2M_SYS_LED

188 
°r
 
	gw0
, [
x1
]

189 
	gªt


191 .
d©a


192 
	gfú°_boŸ
:

195 .
globl
 
ªad_l2a˘Ã


196 
func
 
ªad_l2a˘Ã


197 
dsb
 
sy


198 
MRS
 
x0
, 
S3_1_C15_C0_0


199 
dsb
 
sy


200 
isb


201 
	gªt


203 .
globl
 
wrôe_l2a˘Ã


204 
func
 
wrôe_l2a˘Ã


205 
dsb
 
sy


206 
MSR
 
	gS3_1_C15_C0_0
, 
x0


207 
isb


208 
dsb
 
sy


209 
	gªt


211 .
globl
 
ªad_l2e˘Ã


212 
func
 
ªad_l2e˘Ã


213 
MRS
 
	gx0
, 
S3_1_C11_C0_3


214 
dsb
 
sy


215 
isb


216 
	gªt


218 .
globl
 
wrôe_l2e˘Ã


219 
func
 
wrôe_l2e˘Ã


220 
dsb
 
sy


221 
MSR
 
	gS3_1_C11_C0_3
, 
x0


222 
isb


223 
dsb
 
sy


224 
	gªt


226 .
globl
 
ªad_˝ua˘Ã


227 
func
 
ªad_˝ua˘Ã


228 
dsb
 
sy


229 
MRS
 
	gx0
, 
S3_1_C15_C2_0


230 
dsb
 
sy


231 
isb


232 
	gªt


234 .
globl
 
wrôe_˝ua˘Ã


235 
func
 
wrôe_˝ua˘Ã


236 
dsb
 
sy


237 
MSR
 
	gS3_1_C15_C2_0
, 
x0


238 
isb


239 
dsb
 
sy


240 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/aarch64/plat_helpers.h

1 #i‚de‡
PLAT_HELPERS_H


2 
	#PLAT_HELPERS_H


	)

4 
ªad_l2a˘Ã
();

5 
ªad_l2e˘Ã
();

7 
wrôe_l2a˘Ã
();

8 
wrôe_l2e˘Ã
();

10 
ªad_˝ua˘Ã
();

11 
wrôe_˝ua˘Ã
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/aarch64/platform_common.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<cci400.h
>

36 
	~<debug.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<xœt_èbÀs.h
>

40 
	~"../∂©_def.h
"

51 
	gmt_c⁄fig
[
CONFIG_LIMIT
];

59 c⁄° 
mm≠_ªgi⁄_t
 
	gmt_mm≠
[] = {

61 {(
TZRAM_BASE
 & 
PAGE_ADDR_MASK
),

62 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
), 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
},

68 { 
MTK_DEVICE_BASE
, 
MTK_DEVICE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

71 {(
MT_DEV_BASE
 & 
PAGE_ADDR_MASK
),
MT_DEV_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

74 {
TRNG_BASE_ADDR
, 
TRNG_BASE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

75 {
TRNG_PDN_BASE_ADDR
, 
TRNG_PDN_BASE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

78 { 
MTK_WDT_BASE
, 
MTK_WDT_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

91 
	#DEFINE_CONFIGURE_MMU_EL
(
_ñ
) \

92 
mt_c⁄figuª_mmu_ñ
##
	`_ñ
(
tŸÆ_ba£
, \

93 
tŸÆ_size
, \

94 
ro_°¨t
, \

95 
ro_limô
, \

96 
coh_°¨t
, \

97 
coh_limô
) \

99 
	`mm≠_add_ªgi⁄
(
tŸÆ_ba£
, \

100 
tŸÆ_size
, \

101 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
); \

102 
	`mm≠_add_ªgi⁄
(
ro_°¨t
, 
ro_limô
 -Ño_start, \

103 
MT_MEMORY
 | 
MT_RO
 | 
MT_SECURE
); \

104 
	`mm≠_add_ªgi⁄
(
coh_°¨t
, 
coh_limô
 - coh_start, \

105 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
); \

106 
	`mm≠_add
(
mt_mm≠
); \

107 
	`öô_xœt_èbÀs
(); \

109 
íabÀ_mmu_ñ
##
	`_ñ
(); \

110 }

	)

113 
	$DEFINE_CONFIGURE_MMU_EL
(1)

114 
	$DEFINE_CONFIGURE_MMU_EL
(3)

117 
	$mt_gë_cfgv¨
(
v¨_id
)

119 
	`as£π
(
v¨_id
 < 
CONFIG_LIMIT
);

120  
mt_c⁄fig
[
v¨_id
];

121 
	}
}

130 
	$mt_c⁄fig_£tup
()

132 
ªv
, 
hbi
, 
bld
, 
¨ch
, 
sys_id
, 
midr_≤
;

134 
sys_id
 = 
	`mmio_ªad_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_ID
);

135 
ªv
 = (
sys_id
 >> 
SYS_ID_REV_SHIFT
Ë& 
SYS_ID_REV_MASK
;

136 
hbi
 = (
sys_id
 >> 
SYS_ID_HBI_SHIFT
Ë& 
SYS_ID_HBI_MASK
;

137 
bld
 = (
sys_id
 >> 
SYS_ID_BLD_SHIFT
Ë& 
SYS_ID_BLD_MASK
;

138 
¨ch
 = (
sys_id
 >> 
SYS_ID_ARCH_SHIFT
Ë& 
SYS_ID_ARCH_MASK
;

140 
¨ch
 = 
ARCH_MODEL
;

141 
bld
 = 
BLD_GIC_A53A57_MMAP
;

142 
hbi
 = 
HBI_MT_BASE
;

144 i‡((
ªv
 !
REV_MT
Ë|| (
¨ch
 !
ARCH_MODEL
))

145 
	`∑nic
();

151 
bld
) {

153 
BLD_GIC_VE_MMAP
:

154 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
VE_GICD_BASE
;

155 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
VE_GICC_BASE
;

156 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
VE_GICH_BASE
;

157 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
VE_GICV_BASE
;

160 
BLD_GIC_A53A57_MMAP
:

161 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
BASE_GICD_BASE
;

162 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
BASE_GICC_BASE
;

163 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
BASE_GICH_BASE
;

164 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
BASE_GICV_BASE
;

167 
	`as£π
(0);

174 
hbi
) {

175 
HBI_FOUNDATION
:

176 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

177 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 1;

178 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

179 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 0;

180 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 0;

181 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

183 
HBI_MT_BASE
:

184 
midr_≤
 = (
	`ªad_midr
(Ë>> 
MIDR_PN_SHIFT
Ë& 
MIDR_PN_MASK
;

185 i‡((
midr_≤
 =
MIDR_PN_A57
Ë|| (midr_≤ =
MIDR_PN_A53
))

186 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 1;

188 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

190 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

191 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 2;

192 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 1;

193 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 1;

194 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

197 
	`as£π
(0);

201 
	}
}

203 
	$∂©_gë_ns_image_íåypoöt
()

206  
BL33_START_ADDRESS
;

208 
	}
}

210 
uöt64_t
 
	$∂©_gë_sys˙t_‰eq
()

212 
uöt64_t
 
cou¡î_ba£_‰equícy
;

216 
cou¡î_ba£_‰equícy
 = 13000000;

219 
	`as£π
(
cou¡î_ba£_‰equícy
 != 0);

221  
cou¡î_ba£_‰equícy
;

222 
	}
}

224 
	$mt_cci_£tup
()

226 
cci_£tup
;

233 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

234 i‡(
cci_£tup
)

235 
	`cci_íabÀ_cohîícy
(
	`ªad_mpidr
());

236 
	}
}

242 
	$mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

244 
	`SET_SECURITY_STATE
(
bl32_ï_öfo
->
h
.
©å
, 
SECURE
);

249 
bl32_ï_öfo
->
•§
 = 0;

250 
	}
}

255 
	$mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

257 
ñ_°©us
;

258 
mode
;

259 
rw
, 
ì
;

260 
daif
;

264 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

265 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

267 i‡(
ñ_°©us
)

268 
mode
 = 
MODE_EL2
;

270 
mode
 = 
MODE_EL1
;

305 
rw
 = 0;

307 
rw
 = 1;

309 i‡(0 =
rw
) {

310 
	`¥ötf
("LK is AArch32\n");

311 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

312 
mode
 = 
MODE32_svc
;

313 
ì
 = 0;

318 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

320 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

327 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)
BOOT_ARGUMENT_LOCATION
;

328 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

330 
	`¥ötf
("LK is AArch64\n");

331 
bl33_ï_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

333 
	`SET_SECURITY_STATE
(
bl33_ï_öfo
->
h
.
©å
, 
NON_SECURE
);

334 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/bl1_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<mmio.h
>

36 
	~<∂©f‹m.h
>

37 
	~<∂©f‹m_def.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__COHERENT_RAM_START__
;

46 
__COHERENT_RAM_END__
;

48 
__BL1_RAM_START__
;

49 
__BL1_RAM_END__
;

58 
	#BL1_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

59 
	#BL1_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

61 
	#BL1_RAM_BASE
 ()(&
__BL1_RAM_START__
)

	)

62 
	#BL1_RAM_LIMIT
 ()(&
__BL1_RAM_END__
)

	)

66 
memöfo_t
 
	gbl1_tzøm_œyout
;

68 
memöfo_t
 *
	$bl1_∂©_£c_mem_œyout
()

70  &
bl1_tzøm_œyout
;

71 
	}
}

76 
	$bl1_óæy_∂©f‹m_£tup
()

78 c⁄° 
bl1_øm_ba£
 = 
BL1_RAM_BASE
;

79 c⁄° 
bl1_øm_limô
 = 
BL1_RAM_LIMIT
;

80 c⁄° 
tzøm_limô
 = 
TZRAM_BASE
 + 
TZRAM_SIZE
;

83 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

93 
bl1_tzøm_œyout
.
tŸÆ_ba£
 = 
TZRAM_BASE
;

94 
bl1_tzøm_œyout
.
tŸÆ_size
 = 
TZRAM_SIZE
;

96 i‡(
bl1_øm_limô
 =
tzøm_limô
) {

98 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
TZRAM_BASE
;

99 
bl1_tzøm_œyout
.
‰ì_size
 = 
bl1_øm_ba£
 - 
TZRAM_BASE
;

102 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
bl1_øm_limô
;

103 
bl1_tzøm_œyout
.
‰ì_size
 =

104 
tzøm_limô
 - 
bl1_øm_limô
;

108 
	`mt_c⁄fig_£tup
();

109 
	}
}

116 
	$bl1_∂©f‹m_£tup
()

119 
	`mt_io_£tup
();

120 
	}
}

128 
	$bl1_∂©_¨ch_£tup
()

130 
	`mt_cci_£tup
();

132 
	`mt_c⁄figuª_mmu_ñ3
(
bl1_tzøm_œyout
.
tŸÆ_ba£
,

133 
bl1_tzøm_œyout
.
tŸÆ_size
,

134 
TZROM_BASE
,

135 
TZROM_BASE
 + 
TZROM_SIZE
,

136 
BL1_COHERENT_RAM_BASE
,

137 
BL1_COHERENT_RAM_LIMIT
);

138 
	}
}

147 
	$bl1_∂©_£t_bl2_ï_öfo
(
image_öfo_t
 *
bl2_image
,

148 
íåy_poöt_öfo_t
 *
bl2_ï
)

150 
	`SET_SECURITY_STATE
(
bl2_ï
->
h
.
©å
, 
SECURE
);

151 
bl2_ï
->
•§
 = 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

152 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/bl2_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<∂©f‹m.h
>

36 
	~<∂©f‹m_def.h
>

37 
	~<°rög.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__RO_START__
;

46 
__RO_END__
;

48 
__COHERENT_RAM_START__
;

49 
__COHERENT_RAM_END__
;

57 
	#BL2_RO_BASE
 ()(&
__RO_START__
)

	)

58 
	#BL2_RO_LIMIT
 ()(&
__RO_END__
)

	)

67 
	#BL2_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

68 
	#BL2_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

71 **
bl2_ñ_ch™ge_mem_±r
;

74 
memöfo_t
 
bl2_tzøm_œyout


75 
__©åibuã__
 ((
Æig√d
(
PLATFORM_CACHE_LINE_SIZE
),

76 
£˘i⁄
("tzfw_coherent_mem")));

82 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

83 
íåy_poöt_öfo_t
 *
	gbl31_ï_öfo
;

85 
memöfo_t
 *
	$bl2_∂©_£c_mem_œyout
()

87  &
bl2_tzøm_œyout
;

88 
	}
}

99 
bl31_∑øms_t
 *
	$bl2_∂©_gë_bl31_∑øms
()

101 
bl2_to_bl31_∑øms_mem_t
 *
bl31_∑øms_mem
;

103 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


108 
	`as£π
(
BL32_BASE
 > 
PARAMS_BASE
 + (
bl2_to_bl31_∑øms_mem_t
));

115 
bl31_∑øms_mem
 = (
bl2_to_bl31_∑øms_mem_t
 *)
PARAMS_BASE
;

116 
	`mem£t
((*)
PARAMS_BASE
, 0, (
bl2_to_bl31_∑øms_mem_t
));

119 
bl2_to_bl31_∑øms
 = &
bl31_∑øms_mem
->
bl31_∑øms
;

120 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
, 
PARAM_BL31
, 
VERSION_1
, 0);

123 
bl31_ï_öfo
 = &
bl31_∑øms_mem
->bl31_ep_info;

124 
bl2_to_bl31_∑øms
->
bl31_image_öfo
 = &
bl31_∑øms_mem
->bl31_image_info;

125 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl31_image_öfo
, 
PARAM_IMAGE_BINARY
,

126 
VERSION_1
, 0);

129 i‡(
BL32_BASE
) {

130 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
 =

131 &
bl31_∑øms_mem
->
bl32_ï_öfo
;

132 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_ï_öfo
,

133 
PARAM_EP
, 
VERSION_1
, 0);

134 
bl2_to_bl31_∑øms
->
bl32_image_öfo
 =

135 &
bl31_∑øms_mem
->
bl32_image_öfo
;

136 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_image_öfo
,

137 
PARAM_IMAGE_BINARY
,

138 
VERSION_1
, 0);

142 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 = &
bl31_∑øms_mem
->bl33_ep_info;

143 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_ï_öfo
,

144 
PARAM_EP
, 
VERSION_1
, 0);

145 
bl2_to_bl31_∑øms
->
bl33_image_öfo
 = &
bl31_∑øms_mem
->bl33_image_info;

146 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_image_öfo
, 
PARAM_IMAGE_BINARY
,

147 
VERSION_1
, 0);

149  
bl2_to_bl31_∑øms
;

150 
	}
}

157 
íåy_poöt_öfo
 *
	$bl2_∂©_gë_bl31_ï_öfo
()

159 #i‡
DEBUG


160 
bl31_ï_öfo
->
¨gs
.
¨g1
 = 
MT_BL31_PLAT_PARAM_VAL
;

162  
bl31_ï_öfo
;

163 
	}
}

171 
	$bl2_óæy_∂©f‹m_£tup
(
memöfo_t
 *
mem_œyout
)

174 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

177 
bl2_tzøm_œyout
.
tŸÆ_ba£
 = 
mem_œyout
->total_base;

178 
bl2_tzøm_œyout
.
tŸÆ_size
 = 
mem_œyout
->total_size;

179 
bl2_tzøm_œyout
.
‰ì_ba£
 = 
mem_œyout
->free_base;

180 
bl2_tzøm_œyout
.
‰ì_size
 = 
mem_œyout
->free_size;

181 
bl2_tzøm_œyout
.
©å
 = 
mem_œyout
->attr;

182 
bl2_tzøm_œyout
.
√xt
 = 0;

185 
	`mt_c⁄fig_£tup
();

186 
	}
}

192 
	$bl2_∂©f‹m_£tup
()

200 
	`mt_£curôy_£tup
();

203 
	`mt_io_£tup
();

204 
	}
}

207 
	$bl2_∂©_Êush_bl31_∑øms
()

209 
	`Êush_dˇche_ønge
(()
PARAMS_BASE
, \

210 (
bl2_to_bl31_∑øms_mem_t
));

211 
	}
}

218 
	$bl2_∂©_¨ch_£tup
()

220 
	`mt_c⁄figuª_mmu_ñ1
(
bl2_tzøm_œyout
.
tŸÆ_ba£
,

221 
bl2_tzøm_œyout
.
tŸÆ_size
,

222 
BL2_RO_BASE
,

223 
BL2_RO_LIMIT
,

224 
BL2_COHERENT_RAM_BASE
,

225 
BL2_COHERENT_RAM_LIMIT
);

226 
	}
}

234 
	$bl2_∂©_£t_bl31_ï_öfo
(
image_öfo_t
 *
bl31_image_öfo
,

235 
íåy_poöt_öfo_t
 *
bl31_ï_öfo
)

237 
	`SET_SECURITY_STATE
(
bl31_ï_öfo
->
h
.
©å
, 
SECURE
);

238 
bl31_ï_öfo
->
•§
 = 
	`SPSR_64
(
MODE_EL3
, 
MODE_SP_ELX
,

239 
DISABLE_ALL_EXCEPTIONS
);

240 
	}
}

249 
	$bl2_∂©_£t_bl32_ï_öfo
(
image_öfo_t
 *
bl32_image_öfo
,

250 
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

252 
	`mt_£t_bl32_ï_öfo
(
bl32_ï_öfo
);

253 
	}
}

261 
	$bl2_∂©_£t_bl33_ï_öfo
(
image_öfo_t
 *
image
,

262 
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

264 
	`mt_£t_bl33_ï_öfo
(
bl33_ï_öfo
);

265 
	}
}

271 
	$bl2_∂©_gë_bl32_memöfo
(
memöfo_t
 *
bl32_memöfo
)

276 
bl32_memöfo
->
tŸÆ_ba£
 = 
BL32_BASE
;

277 
bl32_memöfo
->
‰ì_ba£
 = 
BL32_BASE
;

278 
bl32_memöfo
->
tŸÆ_size
 =

279 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

280 
bl32_memöfo
->
‰ì_size
 =

281 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

282 
bl32_memöfo
->
©å
 = 
BOT_LOAD
;

283 
bl32_memöfo
->
√xt
 = 0;

284 
	}
}

290 
	$bl2_∂©_gë_bl33_memöfo
(
memöfo_t
 *
bl33_memöfo
)

292 
bl33_memöfo
->
tŸÆ_ba£
 = 
DRAM_BASE
;

293 
bl33_memöfo
->
tŸÆ_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

294 
bl33_memöfo
->
‰ì_ba£
 = 
DRAM_BASE
;

295 
bl33_memöfo
->
‰ì_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

296 
bl33_memöfo
->
©å
 = 0;

297 
bl33_memöfo
->
©å
 = 0;

298 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/bl31_plat_setup.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<c⁄sﬁe.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°ddef.h
>

40 
	~"drivîs/pwrc/∂©_pwrc.h
"

41 
	~"∂©_def.h
"

42 
	~"∂©_¥iv©e.h
"

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<xœt_èbÀs.h
>

46 
	~"l2c.h
"

47 
	~"mt_˝uxg±.h
"

52 
bl31_⁄_íåypoöt
();

54 
__RO_START__
;

55 
__RO_END__
;

57 
__COHERENT_RAM_START__
;

58 
__COHERENT_RAM_END__
;

66 
	#BL31_RO_BASE
 ()(&
__RO_START__
)

	)

67 
	#BL31_RO_LIMIT
 ()(&
__RO_END__
)

	)

76 
	#BL31_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

77 
	#BL31_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

80 #i‡
RESET_TO_BL31


81 
íåy_poöt_öfo_t
 
	gbl32_íåypoöt_öfo
;

82 
íåy_poöt_öfo_t
 
	gbl33_íåypoöt_öfo
;

88 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

97 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_image_ï_öfo
(
uöt32_t
 
ty≥
)

99 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

101 #i‡
RESET_TO_BL31


103 i‡(
ty≥
 =
NON_SECURE
)

104 
	`mt_gë_íåy_poöt_öfo
(
NON_SECURE
, &
bl33_íåypoöt_öfo
);

106 
	`mt_gë_íåy_poöt_öfo
(
SECURE
, &
bl32_íåypoöt_öfo
);

108 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

109 &
bl33_íåypoöt_öfo
 :

110 &
bl32_íåypoöt_öfo
;

112 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

113 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

114 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

119 i‡(
√xt_image_öfo
->
pc
)

120  
√xt_image_öfo
;

122  
NULL
;

123 
	}
}

126 
uöt64_t
 
gë_kî√l_öfo_pc
();

127 
uöt64_t
 
gë_kî√l_öfo_r0
();

128 
uöt64_t
 
gë_kî√l_öfo_r1
();

130 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_kî√l_ï_öfo
(
uöt32_t
 
ty≥
)

132 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

133 
ñ_°©us
;

134 
mode
;

136 #i‡
RESET_TO_BL31


137 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

138 &
bl33_íåypoöt_öfo
 :

139 &
bl32_íåypoöt_öfo
;

141 
	`mt_gë_íåy_poöt_öfo
(
ty≥
, 
√xt_image_öfo
);

144 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

145 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

146 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

151 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

152 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

154 i‡(
ñ_°©us
)

155 
mode
 = 
MODE_EL2
;

157 
mode
 = 
MODE_EL1
;

160 i‡(0 =
rw
) {

161 
	`¥ötf
("LK is AArch32\n");

162 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

163 
mode
 = 
MODE32_svc
;

164 
ì
 = 0;

169 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

171 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

178 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)&
∂_boŸ_¨gumít
;

179 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

183 
	`¥ötf
("Kernel is 64Bit\n");

184 
√xt_image_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

185 
√xt_image_öfo
->
pc
 = 
	`gë_kî√l_öfo_pc
();

186 
√xt_image_öfo
->
¨gs
.
¨g0
=
	`gë_kî√l_öfo_r0
();

187 
√xt_image_öfo
->
¨gs
.
¨g1
=
	`gë_kî√l_öfo_r1
();

189 
	`¥ötf
("pc=0x%llx,Ñ0=0x%llx,Ñ1=0x%llx\n",

190 
√xt_image_öfo
->
pc
,

191 
√xt_image_öfo
->
¨gs
.
¨g0
,

192 
√xt_image_öfo
->
¨gs
.
¨g1
);

195 
	`SET_SECURITY_STATE
(
√xt_image_öfo
->
h
.
©å
, 
NON_SECURE
);

199 i‡(
√xt_image_öfo
->
pc
)

200  
√xt_image_öfo
;

202  
NULL
;

203 
	}
}

217 
	$bl31_óæy_∂©f‹m_£tup
(
bl31_∑øms_t
 *
‰om_bl2
,

218 *
∂©_∑øms_‰om_bl2
)

220 
n‹mÆ_ba£
;

221 
©f_ba£
;

223 
	`c⁄fig_L2_size
();

225 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

228 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(0), ()
bl31_⁄_íåypoöt
);

230 
n‹mÆ_ba£
 = 0;

234 
©f_ba£
 = 
	`ªad_˙ç˘_ñ0
();

235 
	`©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

238 
	`c⁄sﬁe_öô
(
ãórg
->
©f_log_p‹t
);

239 
	`¥ötf
("LK bootárgument\n\r");

240 
	`¥ötf
("loˇti⁄=0x%x size=0x%x\n\r", 
BOOT_ARGUMENT_LOCATION
, 
BOOT_ARGUMENT_SIZE
);

241 
	`¥ötf
("©f_magic=0x%x\n\r", 
ãórg
->
©f_magic
);

242 
	`¥ötf
("ãe_suµ‹t=0x%x\n\r", 
ãórg
->
ãe_suµ‹t
);

243 
	`¥ötf
("ãe_íåy=0x%x\n\r", 
ãórg
->
ãe_íåy
);

244 
	`¥ötf
("ãe_boŸ_¨g_addr=0x%x\n\r", 
ãórg
->
ãe_boŸ_¨g_addr
);

245 
	`¥ötf
("©f_log_p‹t=0x%x\n\r", 
ãórg
->
©f_log_p‹t
);

246 
	`¥ötf
("©f_log_baudøã=0x%x\n\r", 
ãórg
->
©f_log_baudøã
);

247 
	`¥ötf
("©f_log_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
);

248 
	`¥ötf
("©f_log_buf_size=0x%x\n\r", 
ãórg
->
©f_log_buf_size
);

249 
	`¥ötf
("©f_´e_debug_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_°¨t
);

250 
	`¥ötf
("©f_´e_debug_buf_size=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_size
);

251 
	`¥ötf
("©f_úq_num=%d\n\r", 
ãórg
->
©f_úq_num
);

252 
	`¥ötf
("BL33_START_ADDRESS=0x%x\n\r", 
BL33_START_ADDRESS
);

255 
	`mt_c⁄fig_£tup
();

257 
	`¥ötf
("bl31_setup\n\r");

258 #i‡
RESET_TO_BL31


260 
	`as£π
(
‰om_bl2
 =
NULL
);

261 
	`as£π
(
∂©_∑øms_‰om_bl2
 =
NULL
);

262 
	`¥ötf
("RESET_TO_BL31\n\r");

278 
	`¥ötf
("not RESET_TO_BL31\n");

280 
	`as£π
(
‰om_bl2
 !
NULL
);

281 
	`as£π
(
‰om_bl2
->
h
.
ty≥
 =
PARAM_BL31
);

282 
	`as£π
(
‰om_bl2
->
h
.
vîsi⁄
 >
VERSION_1
);

284 
bl2_to_bl31_∑øms
 = 
‰om_bl2
;

285 
	`as£π
((()
∂©_∑øms_‰om_bl2
Ë=
MT_BL31_PLAT_PARAM_VAL
);

287 
	}
}

293 
	$bl31_∂©f‹m_£tup
()

298 
	`gic_£tup
();

306 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGDATA
, 0);

307 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGCTRL
,

313 
	`mmio_wrôe_32
(
SYS_CNTCTL_BASE
 + 
CNTCR_OFF
, 
	`CNTCR_FCREQ
(0Ë| 
CNTCR_EN
);

316 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

317 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

318 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

319 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

320 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

322 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) | (1 << CNTNSAR_NS_SHIFT(1));

323 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

328 
	`mt_pwrc_£tup
();

331 
	`mt_£tup_t›ﬁogy
();

332 
	}
}

338 
	$bl31_∂©_¨ch_£tup
()

340 #i‡
RESET_TO_BL31


341 
	`mt_cci_£tup
();

345 
	`mmio_wrôe_32
(
CCI400_BASE
 + 
CCI_SEC_ACCESS_OFFSET
 , 0x1);

348 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

349 if(
ãórg
->
©f_log_buf_size
 !=0 ) {

350 
	`¥ötf
("mm≠át‡buf„∏: 0x%x, 0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
,

351 
ãórg
->
©f_log_buf_size
);

352 
	`mm≠_add_ªgi⁄
((
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
,

353 
MT_DEVICE
 | 
MT_RW
 | 
MT_NS
);

354 
	`¥ötf
("mmapátf buffer (force 2MBáligned): 0x%x, 0x%x\n\r",

355 (
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
);

360 
	`mm≠_add_ªgi⁄
(
TZRAM2_BASE
, ((
TZRAM2_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

361 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
);

365 
	`mt_c⁄figuª_mmu_ñ3
(
TZRAM_BASE
,

366 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

367 
BL31_RO_BASE
,

368 
BL31_RO_LIMIT
,

369 
BL31_COHERENT_RAM_BASE
,

370 
BL31_COHERENT_RAM_LIMIT
);

376 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

377 
	}
}

379 #i‡
RESET_TO_BL31


384 
	$mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

385 
íåy_poöt_öfo_t
 *
èrgë_íåy_öfo
)

387 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

388 i‡(
èrgë_£curôy
 =
NON_SECURE
) {

389 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

390 
PARAM_EP
,

391 
VERSION_1
,

397 
èrgë_íåy_öfo
->
pc
 = 
	`∂©_gë_ns_image_íåypoöt
();

399 
	`mt_£t_bl33_ï_öfo
(
èrgë_íåy_öfo
);

402 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

403 
PARAM_EP
,

404 
VERSION_1
,

407 i‡(
ãórg
->
ãe_suµ‹t
)

409 
èrgë_íåy_öfo
->
pc
 = 
ãórg
->
ãe_íåy
;

410 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

414 i‡(
BL32_BASE
 != 0) {

417 
èrgë_íåy_öfo
->
pc
 = 
BL32_BASE
;

418 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

422 
	}
}

425 
	$íabÀ_ns_ac˚ss_to_˝ue˘Ã
() {

426 
√xt_a˘Ã
;

429 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ2
();

430 
√xt_a˘Ã
 |
ACTLR_CPUECTLR_BIT
;

431 
	`wrôe_a˘Ã_ñ2
(
√xt_a˘Ã
);

433 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ3
();

434 
√xt_a˘Ã
 |
ACTLR_CPUECTLR_BIT
;

435 
	`wrôe_a˘Ã_ñ3
(
√xt_a˘Ã
);

441 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/bl32_plat_setup.c

31 
	~<bl_comm⁄.h
>

32 
	~<c⁄sﬁe.h
>

33 
	~<∂©f‹m.h
>

34 
	~"∂©_def.h
"

35 
	~"∂©_¥iv©e.h
"

41 
__RO_START__
;

42 
__RO_END__
;

44 
__COHERENT_RAM_START__
;

45 
__COHERENT_RAM_END__
;

53 
	#BL32_RO_BASE
 ()(&
__RO_START__
)

	)

54 
	#BL32_RO_LIMIT
 ()(&
__RO_END__
)

	)

63 
	#BL32_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

64 
	#BL32_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

69 
	$bl32_óæy_∂©f‹m_£tup
()

75 
	`c⁄sﬁe_öô
(
PL011_UART1_BASE
);

78 
	`mt_c⁄fig_£tup
();

79 
	}
}

84 
	$bl32_∂©f‹m_£tup
()

87 
	}
}

93 
	$bl32_∂©_¨ch_£tup
()

95 
	`mt_c⁄figuª_mmu_ñ1
(
BL32_RO_BASE
,

96 (
BL32_COHERENT_RAM_LIMIT
 - 
BL32_RO_BASE
),

97 
BL32_RO_BASE
,

98 
BL32_RO_LIMIT
,

99 
BL32_COHERENT_RAM_BASE
,

100 
BL32_COHERENT_RAM_LIMIT
);

101 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/l2c/l2c.c

1 
	~<∂©f‹m_def.h
>

2 
	~<¨ch.h
>

3 
	~<¨ch_hñ≥rs.h
>

4 
	~<mmio.h
>

5 
	~<sù_îr‹.h
>

6 
	~<•ölock.h
>

7 
	~<debug.h
>

8 
	~"∂©_¥iv©e.h
"

9 
	~"l2c.h
"

12 
•ölock_t
 
	gl2_sh¨e_lock
;

14 
	$c⁄fig_L2_size
()

16 
ˇche_cfg0
, 
ˇche_cfg1
;

19 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_512K
 << 
L2C_SIZE_CFG_OFF
);

20 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

21 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

22 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

24 if(((
	`gë_devöfo_wôh_ödex
(0)>>4)&0xff) == 0xc0)

27 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
);

28 
ˇche_cfg1
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

29 
ˇche_cfg1
 |(
CONFIGED_256K
 << 
L2C_SIZE_CFG_OFF
);

30 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

31 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

32 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

37 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_512K
 << 
L2C_SIZE_CFG_OFF
);

38 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

39 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

40 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

42 
	}
}

44 
uöt64_t
 
	$swôch_L2_size
(
uöt64_t
 
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
)

46 
ˇche_cfg0
, 
ˇche_cfg1
;

47 
ªt
 = 
SIP_SVC_E_SUCCESS
;

48 
l2c_sh¨e_öfo
 
sh¨e_öfo
;

50 
sh¨e_öfo
.
˛u°î_b‹row
 = (
˛u°î_b‹row_ªtu∫
 >> 16) & 0xFFFF;

51 
sh¨e_öfo
.
˛u°î_ªtu∫
 = 
˛u°î_b‹row_ªtu∫
 & 0xFFFF;

52 
sh¨e_öfo
.
sh¨e_˛u°î_num
 = share_cluster_num;

54 
	`•ö_lock
(&
l2_sh¨e_lock
);

58 
	`dis_i_d_dcsw_›_Æl
(
DCCISW
);

62 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

63 
ˇche_cfg0
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

64 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
);

65 
ˇche_cfg1
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

67 
›ti⁄
) {

68 
BORROW_L2
:

69 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

71 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

72 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

73 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

74 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

77 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

79 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

80 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

81 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

82 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

85 
ˇche_cfg1
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

86 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

87 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

88 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

92 
RETURN_L2
:

93 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

95 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

96 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

97 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

98 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

101 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

103 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

104 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

105 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

106 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

109 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

110 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

111 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

112 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

116 if((
	`gë_devöfo_wôh_ödex
(0)&0xff) == 0xc0)

118 
	`¥ötf
("switch L2$ size 5.1\n");

120 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_256K
 << 
L2C_SIZE_CFG_OFF
);

121 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

122 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

123 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

133 
ªt
 = 
SIP_SVC_E_NOT_SUPPORTED
;

138 
	`íabÀ_ˇche
();

140 
	`¥ötf
("switch L2$ size 7\n");

142 
	`•ö_u∆ock
(&
l2_sh¨e_lock
);

144  
ªt
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/l2c/l2c.h

1 #i‚de‡
_MT_L2C_H_


2 
	#_MT_L2C_H_


	)

4 
	#CONFIGED_256K
 0x1

	)

5 
	#CONFIGED_512K
 0x3

	)

6 
	#L2C_SIZE_CFG_OFF
 8

	)

7 
	#L2C_SHARE_ENABLE
 12

	)

9 
	e›ti⁄s
{

10 
	mBORROW_L2
,

11 
	mRETURN_L2
,

12 
	mBORROW_NONE


15 
	s_l2c_sh¨e_öfo
{

16 
uöt32_t
 
	msh¨e_˛u°î_num
;

17 
uöt32_t
 
	m˛u°î_b‹row
;

18 
uöt32_t
 
	m˛u°î_ªtu∫
;

19 }
	tl2c_sh¨e_öfo
;

21 
c⁄fig_L2_size
();

22 
uöt64_t
 
swôch_L2_size
(uöt64_à
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/log/log.c

38 
	~<log.h
>

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<°döt.h
>

42 
	~<∂©f‹m.h
>

43 
	~<¨ch.h
>

44 
	~<¨ch_hñ≥rs.h
>

45 
	~<mmio.h
>

46 
	~<∂©_def.h
>

48 
	#DEBUG_LOG_SERVICE
 1

	)

49 #i‡
DEBUG_LOG_SERVICE


50 
	#debug_¥öt
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

52 
	#debug_¥öt
(...Ë(()0)

	)

55 
bl31_log_£rvi˚_ªgi°î
((*
lock_gë
)(),

56 (*
log_putc
)(),

57 (*
lock_ªÀa£
)());

59 
	`bl31_log_£rvi˚_ªgi°î2
((*
lock_gë
)(),

60 (*
log_putc
)(),

61 (*
lock_ªÀa£
)());

64 
mt_log_buf_°¨t
 = 0;

65 
mt_log_buf_size
 = 0;

66 
mt_log_buf_íd
 = 0;

67 *
mt_ex˚±i⁄_buf_íd
 = 0;

68 
©f_log_˘æ_t
 *
p_©f_log_˘æ
 = 0;

69 *
±r_©f_¸ash_Êag
 = 0;

70 *
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = 0;

73 
	$mt_log_su•íd_Êush
()

75 if–
mt_log_buf_size
 != 0 )

77 
	`Êush_dˇche_ønge
((
uöt64_t
)
mt_log_buf_°¨t
, (uöt64_t)
mt_log_buf_size
);

79 
	}
}

82 
	$mt_log_lock_acquúe
()

84 
	`•ö_lock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

87 
	}
}

90 
	$mt_log_wrôe
(
c
)

92 *(*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
c
;

94 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
++;

96 if–
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 < 
mt_log_buf_íd
 )

97 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
++;

99 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

102 
	}
}

104 
	$mt_log_wrôe2
(
c
)

106 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

107 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

108 *
±r_ex_buf
 = 
NULL
;

109 *
±r_wrôe_pos
 = 
NULL
;

112 if(
±r_©f_¸ash_Êag
 =
NULL
)

115 
±r_wrôe_pos
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
löór_id
];

116 
±r_ex_buf
 = (*)((
uöçå_t
)*
±r_wrôe_pos
);

119 if((
uöçå_t
)
±r_ex_buf
 <(uöçå_t)
mt_ex˚±i⁄_buf_íd
) {

120 *
±r_ex_buf
 = 
c
;

121 (*
±r_wrôe_pos
)++;

127 
	}
}

130 
	$mt_¸ash_log_dump
(
uöt8_t
 *
¸ash_log_addr
, 
uöt32_t
 
¸ash_log_size
)

133 
uöt64_t
 
ªt
 = 0;

134 
uöt64_t
 
ªad_cou¡
;

135 
uöt64_t
 
off£t
;

136 
uöt64_t
 
pos
;

137 
uöt64_t
 
wrôe_cou¡
 = 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
;

138 
uöt8_t
 *
r_±r
 = 
NULL
;

139 
uöt8_t
 *
w_±r
 = 
NULL
;

140 
uöt8_t
 *
°¨t_±r
 = (uöt8_t*)(
uöçå_t
)(
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
);

142 if(
wrôe_cou¡
 == 0)

145 if(
wrôe_cou¡
 > 
¸ash_log_size
) {

146 
off£t
 = 
¸ash_log_size
-1;

147 
ªad_cou¡
 = 
¸ash_log_size
;

149 
off£t
 = 
wrôe_cou¡
-1;

150 
ªad_cou¡
 = 
wrôe_cou¡
;

153 
pos
 = 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
-1;

154 if(
pos
 < (
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
))

155 
pos
 = 
mt_log_buf_íd
;

156 
r_±r
 = (
uöt8_t
 *)((
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

158 
w_±r
 = 
¸ash_log_addr
 + 
off£t
;

159 
ªad_cou¡
) {

160 *(
w_±r
--Ë*(
r_±r
--);

161 if(
r_±r
 < 
°¨t_±r
)

162 
r_±r
 = (
uöt8_t
*)(
uöçå_t
)
mt_log_buf_íd
;

163 
ªad_cou¡
--;

164 
ªt
++;

167  
ªt
;

168 
	}
}

170 
	$mt_gë_uƒód_log_size
()

172 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =p_©f_log_˘æ->öfo.
©f_wrôe_pos
)

176 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 <Ö_©f_log_˘æ->öfo.
©f_wrôe_pos
)

178  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 -Ö_©f_log_˘æ->öfo.
©f_ªad_pos
);

182  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 +Ö_©f_log_˘æ->öfo.
©f_buf_size
)

183 - 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
;

184 
	}
}

187 
	$mt_log_lock_ªÀa£
()

189 
©f_buf_uƒód_size
 = 
	`mt_gë_uƒód_log_size
();

192 if(
©f_buf_uƒód_size
 >
ATF_LOG_SIGNAL_THRESHOLD_SIZE
)

199 if(
p_©f_log_˘æ
->
öfo
.
©f_ªadî_Æive
)

201 
	`mt_©f_åiggî_úq
();

202 
p_©f_log_˘æ
->
öfo
.
©f_úq_cou¡
++;

205 
p_©f_log_˘æ
->
öfo
.
©f_buf_uƒód_size
 =átf_buf_unread_size;

208 
	`•ö_u∆ock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

211 
	}
}

213 
uöt32_t
 
	$is_powî_⁄_boŸ
()

215 
uöt32_t
 
wdt_°a
, 
wdt_öãrvÆ
;

216 
wdt_°a
 = 
	`mmio_ªad_32
(
MTK_WDT_STATUS
);

217 
wdt_öãrvÆ
 = 
	`mmio_ªad_32
(
MTK_WDT_INTERVAL
);

218 
	`¥ötf
("°a=0x%x i¡=0x%x\r\n", 
wdt_°a
, 
wdt_öãrvÆ
);

222 if(
wdt_öãrvÆ
 & (1<<2))

225 
	}
}

227 
	$mt_log_£t_¸ash_Êag
()

229 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

230 
	}
}

232 
	$mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
)

234 
uöt32_t
 
dump_ªt
=0;

235 
i
;

236 
mt_log_buf_°¨t
 = 
°¨t
;

237 
mt_log_buf_size
 = 
size
;

238 
mt_log_buf_íd
 = 
°¨t
 + 
size
 - 1 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

239 
mt_ex˚±i⁄_buf_íd
 = (*)(
uöçå_t
)(
°¨t
 + 
size
 - 1 - 
´e_buf_size
);

241 
p_©f_log_˘æ
 = (
©f_log_˘æ_t
*)(
uöçå_t
)
°¨t
;

244 
±r_©f_¸ash_Êag
 = &
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
;

245 
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[0];

247 if(
	`is_powî_⁄_boŸ
()) {

248 
	`debug_¥öt
("is_power_on_boot:Årue\n");

249 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

251 
	`debug_¥öt
("is_power_on_boot: false\n");

252 if(
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 =
ATF_CRASH_MAGIC_NO
) {

253 
	`debug_¥öt
("¸ash fœg: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

254 
	`debug_¥öt
("©f_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

255 
	`debug_¥öt
("©f_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

256 
	`debug_¥öt
("dump crashlog\n");

257 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

258 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

259 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

260 
	`debug_¥öt
("©f_¸ash_log_addr: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

261 
dump_ªt
 = 
	`mt_¸ash_log_dump
((
uöt8_t
*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
, 
ATF_CRASH_LAST_LOG_SIZE
);

262 
	`debug_¥öt
("dump_ªt=%d.\n", 
dump_ªt
);

267 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0,

268 
size
-
´e_buf_size
-
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

269 
	`mem£t
((*)(
uöçå_t
)(
°¨t
+(
size
-
´e_buf_size
)), 0x0,áee_buf_size);

271 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

275 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
 = 
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

276 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
 = 
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

277 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

278 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

279 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

280 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
 = 0;

282 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

283 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

284 
	`debug_¥öt
("mt_log_£tu∞-átf_wrôe_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

285 
	`debug_¥öt
("mt_log_£tu∞-átf_ªad_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
);

286 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_lock : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
);

287 
	`debug_¥öt
("mt_log_£tu∞- mt_log_buf_íd : 0x%x\n", 
mt_log_buf_íd
);

289 
	`debug_¥öt
("mt_log_£tu∞- ATF_CRASH_LAST_LOG_SIZE : 0x%x\n", 
ATF_CRASH_LAST_LOG_SIZE
);

290 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE_PER_CPU : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE_PER_CPU
);

291 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE
);

292 
	`debug_¥öt
("mt_log_£tu∞- PLATFORM_CORE_COUNT : 0x%x\n", 
PLATFORM_CORE_COUNT
);

294 
i
=0; i<
PLATFORM_CORE_COUNT
; i++) {

295 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
i
] = (
°¨t
+(
size
-
´e_buf_size
)-
ATF_EXCEPT_BUF_SIZE
)+ i*
ATF_EXCEPT_BUF_SIZE_PER_CPU
;

296 
	`debug_¥öt
("mt_log_£tu∞-átf_ex˚±_wrôe_pos_≥r_˝u[%d]: 0x%x\n", 
i
, 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[i]);

299 if(
dump_ªt
) {

301 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

302 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

303 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
 = 
ATF_CRASH_LAST_LOG_SIZE
 + 
ATF_EXCEPT_BUF_SIZE
;

304 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

307 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_Êag : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

308 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

309 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
);

311 
	`bl31_log_£rvi˚_ªgi°î
(&
mt_log_lock_acquúe
, &
mt_log_wrôe
,

312 &
mt_log_lock_ªÀa£
);

313 
	`bl31_log_£rvi˚_ªgi°î2
(
NULL
, &
mt_log_wrôe2
, NULL);

314 
	}
}

317 
	#MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 120

	)

318 
	#TBASE_TAG
 "TBASE"

	)

319 
	gmt_log_£cuª_os_buf
[
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
+1] = {0};

320 
	gmt_log_£cuª_os_pos
 = 0;

322 
	$mt_log_£cuª_os_¥öt
(
c
)

324 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = 
c
;

327 if–
c
 == '\n' )

329 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
+1] = '\0';

330 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

331 
mt_log_£cuª_os_pos
 = 0;

335 
mt_log_£cuª_os_pos
++;

338 if–
mt_log_£cuª_os_pos
 =
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 )

340 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = '\0';

341 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

342 
mt_log_£cuª_os_pos
 = 0;

344 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/log/log.h

49 #i‚de‡
ATF_LOG_DRV_H


50 
	#ATF_LOG_DRV_H


	)

52 
	~<•ölock.h
>

53 
	~<°döt.h
>

54 
	~<∂©f‹m_def.h
>

56 
	#ATF_LOG_CTRL_BUF_SIZE
 256

	)

57 
	#ATF_LOG_SIGNAL_THRESHOLD_SIZE
 1024

	)

59 
	#ATF_CRASH_MAGIC_NO
 0xdód1abf

	)

75 
	#ATF_CRASH_LAST_LOG_SIZE
 (32*1024)

	)

76 
	#ATF_EXCEPT_BUF_SIZE_PER_CPU
 (4*1024)

	)

77 
	#ATF_EXCEPT_BUF_SIZE
 (
ATF_EXCEPT_BUF_SIZE_PER_CPU
 * 
PLATFORM_CORE_COUNT
)

	)

79 
	u©f_log_˘æ


83 
	m©f_buf_addr
;

84 
	m©f_buf_size
;

85 
	m©f_wrôe_pos
;

86 
	m©f_ªad_pos
;

87 
•ölock_t
 
	m©f_buf_lock
;

88 
	m©f_buf_uƒód_size
;

89 
	m©f_úq_cou¡
;

90 
	m©f_ªadî_Æive
;

91 
uöt64_t
 
	m©f_tŸÆ_wrôe_cou¡
;

92 
uöt64_t
 
	m©f_tŸÆ_ªad_cou¡
;

93 
	m©f_´e_dbg_buf_addr
;

94 
	m©f_´e_dbg_buf_size
;

95 
	m©f_¸ash_log_addr
;

96 
	m©f_¸ash_log_size
;

97 
	m©f_¸ash_Êag
;

98 
	m©f_ex˚±_wrôe_pos_≥r_˝u
[
PLATFORM_CORE_COUNT
];

99 } 
	möfo
;

100 
	md©a
[
ATF_LOG_CTRL_BUF_SIZE
];

101 } 
	t©f_log_˘æ_t
;

103 
mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
);

104 
mt_log_lock_acquúe
();

105 
mt_log_wrôe
(
c
);

106 
mt_log_lock_ªÀa£
();

107 
mt_log_su•íd_Êush
();

108 
mt_log_£cuª_os_¥öt
(
c
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/pwrc/plat_pwrc.c

31 
	~<bakîy_lock.h
>

32 
	~<mmio.h
>

33 
	~"../../∂©_def.h
"

34 
	~"∂©_pwrc.h
"

40 
bakîy_lock_t
 
pwrc_lock
 
__©åibuã__
 ((
£˘i⁄
("tzfw_coherent_mem")));

42 
	$mt_pwrc_gë_˝u_wkr
(
mpidr
)

44 
rc
 = 0;

45 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

46 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PSYSR_OFF
, (Ë
mpidr
);

47 
rc
 = 
	`PSYSR_WK
(
	`mmio_ªad_32
(
PWRC_BASE
 + 
PSYSR_OFF
));

48 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

49  
rc
;

50 
	}
}

52 
	$mt_pwrc_ªad_psy§
(
mpidr
)

54 
rc
 = 0;

55 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

56 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PSYSR_OFF
, (Ë
mpidr
);

57 
rc
 = 
	`mmio_ªad_32
(
PWRC_BASE
 + 
PSYSR_OFF
);

58 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

59  
rc
;

60 
	}
}

62 
	$mt_pwrc_wrôe_µ⁄r
(
mpidr
)

64 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

65 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PPONR_OFF
, (Ë
mpidr
);

66 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

67 
	}
}

69 
	$mt_pwrc_wrôe_µof‰
(
mpidr
)

71 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

72 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PPOFFR_OFF
, (Ë
mpidr
);

73 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

74 
	}
}

76 
	$mt_pwrc_£t_wí
(
mpidr
)

78 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

79 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PWKUPR_OFF
,

80 (Ë(
PWKUPR_WEN
 | 
mpidr
));

81 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

82 
	}
}

84 
	$mt_pwrc_˛r_wí
(
mpidr
)

86 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

87 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PWKUPR_OFF
,

88 (Ë
mpidr
);

89 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

90 
	}
}

92 
	$mt_pwrc_wrôe_pcof‰
(
mpidr
)

94 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

95 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PCOFFR_OFF
, (Ë
mpidr
);

96 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

97 
	}
}

100 
	$mt_pwrc_£tup
()

102 
	`bakîy_lock_öô
(&
pwrc_lock
);

104 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/pwrc/plat_pwrc.h

31 #i‚de‡
__PLAT_PWRC_H__


32 
	#__PLAT_PWRC_H__


	)

35 
	#PPOFFR_OFF
 0x0

	)

36 
	#PPONR_OFF
 0x4

	)

37 
	#PCOFFR_OFF
 0x8

	)

38 
	#PWKUPR_OFF
 0xc

	)

39 
	#PSYSR_OFF
 0x10

	)

41 
	#PWKUPR_WEN
 (1uŒ << 31)

	)

43 
	#PSYSR_AFF_L2
 (1 << 31)

	)

44 
	#PSYSR_AFF_L1
 (1 << 30)

	)

45 
	#PSYSR_AFF_L0
 (1 << 29)

	)

46 
	#PSYSR_WEN
 (1 << 28)

	)

47 
	#PSYSR_PC
 (1 << 27)

	)

48 
	#PSYSR_PP
 (1 << 26)

	)

50 
	#PSYSR_WK_SHIFT
 24

	)

51 
	#PSYSR_WK_MASK
 0x3

	)

52 
	#PSYSR_WK
(
x
Ë(x >> 
PSYSR_WK_SHIFT
Ë& 
PSYSR_WK_MASK


	)

54 
	#WKUP_COLD
 0x0

	)

55 
	#WKUP_RESET
 0x1

	)

56 
	#WKUP_PPONR
 0x2

	)

57 
	#WKUP_GICREQ
 0x3

	)

59 
	#PSYSR_INVALID
 0xffffffff

	)

61 #i‚de‡
__ASSEMBLY__


66 
mt_pwrc_£tup
();

67 
mt_pwrc_wrôe_pcof‰
();

68 
mt_pwrc_wrôe_µof‰
();

69 
mt_pwrc_wrôe_µ⁄r
();

70 
mt_pwrc_£t_wí
();

71 
mt_pwrc_˛r_wí
();

72 
mt_pwrc_ªad_psy§
();

73 
mt_pwrc_gë_˝u_wkr
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/timer/mt_cpuxgpt.c

37 
	~<°döt.h
>

38 
	~<¨ch_hñ≥rs.h
>

39 
	~"ty≥defs.h
"

40 
	~"∂©f‹m.h
"

41 
	~"mt_˝uxg±.h
"

43 
	#CPUXGPT_BASE
 0x10200000

	)

44 
	#INDEX_BASE
 (
CPUXGPT_BASE
+0x0674)

	)

45 
	#CTL_BASE
 (
CPUXGPT_BASE
+0x0670)

	)

47 
__u64
 
	gn‹mÆ_time_ba£
;

48 
__u64
 
	g©f_time_ba£
;

51 
	$__ªad_˝uxg±
(
ªg_ödex
 )

53 
vÆue
 = 0;

54 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

56 
vÆue
 = 
	`DRV_Reg32
(
CTL_BASE
);

57  
vÆue
;

58 
	}
}

61 
	$__wrôe_˝uxg±
(
ªg_ödex
,
vÆue
 )

64 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

65 
	`DRV_WrôeReg32
(
CTL_BASE
,
vÆue
);

66 
	}
}

68 
	$__˝uxg±_£t_öô_˙t
(
cou¡H
,
cou¡L
)

70 
	`__wrôe_˝uxg±
(
INDEX_CNT_H_INIT
,
cou¡H
);

71 
	`__wrôe_˝uxg±
(
INDEX_CNT_L_INIT
,
cou¡L
);

72 
	}
}

74 
	$gíîic_timî_backup
()

76 
__u64
 
cvÆ
;

78 
cvÆ
 = 
	`ªad_˙ç˘_ñ0
();

79 
	`__˝uxg±_£t_öô_˙t
((
__u32
)(
cvÆ
 >> 32), (__u32)(cval & 0xffffffff));

80 
	}
}

82 
	$©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
)

84 
n‹mÆ_time_ba£
 = 
n‹mÆ_ba£
;

85 
©f_time_ba£
 = 
©f_ba£
;

87 
	}
}

89 
	$©f_sched_˛ock
()

91 
__u64
 
cvÆ
;

93 
cvÆ
 = (((
	`ªad_˙ç˘_ñ0
(Ë- 
©f_time_ba£
)*1000)/13Ë+ 
n‹mÆ_time_ba£
;

94  
cvÆ
;

95 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/timer/mt_cpuxgpt.h

49 #i‚de‡
_MT_CPUXGPT_H_


50 
	#_MT_CPUXGPT_H_


	)

53 
	e˝uxg±_num
 {

54 
	mCPUXGPT0
=0,

55 
	mCPUXGPT1
,

56 
	mCPUXGPT2
,

57 
	mCPUXGPT3
,

58 
	mCPUXGPT4
,

59 
	mCPUXGPT5
,

60 
	mCPUXGPT6
,

61 
	mCPUXGPT7
,

62 
	mCPUXGPTNUMBERS
,

63 }
	tCPUXGPT_NUM
;

65 
	#CPUXGPT0_IRQID
 88

	)

66 
	#CPUXGPT1_IRQID
 89

	)

67 
	#CPUXGPT2_IRQID
 90

	)

68 
	#CPUXGPT3_IRQID
 91

	)

69 
	#CPUXGPT4_IRQID
 92

	)

70 
	#CPUXGPT5_IRQID
 93

	)

71 
	#CPUXGPT6_IRQID
 94

	)

72 
	#CPUXGPT7_IRQID
 95

	)

74 
	#CPUXGPT_IRQID_BASE
 
CPUXGPT0_IRQID


	)

77 
	#INDEX_CTL_REG
 0x000

	)

78 
	#INDEX_STA_REG
 0x004

	)

79 
	#INDEX_CNT_L_INIT
 0x008

	)

80 
	#INDEX_CNT_H_INIT
 0x00C

	)

81 
	#INDEX_IRQ_MASK
 0x030

82 

	)

83 
	#INDEX_CMP_BASE
 0x034

	)

87 
	#EN_CPUXGPT
 0x01

	)

88 
	#EN_AHLT_DEBUG
 0x02

	)

92 
	#CLK_DIV1
 (0x1 << 8)

	)

93 
	#CLK_DIV2
 (0x2 << 8)

	)

94 
	#CLK_DIV4
 (0x4 << 8)

	)

95 
	#CLK_DIV_MASK
 (~(0x7<<8))

	)

97 
	#CPUX_GPT0_ACK
 (1<<0x0)

	)

98 
	#CPUX_GPT1_ACK
 (1<<0x1)

	)

99 
	#CPUX_GPT2_ACK
 (1<<0x2)

	)

100 
	#CPUX_GPT3_ACK
 (1<<0x3)

	)

101 
	#CPUX_GPT4_ACK
 (1<<0x4)

	)

102 
	#CPUX_GPT5_ACK
 (1<<0x5)

	)

103 
	#CPUX_GPT6_ACK
 (1<<0x6)

	)

104 
	#CPUX_GPT7_ACK
 (1<<0x7)

	)

107 
gíîic_timî_backup
();

108 
©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

109 
©f_sched_˛ock
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/timer/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/uart/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/uart/uart.c

37 
	~<°döt.h
>

38 
	~<as£π.h
>

39 
	~<c⁄sﬁe.h
>

40 
	~"ty≥defs.h
"

41 
	~"∂©f‹m.h
"

42 
	~"u¨t.h
"

48 
	#Dñay_Cou¡
 324675

	)

50 
	#UART_BASE
(
u¨t
Ë(u¨t)

	)

52 
	#UART_RBR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

53 
	#UART_THR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

54 
	#UART_IER
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

55 
	#UART_IIR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

56 
	#UART_FCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

57 
	#UART_LCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0xc)

	)

58 
	#UART_MCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

59 
	#UART_LSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

60 
	#UART_MSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

61 
	#UART_SCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

62 
	#UART_DLL
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0)

	)

63 
	#UART_DLH
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

64 
	#UART_EFR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8)

	)

65 
	#UART_XON1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

66 
	#UART_XON2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

67 
	#UART_XOFF1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

68 
	#UART_XOFF2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

69 
	#UART_AUTOBAUD_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x20)

	)

70 
	#UART_HIGHSPEED
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x24)

	)

71 
	#UART_SAMPLE_COUNT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x28)

	)

72 
	#UART_SAMPLE_POINT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x2c)

	)

73 
	#UART_AUTOBAUD_REG
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x30)

	)

74 
	#UART_RATE_FIX_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x34)

	)

75 
	#UART_AUTOBAUD_SAMPLE
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x38)

	)

76 
	#UART_GUARD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x3c)

	)

77 
	#UART_ESCAPE_DAT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x40)

	)

78 
	#UART_ESCAPE_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x44)

	)

79 
	#UART_SLEEP_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x48)

	)

80 
	#UART_VFIFO_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4c)

	)

81 
	#UART_RXTRI_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x50)

	)

85 
	#UART_SET_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(
uöçå_t
)(REG)Ë|(U32)(BS))

	)

86 
	#UART_CLR_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(REG)Ë&~((U32)(BS)))

	)

87 
	#UART_WRITE16
(
VAL
, 
REG
Ë
	`DRV_WrôeReg
(REG,VAL)

	)

88 
	#UART_READ32
(
REG
Ë
	`DRV_Reg32
(REG)

	)

89 
	#UART_WRITE32
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

91 #i‡
CFG_FPGA_PLATFORM


92 vﬁ©ûê
	gg_u¨t
 = 
UART1
;

93 
	#UART_SRC_CLK
 
FPGA_UART_CLOCK


	)

95 vﬁ©ûê
	gg_u¨t
 = 
UART2
;

96 
	#UART_SRC_CLK
 
EVB_UART_CLOCK


	)

99 
	gIsOuçutToUARTFœg
=1;

102 
	$WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
)

104 *(vﬁ©ûê
uöt8_t
*)
addr
 = 
vÆue
;

105 
	}
}

108 
uöt8_t
 
	$READ_REGISTER_UINT8
(
uöçå_t
 
addr
)

110  *(vﬁ©ûê
uöt8_t
*)
addr
;

111 
	}
}

113 
	$WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
)

115 *(vﬁ©ûê
uöt32_t
*)
addr
 = 
vÆue
;

116 
	}
}

118 
uöt32_t
 
	$READ_REGISTER_UINT32
(
uöçå_t
 
addr
)

120  *(vﬁ©ûê
uöt32_t
*)
addr
;

121 
	}
}

123 
	$WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
)

125 *(vﬁ©ûê
uöt16_t
*)
addr
 = 
vÆue
;

126 
	}
}

128 
uöt16_t
 
	$READ_REGISTER_UINT16
(
uöçå_t
 
addr
)

130  *(vﬁ©ûê
uöt16_t
*)
addr
;

131 
	}
}

135 
	$£rül_£tbrg
 (
U32
 
u¨t˛k
, U32 
baudøã
)

137 #i‡(
CFG_FPGA_PLATFORM
)

138 
	#MAX_SAMPLE_COUNT
 256

	)

140 
U16
 
tmp
;

141 
U32
 
divis‹
;

142 
U32
 
ßm∂e_d©a
;

143 
U32
 
ßm∂e_cou¡
;

144 
U32
 
ßm∂e_poöt
;

147 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

160 
	`UART_WRITE32
(0x0003, 
	`UART_HIGHSPEED
(
g_u¨t
));

164 
ßm∂e_d©a
 = (
u¨t˛k
+(
baudøã
/2))/baudrate;

166 
divis‹
 = (
ßm∂e_d©a
+(
MAX_SAMPLE_COUNT
-1))/MAX_SAMPLE_COUNT;

168 
ßm∂e_cou¡
 = 
ßm∂e_d©a
/
divis‹
;

170 
ßm∂e_poöt
 = (
ßm∂e_cou¡
-1)/2;

172 
	`UART_WRITE32
((
ßm∂e_cou¡
-1), 
	`UART_SAMPLE_COUNT
(
g_u¨t
));

174 
	`UART_WRITE32
(
ßm∂e_poöt
, 
	`UART_SAMPLE_POINT
(
g_u¨t
));

176 
tmp
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

177 
	`UART_WRITE32
((
tmp
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

179 
	`UART_WRITE32
((
divis‹
&0xFF), 
	`UART_DLL
(
g_u¨t
));

180 
	`UART_WRITE32
(((
divis‹
>>8)&0xFF), 
	`UART_DLH
(
g_u¨t
));

181 
	`UART_WRITE32
(
tmp
, 
	`UART_LCR
(
g_u¨t
));

184 
byã
;

185 
high•ìd
;

186 
quŸ
, 
divis‹
, 
ªmaödî
;

188 i‡(
baudøã
 <= 115200 ) {

189 
high•ìd
 = 0;

190 
quŸ
 = 16;

192 
high•ìd
 = 2;

193 
quŸ
 = 4;

197 
divis‹
 = 
u¨t˛k
 / (
quŸ
 * 
baudøã
);

198 
ªmaödî
 = 
u¨t˛k
 % (
quŸ
 * 
baudøã
);

200 i‡(
ªmaödî
 >(
quŸ
 / 2Ë* 
baudøã
)

201 
divis‹
 += 1;

203 
	`UART_WRITE16
(
high•ìd
, 
	`UART_HIGHSPEED
(
g_u¨t
));

204 
byã
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

205 
	`UART_WRITE32
((
byã
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

206 
	`UART_WRITE32
((
divis‹
 & 0x00ff), 
	`UART_DLL
(
g_u¨t
));

207 
	`UART_WRITE32
(((
divis‹
 >> 8)&0x00ff), 
	`UART_DLH
(
g_u¨t
));

210 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

212 
	}
}

216 
	$£rül_n⁄block_gëc
()

218  ()
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

219 
	}
}

221 
	$mtk_£rül_£t_cuºít_u¨t
(
MT65XX_UART
 
u¨t_ba£
)

223 
g_u¨t
 = 
u¨t_ba£
;

224 
	}
}

226 
	$mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
)

228 
g_u¨t
 = 
u¨t_p‹t
;

229 #i‡!
CFG_FPGA_PLATFORM


230 #ifde‡
GPIO_UART_UTXD1_PIN


231 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

232 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

235 #ifde‡
GPIO_UART_URXD1_PIN


236 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

237 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

238 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

239 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

242 #ifde‡
GPIO_UART_UTXD2_PIN


243 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD2_PIN
, 
GPIO_MODE_01
);

244 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD2_PIN
, 
GPIO_DIR_OUT
);

247 #ifde‡
GPIO_UART_URXD2_PIN


248 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD2_PIN
, 
GPIO_MODE_01
);

249 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD2_PIN
, 
GPIO_DIR_IN
);

250 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_ENABLE
);

251 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_UP
);

254 #ifde‡
GPIO_UART_UTXD3_PIN


255 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD3_PIN
, 
GPIO_MODE_01
);

256 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD3_PIN
, 
GPIO_DIR_OUT
);

259 #ifde‡
GPIO_UART_URXD3_PIN


260 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD3_PIN
, 
GPIO_MODE_01
);

261 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD3_PIN
, 
GPIO_DIR_IN
);

262 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_ENABLE
);

263 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_UP
);

267 
	#AP_PERI_GLOBALCON_RST0
 (
PERICFG_BASE
+0x0)

	)

268 
	#AP_PERI_GLOBALCON_PDN0
 (
PERICFG_BASE
+0x10)

	)

271 if(0 =
u¨t˛k
){

273 
u¨t˛k
 = 
UART_SRC_CLK
;

276 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
	`deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

278 
	`mtk_£rül_£t_cuºít_u¨t
(
UART2
);

280 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

281 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

282 
	`£rül_£tbrg
(
u¨t˛k
, 
CFG_LOG_BAUDRATE
);

286 #ifde‡
GPIO_UART_UTXD1_PIN


287 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

288 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

291 #ifde‡
GPIO_UART_URXD1_PIN


292 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

293 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

294 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

295 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

305 
	`UART_CLR_BITS
(1 << 22, 
AP_PERI_GLOBALCON_PDN0
);

307 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

308 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

309 
	`£rül_£tbrg
(
u¨t˛k
, 
baudøã
);

310 
	}
}

312 
	$PutUARTByã
 (c⁄° 
c
)

314 !(
	`UART_READ32
 (
	`UART_LSR
(
g_u¨t
)Ë& 
UART_LSR_THRE
))

318 i‡(
c
 == '\n')

320 
	`UART_WRITE32
 ((Ë0xD, 
	`UART_THR
(
g_u¨t
));

322 
	`UART_WRITE32
 ((Ë
c
, 
	`UART_THR
(
g_u¨t
));

323 
	}
}

325 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

326 
	$PutUART1_Byã
(c⁄° 
c
)

328 !(
	`UART_READ32
 (
	`UART_LSR
(
UART2
)Ë& 
UART_LSR_THRE
))

332 i‡(
c
 == '\n')

333 
	`UART_WRITE32
((Ë'\r', 
	`UART_THR
(
UART2
));

335 
	`UART_WRITE32
((Ë
c
, 
	`UART_THR
(
UART2
));

336 
	}
}

339 
	$GëUARTByãs
(
u8
 *
buf
, 
u32
 
size
, u32 
tmo_ms
)

343 
u32
 
LSR
;

344 
tmo_í
 = (
tmo_ms
) ? 1 : 0;

345 
ul⁄g
 
°¨t_time
 = 
	`gë_timî
(0);

347 
size
) {

348 i‡(
tmo_í
 && (
	`gë_timî
(
°¨t_time
Ë> 
tmo_ms
))

352 i‡(!
tmo_í
)

353 
	`∂©f‹m_wdt_kick
();

355 
LSR
 = 
	`UART_READ32
(
	`UART_LSR
(
g_u¨t
));

356 i‡(
LSR
 & 
UART_LSR_DR
) {

357 *
buf
++ = (
u8
)
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

358 
size
--;

362  (0 =
size
) ? 0 : -1;

366 
	}
}

368 
	$c⁄sﬁe_öô
(
ba£_addr
)

375 
	`as£π
(
ba£_addr
);

378 
g_u¨t
 = 
ba£_addr
;

380 
	#CFG_LOG_BAUDRATE
 921600

	)

382 #i‡
CFG_FPGA_PLATFORM


383 
	#UART_SRC_CLK_FRQ
 (12000000)

	)

385 
	#UART_SRC_CLK_FRQ
 (0Ë

	)

390 
	`mtk_u¨t_öô
(
ba£_addr
, 
UART_SRC_CLK_FRQ
, 
CFG_LOG_BAUDRATE
);

393 
	}
}

395 
	$c⁄sﬁe_putc
(
c
)

397 if(
IsOuçutToUARTFœg
){

398 
	`PutUARTByã
 (
c
);

400  
c
;

401 
	}
}

403 
	$c⁄sﬁe_gëc
()

405 
c
 = 0;

406 if(
IsOuçutToUARTFœg
){

407 
	`GëUARTByãs
(&
c
, 1, 10);

409  
c
;

410 
	}
}

411 
	$£t_u¨t_Êag
()

413 
IsOuçutToUARTFœg
=1;

414 
	}
}

415 
	$˛ór_u¨t_Êag
()

417 
IsOuçutToUARTFœg
=0;

418 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/uart/uart.h

49 #i‚de‡
UART_HW_H


50 
	#UART_HW_H


	)

54 
	~"∂©f‹m_def.h
"

59 
	#UART_FCR_FIFOE
 (1 << 0)

	)

60 
	#UART_FCR_CLRR
 (1 << 1)

	)

61 
	#UART_FCR_CLRT
 (1 << 2)

	)

62 
	#UART_FCR_DMA1
 (1 << 3)

	)

63 
	#UART_FCR_RXFIFO_1B_TRI
 (0 << 6)

	)

64 
	#UART_FCR_RXFIFO_6B_TRI
 (1 << 6)

	)

65 
	#UART_FCR_RXFIFO_12B_TRI
 (2 << 6)

	)

66 
	#UART_FCR_RXFIFO_RX_TRI
 (3 << 6)

	)

67 
	#UART_FCR_TXFIFO_1B_TRI
 (0 << 4)

	)

68 
	#UART_FCR_TXFIFO_4B_TRI
 (1 << 4)

	)

69 
	#UART_FCR_TXFIFO_8B_TRI
 (2 << 4)

	)

70 
	#UART_FCR_TXFIFO_14B_TRI
 (3 << 4)

	)

72 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

73 
	#UART_FCR_NORMAL
 (
UART_FCR_FIFO_INIT
 | \

74 
UART_FCR_TXFIFO_4B_TRI
| \

75 
UART_FCR_RXFIFO_12B_TRI
)

	)

79 
	#UART_LCR_BREAK
 (1 << 6)

	)

80 
	#UART_LCR_DLAB
 (1 << 7)

	)

82 
	#UART_WLS_5
 (0 << 0)

	)

83 
	#UART_WLS_6
 (1 << 0)

	)

84 
	#UART_WLS_7
 (2 << 0)

	)

85 
	#UART_WLS_8
 (3 << 0)

	)

86 
	#UART_WLS_MASK
 (3 << 0)

	)

88 
	#UART_1_STOP
 (0 << 2)

	)

89 
	#UART_2_STOP
 (1 << 2)

	)

90 
	#UART_1_5_STOP
 (1 << 2Ë

	)

91 
	#UART_STOP_MASK
 (1 << 2)

	)

93 
	#UART_NONE_PARITY
 (0 << 3)

	)

94 
	#UART_ODD_PARITY
 (0x1 << 3)

	)

95 
	#UART_EVEN_PARITY
 (0x3 << 3)

	)

96 
	#UART_MARK_PARITY
 (0x5 << 3)

	)

97 
	#UART_SPACE_PARITY
 (0x7 << 3)

	)

98 
	#UART_PARITY_MASK
 (0x7 << 3)

	)

101 
	#UART_MCR_DTR
 (1 << 0)

	)

102 
	#UART_MCR_RTS
 (1 << 1)

	)

103 
	#UART_MCR_OUT1
 (1 << 2)

	)

104 
	#UART_MCR_OUT2
 (1 << 3)

	)

105 
	#UART_MCR_LOOP
 (1 << 4)

	)

106 
	#UART_MCR_XOFF
 (1 << 7Ë

	)

107 
	#UART_MCR_NORMAL
 (
UART_MCR_DTR
|
UART_MCR_RTS
)

	)

110 
	#UART_LSR_DR
 (1 << 0)

	)

111 
	#UART_LSR_OE
 (1 << 1)

	)

112 
	#UART_LSR_PE
 (1 << 2)

	)

113 
	#UART_LSR_FE
 (1 << 3)

	)

114 
	#UART_LSR_BI
 (1 << 4)

	)

115 
	#UART_LSR_THRE
 (1 << 5)

	)

116 
	#UART_LSR_TEMT
 (1 << 6)

	)

117 
	#UART_LSR_FIFOERR
 (1 << 7)

	)

120 
	#UART_MSR_DCTS
 (1 << 0)

	)

121 
	#UART_MSR_DDSR
 (1 << 1)

	)

122 
	#UART_MSR_TERI
 (1 << 2)

	)

123 
	#UART_MSR_DDCD
 (1 << 3)

	)

124 
	#UART_MSR_CTS
 (1 << 4)

	)

125 
	#UART_MSR_DSR
 (1 << 5)

	)

126 
	#UART_MSR_RI
 (1 << 6)

	)

127 
	#UART_MSR_DCD
 (1 << 7)

	)

130 
	#UART_EFR_EN
 (1 << 4)

	)

131 
	#UART_EFR_AUTO_RTS
 (1 << 6)

	)

132 
	#UART_EFR_AUTO_CTS
 (1 << 7)

	)

133 
	#UART_EFR_SW_CTRL_MASK
 (0x‡<< 0)

	)

135 
	#UART_EFR_NO_SW_CTRL
 (0)

	)

136 
	#UART_EFR_NO_FLOW_CTRL
 (0)

	)

137 
	#UART_EFR_AUTO_RTSCTS
 (
UART_EFR_AUTO_RTS
|
UART_EFR_AUTO_CTS
)

	)

138 
	#UART_EFR_XON1_XOFF1
 (0xaË

	)

139 
	#UART_EFR_XON2_XOFF2
 (0x5Ë

	)

140 
	#UART_EFR_XON12_XOFF12
 (0xfË

	)

143 
	#UART_EFR_XON1_XOFF1_MASK
 (0xa)

	)

144 
	#UART_EFR_XON2_XOFF2_MASK
 (0x5)

	)

147 
	#UART_IIR_NO_INT_PENDING
 (0x01)

	)

148 
	#UART_IIR_RLS
 (0x06Ë

	)

149 
	#UART_IIR_RDA
 (0x04Ë

	)

150 
	#UART_IIR_CTI
 (0x0CË

	)

151 
	#UART_IIR_THRE
 (0x02Ë

	)

153 
	#UART_IIR_MS
 (0x00Ë

	)

154 
	#UART_IIR_SW_FLOW_CTRL
 (0x10Ë

	)

155 
	#UART_IIR_HW_FLOW_CTRL
 (0x20Ë

	)

156 
	#UART_IIR_FIFO_EN
 (0xc0)

	)

157 
	#UART_IIR_INT_MASK
 (0x1f)

	)

160 
	#UART_RATE_FIX
 (1 << 0)

	)

163 
	#UART_FREQ_SEL
 (1 << 1)

	)

165 
	#UART_RATE_FIX_13M
 (1 << 0Ë

	)

166 
	#UART_AUTORATE_FIX_13M
 (1 << 1)

	)

167 
	#UART_FREQ_SEL_13M
 (1 << 2)

	)

168 
	#UART_RATE_FIX_ALL_13M
 (
UART_RATE_FIX_13M
|
UART_AUTORATE_FIX_13M
| \

169 
UART_FREQ_SEL_13M
)

	)

171 
	#UART_RATE_FIX_26M
 (0 << 0Ë

	)

172 
	#UART_AUTORATE_FIX_26M
 (0 << 1)

	)

173 
	#UART_FREQ_SEL_26M
 (0 << 2)

	)

174 
	#UART_RATE_FIX_ALL_26M
 (
UART_RATE_FIX_26M
|
UART_AUTORATE_FIX_26M
| \

175 
UART_FREQ_SEL_26M
)

	)

177 
	#UART_RATE_FIX_32M5
 (0 << 0Ë

	)

178 
	#UART_FREQ_SEL_32M5
 (0 << 1)

	)

179 
	#UART_RATE_FIX_ALL_32M5
 (
UART_RATE_FIX_32M5
|
UART_FREQ_SEL_32M5
)

	)

181 
	#UART_RATE_FIX_16M25
 (0 << 0Ë

	)

182 
	#UART_FREQ_SEL_16M25
 (0 << 1)

	)

183 
	#UART_RATE_FIX_ALL_16M25
 (
UART_RATE_FIX_16M25
|
UART_FREQ_SEL_16M25
)

	)

187 
	#UART_AUTOBADUSAM_13M
 7

	)

188 
	#UART_AUTOBADUSAM_26M
 15

	)

189 
	#UART_AUTOBADUSAM_52M
 31

	)

191 
	#UART_AUTOBAUDSAM_58_5M
 31

	)

194 
	#UART_VFIFO_ON
 (1 << 0)

	)

195 
	#UART_FCR_FIFOE
 (1 << 0)

	)

196 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

201 
	mUART1
 = 
UART0_BASE
,

202 
	mUART2
 = 
UART1_BASE
,

203 
	mUART3
 = 
UART2_BASE
,

204 
	mUART4
 = 
UART3_BASE


205 } 
	tMT65XX_UART
;

207 
	#PLL_ON_UART_CLOCK
 (13500000)

208 
	#PLL_OFF_UART_CLOCK
 (13500000)

209 

	)

211 
	#EVB_UART_CLOCK
 (26000000)

	)

212 
	#FPGA_UART_CLOCK
 (12000000)

	)

214 
mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/include/plat_macros.S

31 
	~<gic_v2.h
>

32 
	~"../∂©_def.h
"

34 .
	g£˘i⁄
 .
	grod©a
.
	ggic_ªg_«me
, "aS"

35 
	ggic_ªgs
: .
asciz
 "gic_iar", "gic_ctlr", ""

38 
	#GIC_REG_SIZE
 (2 * 8)

	)

45 .
ma¸o
 
∂©_¥öt_gic_ªgs


46 
mov
 
	gx0
, #CONFIG_GICC_ADDR

47 
bl
 
mt_gë_cfgv¨


49 
ldr
 
	gw1
, [
x0
, #GICC_IAR]

50 
ldr
 
	gw2
, [
x0
, #GICD_CTLR]

51 
sub
 
	g•
, sp, #GIC_REG_SIZE

52 
°p
 
	gx1
, 
	gx2
, [
•
]

53 
adr
 
	gx0
, 
gic_ªgs


54 
mov
 
	gx1
, 
•


55 
bl
 
¥öt_°rög_vÆue


56 
add
 
	g•
, sp, #GIC_REG_SIZE

57 .
	gídm


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/include/platform_def.h

31 #i‚de‡
__PLATFORM_DEF_H__


32 
	#__PLATFORM_DEF_H__


	)

34 
	~<¨ch.h
>

36 
	#PLAT_USE_EL1_AARCH32


	)

41 
	#PLATFORM_LINKER_FORMAT
 "ñf64-lôéó¨ch64"

	)

42 
	#PLATFORM_LINKER_ARCH
 
Ørch64


	)

49 
	#PLATFORM_STACK_SIZE
 0x800

	)

52 #i‡
DEBUG


53 
	#PCPU_DV_MEM_STACK_SIZE
 0x400

	)

55 
	#PCPU_DV_MEM_STACK_SIZE
 0x300

	)

58 
	#FIRMWARE_WELCOME_STR
 "BoŸög MTKÅru°ed fúmw¨êBL31\n\r"

	)

61 
	#BL2_IMAGE_NAME
 "bl2.bö"

	)

64 
	#BL31_IMAGE_NAME
 "bl31.bö"

	)

67 
	#BL32_IMAGE_NAME
 "bl32.bö"

	)

70 
	#BL33_IMAGE_NAME
 "bl33.bö"

	)

72 
	#PLATFORM_CACHE_LINE_SIZE
 64

	)

73 
	#PLATFORM_CLUSTER_COUNT
 2uŒ

	)

74 
	#PLATFORM_CLUSTER0_CORE_COUNT
 4

	)

75 
	#PLATFORM_CLUSTER1_CORE_COUNT
 4

	)

76 
	#PLATFORM_CORE_COUNT
 (
PLATFORM_CLUSTER1_CORE_COUNT
 + \

77 
PLATFORM_CLUSTER0_CORE_COUNT
)

	)

78 
	#PLATFORM_MAX_CPUS_PER_CLUSTER
 4

	)

79 
	#PRIMARY_CPU
 0x0

	)

80 
	#MAX_IO_DEVICES
 3

	)

81 
	#MAX_IO_HANDLES
 4

	)

86 
	#TZROM_BASE
 0x00000000

	)

87 
	#TZROM_SIZE
 0x04000000

	)

89 
	#TZRAM_BASE
 0x00110000

	)

90 
	#TZRAM_SIZE
 0x1C400

	)

92 
	#TZRAM2_BASE
 0x00100000

	)

93 
	#TZRAM2_SIZE
 0xDC00

	)

96 
	#TZDRAM_BASE
 0x00120000

	)

97 
	#TZDRAM_SIZE
 0x0000C000

	)

104 
	#BL1_RO_BASE
 
TZROM_BASE


	)

105 
	#BL1_RO_LIMIT
 (
TZROM_BASE
 + 
TZROM_SIZE
)

	)

106 
	#BL1_RW_BASE
 
TZRAM_BASE


	)

107 
	#BL1_RW_LIMIT
 
BL31_BASE


	)

112 
	#BL2_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0xc000)

	)

113 
	#BL2_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

118 
	#BL31_BASE
 (
TZRAM_BASE
 + 0x1000)

	)

119 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


120 
	#BL31_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

121 
	#TZRAM2_LIMIT
 (
TZRAM2_BASE
 + 
TZRAM2_SIZE
)

	)

123 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


124 
	#BL31_LIMIT
 
BL2_BASE


	)

133 
	#TSP_IN_TZRAM
 0

	)

134 
	#TSP_IN_TZDRAM
 1

	)

136 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


137 
	#TSP_SEC_MEM_BASE
 
TZRAM_BASE


	)

138 
	#TSP_SEC_MEM_SIZE
 
TZRAM_SIZE


	)

139 
	#BL32_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0x00000)

	)

140 
	#BL32_LIMIT
 
BL2_BASE


	)

141 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


142 
	#TSP_SEC_MEM_BASE
 
TZDRAM_BASE


	)

143 
	#TSP_SEC_MEM_SIZE
 
TZDRAM_SIZE


	)

144 
	#BL32_BASE
 (
TZDRAM_BASE
 + 0x2000)

	)

145 
	#BL32_LIMIT
 (
TZDRAM_BASE
 + (1 << 21))

	)

153 
	#ADDR_SPACE_SIZE
 (1uŒ << 32)

	)

154 
	#MAX_XLAT_TABLES
 4

	)

155 
	#MAX_MMAP_REGIONS
 16

	)

160 
	#IRQ_SEC_PHY_TIMER
 29

	)

165 
	#CCI400_BASE
 0x10390000

	)

166 
	#CCI400_SL_IFACE_CLUSTER0
 4

	)

167 
	#CCI400_SL_IFACE_CLUSTER1
 3

	)

168 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

169 
CCI400_SL_IFACE_CLUSTER1
 : \

170 
CCI400_SL_IFACE_CLUSTER0
)

	)

171 
	#CCI_SEC_ACCESS_OFFSET
 (0x8)

	)

174 
	#IO_PHYS
 (0x10000000)

	)

175 
	#MCUCFG_BASE
 (
IO_PHYS
 + 0x00200000)

	)

176 
	#UART0_BASE
 (
IO_PHYS
 + 0x01002000)

	)

177 
	#UART1_BASE
 (
IO_PHYS
 + 0x01003000)

	)

178 
	#UART2_BASE
 (
IO_PHYS
 + 0x01004000)

	)

179 
	#UART3_BASE
 (
IO_PHYS
 + 0x01005000)

	)

180 
	#CFG_FPGA_PLATFORM
 0

	)

181 
	#PERICFG_BASE
 (
IO_PHYS
 + 0x3000)

	)

186 
	#MP0_MISC_CONFIG_BASE
 (
IO_PHYS
 + 0x00200000)

	)

187 
	#MP0_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MP0_MISC_CONFIG_BASE
 + 0x38 + ((˝uË* 8))

	)

188 
	#MP1_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MP0_MISC_CONFIG_BASE
 + 0x238 + ((˝uË* 8))

	)

189 
	#MP0_MISC_CONFIG3
 (
MCUCFG_BASE
 + 0x3c)

	)

191 
	#INFRACFG_AO_BASE
 (
IO_PHYS
 + 0x1000)

	)

192 
	#BOOTROM_BOOT_ADDR
 (
INFRACFG_AO_BASE
 + 0x800)

	)

193 
	#BOOTROM_SEC_CTRL
 (
INFRACFG_AO_BASE
 + 0x804)

	)

194 
	#SW_ROM_PD
 (1U << 31)

	)

196 
	#MP0_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0030)

	)

197 
	#MP0_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0054)

	)

198 
	#MP1_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0230)

	)

199 
	#MP1_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0254)

	)

204 
	#MP0_AXI_CONFIG
 (
MP0_MISC_CONFIG_BASE
 + 0x002C)

	)

205 
	#MP1_AXI_CONFIG
 (
MP0_MISC_CONFIG_BASE
 + 0x022C)

	)

206 
	#ACINACTM
 (1U << 4)

	)

217 
	#CACHE_WRITEBACK_SHIFT
 6

	)

218 
	#CACHE_WRITEBACK_GRANULE
 (1 << 
CACHE_WRITEBACK_SHIFT
)

	)

221 
	#WDT_IRQ_BIT_ID
 (160)

	)

222 
	#FIQ_SMP_CALL_SGI
 13

	)

223 
	#ATF_LOG_IRQ_ID
 281

	)

226 
	#MP0_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0)

	)

227 
	#MP1_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0x200)

	)

228 
	#L2RSTDISABLE
 (1 << 4)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/include/power_tracer.h

1 #i‚de‡
__TRACER_H_


2 
	#__TRACER_H_


	)

4 
	#CPU_UP
 0

	)

5 
	#CPU_DOWN
 1

	)

6 
	#CPU_SUSPEND
 2

	)

7 
	#CLUSTER_UP
 3

	)

8 
	#CLUSTER_DOWN
 4

	)

9 
	#CLUSTER_SUSPEND
 5

	)

11 
åa˚_powî_Êow
(
mpidr
, 
mode
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/include/scu.h

2 #i‚de‡
__SCU_H__


3 
	#__SCU_H__


	)

5 
dißbÀ_scu
(
mpidr
);

6 
íabÀ_scu
(
mpidr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/include/tbase_platform.h

12 #i‚de‡
__TBASE_PLATFORM_H__


13 
	#__TBASE_PLATFORM_H__


	)

15 
	~<bl_comm⁄.h
>

16 
	~<tba£_¥iv©e.h
>

17 
	~<∂©_def.h
>

21 
	#TBASE_PM_ENABLE
 1

	)

23 
	#TBASE_SIP_ROUTE_ENABLE
 0

	)

25 
	#TBASE_OEM_ROUTE_ENABLE
 0

	)

28 
	#TEE_PARAMS
 (((
©f_¨g_t_±r
)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
)->
ãe_boŸ_¨g_addr
)

	)

30 
	#TBASE_NWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamBa£
)

	)

31 
	#TBASE_NWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamSize
)

	)

32 
	#TBASE_SWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
+
TBASE_SWD_IMEM_SIZE
)

	)

33 
	#TBASE_SWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamSize
-
TBASE_SWD_IMEM_SIZE
)

	)

34 
	#TBASE_SWD_IMEM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
)

	)

35 
	#TBASE_SWD_IMEM_SIZE
 (2*1024*1024)

	)

36 
	#TBASE_GIC_DIST_BASE
 (
BASE_GICD_BASE
)

	)

37 
	#TBASE_GIC_CPU_BASE
 (
BASE_GICC_BASE
)

	)

39 
	#TBASE_GIC_VERSION
 (2)

	)

40 
	#TBASE_SPI_COUNT
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
tŸÆ_numbî_•i
)

	)

41 
	#TBASE_SSIQ_NRO
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
ssiq_numbî
)

	)

43 
	#TBASE_MONITOR_FLAGS
 (
TBASE_MONITOR_FLAGS_DEFAULT
)

	)

46 
	#TBASE_MAX_MONITOR_CALL_REGS
 
TBASE_MONITOR_CALL_REGS_MIN


	)

47 
	#TBASE_NWD_REGISTER_COUNT
 
TBASE_NWD_REGISTERS_MIN


	)

51 
	#TBASE_REGISTER_FILE_MMU_FLAGS
 (
	`LOWER_ATTRS
(
ATTR_IWBWA_OWBWA_NTR_INDEX
 | 
ISH
 | 
AP_RW
) |\

52 
	`UPPER_ATTRS
(
XN
) | \

53 
LEVEL3
)

	)

60 #i‚de‡
__ASSEMBLY__


61 
mt_log_£cuª_os_¥öt
(
c
);

63 
	#TBASE_OUTPUT_PUTC
(
c
Ë
	`mt_log_£cuª_os_¥öt
(c)

	)

66 
	#TBASE_EXECUTION_STATUS
(
°©us
)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/mailbox.c

1 
	~"∂©_¥iv©e.h
"

3 
maûbox_t
 
	gmt_mbox
[
PLATFORM_CORE_COUNT
];

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_def.h

31 #i‚de‡
__PLAT_DEF_H__


32 
	#__PLAT_DEF_H__


	)

34 
	~<∂©f‹m_def.h
>

38 
	#FIP_IMAGE_NAME
 "fù.bö"

	)

41 
	#CONFIG_GICD_ADDR
 0

	)

42 
	#CONFIG_GICC_ADDR
 1

	)

43 
	#CONFIG_GICH_ADDR
 2

	)

44 
	#CONFIG_GICV_ADDR
 3

	)

45 
	#CONFIG_MAX_AFF0
 4

	)

46 
	#CONFIG_MAX_AFF1
 5

	)

48 
	#CONFIG_CPU_SETUP
 6

	)

49 
	#CONFIG_BASE_MMAP
 7

	)

51 
	#CONFIG_HAS_CCI
 8

	)

52 
	#CONFIG_HAS_TZC
 9

	)

53 
	#CONFIG_LIMIT
 10

	)

59 
	#FLASH0_BASE
 0x08000000

	)

60 
	#FLASH0_SIZE
 
TZROM_SIZE


	)

83 
	#MTK_DEVICE_BASE
 0x11000000

	)

84 
	#MTK_DEVICE_SIZE
 0x1000000

	)

86 
	#MT_DEV_BASE
 0x10200000

	)

87 
	#MT_DEV_SIZE
 0x200000

	)

89 
	#MT_GIC_BASE
 0x10220000

	)

91 #i‚de‡
__ASSEMBLY__


92 
mt_mbox
[];

94 
	#MBOX_OFF
 
mt_mbox


	)

97 
	#PARAMS_BASE
 
TZDRAM_BASE


	)

99 
	#DRAM1_BASE
 0x41000000uŒ

	)

100 
	#DRAM1_SIZE
 0x1E000000uŒ

	)

101 
	#DRAM1_END
 (
DRAM1_BASE
 + 
DRAM1_SIZE
 - 1)

	)

102 
	#DRAM1_SEC_SIZE
 0x01000000uŒ

	)

104 
	#DRAM_BASE
 
DRAM1_BASE


	)

105 
	#DRAM_SIZE
 
DRAM1_SIZE


	)

107 
	#DRAM2_BASE
 0x880000000uŒ

	)

108 
	#DRAM2_SIZE
 0x780000000uŒ

	)

109 
	#DRAM2_END
 (
DRAM2_BASE
 + 
DRAM2_SIZE
 - 1)

	)

111 
	#PCIE_EXP_BASE
 0x40000000

	)

112 
	#TZRNG_BASE
 0x7„60000

	)

113 
	#TZNVCTR_BASE
 0x7„70000

	)

114 
	#TZROOTKEY_BASE
 0x7„80000

	)

117 
	#SYS_CNTCTL_BASE
 0x2a430000

	)

118 
	#SYS_CNTREAD_BASE
 0x2a800000

	)

119 
	#SYS_TIMCTL_BASE
 0x2a810000

	)

122 
	#VE_SYSREGS_BASE
 0x1c010000

	)

123 
	#V2M_SYS_ID
 0x0

	)

124 
	#V2M_SYS_LED
 0x8

	)

125 
	#V2M_SYS_CFGDATA
 0xa0

	)

126 
	#V2M_SYS_CFGCTRL
 0xa4

	)

130 
	#NS_IMAGE_OFFSET
 0x41E00000

	)

134 
	#MT_BL31_PLAT_PARAM_VAL
 0x0f1e2d3c4b5a6978ULL

	)

146 
	#SYS_LED_SS_SHIFT
 0x0

	)

147 
	#SYS_LED_EL_SHIFT
 0x1

	)

148 
	#SYS_LED_EC_SHIFT
 0x3

	)

150 
	#SYS_LED_SS_MASK
 0x1

	)

151 
	#SYS_LED_EL_MASK
 0x3

	)

152 
	#SYS_LED_EC_MASK
 0x1f

	)

155 
	#SYS_ID_REV_SHIFT
 27

	)

156 
	#SYS_ID_HBI_SHIFT
 16

	)

157 
	#SYS_ID_BLD_SHIFT
 12

	)

158 
	#SYS_ID_ARCH_SHIFT
 8

	)

159 
	#SYS_ID_FPGA_SHIFT
 0

	)

161 
	#SYS_ID_REV_MASK
 0xf

	)

162 
	#SYS_ID_HBI_MASK
 0xfff

	)

163 
	#SYS_ID_BLD_MASK
 0xf

	)

164 
	#SYS_ID_ARCH_MASK
 0xf

	)

165 
	#SYS_ID_FPGA_MASK
 0xff

	)

167 
	#SYS_ID_BLD_LENGTH
 4

	)

169 
	#REV_MT
 0x0

	)

170 
	#HBI_MT_BASE
 0x020

	)

171 
	#HBI_FOUNDATION
 0x010

	)

173 
	#BLD_GIC_VE_MMAP
 0x0

	)

174 
	#BLD_GIC_A53A57_MMAP
 0x1

	)

176 
	#ARCH_MODEL
 0x1

	)

179 
	#PWRC_BASE
 0x1c100000

	)

185 
	#CCI400_BASE
 0x10390000

	)

186 
	#CCI400_SL_IFACE_CLUSTER0
 4

	)

187 
	#CCI400_SL_IFACE_CLUSTER1
 3

	)

188 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

189 
CCI400_SL_IFACE_CLUSTER1
 : \

190 
CCI400_SL_IFACE_CLUSTER0
)

	)

191 
	#CCI_SEC_ACCESS_OFFSET
 (0x8)

	)

198 
	#VE_GICC_BASE
 0x2c002000

	)

203 
	#BASE_GICD_BASE
 (
MT_GIC_BASE
 + 0x1000)

	)

205 
	#BASE_GICC_BASE
 (
MT_GIC_BASE
 + 0x2000)

	)

206 
	#BASE_GICH_BASE
 (
MT_GIC_BASE
 + 0x4000)

	)

207 
	#BASE_GICV_BASE
 (
MT_GIC_BASE
 + 0x6000)

	)

208 
	#INT_POL_CTL0
 0x10200620

	)

210 
	#MT_EDGE_SENSITIVE
 1

	)

211 
	#MT_LEVEL_SENSITIVE
 0

	)

212 
	#MT_POLARITY_LOW
 0

	)

213 
	#MT_POLARITY_HIGH
 1

	)

216 
	#GIC_PRIVATE_SIGNALS
 (32)

	)

217 
	#NR_GIC_SGI
 (16)

	)

218 
	#NR_GIC_PPI
 (16)

	)

219 
	#GIC_PPI_OFFSET
 (27)

	)

220 
	#MT_NR_PPI
 (5)

	)

221 
	#MT_NR_SPI
 (241)

	)

222 
	#NR_MT_IRQ_LINE
 (
GIC_PPI_OFFSET
 + 
MT_NR_PPI
 + 
MT_NR_SPI
)

	)

225 
	#IRQ_SEC_PHY_TIMER
 29

	)

226 
	#IRQ_SEC_SGI_0
 8

	)

227 
	#IRQ_SEC_SGI_1
 9

	)

228 
	#IRQ_SEC_SGI_2
 10

	)

229 
	#IRQ_SEC_SGI_3
 11

	)

230 
	#IRQ_SEC_SGI_4
 12

	)

231 
	#IRQ_SEC_SGI_5
 13

	)

232 
	#IRQ_SEC_SGI_6
 14

	)

233 
	#IRQ_SEC_SGI_7
 15

	)

234 
	#IRQ_SEC_SGI_8
 16

	)

239 
	#PAGE_ADDR_MASK
 (0xFFF00000)

	)

241 
	#PL011_UART0_BASE
 0x1c090000

	)

242 
	#PL011_UART1_BASE
 0x1c0a0000

	)

243 
	#PL011_UART2_BASE
 0x1c0b0000

	)

244 
	#PL011_UART3_BASE
 0x1c0c0000

	)

251 
	#UART0_BASE
 (
IO_PHYS
 + 0x01002000)

	)

252 
	#UART1_BASE
 (
IO_PHYS
 + 0x01003000)

	)

253 
	#UART2_BASE
 (
IO_PHYS
 + 0x01004000)

	)

254 
	#UART3_BASE
 (
IO_PHYS
 + 0x01005000)

	)

255 
	#CFG_FPGA_PLATFORM
 0

	)

256 
	#PERICFG_BASE
 (
IO_PHYS
 + 0x3000)

	)

260 
	#TZC400_BASE
 0x2a4a0000

	)

267 
	#MT_AID_WIDTH
 4

	)

270 
	#MT_NSAID_DEFAULT
 0

	)

271 
	#MT_NSAID_PCI
 1

	)

272 
	#MT_NSAID_VIRTIO
 8

	)

273 
	#MT_NSAID_AP
 9

	)

274 
	#MT_NSAID_VIRTIO_OLD
 15

	)

277 
	#MT_NSAID_HDLCD0
 2

	)

278 
	#MT_NSAID_CLCD
 7

	)

283 
	#TRNG_ba£
 (0x1020F000)

284 
	#TRNG_BASE_ADDR
 
TRNG_ba£


	)

285 
	#TRNG_BASE_SIZE
 (0x1000)

	)

286 
	#TRNG_CTRL
 (
TRNG_ba£
+0x0000)

	)

287 
	#TRNG_TIME
 (
TRNG_ba£
+0x0004)

	)

288 
	#TRNG_DATA
 (
TRNG_ba£
+0x0008)

	)

289 
	#TRNG_PDN_ba£
 (0x10001088)

	)

290 
	#TRNG_PDN_BASE_ADDR
 (0x10001000)

	)

291 
	#TRNG_PDN_BASE_SIZE
 (0x1000)

	)

292 
	#TRNG_PDN_SET
 (
TRNG_PDN_ba£
 +0x0000)

	)

293 
	#TRNG_PDN_CLR
 (
TRNG_PDN_ba£
 +0x0004)

	)

294 
	#TRNG_PDN_STATUS
 (
TRNG_PDN_ba£
 +0x0008)

	)

295 
	#TRNG_CTRL_RDY
 0x80000000

	)

296 
	#TRNG_CTRL_START
 0x00000001

	)

301 
	#MTK_WDT_BASE
 (
IO_PHYS
 + 0x7000)

	)

302 
	#MTK_WDT_SIZE
 (0x1000)

	)

303 
	#MTK_WDT_MODE
 (
MTK_WDT_BASE
+0x0000)

	)

304 
	#MTK_WDT_LENGTH
 (
MTK_WDT_BASE
+0x0004)

	)

305 
	#MTK_WDT_RESTART
 (
MTK_WDT_BASE
+0x0008)

	)

306 
	#MTK_WDT_STATUS
 (
MTK_WDT_BASE
+0x000C)

	)

307 
	#MTK_WDT_INTERVAL
 (
MTK_WDT_BASE
+0x0010)

	)

308 
	#MTK_WDT_SWRST
 (
MTK_WDT_BASE
+0x0014)

	)

309 
	#MTK_WDT_SWSYSRST
 (
MTK_WDT_BASE
+0x0018)

	)

310 
	#MTK_WDT_NONRST_REG
 (
MTK_WDT_BASE
+0x0020)

	)

311 
	#MTK_WDT_NONRST_REG2
 (
MTK_WDT_BASE
+0x0024)

	)

312 
	#MTK_WDT_REQ_MODE
 (
MTK_WDT_BASE
+0x0030)

	)

313 
	#MTK_WDT_REQ_IRQ_EN
 (
MTK_WDT_BASE
+0x0034)

	)

314 
	#MTK_WDT_DEBUG_CTL
 (
MTK_WDT_BASE
+0x0040)

	)

317 
	#MTK_WDT_STATUS_HWWDT_RST
 (0x80000000)

	)

318 
	#MTK_WDT_STATUS_SWWDT_RST
 (0x40000000)

	)

319 
	#MTK_WDT_STATUS_IRQWDT_RST
 (0x20000000)

	)

320 
	#MTK_WDT_STATUS_DEBUGWDT_RST
 (0x00080000)

	)

321 
	#MTK_WDT_STATUS_SPMWDT_RST
 (0x0002)

	)

322 
	#MTK_WDT_STATUS_SPM_THERMAL_RST
 (0x0001)

	)

323 
	#MTK_WDT_STATUS_THERMAL_DIRECT_RST
 (1<<18)

	)

324 
	#MTK_WDT_STATUS_SECURITY_RST
 (1<<28)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_gic.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<debug.h
>

35 
	~<gic_v2.h
>

36 
	~<gic_v3.h
>

37 
	~<öãºu±_mgmt.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°döt.h
>

40 
	~"∂©_def.h
"

41 
	~"∂©_¥iv©e.h
"

42 
	~<∂©f‹m_def.h
>

43 
	~<°dio.h
>

45 #i‚de‡
MAX_GIC_NR


46 
	#MAX_GIC_NR
 1

	)

49 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

52 
	sgic_chù_d©a
 {

53 
	mßved_•i_íabÀ
[
DIV_ROUND_UP
(320, 32)];

54 
	mßved_•i_c⁄f
[
DIV_ROUND_UP
(320, 16)];

55 
	mßved_•i_èrgë
[
DIV_ROUND_UP
(320, 4)];

56 
	mßved_•i_group
[
DIV_ROUND_UP
(320, 32)];

66 
gic_chù_d©a
 
	ggic_d©a
[
MAX_GIC_NR
];

69 
	$gic_di°_ßve
()

71 
gic_úqs
;

72 
di°_ba£
;

73 
i
;

75 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

77 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

79 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

80 
gic_d©a
[0].
ßved_•i_c⁄f
[
i
] =

81 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4);

83 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

84 
gic_d©a
[0].
ßved_•i_èrgë
[
i
] =

85 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4);

87 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

88 
gic_d©a
[0].
ßved_•i_íabÀ
[
i
] =

89 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4);

91 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

92 
gic_d©a
[0].
ßved_•i_group
[
i
] =

93 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4);

94 
	}
}

96 
	$gic_di°_ª°‹e
()

98 
gic_úqs
;

99 
di°_ba£
;

100 
˘Ã
;

101 
i
;

103 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

105 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

108 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
di°_ba£
);

109 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

110 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
);

113 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

114 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_c⁄f
[i]);

119 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

120 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_èrgë
[i]);

122 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

123 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_íabÀ
[i]);

125 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

126 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_group
[i]);

128 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

129 
	}
}

181 
	$úq_øi£_so·úq
(
m≠
, 
úq
)

183 
ßâ
;

185 
ßâ
 = 1 << 15;

187 if(
	`∂©_ic_gë_öãºu±_ty≥
(
úq
Ë=
INTR_TYPE_S_EL1
)

189 
ßâ
 = 0;

192 
	`gicd_wrôe_sgú
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), (
m≠
 << 16Ë| 
ßâ
 | 
úq
);

194 
	`dsb
();

195 
	}
}

197 
	$gë_ack_öfo
()

199  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

200 
	}
}

202 
	$ack_sgi
(
ür
)

204 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
ür
);

205 
	}
}

207 
	$mt_©f_åiggî_úq
()

209 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
ATF_LOG_IRQ_ID
);

210 
	}
}

212 
	$mask_wdt_fiq
()

214 
	`gicd_£t_i˚«bÀr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

215 
	}
}

222 
	$mt_©f_åiggî_WDT_FIQ
()

224 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

225 
	}
}

233 
	$gicv3_˝uif_£tup
()

235 
s¸_vÆ
, 
vÆ
;

236 
uöçå_t
 
ba£
;

246 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

247 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

251 
	`∑nic
();

254 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

256 
vÆ
 &~
WAKER_PS
;

257 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

258 
	`dsb
();

261 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

262 
vÆ
 & 
WAKER_CA
) {

263 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

270 
s¸_vÆ
 = 
	`ªad_s¸
();

271 
	`wrôe_s¸
(
s¸_vÆ
 | 
SCR_NS_BIT
);

272 
	`isb
();

283 
vÆ
 = 
	`ªad_icc_§e_ñ3
();

284 
	`wrôe_icc_§e_ñ3
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

286 
vÆ
 = 
	`ªad_icc_§e_ñ2
();

287 
	`wrôe_icc_§e_ñ2
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

289 
	`wrôe_icc_pmr_ñ1
(
GIC_PRI_MASK
);

290 
	`isb
();

293 
	`wrôe_s¸
(
s¸_vÆ
);

294 
	`isb
();

295 
	}
}

301 
	$gicv3_˝uif_dó˘iv©e
()

303 
vÆ
;

304 
uöçå_t
 
ba£
;

313 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

314 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

318 
	`∑nic
();

321 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

322 
vÆ
 |
WAKER_PS
;

323 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

324 
	`dsb
();

327 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

328 (
vÆ
 & 
WAKER_CA
) == 0) {

329 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

331 
	}
}

338 
	$gic_˝uif_£tup
(
gicc_ba£
)

340 
vÆ
;

343 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

351 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

352 
	`gicv3_˝uif_£tup
();

355 
vÆ
 = 
ENABLE_GRP0
 | 
ENABLE_GRP1
 | 
FIQ_EN
 | 
FIQ_BYP_DIS_GRP0
;

356 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
FIQ_BYP_DIS_GRP1
 | 
IRQ_BYP_DIS_GRP1
;

359 
	`gicc_wrôe_pmr
(
gicc_ba£
, 0x1 << 7);

360 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

362 
	}
}

368 
	$gic_˝uif_dó˘iv©e
(
gicc_ba£
)

370 
vÆ
;

373 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

374 
vÆ
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

375 
vÆ
 |
FIQ_BYP_DIS_GRP1
 | 
FIQ_BYP_DIS_GRP0
;

376 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
IRQ_BYP_DIS_GRP1
;

377 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

379 
vÆ
 = 
	`gicc_ªad_iidr
(
gicc_ba£
);

386 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

387 
	`gicv3_˝uif_dó˘iv©e
();

390 
	}
}

396 
	$gic_p˝u_di°if_£tup
(
gicd_ba£
)

398 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 0, ~0);

401 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

402 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
, 
GIC_HIGHEST_SEC_PRIORITY
);

403 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

406 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

407 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

408 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

409 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

410 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

411 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

412 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

413 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

414 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

416 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
, 
GIC_HIGHEST_SEC_PRIORITY
);

417 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
, 
GIC_HIGHEST_SEC_PRIORITY
);

418 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
, 
GIC_HIGHEST_SEC_PRIORITY
);

419 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
, 
GIC_HIGHEST_SEC_PRIORITY
);

420 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
, 
GIC_HIGHEST_SEC_PRIORITY
);

421 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
, 
GIC_HIGHEST_SEC_PRIORITY
);

422 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
, 
GIC_HIGHEST_SEC_PRIORITY
);

423 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
, 
GIC_HIGHEST_SEC_PRIORITY
);

424 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
, 
GIC_HIGHEST_SEC_PRIORITY
);

426 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

427 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

428 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

429 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

430 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

431 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

432 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

433 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

434 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

436 
	}
}

438 
	$mt_úq_£t_pﬁ¨ôy
(
úq
, 
pﬁ¨ôy
)

441 
off£t
, 
ªg_ödex
, 
vÆue
;

450 
off£t
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) & 0x1F;

451 
ªg_ödex
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) >> 5;

453 i‡(
pﬁ¨ôy
 == 0) {

455 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

456 
vÆue
 |(1 << 
off£t
);

457 
	`mmio_wrôe_32
((
INT_POL_CTL0
 + (
ªg_ödex
 * 4)), 
vÆue
);

460 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

461 
vÆue
 &~(0x1 << 
off£t
);

462 
	`mmio_wrôe_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4), 
vÆue
);

464 
	}
}

467 
	$mt_úq_£t_£ns
(
ba£
, 
úq
, 
£ns
)

469 
c⁄fig
;

471 i‡(
£ns
 =
MT_EDGE_SENSITIVE
)

473 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

474 
c⁄fig
 |(0x2 << (
úq
 % 16) * 2);

475 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

479 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

480 
c⁄fig
 &~(0x2 << (
úq
 % 16) * 2);

481 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

483 
	}
}

491 
	$gic_di°if_£tup
(
gicd_ba£
)

493 
˘r
, 
num_öts
, 
˘Ã
;

496 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
gicd_ba£
);

497 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

498 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
);

505 
num_öts
 = 
	`gicd_ªad_ty≥r
(
gicd_ba£
Ë& 
IT_LINES_NO_MASK
;

506 
num_öts
++;

507 
˘r
 = 0; cå < 
num_öts
; ctr++)

510 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 
˘r
 << 
IGROUPR_SHIFT
, ~0);

516 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

517 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
GIC_HIGHEST_SEC_PRIORITY
);

518 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
,

519 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

520 
	`mt_úq_£t_£ns
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
MT_EDGE_SENSITIVE
);

523 
	`mt_úq_£t_pﬁ¨ôy
(
WDT_IRQ_BIT_ID
, 
MT_POLARITY_LOW
);

525 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

530 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

531 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_TZ_WDOG
, 
GIC_HIGHEST_SEC_PRIORITY
);

532 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
IRQ_TZ_WDOG
,

533 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

534 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

537 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

539 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

540 
	}
}

543 
	$gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
)

545 
	`¥ötf
("GICD_CTLR=0x%08x\n", 
	`gicd_ªad_˘Ã
(
gicd_ba£
));

549 
	`¥ötf
("GICC_CTRL=0x%08x\n", 
	`gicc_ªad_˘Ã
(
gicc_ba£
));

550 
	`¥ötf
("GICC_PMR=0x%08x\n", 
	`gicc_ªad_pmr
(
gicc_ba£
));

551 
	}
}

554 
	$gic_£tup
()

556 
gicd_ba£
, 
gicc_ba£
;

558 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

559 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

561 
	`gic_˝uif_£tup
(
gicc_ba£
);

562 
	`gic_di°if_£tup
(
gicd_ba£
);

565 
i
, 
no_£c
;

566 
i
 = 0; i < 0xFF; i++)

568 
no_£c
 = 
	`gicd_gë_igrou¥
(
gicd_ba£
, 
i
);

569 
	`¥ötf
("úq = %d, group=0x%x(%s)\n", 
i
, 
no_£c
,Ço_sec ? "non-sec":"sec");

572 
	`gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
);

576 
	}
}

590 
uöt32_t
 
	$∂©_öãºu±_ty≥_to_löe
(
uöt32_t
 
ty≥
, uöt32_à
£curôy_°©e
)

592 
uöt32_t
 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

594 
	`as£π
(
ty≥
 =
INTR_TYPE_S_EL1
 ||

595 
ty≥
 =
INTR_TYPE_EL3
 ||

596 
ty≥
 =
INTR_TYPE_NS
);

598 
	`as£π
(
£curôy_°©e
 =
NON_SECURE
 || securôy_°©ê=
SECURE
);

605 #i‡
MT_GIC_ARCH
 == 2

606  
	`gicv2_öãºu±_ty≥_to_löe
(
gicc_ba£
, 
ty≥
);

610 
	}
}

612 #i‡
MT_GIC_ARCH
 == 2

618 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_ty≥
()

620 
uöt32_t
 
id
, 
gicc_ba£
;

622 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

623 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

626 i‡(
id
 < 1022)

627  
INTR_TYPE_S_EL1
;

629 i‡(
id
 =
GIC_SPURIOUS_INTERRUPT
)

630  
INTR_TYPE_INVAL
;

632  
INTR_TYPE_NS
;

633 
	}
}

640 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_id
()

642 
uöt32_t
 
id
, 
gicc_ba£
;

644 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

645 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

647 i‡(
id
 < 1022)

648  
id
;

650 i‡(
id
 == 1023)

651  
INTR_ID_UNAVAILABLE
;

657  
	`gicc_ªad_ahµú
(
gicc_ba£
);

658 
	}
}

664 
uöt32_t
 
	$∂©_ic_acknowÀdge_öãºu±
()

666  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

667 
	}
}

673 
	$∂©_ic_íd_of_öãºu±
(
uöt32_t
 
id
)

675 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
id
);

677 
	}
}

684 
uöt32_t
 
	$∂©_ic_gë_öãºu±_ty≥
(
uöt32_t
 
id
)

686 
uöt32_t
 
group
;

688 
group
 = 
	`gicd_gë_igrou¥
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
id
);

691 i‡(
group
 =
GRP0
)

692  
INTR_TYPE_S_EL1
;

694  
INTR_TYPE_NS
;

695 
	}
}

697 
uöt64_t
 
	$mt_úq_dump_°©us
(
uöt32_t
 
úq
)

699 
uöt32_t
 
di°_ba£
;

700 
bô
;

701 
uöt32_t
 
ªsu…
;

702 
uöt64_t
 
rc
 = 0;

704 
	`¥ötf
("[ATF GIC dump] irq = %d\n", 
úq
);

706 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

709 
bô
 = 1 << (
úq
 % 32);

710 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

711 
	`¥ötf
("[ATF GIC dump]É«bÀ = %x\n", 
ªsu…
);

712 
rc
 |
ªsu…
;

715 
bô
 = 1 << (
úq
 % 32);

717 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

718 
	`¥ötf
("[ATF GIC dump] grou∞%x (0x1:úq,0x0:fiq)\n", 
ªsu…
);

719 
rc
 |
ªsu…
 << 1;

722 
bô
 = 0xf‡<< ((
úq
 % 4)*8);

723 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IPRIORITYR
 + 
úq
 / 4 * 4Ë& 
bô
) >> ((irq % 4)*8));

724 
	`¥ötf
("[ATF GIC dump]Öri‹ôy = %x\n", 
ªsu…
);

725 
rc
 |
ªsu…
 << 2;

728 
bô
 = 0x3 << ((
úq
 % 16)*2);

730 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
úq
 / 16 * 4Ë& 
bô
) >> ((irq % 16)*2));

731 
	`¥ötf
("[ATF GIC dump] sísôivôy = %x (edge:0x1,Üevñ:0x0)\n", 
ªsu…
>>1);

732 
rc
 |(
ªsu…
>>1) << 10;

735 
bô
 = 1 << (
úq
 % 32);

736 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISPENDR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

737 
	`¥ötf
("[ATF GIC dump]Öídög sètu†%x\n", 
ªsu…
);

738 
rc
 |
ªsu…
 << 11;

741 
bô
 = 1 << (
úq
 % 32);

742 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISACTIVER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

743 
	`¥ötf
("[ATF GIC dump]á˘ivê°©u†%x\n", 
ªsu…
);

744 
rc
 |
ªsu…
 << 12;

747 
bô
 = 1 << (
úq
 % 32);

749 
ªsu…
 = ((
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
úq
-32Ë/ 32 * 4Ë& 
bô
)?1:0);

750 
	`¥ötf
("[ATF GIC dump]Öﬁ¨ôy = %x (0x0: high, 0x1:low)\n", 
ªsu…
);

751 
rc
 |
ªsu…
 << 13;

753  
rc
;

754 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_io_storage.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<io_drivî.h
>

34 
	~<io_fù.h
>

35 
	~<io_memm≠.h
>

36 
	~<io_°‹age.h
>

37 
	~<io_£miho°ög.h
>

38 
	~<£miho°ög.h
>

39 
	~<°rög.h
>

40 
	~"∂©_def.h
"

43 
io_∂©_d©a_t
 
	gio_d©a
;

44 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gsh_dev_c⁄
;

45 
uöçå_t
 
	gsh_dev_•ec
;

46 
uöçå_t
 
	gsh_öô_∑øms
;

47 
uöçå_t
 
	gsh_dev_h™dÀ
;

48 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gfù_dev_c⁄
;

49 
uöçå_t
 
	gfù_dev_•ec
;

50 
uöçå_t
 
	gfù_dev_h™dÀ
;

51 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gmemm≠_dev_c⁄
;

52 
uöçå_t
 
	gmemm≠_dev_•ec
;

53 
uöçå_t
 
	gmemm≠_öô_∑øms
;

54 
uöçå_t
 
	gmemm≠_dev_h™dÀ
;

56 c⁄° 
io_block_•ec_t
 
	gfù_block_•ec
 = {

57 .
off£t
 = 
FLASH0_BASE
,

58 .
	gÀngth
 = 
FLASH0_SIZE


61 c⁄° 
io_fûe_•ec_t
 
	gbl2_fûe_•ec
 = {

62 .
∑th
 = 
BL2_IMAGE_NAME
,

63 .
	gmode
 = 
FOPEN_MODE_RB


66 c⁄° 
io_fûe_•ec_t
 
	gbl31_fûe_•ec
 = {

67 .
∑th
 = 
BL31_IMAGE_NAME
,

68 .
	gmode
 = 
FOPEN_MODE_RB


71 c⁄° 
io_fûe_•ec_t
 
	gbl32_fûe_•ec
 = {

72 .
∑th
 = 
BL32_IMAGE_NAME
,

73 .
	gmode
 = 
FOPEN_MODE_RB


76 c⁄° 
io_fûe_•ec_t
 
	gbl33_fûe_•ec
 = {

77 .
∑th
 = 
BL33_IMAGE_NAME
,

78 .
	gmode
 = 
FOPEN_MODE_RB


81 
›í_fù
(c⁄° 
uöçå_t
 
•ec
);

82 
›í_memm≠
(c⁄° 
uöçå_t
 
•ec
);

84 
	s∂©_io_pﬁicy
 {

85 *
	mimage_«me
;

86 
uöçå_t
 *
	mdev_h™dÀ
;

87 
uöçå_t
 
	mimage_•ec
;

88 (*
	mcheck
)(c⁄° 
uöçå_t
 
	m•ec
);

91 c⁄° 
∂©_io_pﬁicy
 
	gpﬁicõs
[] = {

93 
FIP_IMAGE_NAME
,

94 &
memm≠_dev_h™dÀ
,

95 (
uöçå_t
)&
fù_block_•ec
,

96 
›í_memm≠


98 
BL2_IMAGE_NAME
,

99 &
fù_dev_h™dÀ
,

100 (
uöçå_t
)&
bl2_fûe_•ec
,

101 
›í_fù


103 
BL31_IMAGE_NAME
,

104 &
fù_dev_h™dÀ
,

105 (
uöçå_t
)&
bl31_fûe_•ec
,

106 
›í_fù


108 
BL32_IMAGE_NAME
,

109 &
fù_dev_h™dÀ
,

110 (
uöçå_t
)&
bl32_fûe_•ec
,

111 
›í_fù


113 
BL33_IMAGE_NAME
,

114 &
fù_dev_h™dÀ
,

115 (
uöçå_t
)&
bl33_fûe_•ec
,

116 
›í_fù


123 
	$›í_fù
(c⁄° 
uöçå_t
 
•ec
)

125 
ªsu…
 = 
IO_FAIL
;

128 
ªsu…
 = 
	`io_dev_öô
(
fù_dev_h™dÀ
, (
uöçå_t
)
FIP_IMAGE_NAME
);

129 i‡(
ªsu…
 =
IO_SUCCESS
) {

130 
	`INFO
("Using FIP\n");

133  
ªsu…
;

134 
	}
}

137 
	$›í_memm≠
(c⁄° 
uöçå_t
 
•ec
)

139 
ªsu…
 = 
IO_FAIL
;

140 
uöçå_t
 
loˇl_image_h™dÀ
;

142 
ªsu…
 = 
	`io_dev_öô
(
memm≠_dev_h™dÀ
, 
memm≠_öô_∑øms
);

143 i‡(
ªsu…
 =
IO_SUCCESS
) {

144 
ªsu…
 = 
	`io_›í
(
memm≠_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

145 i‡(
ªsu…
 =
IO_SUCCESS
) {

147 
	`io_˛o£
(
loˇl_image_h™dÀ
);

150  
ªsu…
;

151 
	}
}

154 
	$›í_£miho°ög
(c⁄° 
uöçå_t
 
•ec
)

156 
ªsu…
 = 
IO_FAIL
;

157 
uöçå_t
 
loˇl_image_h™dÀ
;

160 
ªsu…
 = 
	`io_dev_öô
(
sh_dev_h™dÀ
, 
sh_öô_∑øms
);

161 i‡(
ªsu…
 =
IO_SUCCESS
) {

162 
ªsu…
 = 
	`io_›í
(
sh_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

163 i‡(
ªsu…
 =
IO_SUCCESS
) {

164 
	`INFO
("Using Semi-hosting IO\n");

165 
	`io_˛o£
(
loˇl_image_h™dÀ
);

168  
ªsu…
;

169 
	}
}

171 
	$mt_io_£tup
 ()

173 
io_ªsu…
 = 
IO_FAIL
;

176 
	`io_öô
(&
io_d©a
);

179 
io_ªsu…
 = 
	`ªgi°î_io_dev_sh
(&
sh_dev_c⁄
);

180 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

182 
io_ªsu…
 = 
	`ªgi°î_io_dev_fù
(&
fù_dev_c⁄
);

183 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

185 
io_ªsu…
 = 
	`ªgi°î_io_dev_memm≠
(&
memm≠_dev_c⁄
);

186 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

189 
io_ªsu…
 = 
	`io_dev_›í
(
sh_dev_c⁄
, 
sh_dev_•ec
, &
sh_dev_h™dÀ
);

190 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

192 
io_ªsu…
 = 
	`io_dev_›í
(
fù_dev_c⁄
, 
fù_dev_•ec
, &
fù_dev_h™dÀ
);

193 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

195 
io_ªsu…
 = 
	`io_dev_›í
(
memm≠_dev_c⁄
, 
memm≠_dev_•ec
,

196 &
memm≠_dev_h™dÀ
);

197 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

200 ()
io_ªsu…
;

201 
	}
}

206 
	$∂©_gë_image_sour˚
(c⁄° *
image_«me
, 
uöçå_t
 *
dev_h™dÀ
,

207 
uöçå_t
 *
image_•ec
)

209 
ªsu…
 = 
IO_FAIL
;

210 c⁄° 
∂©_io_pﬁicy
 *
pﬁicy
;

212 i‡((
image_«me
 !
NULL
Ë&& (
dev_h™dÀ
 != NULL) &&

213 (
image_•ec
 !
NULL
)) {

214 
pﬁicy
 = 
pﬁicõs
;

215 
pﬁicy
->
image_«me
 !
NULL
) {

216 i‡(
	`°rcmp
(
pﬁicy
->
image_«me
, image_name) == 0) {

217 
ªsu…
 = 
pﬁicy
->
	`check
’ﬁicy->
image_•ec
);

218 i‡(
ªsu…
 =
IO_SUCCESS
) {

219 *
image_•ec
 = 
pﬁicy
->image_spec;

220 *
dev_h™dÀ
 = *(
pﬁicy
->dev_handle);

223 
ªsu…
 = 
	`›í_£miho°ög
(

224 
pﬁicy
->
image_•ec
);

225 i‡(
ªsu…
 =
IO_SUCCESS
) {

226 *
dev_h™dÀ
 = 
sh_dev_h™dÀ
;

227 *
image_•ec
 =

228 
pﬁicy
->
image_•ec
;

232 
pﬁicy
++;

235 
ªsu…
 = 
IO_FAIL
;

237  
ªsu…
;

238 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_pm.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bakîy_lock.h
>

34 
	~<cci400.h
>

35 
	~<scu.h
>

36 
	~<mmio.h
>

37 
	~<∂©f‹m.h
>

38 
	~<c⁄sﬁe.h
>

39 
	~<debug.h
>

40 
	~<∂©f‹m_def.h
>

41 
	~<psci.h
>

42 
	~<powî_åa˚r.h
>

43 
	~<°dio.h
>

44 
	~"drivîs/pwrc/∂©_pwrc.h
"

45 
	~"∂©_def.h
"

46 
	~"∂©_¥iv©e.h
"

47 
	~"Ørch64/∂©_hñ≥rs.h
"

49 
	~"mt_˝uxg±.h
"

51 
	s_ñ3_d‹m™t_d©a
 {

53 
	mmp0_l2e˘Ã_ñ1
;

54 
	mmp0_l2r°dißbÀ
;

56 } 
	gñ3_d‹m™t_d©a
[1] = {{ .
mp0_l2e˘Ã_ñ1
 = 0xDEADDEAD }};

62 
	$mt_affö°_°™dby
(
powî_°©e
)

64 
èrgë_afÊvl
;

67 
èrgë_afÊvl
 = 
	`psci_gë_p°©e_afÊvl
(
powî_°©e
);

73 i‡(
èrgë_afÊvl
 !
MPIDR_AFFLVL0
)

74  
PSCI_E_INVALID_PARAMS
;

80 
	`dsb
();

81 
	`wfi
();

83  
PSCI_E_SUCCESS
;

84 
	}
}

90 
	$mt_affö°_⁄
(
mpidr
,

91 
£c_íåypoöt
,

92 
ns_íåypoöt
,

93 
afÊvl
,

94 
°©e
)

96 
rc
 = 
PSCI_E_SUCCESS
;

97 
löór_id
;

98 
maûbox_t
 *
mt_mboxes
;

104 i‡(
afÊvl
 !
MPIDR_AFFLVL0
)

105 
exô
;

107 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

108 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

109 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

110 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

113 
	`bl31_⁄_íåypoöt
();

114 i‡(
löór_id
 >= 4) {

115 
	`mmio_wrôe_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4), ()
bl31_⁄_íåypoöt
);

116 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4)));

118 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
), ()
bl31_⁄_íåypoöt
);

119 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
)));

122 
exô
:

123  
rc
;

124 
	}
}

138 
	$mt_affö°_off
(
mpidr
,

139 
afÊvl
,

140 
°©e
)

142 
rc
 = 
PSCI_E_SUCCESS
;

143 
gicc_ba£
, 
e˘Ã
;

144 
˝u_£tup
, 
cci_£tup
;

146 
afÊvl
) {

147 
MPIDR_AFFLVL3
:

148 
MPIDR_AFFLVL2
:

150 
MPIDR_AFFLVL1
:

151 i‡(
°©e
 =
PSCI_STATE_OFF
) {

156 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

157 i‡(
cci_£tup
) {

158 
	`cci_dißbÀ_cohîícy
(
mpidr
);

160 
	`dißbÀ_scu
(
mpidr
);

162 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_DOWN
);

166 
MPIDR_AFFLVL0
:

167 i‡(
°©e
 =
PSCI_STATE_OFF
) {

173 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

174 i‡(
˝u_£tup
) {

175 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

176 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

177 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

185 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

186 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

188 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_DOWN
);

193 
	`as£π
(0);

196  
rc
;

197 
	}
}

211 
	$mt_affö°_su•íd
(
mpidr
,

212 
£c_íåypoöt
,

213 
ns_íåypoöt
,

214 
afÊvl
,

215 
°©e
)

217 
rc
 = 
PSCI_E_SUCCESS
;

218 
gicc_ba£
, 
e˘Ã
;

219 
˝u_£tup
, 
cci_£tup
, 
löór_id
;

220 
maûbox_t
 *
mt_mboxes
;

222 
afÊvl
) {

223 
MPIDR_AFFLVL2
:

224 i‡(
°©e
 =
PSCI_STATE_OFF
) {

225 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

228 
p
->
mp0_l2e˘Ã_ñ1
 = 
	`ªad_l2e˘Ã
();

231 
p
->
mp0_l2r°dißbÀ
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

232 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

233 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
);

236 
	`gíîic_timî_backup
();

238 
	`gic_di°_ßve
();

242 
MPIDR_AFFLVL1
:

243 i‡(
°©e
 =
PSCI_STATE_OFF
) {

248 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

249 i‡(
cci_£tup
) {

250 
	`cci_dißbÀ_cohîícy
(
mpidr
);

252 
	`dißbÀ_scu
(
mpidr
);

254 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_SUSPEND
);

258 
MPIDR_AFFLVL0
:

259 i‡(
°©e
 =
PSCI_STATE_OFF
) {

261 
	`mmio_wrôe_32
(
MP0_MISC_CONFIG3
, 
	`mmio_ªad_32
(MP0_MISC_CONFIG3) | (1<<12));

266 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

267 i‡(
˝u_£tup
) {

268 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

269 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

270 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

274 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

275 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

276 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

277 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

285 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

286 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

287 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_SUSPEND
);

292 
	`as£π
(0);

295  
rc
;

296 
	}
}

299 
	$w‹k¨ound_826319
(
mpidr
)

301 
l2a˘Ã
;

304 i‡(
mpidr
 & 
MPIDR_CPU_MASK
)

313 
l2a˘Ã
 = 
	`ªad_l2a˘Ã
();

314 
l2a˘Ã
 = (l2actlr & ~(1<<14)) | (1<<3);

315 
	`wrôe_l2a˘Ã
(
l2a˘Ã
);

318 
	}
}

320 
	#w‹k¨ound_826319
(Ëdÿ{} 0)

	)

324 
	$w‹k¨ound_836870
(
mpidr
)

326 
˝ua˘Ã
;

337 
˝ua˘Ã
 = 
	`ªad_˝ua˘Ã
();

338 
˝ua˘Ã
 = cpuactlr | (1<<24);

339 
	`wrôe_˝ua˘Ã
(
˝ua˘Ã
);

342 
	}
}

344 
	#w‹k¨ound_836870
(Ëdÿ{} 0)

	)

354 
	$mt_affö°_⁄_föish
(
mpidr
,

355 
afÊvl
,

356 
°©e
)

358 
rc
 = 
PSCI_E_SUCCESS
;

359 
löór_id
, 
˝u_£tup
;

360 
maûbox_t
 *
mt_mboxes
;

361 
gicd_ba£
, 
gicc_ba£
, 
e˘Ã
;

363 
afÊvl
) {

365 
MPIDR_AFFLVL2
:

366 i‡(
°©e
 =
PSCI_STATE_OFF
) {

370 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

371 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

376 
MPIDR_AFFLVL1
:

378 i‡(
°©e
 =
PSCI_STATE_OFF
) {

380 
	`w‹k¨ound_826319
(
mpidr
);

381 
	`íabÀ_scu
(
mpidr
);

382 
	`mt_cci_£tup
();

383 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_UP
);

387 
MPIDR_AFFLVL0
:

392 
	`w‹k¨ound_836870
(
mpidr
);

398 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

399 i‡(
˝u_£tup
) {

400 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

401 
e˘Ã
 |
CPUECTLR_SMP_BIT
;

402 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

406 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

407 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

408 
mt_mboxes
[
löór_id
].
vÆue
 = 0;

409 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

412 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

414 
	`gic_˝uif_£tup
(
gicc_ba£
);

420 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

421 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

422 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

423 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

424 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

426 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) |

427 (1 << 
	`CNTNSAR_NS_SHIFT
(1));

428 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

431 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

433 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_UP
);

437 
	`as£π
(0);

442  
rc
;

443 
	}
}

452 
	$mt_affö°_su•íd_föish
(
mpidr
,

453 
afÊvl
,

454 
°©e
)

456 
rc
 = 
PSCI_E_SUCCESS
;

458 
afÊvl
) {

459 
MPIDR_AFFLVL2
:

460 i‡(
°©e
 =
PSCI_STATE_OFF
) {

461 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

463 i‡(
p
->
mp0_l2e˘Ã_ñ1
==0xDEADDEAD)

464 
	`∑nic
();

466 
	`wrôe_l2e˘Ã
(
p
->
mp0_l2e˘Ã_ñ1
);

470 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

471 (
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
)

472 | (
p
->
mp0_l2r°dißbÀ
 & 
L2RSTDISABLE
));

474 
	`gic_£tup
();

475 
	`gic_di°_ª°‹e
();

480 
MPIDR_AFFLVL1
:

481 
MPIDR_AFFLVL0
:

482  
	`mt_affö°_⁄_föish
(
mpidr
, 
afÊvl
, 
°©e
);

485 
	`as£π
(0);

488  
rc
;

489 
	}
}

495 c⁄° 
∂©_pm_›s_t
 
	gmt_∂©_pm_›s
 = {

496 
mt_affö°_°™dby
,

497 
mt_affö°_⁄
,

498 
mt_affö°_off
,

499 
mt_affö°_su•íd
,

500 
mt_affö°_⁄_föish
,

501 
mt_affö°_su•íd_föish
,

508 
	$∂©f‹m_£tup_pm
(c⁄° 
∂©_pm_›s_t
 **
∂©_›s
)

510 *
∂©_›s
 = &
mt_∂©_pm_›s
;

512 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_private.h

31 #i‚de‡
__PLAT_PRIVATE_H__


32 
	#__PLAT_PRIVATE_H__


	)

34 
	~<bl_comm⁄.h
>

35 
	~<∂©f‹m_def.h
>

38 vﬁ©ûê
	smaûbox
 {

39 
vÆue


40 
__©åibuã__
((
__Æig√d__
(
CACHE_WRITEBACK_GRANULE
)));

41 } 
	tmaûbox_t
;

48 
	sbl2_to_bl31_∑øms_mem
 {

49 
bl31_∑øms_t
 
	mbl31_∑øms
;

50 
image_öfo_t
 
	mbl31_image_öfo
;

51 
image_öfo_t
 
	mbl32_image_öfo
;

52 
image_öfo_t
 
	mbl33_image_öfo
;

53 
íåy_poöt_öfo_t
 
	mbl33_ï_öfo
;

54 
íåy_poöt_öfo_t
 
	mbl32_ï_öfo
;

55 
íåy_poöt_öfo_t
 
	mbl31_ï_öfo
;

56 } 
	tbl2_to_bl31_∑øms_mem_t
;

61 
	gmemöfo
;

66 
mt_c⁄figuª_mmu_ñ1
(
tŸÆ_ba£
,

67 
tŸÆ_size
,

72 
mt_c⁄figuª_mmu_ñ3
(
tŸÆ_ba£
,

73 
tŸÆ_size
,

78 
mt_gë_cfgv¨
();

79 
mt_c⁄fig_£tup
();

81 #i‡
RESET_TO_BL31


82 
mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

83 
íåy_poöt_öfo
 *
èrgë_íåy_öfo
);

85 
mt_cci_£tup
();

88 
gic_˝uif_dó˘iv©e
();

89 
gic_˝uif_£tup
();

90 
gic_p˝u_di°if_£tup
();

91 
gic_£tup
();

94 
mt_£tup_t›ﬁogy
();

97 
mt_io_£tup
();

100 
mt_£curôy_£tup
();

101 
uöt32_t
 
gë_devöfo_wôh_ödex
(uint32_t);

103 
mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo
 *
bl32_ï
);

106 
mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo
 *
bl33_ï
);

108 
íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_security.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<tzc400.h
>

34 
	~<∂©f‹m.h
>

35 
	~"∂©_def.h
"

36 
	~"∂©_¥iv©e.h
"

39 
	#FILTER_SHIFT
(
fûãr
Ë(1 << fûãr)

	)

47 
	$mt_£curôy_£tup
()

49 
tzc_ö°™˚_t
 
c⁄åﬁÀr
;

60 i‡(!
	`mt_gë_cfgv¨
(
CONFIG_HAS_TZC
))

67 
	`INFO
("Configuring TrustZone Controller\n");

74 
c⁄åﬁÀr
.
ba£
 = 
TZC400_BASE
;

75 
c⁄åﬁÀr
.
aid_width
 = 
MT_AID_WIDTH
;

76 
	`tzc_öô
(&
c⁄åﬁÀr
);

90 
	`tzc_dißbÀ_fûãrs
(&
c⁄åﬁÀr
);

104 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 1,

105 
DRAM1_BASE
, 
DRAM1_END
 - 
DRAM1_SEC_SIZE
,

106 
TZC_REGION_S_NONE
,

107 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

108 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

109 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

110 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

111 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

114 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 3,

115 (
DRAM1_END
 - 
DRAM1_SEC_SIZE
) + 1 , DRAM1_END,

116 
TZC_REGION_S_RDWR
,

120 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 2,

121 
DRAM2_BASE
, 
DRAM2_END
, 
TZC_REGION_S_NONE
,

122 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

123 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

124 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

125 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

126 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

133 
	`tzc_£t_a˘i⁄
(&
c⁄åﬁÀr
, 
TZC_ACTION_ERR
);

136 
	`tzc_íabÀ_fûãrs
(&
c⁄åﬁÀr
);

137 
	}
}

139 
uöt32_t
 
	$gë_devöfo_wôh_ödex
(
uöt32_t
 
i
)

141 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

143 if–
i
 < 
DEVINFO_SIZE
){

144  
ãórg
->
devöfo
[
i
];

148 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_tbase.c

12 
	~<as£π.h
>

13 
	~<debug.h
>

14 
	~<°rög.h
>

15 
	~<tzc400.h
>

16 
	~<∂©f‹m.h
>

17 
	~<mmio.h
>

18 
	~<∂©_def.h
>

19 
	~"∂©_¥iv©e.h
"

21 
	~<¨ch_hñ≥rs.h
>

22 
	~<tba£_¥iv©e.h
>

25 
	#PLAT_TBASE_INPUT_HWIDENTITY
 (0x1)

	)

26 
	#PLAT_TBASE_INPUT_HWKEY
 (0x2)

	)

27 
	#PLAT_TBASE_INPUT_RNG
 (0x3)

	)

29 
	#PLAT_TBASE_INPUT_OK
 ((
uöt32_t
)0)

	)

30 
	#PLAT_TBASE_INPUT_ERROR
 ((
uöt32_t
)-1)

	)

35 
uöt32_t
 
	$∂©_tba£_öput
(
uöt64_t
 
D©aId
,uöt64_t* 
Lígth
,* 
out
)

37 
uöt32_t
 
Sètus
 = 
PLAT_TBASE_INPUT_OK
;

38 
uöt32_t
 
Àngth
 = 0, 
idx
 = 0;

41  
D©aId
 )

43 
PLAT_TBASE_INPUT_HWIDENTITY
:

45 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

47 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
hwuid
)/(uint32_t)); idx++)

49 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
hwuid
[idx];

50 
Àngth
 +(
uöt32_t
);

55 
PLAT_TBASE_INPUT_HWKEY
:

57 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

59 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
HRID
)/(uint32_t)) ; idx++)

61 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
HRID
[idx];

62 
Àngth
 +(
uöt32_t
);

64 *
Lígth
 = 
Àngth
;

67 
PLAT_TBASE_INPUT_RNG
:

69 
uöt32_t
 
vÆue
 = 0;

70 
	`mmio_wrôe_32
(
TRNG_PDN_CLR
, 0x100);

71 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

72 
vÆue
 |
TRNG_CTRL_START
;

73 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

74 0 =(
	`mmio_ªad_32
(
TRNG_CTRL
Ë& 
TRNG_CTRL_RDY
));

75 ((
uöt32_t
*)
out
)[0] = 
	`mmio_ªad_32
(
TRNG_DATA
);

76 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

77 
vÆue
 &~
TRNG_CTRL_START
;

78 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

79 
	`mmio_wrôe_32
(
TRNG_PDN_SET
, 0x100);

80 *
Lígth
 = 4;

85 
Sètus
 = 
PLAT_TBASE_INPUT_ERROR
;

89  
Sètus
;

90 
	}
}

93 
uöt32_t
 
	$∂©_tba£_dump
()

95 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
());

97 
	`¥ötf
–"c‹ê%d i†dum≥d !\n", ()
löór_id
 );

103 
	`´e_wdt_dump
();

107 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_topology.c

31 
	~<as£π.h
>

32 
	~<∂©f‹m_def.h
>

34 
	~<psci.h
>

35 
	~"drivîs/pwrc/∂©_pwrc.h
"

38 
	#AFFINST_INVAL
 0xff

	)

48 
	safföôy_öfo
 {

49 
	msiblög
;

50 
	mchûd
;

51 
	m°©e
;

52 
	md©a
;

53 } 
	tafföôy_öfo_t
;

61 
afföôy_öfo_t
 
	gmt_aff1_t›ﬁogy_m≠
[
PLATFORM_CLUSTER_COUNT
];

62 
afföôy_öfo_t
 
	gmt_aff0_t›ﬁogy_m≠
[
PLATFORM_CORE_COUNT
];

65 
	gt›ﬁogy_£tup_d⁄e
;

78 
	$∂©_gë_aff_cou¡
(
aff_lvl
,

79 
mpidr
)

81 
aff_cou¡
 = 1, 
˘r
;

82 
∑ª¡_aff_id
;

84 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

86 
aff_lvl
) {

93 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF3_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

94 
	`as£π
(
∑ª¡_aff_id
 == 0);

103 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF2_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

104 
	`as£π
(
∑ª¡_aff_id
 == 0);

107 
˘r
 = 0;

108 
mt_aff1_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

109 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[˘r].
siblög
) {

110 
aff_cou¡
++;

116 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

117 
	`as£π
(
∑ª¡_aff_id
 < 
PLATFORM_CLUSTER_COUNT
);

120 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[
∑ª¡_aff_id
].
chûd
;

121 
mt_aff0_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

122 
˘r
 = 
mt_aff0_t›ﬁogy_m≠
[˘r].
siblög
) {

123 
aff_cou¡
++;

128 
	`as£π
(0);

131  
aff_cou¡
;

132 
	}
}

138 
	$∂©_gë_max_afÊvl
()

140  
MPIDR_AFFLVL2
;

141 
	}
}

158 
	$∂©_gë_aff_°©e
(
aff_lvl
,

159 
mpidr
)

161 
aff_°©e
 = 
PSCI_AFF_ABSENT
, 
idx
;

162 
idx
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

164 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

166 
aff_lvl
) {

169 i‡(
	`∂©_gë_max_afÊvl
(Ë>
aff_lvl
)

170 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

175 
aff_°©e
 = 
mt_aff1_t›ﬁogy_m≠
[
idx
].
°©e
;

182 
idx
 = 
mt_aff1_t›ﬁogy_m≠
[idx].
chûd
;

183 
idx
 +(
mpidr
 >> 
MPIDR_AFF0_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

184 
aff_°©e
 = 
mt_aff0_t›ﬁogy_m≠
[
idx
].
°©e
;

187 
	`as£π
(0);

190  
aff_°©e
;

191 
	}
}

198 
	$mt_£tup_t›ﬁogy
()

200 
aff0
, 
aff1
, 
aff_°©e
, 
aff0_off£t
 = 0;

201 
mpidr
;

203 
t›ﬁogy_£tup_d⁄e
 = 0;

205 
aff1
 = 0;áff1 < 
PLATFORM_CLUSTER_COUNT
;áff1++) {

207 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
chûd
 = 
aff0_off£t
;

208 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
siblög
 =áff1 + 1;

210 
aff0
 = 0;áff0 < 
PLATFORM_MAX_CPUS_PER_CLUSTER
;áff0++) {

212 
mpidr
 = 
aff1
 << 
MPIDR_AFF1_SHIFT
;

213 
mpidr
 |
aff0
 << 
MPIDR_AFF0_SHIFT
;

215 i‡(
	`mt_pwrc_ªad_psy§
(
mpidr
Ë!
PSYSR_INVALID
) {

220 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

221 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 =

222 
PSCI_AFF_PRESENT
;

224 
aff_°©e
 = 
PSCI_AFF_ABSENT
;

227 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

228 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 = 
PSCI_AFF_PRESENT
;

230 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
chûd
 = 
AFFINST_INVAL
;

231 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
°©e
 = 
aff_°©e
;

232 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
siblög
 =

233 
aff0_off£t
 + 1;

236 
aff0_off£t
++;

240 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
 - 1].
siblög
 = 
AFFINST_INVAL
;

244 
mt_aff1_t›ﬁogy_m≠
[
aff1
 - 1].
siblög
 = 
AFFINST_INVAL
;

246 
t›ﬁogy_£tup_d⁄e
 = 1;

248 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/platform.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 #O¿
MTK_∂©f‹m
, 
the
 
TSP
 
ˇn
 
execuã
 
eôhî
 
‰om
 
Tru°ed
 
SRAM
 
‹
 Tru°ed 
DRAM
.

25 #Tru°ed 
SRAM
 
is
 
the
 .

26 
	gTSP_RAM_LOCATION
 :
t§am


28 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
t§am
)

29 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZRAM


30 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
tdøm
)

31 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZDRAM


33 
$
(
îr‹
 "Unsupported TSP_RAM_LOCATION value")

34 
ídif


36 #Pro˚s†
TSP_RAM_LOCATION_ID
 
Êag


37 
$
(
evÆ
 
	$$
(
ˇŒ
 
add_deföe
,
TSP_RAM_LOCATION_ID
))

39 
PLAT_INCLUDES
 :-
I∂©
/
mt6580
/
ö˛ude
/ -I∂©/mt6580/ -I∂©/mt6580/
drivîs
/
log
 -I∂©/mt6580/drivîs/
timî
/ -I∂©/mt6580/drivîs/
l2c
/

42 
PLAT_BL_COMMON_SOURCES
 :
drivîs
/
io
/
io_fù
.
c
 \

43 
drivîs
/
io
/
io_memm≠
.
c
 \

44 
drivîs
/
io
/
io_£miho°ög
.
c
 \

45 
lib
/
mmio
.
c
 \

46 
lib
/
Ørch64
/
sy§eg_hñ≥rs
.
S
 \

47 
lib
/
Ørch64
/
xœt_èbÀs
.
c
 \

48 
lib
/
£miho°ög
/£miho°ög.
c
 \

49 
lib
/
£miho°ög
/
Ørch64
/
£miho°ög_ˇŒ
.
S
 \

50 
∂©
/
comm⁄
/
Ørch64
/
∂©_comm⁄
.
c
 \

51 
∂©
/
mt6580
/
∂©_io_°‹age
.
c
 \

52 
∂©
/
comm⁄
/
fiq_smp_ˇŒ
.
c


54 
BL1_SOURCES
 +
drivîs
/
¨m
/
cci400
/cci400.
c
 \

55 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

56 
∂©
/
mt6580
/
bl1_∂©_£tup
.
c
 \

57 
∂©
/
mt6580
/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

58 
∂©
/
mt6580
/
Ørch64
/
∂©_hñ≥rs
.
S


60 
BL2_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

61 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

62 
∂©
/
mt6580
/
bl2_∂©_£tup
.
c
 \

63 
∂©
/
mt6580
/
∂©_£curôy
.
c
 \

64 
∂©
/
mt6580
/
Ørch64
/
∂©f‹m_comm⁄
.
c


66 
BL31_SOURCES
 +
drivîs
/
¨m
/
gic
/
gic_v2
.
c
 \

67 
drivîs
/
¨m
/
gic
/
gic_v3
.
c
 \

68 
drivîs
/
¨m
/
gic
/
Ørch64
/
gic_v3_sy§egs
.
S
 \

69 
drivîs
/
¨m
/
cci400
/cci400.
c
 \

70 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_mp_°ack
.
S
 \

71 
∂©
/
mt6580
/
bl31_∂©_£tup
.
c
 \

72 
∂©
/
mt6580
/
∂©_gic
.
c
 \

73 
∂©
/
mt6580
/
∂©_pm
.
c
 \

74 
∂©
/
mt6580
/
∂©_t›ﬁogy
.
c
 \

75 
∂©
/
mt6580
/
scu
.
c
 \

76 
∂©
/
mt6580
/
powî_åa˚r
.
c
 \

77 
∂©
/
mt6580
/
maûbox
.
c
 \

78 
∂©
/
mt6580
/
Ørch64
/
∂©_hñ≥rs
.
S
 \

79 
∂©
/
mt6580
/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

80 
∂©
/
mt6580
/
drivîs
/
pwrc
/
∂©_pwrc
.
c
 \

81 
∂©
/
mt6580
/
drivîs
/
u¨t
/u¨t.
c
 \

82 
∂©
/
mt6580
/
drivîs
/
timî
/
mt_˝uxg±
.
c
 \

83 
∂©
/
mt6580
/
drivîs
/
l2c
/l2c.
c


85 
BL31_SOURCES
 +
∂©
/
mt6580
/
sù_svc
/
sù_svc_comm⁄
.
c
 \

86 
∂©
/
mt6580
/
sù_svc
/
sù_svc_£tup
.
c
 \

87 
∂©
/
mt6580
/
drivîs
/
log
/log.
c


89 
	`i„q
 (
$
{
RESET_TO_BL31
}, 1)

90 
	gBL31_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

91 
∂©
/
mt6580
/
∂©_£curôy
.
c


92 
ídif


94 
i„q
 (
$
{
SPD
}, 
tba£
)

95 
	gBL31_SOURCES
 +
∂©
/
mt6580
/
∂©_tba£
.
c


96 
ídif


98 #Fœg 
u£d
 
by
 
the
 
MTK_∂©f‹m
 
p‹t
 
to
 
dëîmöe
Åhê
vîsi⁄
 
of
 
ARM
 
GIC
 
¨chôe˘uª


99 #tÿ
u£
 
öãºu±
 
m™agemít
 
ö
 
EL3
.

100 
MT_GIC_ARCH
 := 2

101 
$
(
evÆ
 $(
ˇŒ
 
add_deföe
,
MT_GIC_ARCH
))

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/power_tracer.c

1 
	~<¨ch.h
>

2 
	~<powî_åa˚r.h
>

3 
	~<°dio.h
>

6 
	#åa˚_log
(...Ë
	`¥ötf
("psci: " 
__VA_ARGS__
)

	)

8 
	#åa˚_log
(...)

	)

11 
	$åa˚_powî_Êow
(
mpidr
, 
mode
) {

12 
mode
) {

13 
CPU_UP
:

14 
	`åa˚_log
("core %d:%d ON\n",

15 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

16 (
mpidr
 & 
MPIDR_CPU_MASK
));

18 
CPU_DOWN
:

19 
	`åa˚_log
("core %d:%d OFF\n",

20 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

21 (
mpidr
 & 
MPIDR_CPU_MASK
));

23 
CPU_SUSPEND
:

24 
	`åa˚_log
("core %d:%d SUSPEND\n",

25 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

26 (
mpidr
 & 
MPIDR_CPU_MASK
));

28 
CLUSTER_UP
:

29 
	`åa˚_log
("˛u°î %d ON\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

31 
CLUSTER_DOWN
:

32 
	`åa˚_log
("˛u°î %d OFF\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

34 
CLUSTER_SUSPEND
:

35 
	`åa˚_log
("˛u°î %d SUSPEND\n", (
mpidr
 & 
MPIDR_CPU_MASK
));

38 
	`åa˚_log
("unknownÖower mode\n");

41 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/scu.c

1 
	~<¨ch.h
>

2 
	~<∂©f‹m_def.h
>

3 
	~<mmio.h
>

5 
	$dißbÀ_scu
(
mpidr
) {

6 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

7 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË| 
ACINACTM
);

8 
	}
}

10 
	$íabÀ_scu
(
mpidr
) {

11 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

12 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË& ~
ACINACTM
);

13 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/sip_svc/sip_private.h

38 #i‚de‡
__SIP_PRIVATE_H__


39 
	#__SIP_PRIVATE_H__


	)

41 
	~<¨ch.h
>

42 
	~<bakîy_lock.h
>

48 
uöt64_t
 
sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

49 
uöt64_t
 
x1
,

50 
uöt64_t
 
x2
,

51 
uöt64_t
 
x3
,

52 
uöt64_t
 
x4
,

53 *
cookõ
,

54 *
h™dÀ
,

55 
uöt64_t
 
Êags
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/sip_svc/sip_svc_common.c

38 
	~<¨ch.h
>

39 
	~<¨ch_hñ≥rs.h
>

40 
	~<as£π.h
>

41 
	~<ru¡ime_svc.h
>

42 
	~<debug.h
>

43 
	~<sù_svc.h
>

44 
	~<sù_îr‹.h
>

45 
	~<∂©f‹m.h
>

46 
	~<mmio.h
>

47 
	~"sù_¥iv©e.h
"

48 
	~"l2c.h
"

53 
	skî√l_öfo
 {

54 
uöt64_t
 
	mpc
;

55 
uöt64_t
 
	mr0
;

56 
uöt64_t
 
	mr1
;

59 
kî√l_öfo
 
	gk_öfo
;

61 
	$ßve_kî√l_öfo
(
uöt64_t
 
pc
, uöt64_à
r0
, uöt64_à
r1
)

63 
k_öfo
.
pc
=pc;

64 
k_öfo
.
r0
=r0;

65 
k_öfo
.
r1
=r1;

66 
	}
}

68 
uöt64_t
 
	$gë_kî√l_öfo_pc
()

70  
k_öfo
.
pc
;

71 
	}
}

73 
uöt64_t
 
	$gë_kî√l_öfo_r0
()

75  
k_öfo
.
r0
;

76 
	}
}

78 
uöt64_t
 
	$gë_kî√l_öfo_r1
()

80  
k_öfo
.
r1
;

81 
	}
}

83 
bl31_¥ï¨e_k64_íåy
();

84 
ñ3_exô
();

90 
uöt64_t
 
	gmcusys_wrôe_cou¡
 = 0;

91 
uöt64_t
 
	$sù_mcusys_wrôe
(
ªg_addr
, 
ªg_vÆue
)

93 if((
ªg_addr
 & 0xFFFF0000Ë!(
MCUCFG_BASE
 & 0xFFFF0000))

94  
SIP_SVC_E_INVALID_R™ge
;

97 if(–
MP0_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP0_MISC_CONFIG9
 ) ||

98 –
MP1_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP1_MISC_CONFIG9
 )) {

99  
SIP_SVC_E_PERMISSION_DENY
;

102 
	`mmio_wrôe_32
(
ªg_addr
, 
ªg_vÆue
);

103 
	`dsb
();

105 
mcusys_wrôe_cou¡
++;

107  
SIP_SVC_E_SUCCESS
;

108 
	}
}

113 
uöt64_t
 
	$sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

114 
uöt64_t
 
x1
,

115 
uöt64_t
 
x2
,

116 
uöt64_t
 
x3
,

117 
uöt64_t
 
x4
,

118 *
cookõ
,

119 *
h™dÀ
,

120 
uöt64_t
 
Êags
)

122 
uöt64_t
 
rc
;

123 
uöt32_t
 
ns
;

124 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

127 
ns
 = 
	`is_ˇŒî_n⁄_£cuª
(
Êags
);

133 
smc_fid
) {

134 
MTK_SIP_TBASE_HWUID_AARCH32
:

136 i‡(
ns
)

137 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

138 
	`SMC_RET4
(
h™dÀ
, 
ãórg
->
hwuid
[0],Åeearg->hwuid[1],

139 
ãórg
->
hwuid
[2],Åeearg->hwuid[3]);

142 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH32
:

143 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH64
:

144 
rc
 = 
	`sù_mcusys_wrôe
(
x1
, 
x2
);

146 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH32
:

147 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH64
:

148 
rc
 = 
mcusys_wrôe_cou¡
;

150 
MTK_SIP_KERNEL_TMP_AARCH32
:

151 
	`¥ötf
("save kernel info\n");

152 
	`ßve_kî√l_öfo
(
x1
, 
x2
, 
x3
);

153 
	`¥ötf
("end bl31_prepare_k64_entry...\n");

154 
	`bl31_¥ï¨e_k64_íåy
();

155 
	`¥ötf
("el3_exit\n");

156 
	`SMC_RET0
(
h™dÀ
);

158 
MTK_SIP_KERNEL_L2_SHARING_AARCH32
:

159 
MTK_SIP_KERNEL_L2_SHARING_AARCH64
:

160 
	`¥ötf
("config L2$ size\n");

161 
rc
 = 
	`swôch_L2_size
(
x1
, 
x2
, 
x3
);

162 
	`¥ötf
("config L2$ size done\n");

164 #i‡
DEBUG


165 
MTK_SIP_KERNEL_GIC_DUMP_AARCH32
:

166 
MTK_SIP_KERNEL_GIC_DUMP_AARCH64
:

167 
rc
 = 
	`mt_úq_dump_°©us
(
x1
);

170 
MTK_SIP_KERNEL_WDT_AARCH32
:

171 
MTK_SIP_KERNEL_WDT_AARCH64
:

172 
wdt_kî√l_cb_addr
 = 
x1
;

173 
	`¥ötf
("MTK_SIP_KERNEL_WDT : 0x%∞\n", 
wdt_kî√l_cb_addr
);

174 
	`¥ötf
("teearg->atf_aee_debug_buf_start : 0x%llx \n",

175 
ãórg
->
©f_´e_debug_buf_°¨t
);

176 
rc
 = 
ãórg
->
©f_´e_debug_buf_°¨t
;

179 
rc
 = 
SMC_UNK
;

180 
	`WARN
("Unim∂emíãd SIP CÆl: 0x%x \n", 
smc_fid
);

183 
	`SMC_RET1
(
h™dÀ
, 
rc
);

184 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/sip_svc/sip_svc_setup.c

38 
	~<debug.h
>

39 
	~<ru¡ime_svc.h
>

40 
	~<sù_svc.h
>

41 
	~<°döt.h
>

42 
	~<uuid.h
>

43 
	~"sù_¥iv©e.h
"

46 
DEFINE_SVC_UUID
(
mtk_sù_svc_uid
,

52 
öt32_t
 
	$sù_svc_£tup
()

59 
	}
}

65 
uöt64_t
 
	$sù_svc_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

66 
uöt64_t
 
x1
,

67 
uöt64_t
 
x2
,

68 
uöt64_t
 
x3
,

69 
uöt64_t
 
x4
,

70 *
cookõ
,

71 *
h™dÀ
,

72 
uöt64_t
 
Êags
)

77 i‡(
	`is_sù_fid
(
smc_fid
)) {

78  
	`sù_smc_h™dÀr
(
smc_fid
, 
x1
, 
x2
, 
x3
, 
x4
, 
cookõ
,

79 
h™dÀ
, 
Êags
);

82 
smc_fid
) {

83 
MTK_SIP_SVC_CALL_COUNT
:

88 
	`SMC_RET1
(
h™dÀ
, 
MTK_SIP_SVC_NUM_CALLS
);

90 
MTK_SIP_SVC_UID
:

92 
	`SMC_UUID_RET
(
h™dÀ
, 
mtk_sù_svc_uid
);

94 
MTK_SIP_SVC_VERSION
:

96 
	`SMC_RET2
(
h™dÀ
, 
MTK_SIP_VERSION_MAJOR
, 
MTK_SIP_VERSION_MINOR
);

99 
	`WARN
("Unim∂emíãd SIP Sîvi˚ CÆl: 0x%x \n", 
smc_fid
);

100 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

102 
	}
}

105 
DECLARE_RT_SVC
(

106 
sù_svc
,

108 
OEN_SIP_START
,

109 
OEN_SIP_END
,

110 
SMC_TYPE_FAST
,

111 
sù_svc_£tup
,

112 
sù_svc_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/aarch64/plat_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<bl_comm⁄.h
>

34 
	~<gic_v2.h
>

35 
	~"../∂©_def.h
"

37 .
globl
 
	g∂©f‹m_gë_íåypoöt


38 .
globl
 
	g∂©_£c⁄d¨y_cﬁd_boŸ_£tup


39 .
globl
 
	g∂©f‹m_mem_öô


40 .
globl
 
	g∂©_ªp‹t_ex˚±i⁄


42 .
ma¸o
 
mt_choo£_gicmm≠
 
	g∑øm1
, 
	g∑øm2
, 
	gx_tmp
, 
	gw_tmp
, 
ªs


43 
	gldr
 \
	gx_tmp
, =
VE_SYSREGS_BASE
 + 
V2M_SYS_ID


44 
ldr
 \
w_tmp
, [\
x_tmp
]

45 
	gubfx
 \
	gw_tmp
, \w_tmp, #SYS_ID_BLD_SHIFT, #SYS_ID_BLD_LENGTH

46 
	gcmp
 \
	gw_tmp
, #BLD_GIC_VE_MMAP

47 
	gc£l
 \
	gªs
, \
	g∑øm1
, \
	g∑øm2
, 
	geq


48 .
ídm


61 
func
 
∂©_£c⁄d¨y_cﬁd_boŸ_£tup


70 
mrs
 
	gx0
, 
mpidr_ñ1


71 
ldr
 
	gx1
, =
PWRC_BASE


72 
°r
 
w0
, [
x1
, #PPOFFR_OFF]

78 
ldr
 
	gx0
, =
VE_GICC_BASE


79 
ldr
 
x1
, =
BASE_GICC_BASE


80 
mt_choo£_gicmm≠
 
x0
, 
	gx1
, 
	gx2
, 
	gw2
, 
x1


81 
mov
 
	gw0
, #(
	gIRQ_BYP_DIS_GRP1
 | 
	gFIQ_BYP_DIS_GRP1
)

82 
‹r
 
	gw0
, w0, #(
	gIRQ_BYP_DIS_GRP0
 | 
	gFIQ_BYP_DIS_GRP0
)

83 
°r
 
	gw0
, [
x1
, #GICC_CTLR]

91 
dsb
 
sy


92 
wfi


93 
	gcb_∑nic
:

94 
b
 
cb_∑nic


117 
func
 
∂©f‹m_gë_íåypoöt


118 
mov
 
x9
, 
x30


124 
ldr
 
	gx1
, =
fú°_boŸ


125 
ldr
 
w2
, [
x1
]

126 
cmp
 
	gw2
, #0

127 
beq
 
w¨m_ª£t


128 
°r
 
	gwzr
, [
x1
]

129 
mov
 
	gx0
, #0

130 
b
 
exô


131 
	gw¨m_ª£t
:

139 
ldr
 
x10
, =
MBOX_OFF


140 
bl
 
∂©f‹m_gë_c‹e_pos


141 
l¶
 
x0
, 
	gx0
, #CACHE_WRITEBACK_SHIFT

142 
ldr
 
	gx0
, [
x10
, 
x0
]

143 
cbz
 
	gx0
, 
_∑nic


144 
	gexô
:

145 
ªt
 
x9


146 
_∑nic
: 
b
 _panic

160 
func
 
∂©f‹m_mem_öô


161 
ldr
 
x0
, =
MBOX_OFF


162 
mov
 
w1
, #PLATFORM_CORE_COUNT

163 
	glo›
:

164 
°r
 
xzr
, [
x0
], #CACHE_WRITEBACK_GRANULE

165 
subs
 
	gw1
, w1, #1

166 
	gb
.
gt
 
lo›


167 
ªt


177 
func
 
∂©_ªp‹t_ex˚±i⁄


178 
mrs
 
	gx1
, 
CuºítEl


179 
l§
 
	gx1
, x1, #MODE_EL_SHIFT

180 
l¶
 
	gx1
, x1, #SYS_LED_EL_SHIFT

181 
l¶
 
	gx0
, x0, #SYS_LED_EC_SHIFT

182 
mov
 
	gx2
, #(
	gSECURE
 << 
	gSYS_LED_SS_SHIFT
)

183 
‹r
 
	gx0
, x0, 
x2


184 
‹r
 
	gx0
, x0, 
x1


185 
mov
 
	gx1
, #VE_SYSREGS_BASE

186 
add
 
	gx1
, x1, #V2M_SYS_LED

187 
°r
 
	gw0
, [
x1
]

188 
	gªt


190 .
d©a


191 
	gfú°_boŸ
:

194 .
globl
 
ªad_l2a˘Ã


195 
func
 
ªad_l2a˘Ã


196 
dsb
 
sy


197 
MRS
 
x0
, 
S3_1_C15_C0_0


198 
dsb
 
sy


199 
isb


200 
	gªt


202 .
globl
 
wrôe_l2a˘Ã


203 
func
 
wrôe_l2a˘Ã


204 
dsb
 
sy


205 
MSR
 
	gS3_1_C15_C0_0
, 
x0


206 
isb


207 
dsb
 
sy


208 
	gªt


210 .
globl
 
ªad_l2e˘Ã


211 
func
 
ªad_l2e˘Ã


212 
MRS
 
	gx0
, 
S3_1_C11_C0_3


213 
dsb
 
sy


214 
isb


215 
	gªt


217 .
globl
 
wrôe_l2e˘Ã


218 
func
 
wrôe_l2e˘Ã


219 
dsb
 
sy


220 
MSR
 
	gS3_1_C11_C0_3
, 
x0


221 
isb


222 
dsb
 
sy


223 
	gªt


225 .
globl
 
ªad_˝ua˘Ã


226 
func
 
ªad_˝ua˘Ã


227 
dsb
 
sy


228 
MRS
 
	gx0
, 
S3_1_C15_C2_0


229 
dsb
 
sy


230 
isb


231 
	gªt


233 .
globl
 
wrôe_˝ua˘Ã


234 
func
 
wrôe_˝ua˘Ã


235 
dsb
 
sy


236 
MSR
 
	gS3_1_C15_C2_0
, 
x0


237 
isb


238 
dsb
 
sy


239 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/aarch64/plat_helpers.h

1 #i‚de‡
PLAT_HELPERS_H


2 
	#PLAT_HELPERS_H


	)

4 
ªad_l2a˘Ã
();

5 
ªad_l2e˘Ã
();

7 
wrôe_l2a˘Ã
();

8 
wrôe_l2e˘Ã
();

10 
ªad_˝ua˘Ã
();

11 
wrôe_˝ua˘Ã
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/aarch64/platform_common.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<cci400.h
>

36 
	~<debug.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<xœt_èbÀs.h
>

40 
	~"../∂©_def.h
"

51 
	gmt_c⁄fig
[
CONFIG_LIMIT
];

59 c⁄° 
mm≠_ªgi⁄_t
 
	gmt_mm≠
[] = {

61 {(
ATF_ARG_BASE
 & 
PAGE_ADDR_MASK
), 
ATF_ARG_SIZE
, 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
},

64 {(
TZRAM_BASE
 & 
PAGE_ADDR_MASK
),

65 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
), 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
},

71 { 
MTK_DEVICE_BASE
, 
MTK_DEVICE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

74 {(
MT_DEV_BASE
 & 
PAGE_ADDR_MASK
),
MT_DEV_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

82 { 
MTK_WDT_BASE
, 
MTK_WDT_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

95 
	#DEFINE_CONFIGURE_MMU_EL
(
_ñ
) \

96 
mt_c⁄figuª_mmu_ñ
##
	`_ñ
(
tŸÆ_ba£
, \

97 
tŸÆ_size
, \

98 
ro_°¨t
, \

99 
ro_limô
, \

100 
coh_°¨t
, \

101 
coh_limô
) \

103 
	`mm≠_add_ªgi⁄
(
tŸÆ_ba£
, \

104 
tŸÆ_size
, \

105 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
); \

106 
	`mm≠_add_ªgi⁄
(
ro_°¨t
, 
ro_limô
 -Ño_start, \

107 
MT_MEMORY
 | 
MT_RO
 | 
MT_SECURE
); \

108 
	`mm≠_add_ªgi⁄
(
coh_°¨t
, 
coh_limô
 - coh_start, \

109 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
); \

110 
	`mm≠_add
(
mt_mm≠
); \

111 
	`öô_xœt_èbÀs
(); \

113 
íabÀ_mmu_ñ
##
	`_ñ
(); \

114 }

	)

117 
	$DEFINE_CONFIGURE_MMU_EL
(1)

118 
	$DEFINE_CONFIGURE_MMU_EL
(3)

121 
	$mt_gë_cfgv¨
(
v¨_id
)

123 
	`as£π
(
v¨_id
 < 
CONFIG_LIMIT
);

124  
mt_c⁄fig
[
v¨_id
];

125 
	}
}

134 
	$mt_c⁄fig_£tup
()

136 
ªv
, 
hbi
, 
bld
, 
¨ch
, 
sys_id
, 
midr_≤
;

138 
sys_id
 = 
	`mmio_ªad_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_ID
);

139 
ªv
 = (
sys_id
 >> 
SYS_ID_REV_SHIFT
Ë& 
SYS_ID_REV_MASK
;

140 
hbi
 = (
sys_id
 >> 
SYS_ID_HBI_SHIFT
Ë& 
SYS_ID_HBI_MASK
;

141 
bld
 = (
sys_id
 >> 
SYS_ID_BLD_SHIFT
Ë& 
SYS_ID_BLD_MASK
;

142 
¨ch
 = (
sys_id
 >> 
SYS_ID_ARCH_SHIFT
Ë& 
SYS_ID_ARCH_MASK
;

144 
¨ch
 = 
ARCH_MODEL
;

145 
bld
 = 
BLD_GIC_A53A57_MMAP
;

146 
hbi
 = 
HBI_MT_BASE
;

148 i‡((
ªv
 !
REV_MT
Ë|| (
¨ch
 !
ARCH_MODEL
))

149 
	`∑nic
();

155 
bld
) {

157 
BLD_GIC_VE_MMAP
:

158 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
VE_GICD_BASE
;

159 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
VE_GICC_BASE
;

160 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
VE_GICH_BASE
;

161 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
VE_GICV_BASE
;

164 
BLD_GIC_A53A57_MMAP
:

165 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
BASE_GICD_BASE
;

166 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
BASE_GICC_BASE
;

167 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
BASE_GICH_BASE
;

168 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
BASE_GICV_BASE
;

171 
	`as£π
(0);

178 
hbi
) {

179 
HBI_FOUNDATION
:

180 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

181 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 1;

182 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

183 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 0;

184 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 0;

185 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

187 
HBI_MT_BASE
:

188 
midr_≤
 = (
	`ªad_midr
(Ë>> 
MIDR_PN_SHIFT
Ë& 
MIDR_PN_MASK
;

189 i‡((
midr_≤
 =
MIDR_PN_A57
Ë|| (midr_≤ =
MIDR_PN_A53
))

190 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 1;

192 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

194 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

195 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 2;

196 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 1;

197 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 1;

198 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

201 
	`as£π
(0);

205 
	}
}

207 
	$∂©_gë_ns_image_íåypoöt
()

210  
BL33_START_ADDRESS
;

212 
	}
}

214 
uöt64_t
 
	$∂©_gë_sys˙t_‰eq
()

216 
uöt64_t
 
cou¡î_ba£_‰equícy
;

220 
cou¡î_ba£_‰equícy
 = 13000000;

223 
	`as£π
(
cou¡î_ba£_‰equícy
 != 0);

225  
cou¡î_ba£_‰equícy
;

226 
	}
}

228 
	$mt_cci_£tup
()

230 
cci_£tup
;

237 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

238 i‡(
cci_£tup
)

239 
	`cci_íabÀ_cohîícy
(
	`ªad_mpidr
());

240 
	}
}

246 
	$mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

248 
	`SET_SECURITY_STATE
(
bl32_ï_öfo
->
h
.
©å
, 
SECURE
);

253 
bl32_ï_öfo
->
•§
 = 0;

254 
	}
}

259 
	$mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

261 
ñ_°©us
;

262 
mode
;

263 
rw
, 
ì
;

264 
daif
;

268 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

269 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

271 i‡(
ñ_°©us
)

272 
mode
 = 
MODE_EL2
;

274 
mode
 = 
MODE_EL1
;

309 
rw
 = 0;

311 
rw
 = 1;

313 i‡(0 =
rw
) {

314 
	`¥ötf
("LK is AArch32\n");

315 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

316 
mode
 = 
MODE32_svc
;

317 
ì
 = 0;

322 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

324 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

331 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)
BOOT_ARGUMENT_LOCATION
;

332 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

334 
	`¥ötf
("LK is AArch64\n");

335 
bl33_ï_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

337 
	`SET_SECURITY_STATE
(
bl33_ï_öfo
->
h
.
©å
, 
NON_SECURE
);

338 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/bl1_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<mmio.h
>

36 
	~<∂©f‹m.h
>

37 
	~<∂©f‹m_def.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__COHERENT_RAM_START__
;

46 
__COHERENT_RAM_END__
;

48 
__BL1_RAM_START__
;

49 
__BL1_RAM_END__
;

58 
	#BL1_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

59 
	#BL1_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

61 
	#BL1_RAM_BASE
 ()(&
__BL1_RAM_START__
)

	)

62 
	#BL1_RAM_LIMIT
 ()(&
__BL1_RAM_END__
)

	)

66 
memöfo_t
 
	gbl1_tzøm_œyout
;

68 
memöfo_t
 *
	$bl1_∂©_£c_mem_œyout
()

70  &
bl1_tzøm_œyout
;

71 
	}
}

76 
	$bl1_óæy_∂©f‹m_£tup
()

78 c⁄° 
bl1_øm_ba£
 = 
BL1_RAM_BASE
;

79 c⁄° 
bl1_øm_limô
 = 
BL1_RAM_LIMIT
;

80 c⁄° 
tzøm_limô
 = 
TZRAM_BASE
 + 
TZRAM_SIZE
;

83 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

93 
bl1_tzøm_œyout
.
tŸÆ_ba£
 = 
TZRAM_BASE
;

94 
bl1_tzøm_œyout
.
tŸÆ_size
 = 
TZRAM_SIZE
;

96 i‡(
bl1_øm_limô
 =
tzøm_limô
) {

98 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
TZRAM_BASE
;

99 
bl1_tzøm_œyout
.
‰ì_size
 = 
bl1_øm_ba£
 - 
TZRAM_BASE
;

102 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
bl1_øm_limô
;

103 
bl1_tzøm_œyout
.
‰ì_size
 =

104 
tzøm_limô
 - 
bl1_øm_limô
;

108 
	`mt_c⁄fig_£tup
();

109 
	}
}

116 
	$bl1_∂©f‹m_£tup
()

119 
	`mt_io_£tup
();

120 
	}
}

128 
	$bl1_∂©_¨ch_£tup
()

130 
	`mt_cci_£tup
();

132 
	`mt_c⁄figuª_mmu_ñ3
(
bl1_tzøm_œyout
.
tŸÆ_ba£
,

133 
bl1_tzøm_œyout
.
tŸÆ_size
,

134 
TZROM_BASE
,

135 
TZROM_BASE
 + 
TZROM_SIZE
,

136 
BL1_COHERENT_RAM_BASE
,

137 
BL1_COHERENT_RAM_LIMIT
);

138 
	}
}

147 
	$bl1_∂©_£t_bl2_ï_öfo
(
image_öfo_t
 *
bl2_image
,

148 
íåy_poöt_öfo_t
 *
bl2_ï
)

150 
	`SET_SECURITY_STATE
(
bl2_ï
->
h
.
©å
, 
SECURE
);

151 
bl2_ï
->
•§
 = 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

152 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/bl2_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<∂©f‹m.h
>

36 
	~<∂©f‹m_def.h
>

37 
	~<°rög.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__RO_START__
;

46 
__RO_END__
;

48 
__COHERENT_RAM_START__
;

49 
__COHERENT_RAM_END__
;

57 
	#BL2_RO_BASE
 ()(&
__RO_START__
)

	)

58 
	#BL2_RO_LIMIT
 ()(&
__RO_END__
)

	)

67 
	#BL2_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

68 
	#BL2_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

71 **
bl2_ñ_ch™ge_mem_±r
;

74 
memöfo_t
 
bl2_tzøm_œyout


75 
__©åibuã__
 ((
Æig√d
(
PLATFORM_CACHE_LINE_SIZE
),

76 
£˘i⁄
("tzfw_coherent_mem")));

82 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

83 
íåy_poöt_öfo_t
 *
	gbl31_ï_öfo
;

85 
memöfo_t
 *
	$bl2_∂©_£c_mem_œyout
()

87  &
bl2_tzøm_œyout
;

88 
	}
}

99 
bl31_∑øms_t
 *
	$bl2_∂©_gë_bl31_∑øms
()

101 
bl2_to_bl31_∑øms_mem_t
 *
bl31_∑øms_mem
;

103 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


108 
	`as£π
(
BL32_BASE
 > 
PARAMS_BASE
 + (
bl2_to_bl31_∑øms_mem_t
));

115 
bl31_∑øms_mem
 = (
bl2_to_bl31_∑øms_mem_t
 *)
PARAMS_BASE
;

116 
	`mem£t
((*)
PARAMS_BASE
, 0, (
bl2_to_bl31_∑øms_mem_t
));

119 
bl2_to_bl31_∑øms
 = &
bl31_∑øms_mem
->
bl31_∑øms
;

120 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
, 
PARAM_BL31
, 
VERSION_1
, 0);

123 
bl31_ï_öfo
 = &
bl31_∑øms_mem
->bl31_ep_info;

124 
bl2_to_bl31_∑øms
->
bl31_image_öfo
 = &
bl31_∑øms_mem
->bl31_image_info;

125 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl31_image_öfo
, 
PARAM_IMAGE_BINARY
,

126 
VERSION_1
, 0);

129 i‡(
BL32_BASE
) {

130 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
 =

131 &
bl31_∑øms_mem
->
bl32_ï_öfo
;

132 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_ï_öfo
,

133 
PARAM_EP
, 
VERSION_1
, 0);

134 
bl2_to_bl31_∑øms
->
bl32_image_öfo
 =

135 &
bl31_∑øms_mem
->
bl32_image_öfo
;

136 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_image_öfo
,

137 
PARAM_IMAGE_BINARY
,

138 
VERSION_1
, 0);

142 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 = &
bl31_∑øms_mem
->bl33_ep_info;

143 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_ï_öfo
,

144 
PARAM_EP
, 
VERSION_1
, 0);

145 
bl2_to_bl31_∑øms
->
bl33_image_öfo
 = &
bl31_∑øms_mem
->bl33_image_info;

146 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_image_öfo
, 
PARAM_IMAGE_BINARY
,

147 
VERSION_1
, 0);

149  
bl2_to_bl31_∑øms
;

150 
	}
}

157 
íåy_poöt_öfo
 *
	$bl2_∂©_gë_bl31_ï_öfo
()

159 #i‡
DEBUG


160 
bl31_ï_öfo
->
¨gs
.
¨g1
 = 
MT_BL31_PLAT_PARAM_VAL
;

162  
bl31_ï_öfo
;

163 
	}
}

171 
	$bl2_óæy_∂©f‹m_£tup
(
memöfo_t
 *
mem_œyout
)

174 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

177 
bl2_tzøm_œyout
.
tŸÆ_ba£
 = 
mem_œyout
->total_base;

178 
bl2_tzøm_œyout
.
tŸÆ_size
 = 
mem_œyout
->total_size;

179 
bl2_tzøm_œyout
.
‰ì_ba£
 = 
mem_œyout
->free_base;

180 
bl2_tzøm_œyout
.
‰ì_size
 = 
mem_œyout
->free_size;

181 
bl2_tzøm_œyout
.
©å
 = 
mem_œyout
->attr;

182 
bl2_tzøm_œyout
.
√xt
 = 0;

185 
	`mt_c⁄fig_£tup
();

186 
	}
}

192 
	$bl2_∂©f‹m_£tup
()

200 
	`mt_£curôy_£tup
();

203 
	`mt_io_£tup
();

204 
	}
}

207 
	$bl2_∂©_Êush_bl31_∑øms
()

209 
	`Êush_dˇche_ønge
(()
PARAMS_BASE
, \

210 (
bl2_to_bl31_∑øms_mem_t
));

211 
	}
}

218 
	$bl2_∂©_¨ch_£tup
()

220 
	`mt_c⁄figuª_mmu_ñ1
(
bl2_tzøm_œyout
.
tŸÆ_ba£
,

221 
bl2_tzøm_œyout
.
tŸÆ_size
,

222 
BL2_RO_BASE
,

223 
BL2_RO_LIMIT
,

224 
BL2_COHERENT_RAM_BASE
,

225 
BL2_COHERENT_RAM_LIMIT
);

226 
	}
}

234 
	$bl2_∂©_£t_bl31_ï_öfo
(
image_öfo_t
 *
bl31_image_öfo
,

235 
íåy_poöt_öfo_t
 *
bl31_ï_öfo
)

237 
	`SET_SECURITY_STATE
(
bl31_ï_öfo
->
h
.
©å
, 
SECURE
);

238 
bl31_ï_öfo
->
•§
 = 
	`SPSR_64
(
MODE_EL3
, 
MODE_SP_ELX
,

239 
DISABLE_ALL_EXCEPTIONS
);

240 
	}
}

249 
	$bl2_∂©_£t_bl32_ï_öfo
(
image_öfo_t
 *
bl32_image_öfo
,

250 
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

252 
	`mt_£t_bl32_ï_öfo
(
bl32_ï_öfo
);

253 
	}
}

261 
	$bl2_∂©_£t_bl33_ï_öfo
(
image_öfo_t
 *
image
,

262 
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

264 
	`mt_£t_bl33_ï_öfo
(
bl33_ï_öfo
);

265 
	}
}

271 
	$bl2_∂©_gë_bl32_memöfo
(
memöfo_t
 *
bl32_memöfo
)

276 
bl32_memöfo
->
tŸÆ_ba£
 = 
BL32_BASE
;

277 
bl32_memöfo
->
‰ì_ba£
 = 
BL32_BASE
;

278 
bl32_memöfo
->
tŸÆ_size
 =

279 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

280 
bl32_memöfo
->
‰ì_size
 =

281 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

282 
bl32_memöfo
->
©å
 = 
BOT_LOAD
;

283 
bl32_memöfo
->
√xt
 = 0;

284 
	}
}

290 
	$bl2_∂©_gë_bl33_memöfo
(
memöfo_t
 *
bl33_memöfo
)

292 
bl33_memöfo
->
tŸÆ_ba£
 = 
DRAM_BASE
;

293 
bl33_memöfo
->
tŸÆ_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

294 
bl33_memöfo
->
‰ì_ba£
 = 
DRAM_BASE
;

295 
bl33_memöfo
->
‰ì_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

296 
bl33_memöfo
->
©å
 = 0;

297 
bl33_memöfo
->
©å
 = 0;

298 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/bl31_plat_setup.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<c⁄sﬁe.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°ddef.h
>

40 
	~"∂©_def.h
"

41 
	~"∂©_¥iv©e.h
"

42 
	~<°dio.h
>

43 
	~<°rög.h
>

44 
	~<xœt_èbÀs.h
>

45 
	~"l2c.h
"

46 
	~"mt_˝uxg±.h
"

52 
bl31_⁄_íåypoöt
();

54 
__RO_START__
;

55 
__RO_END__
;

57 
__COHERENT_RAM_START__
;

58 
__COHERENT_RAM_END__
;

66 
	#BL31_RO_BASE
 ()(&
__RO_START__
)

	)

67 
	#BL31_RO_LIMIT
 ()(&
__RO_END__
)

	)

76 
	#BL31_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

77 
	#BL31_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

80 #i‡
RESET_TO_BL31


81 
íåy_poöt_öfo_t
 
	gbl32_íåypoöt_öfo
;

82 
íåy_poöt_öfo_t
 
	gbl33_íåypoöt_öfo
;

88 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

97 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_image_ï_öfo
(
uöt32_t
 
ty≥
)

99 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

101 #i‡
RESET_TO_BL31


103 i‡(
ty≥
 =
NON_SECURE
)

104 
	`mt_gë_íåy_poöt_öfo
(
NON_SECURE
, &
bl33_íåypoöt_öfo
);

106 
	`mt_gë_íåy_poöt_öfo
(
SECURE
, &
bl32_íåypoöt_öfo
);

108 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

109 &
bl33_íåypoöt_öfo
 :

110 &
bl32_íåypoöt_öfo
;

112 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

113 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

114 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

119 i‡(
√xt_image_öfo
->
pc
)

120  
√xt_image_öfo
;

122  
NULL
;

123 
	}
}

126 
uöt64_t
 
gë_kî√l_öfo_pc
();

127 
uöt64_t
 
gë_kî√l_öfo_r0
();

128 
uöt64_t
 
gë_kî√l_öfo_r1
();

130 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_kî√l_ï_öfo
(
uöt32_t
 
ty≥
)

132 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

133 
ñ_°©us
;

134 
mode
;

136 #i‡
RESET_TO_BL31


137 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

138 &
bl33_íåypoöt_öfo
 :

139 &
bl32_íåypoöt_öfo
;

141 
	`mt_gë_íåy_poöt_öfo
(
ty≥
, 
√xt_image_öfo
);

144 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

145 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

146 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

151 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

152 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

154 i‡(
ñ_°©us
)

155 
mode
 = 
MODE_EL2
;

157 
mode
 = 
MODE_EL1
;

160 i‡(0 =
rw
) {

161 
	`¥ötf
("LK is AArch32\n");

162 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

163 
mode
 = 
MODE32_svc
;

164 
ì
 = 0;

169 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

171 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

178 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)&
∂_boŸ_¨gumít
;

179 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

183 
	`¥ötf
("Kernel is 64Bit\n");

184 
√xt_image_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

185 
√xt_image_öfo
->
pc
 = 
	`gë_kî√l_öfo_pc
();

186 
√xt_image_öfo
->
¨gs
.
¨g0
=
	`gë_kî√l_öfo_r0
();

187 
√xt_image_öfo
->
¨gs
.
¨g1
=
	`gë_kî√l_öfo_r1
();

189 
	`¥ötf
("pc=0x%llx,Ñ0=0x%llx,Ñ1=0x%llx\n",

190 
√xt_image_öfo
->
pc
,

191 
√xt_image_öfo
->
¨gs
.
¨g0
,

192 
√xt_image_öfo
->
¨gs
.
¨g1
);

195 
	`SET_SECURITY_STATE
(
√xt_image_öfo
->
h
.
©å
, 
NON_SECURE
);

199 i‡(
√xt_image_öfo
->
pc
)

200  
√xt_image_öfo
;

202  
NULL
;

203 
	}
}

217 
°¨t_dev≠c
();

218 
	$bl31_óæy_∂©f‹m_£tup
(
bl31_∑øms_t
 *
‰om_bl2
,

219 *
∂©_∑øms_‰om_bl2
)

221 
n‹mÆ_ba£
;

222 
©f_ba£
;

224 
	`c⁄fig_L2_size
();

226 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

229 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(0), ()
bl31_⁄_íåypoöt
);

231 
n‹mÆ_ba£
 = 0;

235 
©f_ba£
 = 
	`ªad_˙ç˘_ñ0
();

236 
	`©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

240 
	`c⁄sﬁe_öô
(
ãórg
->
©f_log_p‹t
);

241 
	`¥ötf
("LK boŸárgumíàloˇti⁄=0x%x\n\r", 
BOOT_ARGUMENT_LOCATION
);

242 
	`¥ötf
("KL boŸárgumíàsize=0x%x\n\r", 
BOOT_ARGUMENT_SIZE
);

243 
	`¥ötf
("©f_magic=0x%x\n\r", 
ãórg
->
©f_magic
);

244 
	`¥ötf
("ãe_suµ‹t=0x%x\n\r", 
ãórg
->
ãe_suµ‹t
);

245 
	`¥ötf
("ãe_íåy=0x%x\n\r", 
ãórg
->
ãe_íåy
);

246 
	`¥ötf
("ãe_boŸ_¨g_addr=0x%x\n\r", 
ãórg
->
ãe_boŸ_¨g_addr
);

247 
	`¥ötf
("©f_log_p‹t=0x%x\n\r", 
ãórg
->
©f_log_p‹t
);

248 
	`¥ötf
("©f_log_baudøã=0x%x\n\r", 
ãórg
->
©f_log_baudøã
);

249 
	`¥ötf
("©f_log_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
);

250 
	`¥ötf
("©f_log_buf_size=0x%x\n\r", 
ãórg
->
©f_log_buf_size
);

251 
	`¥ötf
("©f_´e_debug_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_°¨t
);

252 
	`¥ötf
("©f_´e_debug_buf_size=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_size
);

253 
	`¥ötf
("©f_úq_num=%d\n\r", 
ãórg
->
©f_úq_num
);

254 
	`¥ötf
("BL33_START_ADDRESS=0x%x\n\r", 
BL33_START_ADDRESS
);

257 
	`mt_c⁄fig_£tup
();

259 
	`¥ötf
("bl31_setup\n\r");

260 #i‡
RESET_TO_BL31


262 
	`as£π
(
‰om_bl2
 =
NULL
);

263 
	`as£π
(
∂©_∑øms_‰om_bl2
 =
NULL
);

264 
	`¥ötf
("RESET_TO_BL31\n\r");

280 
	`¥ötf
("not RESET_TO_BL31\n");

282 
	`as£π
(
‰om_bl2
 !
NULL
);

283 
	`as£π
(
‰om_bl2
->
h
.
ty≥
 =
PARAM_BL31
);

284 
	`as£π
(
‰om_bl2
->
h
.
vîsi⁄
 >
VERSION_1
);

286 
bl2_to_bl31_∑øms
 = 
‰om_bl2
;

287 
	`as£π
((()
∂©_∑øms_‰om_bl2
Ë=
MT_BL31_PLAT_PARAM_VAL
);

290 if(! (
ãórg
->
ãe_suµ‹t
))

291 
	`°¨t_dev≠c
();

292 
	}
}

298 
	$bl31_∂©f‹m_£tup
()

303 
	`gic_£tup
();

311 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGDATA
, 0);

312 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGCTRL
,

318 
	`mmio_wrôe_32
(
SYS_CNTCTL_BASE
 + 
CNTCR_OFF
, 
	`CNTCR_FCREQ
(0Ë| 
CNTCR_EN
);

321 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

322 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

323 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

324 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

325 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

327 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) | (1 << CNTNSAR_NS_SHIFT(1));

328 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

332 
	`mt_£tup_t›ﬁogy
();

333 
	}
}

339 
	$bl31_∂©_¨ch_£tup
()

341 #i‡
RESET_TO_BL31


342 
	`mt_cci_£tup
();

346 
	`mmio_wrôe_32
(
CCI400_BASE
 + 
CCI_SEC_ACCESS_OFFSET
 , 0x1);

348 
	`¥ötf
("###@@@ MP0_MISC_CONFIG3:0x%08x @@@###\n", 
	`mmio_ªad_32
(
MP0_MISC_CONFIG3
));

349 
	`mmio_wrôe_32
(
MP0_MISC_CONFIG3
, 
	`mmio_ªad_32
(MP0_MISC_CONFIG3) | 0x0000E000);

350 
	`¥ötf
("###@@@ MP0_MISC_CONFIG3:0x%08x @@@###\n", 
	`mmio_ªad_32
(
MP0_MISC_CONFIG3
));

353 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

354 if(
ãórg
->
©f_log_buf_size
 !=0 ) {

355 
	`¥ötf
("mm≠át‡buf„∏: 0x%x, 0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
,

356 
ãórg
->
©f_log_buf_size
);

357 
	`mm≠_add_ªgi⁄
((
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
,

358 
MT_DEVICE
 | 
MT_RW
 | 
MT_NS
);

359 
	`¥ötf
("mmapátf buffer (force 2MBáligned): 0x%x, 0x%x\n\r",

360 (
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
);

365 
	`mm≠_add_ªgi⁄
(
TZRAM2_BASE
, ((
TZRAM2_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

366 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
);

370 
	`mt_c⁄figuª_mmu_ñ3
(
TZRAM_BASE
,

371 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

372 
BL31_RO_BASE
,

373 
BL31_RO_LIMIT
,

374 
BL31_COHERENT_RAM_BASE
,

375 
BL31_COHERENT_RAM_LIMIT
);

381 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

382 
	}
}

384 #i‡
RESET_TO_BL31


389 
	$mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

390 
íåy_poöt_öfo_t
 *
èrgë_íåy_öfo
)

392 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

393 i‡(
èrgë_£curôy
 =
NON_SECURE
) {

394 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

395 
PARAM_EP
,

396 
VERSION_1
,

402 
èrgë_íåy_öfo
->
pc
 = 
	`∂©_gë_ns_image_íåypoöt
();

404 
	`mt_£t_bl33_ï_öfo
(
èrgë_íåy_öfo
);

407 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

408 
PARAM_EP
,

409 
VERSION_1
,

412 i‡(
ãórg
->
ãe_suµ‹t
)

414 
èrgë_íåy_öfo
->
pc
 = 
ãórg
->
ãe_íåy
;

415 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

419 i‡(
BL32_BASE
 != 0) {

422 
èrgë_íåy_öfo
->
pc
 = 
BL32_BASE
;

423 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

427 
	}
}

430 
	$íabÀ_ns_ac˚ss_to_˝ue˘Ã
() {

431 
√xt_a˘Ã
;

434 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ2
();

435 
√xt_a˘Ã
 |
ACTLR_CPUECTLR_BIT
;

436 
	`wrôe_a˘Ã_ñ2
(
√xt_a˘Ã
);

438 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ3
();

439 
√xt_a˘Ã
 |
ACTLR_CPUECTLR_BIT
;

440 
	`wrôe_a˘Ã_ñ3
(
√xt_a˘Ã
);

446 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/bl32_plat_setup.c

31 
	~<bl_comm⁄.h
>

32 
	~<c⁄sﬁe.h
>

33 
	~<∂©f‹m.h
>

34 
	~"∂©_def.h
"

35 
	~"∂©_¥iv©e.h
"

41 
__RO_START__
;

42 
__RO_END__
;

44 
__COHERENT_RAM_START__
;

45 
__COHERENT_RAM_END__
;

53 
	#BL32_RO_BASE
 ()(&
__RO_START__
)

	)

54 
	#BL32_RO_LIMIT
 ()(&
__RO_END__
)

	)

63 
	#BL32_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

64 
	#BL32_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

69 
	$bl32_óæy_∂©f‹m_£tup
()

75 
	`c⁄sﬁe_öô
(
PL011_UART1_BASE
);

78 
	`mt_c⁄fig_£tup
();

79 
	}
}

84 
	$bl32_∂©f‹m_£tup
()

87 
	}
}

93 
	$bl32_∂©_¨ch_£tup
()

95 
	`mt_c⁄figuª_mmu_ñ1
(
BL32_RO_BASE
,

96 (
BL32_COHERENT_RAM_LIMIT
 - 
BL32_RO_BASE
),

97 
BL32_RO_BASE
,

98 
BL32_RO_LIMIT
,

99 
BL32_COHERENT_RAM_BASE
,

100 
BL32_COHERENT_RAM_LIMIT
);

101 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/devapc/devapc.c

1 
	~<°dio.h
>

2 
	~"∂©f‹m.h
"

3 
	~"dev≠c.h
"

5 
DEVICE_INFO
 
	gD_APC0_Devi˚s
[] = {

6 {"INFRA_AO_INFRASYS_CONFIG_REGS", 
E_L0
, E_L0 , E_L0, E_L0},

7 {"INFRA_AO_PMIC_WRAP_CONTROL_REG", 
E_L0
, E_L0 , E_L0, E_L0},

8 {"INFRA_AO_PERISYS_CONFIG_REGS", 
E_L0
, E_L0 , E_L0, E_L0},

9 {"INFRA_AO_KPAD_CONTROL_REG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

10 {"INFRA_AO_GPT", 
E_L0
, 
E_L3
 , E_L0, E_L0},

11 {"INFRA_AO_APMCU_EINT_CONTROLLER", 
E_L0
, 
E_L3
 , E_L0, E_L0},

12 {"INFRA_AO_TOP_LEVEL_SLP_MANAGER", 
E_L0
, E_L0 , E_L0, E_L0},

13 {"INFRA_AO_DEVICE_APC_AO", 
E_L0
, 
E_L3
 , E_L0, E_L0},

14 {"INFRA_AO_SEJ", 
E_L0
, 
E_L3
 , E_L0, E_L0},

15 {"INFRA_AO_RSVD", 
E_L0
, 
E_L3
 , E_L0, E_L0},

17 {"INFRA_AO_CLDMA_AO_TOP_AP", 
E_L0
, E_L0 , E_L0, E_L0},

18 {"INFRA_AO_CLDMA_AO_TOP_MD", 
E_L0
, E_L0 , E_L0, E_L0},

19 {"INFRASYS_MCUSYS_CONFIG_REG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

20 {"INFRASYS_CONTROL_REG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

21 {"INFRASYS_BOOTROM/SRAM", 
E_L0
, 
E_L3
 , E_L0, E_L0},

22 {"INFRASYS_EMI_BUS_INTERFACE", 
E_L0
, E_L0 , E_L0, E_L0},

23 {"INFRASYS_SYSTEM_CIRQ", 
E_L0
, 
E_L3
 , E_L0, E_L0},

24 {"INFRASYS_MM_IOMMU_CONFIGURATION", 
E_L0
, 
E_L3
 , E_L0, E_L0},

25 {"INFRASYS_EFUSEC", 
E_L0
, E_L0 , E_L0, E_L0},

26 {"INFRASYS_DEVICE_APC_MONITOR", 
E_L0
, 
E_L3
 , E_L0, E_L0},

28 {"INFRASYS_MCU_BIU_CONFIGURATION", 
E_L0
, 
E_L3
 , E_L0, E_L0},

29 {"INFRASYS_AP_MIXED_CONTROL_REG", 
E_L0
, E_L0 , E_L0, E_L0},

30 {"INFRASYS_CA7_AP_CCIF", 
E_L0
, E_L0 , E_L0, E_L0},

31 {"INFRASYS_CA7_MD_CCIF", 
E_L0
, E_L0 , E_L0, E_L0},

32 {"RSVD", 
E_L0
, 
E_L3
 , E_L0, E_L0},

33 {"INFRASYS_GPIO1_CONTROLLER", 
E_L0
, 
E_L3
 , E_L0, E_L0},

34 {"INFRASYS_MBIST_CONTROL_REG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

35 {"INFRASYS_TRNG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

36 {"INFRA_AO_TOP_LEVEL_CLOCK_GENERATOR", 
E_L0
, E_L0 , E_L0, E_L0},

37 {"INFRASYS_GPIO1_CONTROLLER", 
E_L0
, E_L0 , E_L0, E_L0},

39 {"INFRA_AO_TOP_LEVEL_REST_GENERATOR", 
E_L0
, 
E_L3
 , E_L0, E_L0},

40 {"INFRASYS_DDRPHY", 
E_L0
, 
E_L3
 , E_L0, E_L0},

41 {"INFRASYS_DRAM_CONTROLLER", 
E_L0
, 
E_L3
 , E_L0, E_L0},

42 {"INFRASYS_MIPI_RX_ANA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

43 {"INFRASYS_GCPU", 
E_L0
, 
E_L3
 , E_L0, E_L0},

44 {"INFRASYS_GCE", 
E_L0
, 
E_L3
 , E_L0, E_L0},

45 {"INFRASYS_CCIF_AP_1", 
E_L0
, E_L0 , E_L0, E_L0},

46 {"INFRASYS_CCIF_MD_1", 
E_L0
, E_L0 , E_L0, E_L0},

47 {"INFRASYS_CLDMA_PDN_AP", 
E_L0
, E_L0 , E_L0, E_L0},

48 {"INFRASYS_CLDMA_PDN_MD", 
E_L0
, E_L0 , E_L0, E_L0},

51 {"INFRASYS_MD2MD_CCIF0", 
E_L0
, E_L0 , E_L0, E_L0},

52 {"INFRASYS_MD2MD_CCIF1", 
E_L0
, E_L0 , E_L0, E_L0},

53 {"INFRASYS_MDSYSINTF", 
E_L0
, 
E_L3
 , E_L0, E_L0},

54 {"DEGBUGSYS", 
E_L0
, E_L0 , E_L0, E_L0},

55 {"DMA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

56 {"AUXADC", 
E_L0
, 
E_L3
 , E_L0, E_L0},

57 {"UART0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

58 {"UART1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

59 {"UART2", 
E_L0
, 
E_L3
 , E_L0, E_L0},

60 {"UART3", 
E_L0
, 
E_L3
 , E_L0, E_L0},

62 {"PWM", 
E_L0
, E_L0 , E_L0, E_L0},

63 {"I2C0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

64 {"I2C1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

65 {"I2C2", 
E_L0
, 
E_L3
 , E_L0, E_L0},

66 {"SPI0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

67 {"PTP_THERMAL_CTL", 
E_L0
, E_L0 , E_L0, E_L0},

68 {"BTIF", 
E_L0
, 
E_L3
 , E_L0, E_L0},

69 {"UART4", 
E_L0
, 
E_L3
 , E_L0, E_L0},

70 {"DISP_PWM", 
E_L0
, 
E_L3
 , E_L0, E_L0},

71 {"I2C3", 
E_L0
, 
E_L3
 , E_L0, E_L0},

73 {"IRDA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

74 {"IR_TX", 
E_L0
, 
E_L3
 , E_L0, E_L0},

75 {"USB2.0", 
E_L0
, E_L0 , E_L0, E_L0},

76 {"USB2.0 SIF", 
E_L0
, E_L0 , E_L0, E_L0},

77 {"AUDIO", 
E_L0
, E_L0 , E_L0, E_L0},

78 {"MSDC0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

79 {"MSDC1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

80 {"MSDC2", 
E_L0
, 
E_L3
 , E_L0, E_L0},

81 {"USB3.0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

82 {"WCN_AHB_SLAVE", 
E_L0
, E_L0 , E_L0, E_L0},

84 {"MD2_PERIPHERALS", 
E_L0
, 
E_L3
 , E_L0, E_L0},

85 {"MD3_PERIPHERALS", 
E_L0
, 
E_L3
 , E_L0, E_L0},

86 {"G3D_CONFIG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

87 {"MALI", 
E_L0
, 
E_L3
 , E_L0, E_L0},

88 {"MMSYS_CONFIG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

89 {"MDP_RDMA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

90 {"MDP_RSZ0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

91 {"MDP_RSZ1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

92 {"MDP_WDMA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

93 {"MDP_WROT", 
E_L0
, 
E_L3
 , E_L0, E_L0},

95 {"MDP_TDSHP", 
E_L0
, 
E_L3
 , E_L0, E_L0},

96 {"DISP_OVL", 
E_L0
, 
E_L3
 , E_L0, E_L0},

97 {"DISP_RDMA0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

98 {"DISP_RDMA1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

99 {"DISP_WDMA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

100 {"DISP_COLOR", 
E_L0
, 
E_L3
 , E_L0, E_L0},

101 {"DISP_CCORR", 
E_L0
, 
E_L3
 , E_L0, E_L0},

102 {"DISP_AAL", 
E_L0
, 
E_L3
 , E_L0, E_L0},

103 {"DISP_GAMMA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

104 {"DISP_DITHER", 
E_L0
, 
E_L3
 , E_L0, E_L0},

106 {"Re£rved", 
E_L0
, 
E_L3
 , E_L0, E_L0},

107 {"DSI", 
E_L0
, 
E_L3
 , E_L0, E_L0},

108 {"DPI", 
E_L0
, 
E_L3
 , E_L0, E_L0},

109 {"Re£rved", 
E_L0
, 
E_L3
 , E_L0, E_L0},

110 {"MM_MUTEX", 
E_L0
, 
E_L3
 , E_L0, E_L0},

111 {"SMI_LARB0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

112 {"SMI_COMMON", 
E_L0
, 
E_L3
 , E_L0, E_L0},

113 {"MIPI_TX_CONFIG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

114 {"IMGSYS_CONFIG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

115 {"IMGSYS_SMI_LARB2", 
E_L0
, 
E_L3
 , E_L0, E_L0},

117 {"IMGSYS_CAM1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

118 {"IMGSYS_CAM2", 
E_L0
, 
E_L3
 , E_L0, E_L0},

119 {"IMGSYS_CAM3", 
E_L0
, 
E_L3
 , E_L0, E_L0},

120 {"IMGSYS_CAM4", 
E_L0
, 
E_L3
 , E_L0, E_L0},

121 {"IMGSYS_SENINF", 
E_L0
, 
E_L3
 , E_L0, E_L0},

122 {"IMGSYS_CAMSV", 
E_L0
, 
E_L3
 , E_L0, E_L0},

123 {"IMGSYS_FDVT", 
E_L0
, 
E_L3
 , E_L0, E_L0},

124 {"IMGSYS_CAM5", 
E_L0
, 
E_L3
 , E_L0, E_L0},

125 {"IMGSYS_CAM6", 
E_L0
, 
E_L3
 , E_L0, E_L0},

126 {"IMGSYS_CAM7", 
E_L0
, 
E_L3
 , E_L0, E_L0},

128 {"VDECSYS_GLOBAL_CONFIGURATION", 
E_L0
, 
E_L3
 , E_L0, E_L0},

129 {"SMI_LARB1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

130 {"VDEC_FULL_TOP", 
E_L0
, 
E_L3
 , E_L0, E_L0},

131 {"VENC_GLOBAL_CON", 
E_L0
, 
E_L3
 , E_L0, E_L0},

132 {"SMI_LARB3", 
E_L0
, 
E_L3
 , E_L0, E_L0},

133 {"VENC", 
E_L0
, 
E_L3
 , E_L0, E_L0},

134 {"JPEG_ENC", 
E_L0
, 
E_L3
 , E_L0, E_L0},

135 {"JPEG_DEC", 
E_L0
, 
E_L3
 , E_L0, E_L0},

138 
	$unmask_moduÀ_úq
(
moduÀ
)

141 
≠c_ödex
 = 0;

142 
≠c_bô_ödex
 = 0;

144 
≠c_ödex
 = 
moduÀ
 / (
MOD_NO_IN_1_DEVAPC
*2);

145 
≠c_bô_ödex
 = 
moduÀ
 % (
MOD_NO_IN_1_DEVAPC
*2);

147 
≠c_ödex
){

149 *
DEVAPC_D0_VIO_MASK_0
 &~(0x1 << 
≠c_bô_ödex
);

152 *
DEVAPC_D0_VIO_MASK_1
 &~(0x1 << 
≠c_bô_ödex
);

155 *
DEVAPC_D0_VIO_MASK_2
 &~(0x1 << 
≠c_bô_ödex
);

158 *
DEVAPC_D0_VIO_MASK_3
 &~(0x1 << 
≠c_bô_ödex
);

161 *
DEVAPC_D0_VIO_MASK_4
 &~(0x1 << 
≠c_bô_ödex
);

165 
	`¥ötf
("UnMask_Module_IRQ : The setting isÉrror,Ölease check if domain master setting is correct orÇot !\n");

168 
	}
}

171 
	$˛ór_vio_°©us
(
moduÀ
)

174 
≠c_ödex
 = 0;

175 
≠c_bô_ödex
 = 0;

177 
≠c_ödex
 = 
moduÀ
 / (
MOD_NO_IN_1_DEVAPC
*2);

178 
≠c_bô_ödex
 = 
moduÀ
 % (
MOD_NO_IN_1_DEVAPC
*2);

181 
≠c_ödex
){

183 *
DEVAPC_D0_VIO_STA_0
 = (0x1 << 
≠c_bô_ödex
);

186 *
DEVAPC_D0_VIO_STA_1
 = (0x1 << 
≠c_bô_ödex
);

189 *
DEVAPC_D0_VIO_STA_2
 = (0x1 << 
≠c_bô_ödex
);

192 *
DEVAPC_D0_VIO_STA_3
 = (0x1 << 
≠c_bô_ödex
);

195 *
DEVAPC_D0_VIO_STA_4
 = (0x1 << 
≠c_bô_ödex
);

200 
	}
}

202 
	$£t_ma°î_å™ß˘i⁄
(
ma°î_ödex
 ,
å™ß˘i⁄_ty≥
)

204 vﬁ©ûê* 
ba£
 = 0;

205 
£t_bô
 = 0;

208 
ba£
 = (*Ë((
size_t
)
DEVAPC_MAS_SEC
 );

210 if(
ma°î_ödex
 > 31)

213 if(
å™ß˘i⁄_ty≥
 == 0){

214 
£t_bô
 = ~(1 << 
ma°î_ödex
);

215 
	`wrôñ
(
	`ªadl
(
ba£
Ë& 
£t_bô
, base);

217 if(
å™ß˘i⁄_ty≥
 == 1){

218 
£t_bô
 = 1 << 
ma°î_ödex
;

219 
	`wrôñ
(
	`ªadl
(
ba£
Ë| 
£t_bô
, base);

225 
	}
}

227 
	$£t_moduÀ_≠c
(
moduÀ
, 
E_MASK_DOM
 
domaö_num
 , 
APC_ATTR
 
≥rmissi⁄_c⁄åﬁ
)

229 vﬁ©ûê* 
ba£
 = 0;

231 
˛r_bô
 = 0x3 << ((
moduÀ
 % 
MOD_NO_IN_1_DEVAPC
) * 2);

232 
£t_bô
 = 
≥rmissi⁄_c⁄åﬁ
 << ((
moduÀ
 % 
MOD_NO_IN_1_DEVAPC
) * 2);

234 
	`˛ór_vio_°©us
(
moduÀ
);

235 
	`unmask_moduÀ_úq
(
moduÀ
);

237 if(
domaö_num
 =
E_DOMAIN_0
)

240 
ba£
 = (*Ë((
size_t
)
DEVAPC_D0_APC_0
 + (
moduÀ
/16) *4);

242 if(
domaö_num
 =
E_DOMAIN_1
)

244 
ba£
 = (*Ë((
size_t
)
DEVAPC_D1_APC_0
 + (
moduÀ
/16) *4);

246 if(
domaö_num
 =
E_DOMAIN_2
)

248 
ba£
 = (*Ë((
size_t
)
DEVAPC_D2_APC_0
 + (
moduÀ
/16) *4);

250 if(
domaö_num
 =
E_DOMAIN_3
)

252 
ba£
 = (*Ë((
size_t
)
DEVAPC_D3_APC_0
 + (
moduÀ
/16) *4);

254 
	`wrôñ
(
	`ªadl
(
ba£
Ë& ~
˛r_bô
, base);

255 
	`wrôñ
(
	`ªadl
(
ba£
Ë| 
£t_bô
, base);

256 
	}
}

258 
	$°¨t_dev≠c
()

261 
moduÀ_ödex
 = 0;

264 
	`wrôñ
(0x80000000, 
DEVAPC_VIO_DBG0
);

266 
	`wrôñ
(
	`ªadl
(
DEVAPC_APC_CON
) & (0xFFFFFFFF ^ (1<<2)), DEVAPC_APC_CON);

268 
	`wrôñ
(
	`ªadl
(
DEVAPC_PD_APC_CON
) & (0xFFFFFFFF ^ (1<<2)), DEVAPC_PD_APC_CON);

272 
moduÀ_ödex
 = 0; moduÀ_ödex<((
D_APC0_Devi˚s
)/(
DEVICE_INFO
)); module_index++)

274 
	`£t_moduÀ_≠c
(
moduÀ_ödex
, 
E_DOMAIN_0
 , 
D_APC0_Devi˚s
[moduÀ_ödex].
d0_≥rmissi⁄
);

275 
	`£t_moduÀ_≠c
(
moduÀ_ödex
, 
E_DOMAIN_1
 , 
D_APC0_Devi˚s
[moduÀ_ödex].
d1_≥rmissi⁄
);

279 
	`wrôñ
(
	`ªadl
(
DEVAPC_APC_CON
) | (0x1), DEVAPC_APC_CON);

282 
	`wrôñ
(
	`ªadl
(
INFRA_PDN_SEC_CON
 ) | (
SEJ_CG_PROTECT_BIT
), INFRA_PDN_SEC_CON );

283 
	`wrôñ
(
	`ªadl
(
INFRA_PDN_SEC_CON
 ) | (
TRNG_CG_PROTECT_BIT
), INFRA_PDN_SEC_CON );

285 
	`¥ötf
("[DAPC] Init Done\n");

289 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/devapc/devapc.h

1 #i‚de‡
_ATF_DAPC_H__


2 
	#_ATF_DAPC_H__


	)

10 
	mE_L0
=0,

11 
	mE_L1
,

12 
	mE_L2
,

13 
	mE_L3
,

14 
	mE_MAX_APC_ATTR
,

15 
	mE_APC_ATTR_RESERVRD
 = 0x7FFFFFFF

16 }
	tAPC_ATTR
;

21 
	mE_DOMAIN_0
 = 0,

22 
	mE_DOMAIN_1
 ,

23 
	mE_DOMAIN_2
 ,

24 
	mE_DOMAIN_3
 ,

25 
	mE_MAX
,

26 
	mE_MASK_DOM_RESERVRD
 = 0x7FFFFFFF

27 }
	tE_MASK_DOM
;

31 c⁄° *
	mdevi˚_«me
;

32 
APC_ATTR
 
	md0_≥rmissi⁄
;

33 
APC_ATTR
 
	md1_≥rmissi⁄
;

34 
APC_ATTR
 
	md2_≥rmissi⁄
;

35 
APC_ATTR
 
	md3_≥rmissi⁄
;

36 } 
	tDEVICE_INFO
;

43 
	#READ_REGISTER_UINT32
(
ªg
) \

44 (*(vﬁ©ûê* c⁄°)(
uöçå_t
)(
ªg
))

	)

46 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

47 (*(vﬁ©ûê* c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

49 
	#wrôñ
(
VAL
,
REG
Ë
	`WRITE_REGISTER_UINT32
(REG,VAL)

	)

50 
	#ªadl
(
REG
Ë
	`READ_REGISTER_UINT32
(REG)

	)

57 
	#DEVAPC_AO_BASE
 0x10007000

	)

58 
	#DEVAPC_PD_BASE
 0x10207000

	)

59 
	#INFRACFG_AO_ba£
 0x10000000

	)

61 
	#DEVAPC_D0_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0000))

	)

62 
	#DEVAPC_D0_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0004))

	)

63 
	#DEVAPC_D0_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0008))

	)

64 
	#DEVAPC_D0_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x000C))

	)

65 
	#DEVAPC_D0_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0010))

	)

66 
	#DEVAPC_D0_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0014))

	)

67 
	#DEVAPC_D0_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0018))

	)

68 
	#DEVAPC_D0_APC_7
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x001C))

	)

70 
	#DEVAPC_D1_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0100))

	)

71 
	#DEVAPC_D1_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0104))

	)

72 
	#DEVAPC_D1_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0108))

	)

73 
	#DEVAPC_D1_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x010C))

	)

74 
	#DEVAPC_D1_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0110))

	)

75 
	#DEVAPC_D1_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0114))

	)

76 
	#DEVAPC_D1_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0118))

	)

77 
	#DEVAPC_D1_APC_7
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x011C))

	)

79 
	#DEVAPC_D2_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0200))

	)

80 
	#DEVAPC_D2_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0204))

	)

81 
	#DEVAPC_D2_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0208))

	)

82 
	#DEVAPC_D2_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x020C))

	)

83 
	#DEVAPC_D2_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0210))

	)

84 
	#DEVAPC_D2_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0214))

	)

85 
	#DEVAPC_D2_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0218))

	)

86 
	#DEVAPC_D2_APC_7
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x021C))

	)

88 
	#DEVAPC_D3_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0300))

	)

89 
	#DEVAPC_D3_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0304))

	)

90 
	#DEVAPC_D3_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0308))

	)

91 
	#DEVAPC_D3_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x030C))

	)

92 
	#DEVAPC_D3_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0310))

	)

93 
	#DEVAPC_D3_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0314))

	)

94 
	#DEVAPC_D3_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0318))

	)

95 
	#DEVAPC_D3_APC_7
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x031C))

	)

97 
	#DEVAPC_D4_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0400))

	)

98 
	#DEVAPC_D4_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0404))

	)

99 
	#DEVAPC_D4_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0408))

	)

100 
	#DEVAPC_D4_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x040C))

	)

101 
	#DEVAPC_D4_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0410))

	)

102 
	#DEVAPC_D4_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0414))

	)

103 
	#DEVAPC_D4_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0418))

	)

106 
	#DEVAPC_D5_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0500))

	)

107 
	#DEVAPC_D5_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0504))

	)

108 
	#DEVAPC_D5_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0508))

	)

109 
	#DEVAPC_D5_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x050C))

	)

110 
	#DEVAPC_D5_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0510))

	)

111 
	#DEVAPC_D5_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0514))

	)

112 
	#DEVAPC_D5_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0518))

	)

115 
	#DEVAPC_D6_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0600))

	)

116 
	#DEVAPC_D6_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0604))

	)

117 
	#DEVAPC_D6_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0608))

	)

118 
	#DEVAPC_D6_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x060C))

	)

119 
	#DEVAPC_D6_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0610))

	)

120 
	#DEVAPC_D6_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0614))

	)

121 
	#DEVAPC_D6_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0618))

	)

124 
	#DEVAPC_D7_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0700))

	)

125 
	#DEVAPC_D7_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0704))

	)

126 
	#DEVAPC_D7_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0708))

	)

127 
	#DEVAPC_D7_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x070C))

	)

128 
	#DEVAPC_D7_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0710))

	)

129 
	#DEVAPC_D7_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0714))

	)

130 
	#DEVAPC_D7_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0718))

	)

133 
	#DEVAPC_MAS_DOM_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0A00))

	)

134 
	#DEVAPC_MAS_DOM_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0A04))

	)

135 
	#DEVAPC_MAS_SEC
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0B00))

	)

137 
	#DEVAPC_APC_CON
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0F00))

	)

138 
	#DEVAPC_APC_LOCK_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0F04))

	)

139 
	#DEVAPC_APC_LOCK_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0F08))

	)

140 
	#DEVAPC_APC_LOCK_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0F0C))

	)

144 
	#DEVAPC_PD_APC_CON
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0F00))

	)

145 
	#DEVAPC_D0_VIO_MASK_0
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0000))

	)

146 
	#DEVAPC_D0_VIO_MASK_1
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0004))

	)

147 
	#DEVAPC_D0_VIO_MASK_2
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0008))

	)

148 
	#DEVAPC_D0_VIO_MASK_3
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x000C))

	)

149 
	#DEVAPC_D0_VIO_MASK_4
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0010))

	)

150 
	#DEVAPC_D0_VIO_STA_0
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0400))

	)

151 
	#DEVAPC_D0_VIO_STA_1
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0404))

	)

152 
	#DEVAPC_D0_VIO_STA_2
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0408))

	)

153 
	#DEVAPC_D0_VIO_STA_3
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x040C))

	)

154 
	#DEVAPC_D0_VIO_STA_4
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0410))

	)

156 
	#DEVAPC_VIO_DBG0
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0900))

	)

157 
	#DEVAPC_VIO_DBG1
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0904))

	)

158 
	#DEVAPC_DEC_ERR_CON
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0F80))

	)

159 
	#DEVAPC_DEC_ERR_ADDR
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0F84))

	)

160 
	#DEVAPC_DEC_ERR_ID
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0F88))

	)

162 
	#INFRA_AO_SEC_CON
 ((vﬁ©ûê*)–
INFRACFG_AO_ba£
+0x0F00))

	)

163 
	#INFRA_RST_SEC_CON
 ((vﬁ©ûê*)–
INFRACFG_AO_ba£
+0x0F04))

	)

164 
	#INFRA_PDN_SEC_CON
 ((vﬁ©ûê*)–
INFRACFG_AO_ba£
+0x0F08))

	)

171 
	#SEJ_CG_PROTECT_BIT
 ((0x1Ë<< 19Ë

	)

172 
	#TRNG_CG_PROTECT_BIT
 ((0x1Ë<< 2Ë

	)

175 
	#DOMAIN_AP
 0

	)

176 
	#DOMAIN_MD1
 1

	)

177 
	#DOMAIN_MD2
 2

	)

178 
	#DOMAIN_MM
 3

	)

180 
	#MOD_NO_IN_1_DEVAPC
 16

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/l2c/l2c.c

1 
	~<∂©f‹m_def.h
>

2 
	~<¨ch.h
>

3 
	~<¨ch_hñ≥rs.h
>

4 
	~<mmio.h
>

5 
	~<sù_îr‹.h
>

6 
	~<•ölock.h
>

7 
	~<debug.h
>

8 
	~"∂©_¥iv©e.h
"

9 
	~"l2c.h
"

12 
•ölock_t
 
	gl2_sh¨e_lock
;

14 
	$c⁄fig_L2_size
()

16 
ˇche_cfg0
;

19 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& (0xF << 
L2C_SIZE_CFG_OFF
);

20 
ˇche_cfg0
 = (ˇche_cfg0 << 1Ë| (0x1 << 
L2C_SIZE_CFG_OFF
);

21 
ˇche_cfg0
 = (
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0xF << 
L2C_SIZE_CFG_OFF
)) | cache_cfg0;

22 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

23 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

24 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

27 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_512K
 << 
L2C_SIZE_CFG_OFF
);

28 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

29 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

30 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

32 
	}
}

34 
uöt64_t
 
	$swôch_L2_size
(
uöt64_t
 
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
)

36 
ˇche_cfg0
, 
ˇche_cfg1
;

37 
ªt
 = 
SIP_SVC_E_SUCCESS
;

38 
l2c_sh¨e_öfo
 
sh¨e_öfo
;

40 
sh¨e_öfo
.
˛u°î_b‹row
 = (
˛u°î_b‹row_ªtu∫
 >> 16) & 0xFFFF;

41 
sh¨e_öfo
.
˛u°î_ªtu∫
 = 
˛u°î_b‹row_ªtu∫
 & 0xFFFF;

42 
sh¨e_öfo
.
sh¨e_˛u°î_num
 = share_cluster_num;

44 
	`•ö_lock
(&
l2_sh¨e_lock
);

48 
	`dis_i_d_dcsw_›_Æl
(
DCCISW
);

52 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

53 
ˇche_cfg0
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

54 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
);

55 
ˇche_cfg1
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

57 
›ti⁄
) {

58 
BORROW_L2
:

59 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

61 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

62 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

63 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

64 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

67 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

69 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

70 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

71 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

72 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

75 
ˇche_cfg1
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

76 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

77 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

78 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

82 
RETURN_L2
:

83 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

85 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

86 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

87 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

88 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

91 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

93 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

94 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

95 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

96 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

99 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

100 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

101 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

102 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

106 if((
	`gë_devöfo_wôh_ödex
(0)&0xff) == 0xc0)

108 
	`¥ötf
("switch L2$ size 5.1\n");

110 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_256K
 << 
L2C_SIZE_CFG_OFF
);

111 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

112 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

113 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

123 
ªt
 = 
SIP_SVC_E_NOT_SUPPORTED
;

128 
	`íabÀ_ˇche
();

130 
	`¥ötf
("switch L2$ size 7\n");

132 
	`•ö_u∆ock
(&
l2_sh¨e_lock
);

134  
ªt
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/l2c/l2c.h

1 #i‚de‡
_MT_L2C_H_


2 
	#_MT_L2C_H_


	)

4 
	#CONFIGED_256K
 0x1

	)

5 
	#CONFIGED_512K
 0x3

	)

6 
	#L2C_SIZE_CFG_OFF
 8

	)

7 
	#L2C_SHARE_ENABLE
 12

	)

9 
	e›ti⁄s
{

10 
	mBORROW_L2
,

11 
	mRETURN_L2
,

12 
	mBORROW_NONE


15 
	s_l2c_sh¨e_öfo
{

16 
uöt32_t
 
	msh¨e_˛u°î_num
;

17 
uöt32_t
 
	m˛u°î_b‹row
;

18 
uöt32_t
 
	m˛u°î_ªtu∫
;

19 }
	tl2c_sh¨e_öfo
;

21 
c⁄fig_L2_size
();

22 
uöt64_t
 
swôch_L2_size
(uöt64_à
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/log/log.c

38 
	~<log.h
>

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<°döt.h
>

42 
	~<∂©f‹m.h
>

43 
	~<¨ch.h
>

44 
	~<¨ch_hñ≥rs.h
>

45 
	~<mmio.h
>

46 
	~<∂©_def.h
>

48 
	#DEBUG_LOG_SERVICE
 1

	)

49 #i‡
DEBUG_LOG_SERVICE


50 
	#debug_¥öt
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

52 
	#debug_¥öt
(...Ë(()0)

	)

55 
bl31_log_£rvi˚_ªgi°î
((*
lock_gë
)(),

56 (*
log_putc
)(),

57 (*
lock_ªÀa£
)());

59 
	`bl31_log_£rvi˚_ªgi°î2
((*
lock_gë
)(),

60 (*
log_putc
)(),

61 (*
lock_ªÀa£
)());

64 
mt_log_buf_°¨t
 = 0;

65 
mt_log_buf_size
 = 0;

66 
mt_log_buf_íd
 = 0;

67 *
mt_ex˚±i⁄_buf_íd
 = 0;

68 
©f_log_˘æ_t
 *
p_©f_log_˘æ
 = 0;

69 *
±r_©f_¸ash_Êag
 = 0;

70 *
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = 0;

73 
	$mt_log_su•íd_Êush
()

75 if–
mt_log_buf_size
 != 0 )

77 
	`Êush_dˇche_ønge
((
uöt64_t
)
mt_log_buf_°¨t
, (uöt64_t)
mt_log_buf_size
);

79 
	}
}

82 
	$mt_log_lock_acquúe
()

84 
	`•ö_lock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

87 
	}
}

90 
	$mt_log_wrôe
(
c
)

92 *(*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
c
;

94 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
++;

96 if–
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 < 
mt_log_buf_íd
 )

97 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
++;

99 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

102 
	}
}

104 
	$mt_log_wrôe2
(
c
)

106 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

107 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

108 *
±r_ex_buf
 = 
NULL
;

109 *
±r_wrôe_pos
 = 
NULL
;

112 if(
±r_©f_¸ash_Êag
 =
NULL
)

115 
±r_wrôe_pos
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
löór_id
];

116 
±r_ex_buf
 = (*)((
uöçå_t
)*
±r_wrôe_pos
);

119 if((
uöçå_t
)
±r_ex_buf
 <(uöçå_t)
mt_ex˚±i⁄_buf_íd
) {

120 *
±r_ex_buf
 = 
c
;

121 (*
±r_wrôe_pos
)++;

127 
	}
}

130 
	$mt_¸ash_log_dump
(
uöt8_t
 *
¸ash_log_addr
, 
uöt32_t
 
¸ash_log_size
)

133 
uöt64_t
 
ªt
 = 0;

134 
uöt64_t
 
ªad_cou¡
;

135 
uöt64_t
 
off£t
;

136 
uöt64_t
 
pos
;

137 
uöt64_t
 
wrôe_cou¡
 = 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
;

138 
uöt8_t
 *
r_±r
 = 
NULL
;

139 
uöt8_t
 *
w_±r
 = 
NULL
;

140 
uöt8_t
 *
°¨t_±r
 = (uöt8_t*)(
uöçå_t
)(
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
);

142 if(
wrôe_cou¡
 == 0)

145 if(
wrôe_cou¡
 > 
¸ash_log_size
) {

146 
off£t
 = 
¸ash_log_size
-1;

147 
ªad_cou¡
 = 
¸ash_log_size
;

149 
off£t
 = 
wrôe_cou¡
-1;

150 
ªad_cou¡
 = 
wrôe_cou¡
;

153 
pos
 = 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
-1;

154 if(
pos
 < (
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
))

155 
pos
 = 
mt_log_buf_íd
;

156 
r_±r
 = (
uöt8_t
 *)((
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

158 
w_±r
 = 
¸ash_log_addr
 + 
off£t
;

159 
ªad_cou¡
) {

160 *(
w_±r
--Ë*(
r_±r
--);

161 if(
r_±r
 < 
°¨t_±r
)

162 
r_±r
 = (
uöt8_t
*)(
uöçå_t
)
mt_log_buf_íd
;

163 
ªad_cou¡
--;

164 
ªt
++;

167  
ªt
;

168 
	}
}

170 
	$mt_gë_uƒód_log_size
()

172 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =p_©f_log_˘æ->öfo.
©f_wrôe_pos
)

176 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 <Ö_©f_log_˘æ->öfo.
©f_wrôe_pos
)

178  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 -Ö_©f_log_˘æ->öfo.
©f_ªad_pos
);

182  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 +Ö_©f_log_˘æ->öfo.
©f_buf_size
)

183 - 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
;

184 
	}
}

187 
	$mt_log_lock_ªÀa£
()

189 
©f_buf_uƒód_size
 = 
	`mt_gë_uƒód_log_size
();

192 if(
©f_buf_uƒód_size
 >
ATF_LOG_SIGNAL_THRESHOLD_SIZE
)

199 if(
p_©f_log_˘æ
->
öfo
.
©f_ªadî_Æive
)

201 
	`mt_©f_åiggî_úq
();

202 
p_©f_log_˘æ
->
öfo
.
©f_úq_cou¡
++;

205 
p_©f_log_˘æ
->
öfo
.
©f_buf_uƒód_size
 =átf_buf_unread_size;

208 
	`•ö_u∆ock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

211 
	}
}

213 
uöt32_t
 
	$is_powî_⁄_boŸ
()

215 
uöt32_t
 
wdt_°a
, 
wdt_öãrvÆ
;

216 
wdt_°a
 = 
	`mmio_ªad_32
(
MTK_WDT_STATUS
);

217 
wdt_öãrvÆ
 = 
	`mmio_ªad_32
(
MTK_WDT_INTERVAL
);

218 
	`¥ötf
("°a=0x%x i¡=0x%x\r\n", 
wdt_°a
, 
wdt_öãrvÆ
);

222 if(
wdt_öãrvÆ
 & (1<<2))

225 
	}
}

227 
	$mt_log_£t_¸ash_Êag
()

229 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

230 
	}
}

232 
	$mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
)

234 
uöt32_t
 
dump_ªt
=0;

235 
i
;

236 
mt_log_buf_°¨t
 = 
°¨t
;

237 
mt_log_buf_size
 = 
size
;

238 
mt_log_buf_íd
 = 
°¨t
 + 
size
 - 1 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

239 
mt_ex˚±i⁄_buf_íd
 = (*)(
uöçå_t
)(
°¨t
 + 
size
 - 1 - 
´e_buf_size
);

241 
p_©f_log_˘æ
 = (
©f_log_˘æ_t
*)(
uöçå_t
)
°¨t
;

244 
±r_©f_¸ash_Êag
 = &
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
;

245 
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[0];

247 if(
	`is_powî_⁄_boŸ
()) {

248 
	`debug_¥öt
("is_power_on_boot:Årue\n");

249 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

251 
	`debug_¥öt
("is_power_on_boot: false\n");

252 if(
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 =
ATF_CRASH_MAGIC_NO
) {

253 
	`debug_¥öt
("¸ash fœg: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

254 
	`debug_¥öt
("©f_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

255 
	`debug_¥öt
("©f_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

256 
	`debug_¥öt
("dump crashlog\n");

257 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

258 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

259 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

260 
	`debug_¥öt
("©f_¸ash_log_addr: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

261 
dump_ªt
 = 
	`mt_¸ash_log_dump
((
uöt8_t
*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
, 
ATF_CRASH_LAST_LOG_SIZE
);

262 
	`debug_¥öt
("dump_ªt=%d.\n", 
dump_ªt
);

267 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0,

268 
size
-
´e_buf_size
-
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

269 
	`mem£t
((*)(
uöçå_t
)(
°¨t
+(
size
-
´e_buf_size
)), 0x0,áee_buf_size);

271 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

275 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
 = 
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

276 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
 = 
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

277 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

278 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

279 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

280 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
 = 0;

282 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

283 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

284 
	`debug_¥öt
("mt_log_£tu∞-átf_wrôe_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

285 
	`debug_¥öt
("mt_log_£tu∞-átf_ªad_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
);

286 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_lock : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
);

287 
	`debug_¥öt
("mt_log_£tu∞- mt_log_buf_íd : 0x%x\n", 
mt_log_buf_íd
);

289 
	`debug_¥öt
("mt_log_£tu∞- ATF_CRASH_LAST_LOG_SIZE : 0x%x\n", 
ATF_CRASH_LAST_LOG_SIZE
);

290 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE_PER_CPU : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE_PER_CPU
);

291 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE
);

292 
	`debug_¥öt
("mt_log_£tu∞- PLATFORM_CORE_COUNT : 0x%x\n", 
PLATFORM_CORE_COUNT
);

294 
i
=0; i<
PLATFORM_CORE_COUNT
; i++) {

295 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
i
] = (
°¨t
+(
size
-
´e_buf_size
)-
ATF_EXCEPT_BUF_SIZE
)+ i*
ATF_EXCEPT_BUF_SIZE_PER_CPU
;

296 
	`debug_¥öt
("mt_log_£tu∞-átf_ex˚±_wrôe_pos_≥r_˝u[%d]: 0x%x\n", 
i
, 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[i]);

299 if(
dump_ªt
) {

301 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

302 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

303 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
 = 
ATF_CRASH_LAST_LOG_SIZE
 + 
ATF_EXCEPT_BUF_SIZE
;

304 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

307 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_Êag : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

308 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

309 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
);

311 
	`bl31_log_£rvi˚_ªgi°î
(&
mt_log_lock_acquúe
, &
mt_log_wrôe
,

312 &
mt_log_lock_ªÀa£
);

313 
	`bl31_log_£rvi˚_ªgi°î2
(
NULL
, &
mt_log_wrôe2
, NULL);

314 
	}
}

317 
	#MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 120

	)

318 
	#TBASE_TAG
 "TBASE"

	)

319 
	gmt_log_£cuª_os_buf
[
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
+1] = {0};

320 
	gmt_log_£cuª_os_pos
 = 0;

322 
	$mt_log_£cuª_os_¥öt
(
c
)

324 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = 
c
;

327 if–
c
 == '\n' )

329 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
+1] = '\0';

330 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

331 
mt_log_£cuª_os_pos
 = 0;

335 
mt_log_£cuª_os_pos
++;

338 if–
mt_log_£cuª_os_pos
 =
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 )

340 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = '\0';

341 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

342 
mt_log_£cuª_os_pos
 = 0;

344 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/log/log.h

49 #i‚de‡
ATF_LOG_DRV_H


50 
	#ATF_LOG_DRV_H


	)

52 
	~<•ölock.h
>

53 
	~<°döt.h
>

54 
	~<∂©f‹m_def.h
>

56 
	#ATF_LOG_CTRL_BUF_SIZE
 256

	)

57 
	#ATF_LOG_SIGNAL_THRESHOLD_SIZE
 1024

	)

59 
	#ATF_CRASH_MAGIC_NO
 0xdód1abf

	)

75 
	#ATF_CRASH_LAST_LOG_SIZE
 (32*1024)

	)

76 
	#ATF_EXCEPT_BUF_SIZE_PER_CPU
 (4*1024)

	)

77 
	#ATF_EXCEPT_BUF_SIZE
 (
ATF_EXCEPT_BUF_SIZE_PER_CPU
 * 
PLATFORM_CORE_COUNT
)

	)

79 
	u©f_log_˘æ


83 
	m©f_buf_addr
;

84 
	m©f_buf_size
;

85 
	m©f_wrôe_pos
;

86 
	m©f_ªad_pos
;

87 
•ölock_t
 
	m©f_buf_lock
;

88 
	m©f_buf_uƒód_size
;

89 
	m©f_úq_cou¡
;

90 
	m©f_ªadî_Æive
;

91 
uöt64_t
 
	m©f_tŸÆ_wrôe_cou¡
;

92 
uöt64_t
 
	m©f_tŸÆ_ªad_cou¡
;

93 
	m©f_´e_dbg_buf_addr
;

94 
	m©f_´e_dbg_buf_size
;

95 
	m©f_¸ash_log_addr
;

96 
	m©f_¸ash_log_size
;

97 
	m©f_¸ash_Êag
;

98 
	m©f_ex˚±_wrôe_pos_≥r_˝u
[
PLATFORM_CORE_COUNT
];

99 } 
	möfo
;

100 
	md©a
[
ATF_LOG_CTRL_BUF_SIZE
];

101 } 
	t©f_log_˘æ_t
;

103 
mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
);

104 
mt_log_lock_acquúe
();

105 
mt_log_wrôe
(
c
);

106 
mt_log_lock_ªÀa£
();

107 
mt_log_su•íd_Êush
();

108 
mt_log_£cuª_os_¥öt
(
c
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/timer/mt_cpuxgpt.c

37 
	~<°döt.h
>

38 
	~<¨ch_hñ≥rs.h
>

39 
	~"ty≥defs.h
"

40 
	~"∂©f‹m.h
"

41 
	~"mt_˝uxg±.h
"

43 
	#CPUXGPT_BASE
 0x10200000

	)

44 
	#INDEX_BASE
 (
CPUXGPT_BASE
+0x0674)

	)

45 
	#CTL_BASE
 (
CPUXGPT_BASE
+0x0670)

	)

47 
__u64
 
	gn‹mÆ_time_ba£
;

48 
__u64
 
	g©f_time_ba£
;

51 
	$__ªad_˝uxg±
(
ªg_ödex
 )

53 
vÆue
 = 0;

54 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

56 
vÆue
 = 
	`DRV_Reg32
(
CTL_BASE
);

57  
vÆue
;

58 
	}
}

61 
	$__wrôe_˝uxg±
(
ªg_ödex
,
vÆue
 )

64 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

65 
	`DRV_WrôeReg32
(
CTL_BASE
,
vÆue
);

66 
	}
}

68 
	$__˝uxg±_£t_öô_˙t
(
cou¡H
,
cou¡L
)

70 
	`__wrôe_˝uxg±
(
INDEX_CNT_H_INIT
,
cou¡H
);

71 
	`__wrôe_˝uxg±
(
INDEX_CNT_L_INIT
,
cou¡L
);

72 
	}
}

74 
	$gíîic_timî_backup
()

76 
__u64
 
cvÆ
;

78 
cvÆ
 = 
	`ªad_˙ç˘_ñ0
();

79 
	`__˝uxg±_£t_öô_˙t
((
__u32
)(
cvÆ
 >> 32), (__u32)(cval & 0xffffffff));

80 
	}
}

82 
	$©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
)

84 
n‹mÆ_time_ba£
 = 
n‹mÆ_ba£
;

85 
©f_time_ba£
 = 
©f_ba£
;

87 
	}
}

89 
	$©f_sched_˛ock
()

91 
__u64
 
cvÆ
;

93 
cvÆ
 = (((
	`ªad_˙ç˘_ñ0
(Ë- 
©f_time_ba£
)*1000)/13Ë+ 
n‹mÆ_time_ba£
;

94  
cvÆ
;

95 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/timer/mt_cpuxgpt.h

49 #i‚de‡
_MT_CPUXGPT_H_


50 
	#_MT_CPUXGPT_H_


	)

53 
	e˝uxg±_num
 {

54 
	mCPUXGPT0
=0,

55 
	mCPUXGPT1
,

56 
	mCPUXGPT2
,

57 
	mCPUXGPT3
,

58 
	mCPUXGPT4
,

59 
	mCPUXGPT5
,

60 
	mCPUXGPT6
,

61 
	mCPUXGPT7
,

62 
	mCPUXGPTNUMBERS
,

63 }
	tCPUXGPT_NUM
;

65 
	#CPUXGPT0_IRQID
 96

	)

66 
	#CPUXGPT1_IRQID
 97

	)

67 
	#CPUXGPT2_IRQID
 98

	)

68 
	#CPUXGPT3_IRQID
 99

	)

69 
	#CPUXGPT4_IRQID
 100

	)

70 
	#CPUXGPT5_IRQID
 101

	)

71 
	#CPUXGPT6_IRQID
 102

	)

72 
	#CPUXGPT7_IRQID
 103

	)

74 
	#CPUXGPT_IRQID_BASE
 
CPUXGPT0_IRQID


	)

77 
	#INDEX_CTL_REG
 0x000

	)

78 
	#INDEX_STA_REG
 0x004

	)

79 
	#INDEX_CNT_L_INIT
 0x008

	)

80 
	#INDEX_CNT_H_INIT
 0x00C

	)

81 
	#INDEX_IRQ_MASK
 0x030

82 

	)

83 
	#INDEX_CMP_BASE
 0x034

	)

87 
	#EN_CPUXGPT
 0x01

	)

88 
	#EN_AHLT_DEBUG
 0x02

	)

92 
	#CLK_DIV1
 (0x1 << 8)

	)

93 
	#CLK_DIV2
 (0x2 << 8)

	)

94 
	#CLK_DIV4
 (0x4 << 8)

	)

95 
	#CLK_DIV_MASK
 (~(0x7<<8))

	)

97 
	#CPUX_GPT0_ACK
 (1<<0x0)

	)

98 
	#CPUX_GPT1_ACK
 (1<<0x1)

	)

99 
	#CPUX_GPT2_ACK
 (1<<0x2)

	)

100 
	#CPUX_GPT3_ACK
 (1<<0x3)

	)

101 
	#CPUX_GPT4_ACK
 (1<<0x4)

	)

102 
	#CPUX_GPT5_ACK
 (1<<0x5)

	)

103 
	#CPUX_GPT6_ACK
 (1<<0x6)

	)

104 
	#CPUX_GPT7_ACK
 (1<<0x7)

	)

107 
gíîic_timî_backup
();

108 
©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

109 
©f_sched_˛ock
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/timer/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/uart/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/uart/uart.c

37 
	~<°döt.h
>

38 
	~<as£π.h
>

39 
	~<c⁄sﬁe.h
>

40 
	~"ty≥defs.h
"

41 
	~"∂©f‹m.h
"

42 
	~"u¨t.h
"

48 
	#Dñay_Cou¡
 324675

	)

50 
	#UART_BASE
(
u¨t
Ë(u¨t)

	)

52 
	#UART_RBR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

53 
	#UART_THR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

54 
	#UART_IER
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

55 
	#UART_IIR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

56 
	#UART_FCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

57 
	#UART_LCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0xc)

	)

58 
	#UART_MCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

59 
	#UART_LSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

60 
	#UART_MSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

61 
	#UART_SCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

62 
	#UART_DLL
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0)

	)

63 
	#UART_DLH
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

64 
	#UART_EFR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8)

	)

65 
	#UART_XON1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

66 
	#UART_XON2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

67 
	#UART_XOFF1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

68 
	#UART_XOFF2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

69 
	#UART_AUTOBAUD_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x20)

	)

70 
	#UART_HIGHSPEED
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x24)

	)

71 
	#UART_SAMPLE_COUNT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x28)

	)

72 
	#UART_SAMPLE_POINT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x2c)

	)

73 
	#UART_AUTOBAUD_REG
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x30)

	)

74 
	#UART_RATE_FIX_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x34)

	)

75 
	#UART_AUTOBAUD_SAMPLE
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x38)

	)

76 
	#UART_GUARD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x3c)

	)

77 
	#UART_ESCAPE_DAT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x40)

	)

78 
	#UART_ESCAPE_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x44)

	)

79 
	#UART_SLEEP_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x48)

	)

80 
	#UART_VFIFO_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4c)

	)

81 
	#UART_RXTRI_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x50)

	)

85 
	#UART_SET_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(
uöçå_t
)(REG)Ë|(U32)(BS))

	)

86 
	#UART_CLR_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(REG)Ë&~((U32)(BS)))

	)

87 
	#UART_WRITE16
(
VAL
, 
REG
Ë
	`DRV_WrôeReg
(REG,VAL)

	)

88 
	#UART_READ32
(
REG
Ë
	`DRV_Reg32
(REG)

	)

89 
	#UART_WRITE32
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

91 #i‡
CFG_FPGA_PLATFORM


92 vﬁ©ûê
	gg_u¨t
 = 
UART1
;

93 
	#UART_SRC_CLK
 
FPGA_UART_CLOCK


	)

95 vﬁ©ûê
	gg_u¨t
 = 
UART2
;

96 
	#UART_SRC_CLK
 
EVB_UART_CLOCK


	)

99 
	gIsOuçutToUARTFœg
=1;

102 
	$WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
)

104 *(vﬁ©ûê
uöt8_t
*)
addr
 = 
vÆue
;

105 
	}
}

108 
uöt8_t
 
	$READ_REGISTER_UINT8
(
uöçå_t
 
addr
)

110  *(vﬁ©ûê
uöt8_t
*)
addr
;

111 
	}
}

113 
	$WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
)

115 *(vﬁ©ûê
uöt32_t
*)
addr
 = 
vÆue
;

116 
	}
}

118 
uöt32_t
 
	$READ_REGISTER_UINT32
(
uöçå_t
 
addr
)

120  *(vﬁ©ûê
uöt32_t
*)
addr
;

121 
	}
}

123 
	$WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
)

125 *(vﬁ©ûê
uöt16_t
*)
addr
 = 
vÆue
;

126 
	}
}

128 
uöt16_t
 
	$READ_REGISTER_UINT16
(
uöçå_t
 
addr
)

130  *(vﬁ©ûê
uöt16_t
*)
addr
;

131 
	}
}

135 
	$£rül_£tbrg
 (
U32
 
u¨t˛k
, U32 
baudøã
)

137 #i‡(
CFG_FPGA_PLATFORM
)

138 
	#MAX_SAMPLE_COUNT
 256

	)

140 
U16
 
tmp
;

141 
U32
 
divis‹
;

142 
U32
 
ßm∂e_d©a
;

143 
U32
 
ßm∂e_cou¡
;

144 
U32
 
ßm∂e_poöt
;

147 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

160 
	`UART_WRITE32
(0x0003, 
	`UART_HIGHSPEED
(
g_u¨t
));

164 
ßm∂e_d©a
 = (
u¨t˛k
+(
baudøã
/2))/baudrate;

166 
divis‹
 = (
ßm∂e_d©a
+(
MAX_SAMPLE_COUNT
-1))/MAX_SAMPLE_COUNT;

168 
ßm∂e_cou¡
 = 
ßm∂e_d©a
/
divis‹
;

170 
ßm∂e_poöt
 = (
ßm∂e_cou¡
-1)/2;

172 
	`UART_WRITE32
((
ßm∂e_cou¡
-1), 
	`UART_SAMPLE_COUNT
(
g_u¨t
));

174 
	`UART_WRITE32
(
ßm∂e_poöt
, 
	`UART_SAMPLE_POINT
(
g_u¨t
));

176 
tmp
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

177 
	`UART_WRITE32
((
tmp
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

179 
	`UART_WRITE32
((
divis‹
&0xFF), 
	`UART_DLL
(
g_u¨t
));

180 
	`UART_WRITE32
(((
divis‹
>>8)&0xFF), 
	`UART_DLH
(
g_u¨t
));

181 
	`UART_WRITE32
(
tmp
, 
	`UART_LCR
(
g_u¨t
));

184 
byã
;

185 
high•ìd
;

186 
quŸ
, 
divis‹
, 
ªmaödî
;

188 i‡(
baudøã
 <= 115200 ) {

189 
high•ìd
 = 0;

190 
quŸ
 = 16;

192 
high•ìd
 = 2;

193 
quŸ
 = 4;

197 
divis‹
 = 
u¨t˛k
 / (
quŸ
 * 
baudøã
);

198 
ªmaödî
 = 
u¨t˛k
 % (
quŸ
 * 
baudøã
);

200 i‡(
ªmaödî
 >(
quŸ
 / 2Ë* 
baudøã
)

201 
divis‹
 += 1;

203 
	`UART_WRITE16
(
high•ìd
, 
	`UART_HIGHSPEED
(
g_u¨t
));

204 
byã
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

205 
	`UART_WRITE32
((
byã
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

206 
	`UART_WRITE32
((
divis‹
 & 0x00ff), 
	`UART_DLL
(
g_u¨t
));

207 
	`UART_WRITE32
(((
divis‹
 >> 8)&0x00ff), 
	`UART_DLH
(
g_u¨t
));

210 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

212 
	}
}

216 
	$£rül_n⁄block_gëc
()

218  ()
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

219 
	}
}

221 
	$mtk_£rül_£t_cuºít_u¨t
(
MT65XX_UART
 
u¨t_ba£
)

223 
g_u¨t
 = 
u¨t_ba£
;

224 
	}
}

226 
	$mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
)

228 
g_u¨t
 = 
u¨t_p‹t
;

229 #i‡!
CFG_FPGA_PLATFORM


230 #ifde‡
GPIO_UART_UTXD1_PIN


231 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

232 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

235 #ifde‡
GPIO_UART_URXD1_PIN


236 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

237 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

238 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

239 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

242 #ifde‡
GPIO_UART_UTXD2_PIN


243 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD2_PIN
, 
GPIO_MODE_01
);

244 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD2_PIN
, 
GPIO_DIR_OUT
);

247 #ifde‡
GPIO_UART_URXD2_PIN


248 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD2_PIN
, 
GPIO_MODE_01
);

249 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD2_PIN
, 
GPIO_DIR_IN
);

250 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_ENABLE
);

251 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_UP
);

254 #ifde‡
GPIO_UART_UTXD3_PIN


255 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD3_PIN
, 
GPIO_MODE_01
);

256 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD3_PIN
, 
GPIO_DIR_OUT
);

259 #ifde‡
GPIO_UART_URXD3_PIN


260 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD3_PIN
, 
GPIO_MODE_01
);

261 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD3_PIN
, 
GPIO_DIR_IN
);

262 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_ENABLE
);

263 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_UP
);

267 
	#AP_PERI_GLOBALCON_RST0
 (
PERICFG_BASE
+0x0)

	)

268 
	#AP_PERI_GLOBALCON_PDN0
 (
PERICFG_BASE
+0x10)

	)

271 if(0 =
u¨t˛k
){

273 
u¨t˛k
 = 
UART_SRC_CLK
;

276 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
	`deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

278 
	`mtk_£rül_£t_cuºít_u¨t
(
UART2
);

280 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

281 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

282 
	`£rül_£tbrg
(
u¨t˛k
, 
CFG_LOG_BAUDRATE
);

286 #ifde‡
GPIO_UART_UTXD1_PIN


287 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

288 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

291 #ifde‡
GPIO_UART_URXD1_PIN


292 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

293 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

294 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

295 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

305 
	`UART_CLR_BITS
(1 << 22, 
AP_PERI_GLOBALCON_PDN0
);

307 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

308 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

309 
	`£rül_£tbrg
(
u¨t˛k
, 
baudøã
);

310 
	}
}

312 
	$PutUARTByã
 (c⁄° 
c
)

314 !(
	`UART_READ32
 (
	`UART_LSR
(
g_u¨t
)Ë& 
UART_LSR_THRE
))

318 i‡(
c
 == '\n')

320 
	`UART_WRITE32
 ((Ë0xD, 
	`UART_THR
(
g_u¨t
));

322 
	`UART_WRITE32
 ((Ë
c
, 
	`UART_THR
(
g_u¨t
));

323 
	}
}

325 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

326 
	$PutUART1_Byã
(c⁄° 
c
)

328 !(
	`UART_READ32
 (
	`UART_LSR
(
UART2
)Ë& 
UART_LSR_THRE
))

332 i‡(
c
 == '\n')

333 
	`UART_WRITE32
((Ë'\r', 
	`UART_THR
(
UART2
));

335 
	`UART_WRITE32
((Ë
c
, 
	`UART_THR
(
UART2
));

336 
	}
}

339 
	$GëUARTByãs
(
u8
 *
buf
, 
u32
 
size
, u32 
tmo_ms
)

343 
u32
 
LSR
;

344 
tmo_í
 = (
tmo_ms
) ? 1 : 0;

345 
ul⁄g
 
°¨t_time
 = 
	`gë_timî
(0);

347 
size
) {

348 i‡(
tmo_í
 && (
	`gë_timî
(
°¨t_time
Ë> 
tmo_ms
))

352 i‡(!
tmo_í
)

353 
	`∂©f‹m_wdt_kick
();

355 
LSR
 = 
	`UART_READ32
(
	`UART_LSR
(
g_u¨t
));

356 i‡(
LSR
 & 
UART_LSR_DR
) {

357 *
buf
++ = (
u8
)
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

358 
size
--;

362  (0 =
size
) ? 0 : -1;

366 
	}
}

368 
	$c⁄sﬁe_öô
(
ba£_addr
)

375 
	`as£π
(
ba£_addr
);

378 
g_u¨t
 = 
ba£_addr
;

380 
	#CFG_LOG_BAUDRATE
 921600

	)

382 #i‡
CFG_FPGA_PLATFORM


383 
	#UART_SRC_CLK_FRQ
 (12000000)

	)

385 
	#UART_SRC_CLK_FRQ
 (0Ë

	)

390 
	`mtk_u¨t_öô
(
ba£_addr
, 
UART_SRC_CLK_FRQ
, 
CFG_LOG_BAUDRATE
);

393 
	}
}

395 
	$c⁄sﬁe_putc
(
c
)

397 if(
IsOuçutToUARTFœg
){

398 
	`PutUARTByã
 (
c
);

400  
c
;

401 
	}
}

403 
	$c⁄sﬁe_gëc
()

405 
c
 = 0;

406 if(
IsOuçutToUARTFœg
){

407 
	`GëUARTByãs
(&
c
, 1, 10);

409  
c
;

410 
	}
}

411 
	$£t_u¨t_Êag
()

413 
IsOuçutToUARTFœg
=1;

414 
	}
}

415 
	$˛ór_u¨t_Êag
()

417 
IsOuçutToUARTFœg
=0;

418 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/uart/uart.h

49 #i‚de‡
UART_HW_H


50 
	#UART_HW_H


	)

53 
	~"∂©_def.h
"

57 
	#UART_FCR_FIFOE
 (1 << 0)

	)

58 
	#UART_FCR_CLRR
 (1 << 1)

	)

59 
	#UART_FCR_CLRT
 (1 << 2)

	)

60 
	#UART_FCR_DMA1
 (1 << 3)

	)

61 
	#UART_FCR_RXFIFO_1B_TRI
 (0 << 6)

	)

62 
	#UART_FCR_RXFIFO_6B_TRI
 (1 << 6)

	)

63 
	#UART_FCR_RXFIFO_12B_TRI
 (2 << 6)

	)

64 
	#UART_FCR_RXFIFO_RX_TRI
 (3 << 6)

	)

65 
	#UART_FCR_TXFIFO_1B_TRI
 (0 << 4)

	)

66 
	#UART_FCR_TXFIFO_4B_TRI
 (1 << 4)

	)

67 
	#UART_FCR_TXFIFO_8B_TRI
 (2 << 4)

	)

68 
	#UART_FCR_TXFIFO_14B_TRI
 (3 << 4)

	)

70 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

71 
	#UART_FCR_NORMAL
 (
UART_FCR_FIFO_INIT
 | \

72 
UART_FCR_TXFIFO_4B_TRI
| \

73 
UART_FCR_RXFIFO_12B_TRI
)

	)

77 
	#UART_LCR_BREAK
 (1 << 6)

	)

78 
	#UART_LCR_DLAB
 (1 << 7)

	)

80 
	#UART_WLS_5
 (0 << 0)

	)

81 
	#UART_WLS_6
 (1 << 0)

	)

82 
	#UART_WLS_7
 (2 << 0)

	)

83 
	#UART_WLS_8
 (3 << 0)

	)

84 
	#UART_WLS_MASK
 (3 << 0)

	)

86 
	#UART_1_STOP
 (0 << 2)

	)

87 
	#UART_2_STOP
 (1 << 2)

	)

88 
	#UART_1_5_STOP
 (1 << 2Ë

	)

89 
	#UART_STOP_MASK
 (1 << 2)

	)

91 
	#UART_NONE_PARITY
 (0 << 3)

	)

92 
	#UART_ODD_PARITY
 (0x1 << 3)

	)

93 
	#UART_EVEN_PARITY
 (0x3 << 3)

	)

94 
	#UART_MARK_PARITY
 (0x5 << 3)

	)

95 
	#UART_SPACE_PARITY
 (0x7 << 3)

	)

96 
	#UART_PARITY_MASK
 (0x7 << 3)

	)

99 
	#UART_MCR_DTR
 (1 << 0)

	)

100 
	#UART_MCR_RTS
 (1 << 1)

	)

101 
	#UART_MCR_OUT1
 (1 << 2)

	)

102 
	#UART_MCR_OUT2
 (1 << 3)

	)

103 
	#UART_MCR_LOOP
 (1 << 4)

	)

104 
	#UART_MCR_XOFF
 (1 << 7Ë

	)

105 
	#UART_MCR_NORMAL
 (
UART_MCR_DTR
|
UART_MCR_RTS
)

	)

108 
	#UART_LSR_DR
 (1 << 0)

	)

109 
	#UART_LSR_OE
 (1 << 1)

	)

110 
	#UART_LSR_PE
 (1 << 2)

	)

111 
	#UART_LSR_FE
 (1 << 3)

	)

112 
	#UART_LSR_BI
 (1 << 4)

	)

113 
	#UART_LSR_THRE
 (1 << 5)

	)

114 
	#UART_LSR_TEMT
 (1 << 6)

	)

115 
	#UART_LSR_FIFOERR
 (1 << 7)

	)

118 
	#UART_MSR_DCTS
 (1 << 0)

	)

119 
	#UART_MSR_DDSR
 (1 << 1)

	)

120 
	#UART_MSR_TERI
 (1 << 2)

	)

121 
	#UART_MSR_DDCD
 (1 << 3)

	)

122 
	#UART_MSR_CTS
 (1 << 4)

	)

123 
	#UART_MSR_DSR
 (1 << 5)

	)

124 
	#UART_MSR_RI
 (1 << 6)

	)

125 
	#UART_MSR_DCD
 (1 << 7)

	)

128 
	#UART_EFR_EN
 (1 << 4)

	)

129 
	#UART_EFR_AUTO_RTS
 (1 << 6)

	)

130 
	#UART_EFR_AUTO_CTS
 (1 << 7)

	)

131 
	#UART_EFR_SW_CTRL_MASK
 (0x‡<< 0)

	)

133 
	#UART_EFR_NO_SW_CTRL
 (0)

	)

134 
	#UART_EFR_NO_FLOW_CTRL
 (0)

	)

135 
	#UART_EFR_AUTO_RTSCTS
 (
UART_EFR_AUTO_RTS
|
UART_EFR_AUTO_CTS
)

	)

136 
	#UART_EFR_XON1_XOFF1
 (0xaË

	)

137 
	#UART_EFR_XON2_XOFF2
 (0x5Ë

	)

138 
	#UART_EFR_XON12_XOFF12
 (0xfË

	)

141 
	#UART_EFR_XON1_XOFF1_MASK
 (0xa)

	)

142 
	#UART_EFR_XON2_XOFF2_MASK
 (0x5)

	)

145 
	#UART_IIR_NO_INT_PENDING
 (0x01)

	)

146 
	#UART_IIR_RLS
 (0x06Ë

	)

147 
	#UART_IIR_RDA
 (0x04Ë

	)

148 
	#UART_IIR_CTI
 (0x0CË

	)

149 
	#UART_IIR_THRE
 (0x02Ë

	)

151 
	#UART_IIR_MS
 (0x00Ë

	)

152 
	#UART_IIR_SW_FLOW_CTRL
 (0x10Ë

	)

153 
	#UART_IIR_HW_FLOW_CTRL
 (0x20Ë

	)

154 
	#UART_IIR_FIFO_EN
 (0xc0)

	)

155 
	#UART_IIR_INT_MASK
 (0x1f)

	)

158 
	#UART_RATE_FIX
 (1 << 0)

	)

161 
	#UART_FREQ_SEL
 (1 << 1)

	)

163 
	#UART_RATE_FIX_13M
 (1 << 0Ë

	)

164 
	#UART_AUTORATE_FIX_13M
 (1 << 1)

	)

165 
	#UART_FREQ_SEL_13M
 (1 << 2)

	)

166 
	#UART_RATE_FIX_ALL_13M
 (
UART_RATE_FIX_13M
|
UART_AUTORATE_FIX_13M
| \

167 
UART_FREQ_SEL_13M
)

	)

169 
	#UART_RATE_FIX_26M
 (0 << 0Ë

	)

170 
	#UART_AUTORATE_FIX_26M
 (0 << 1)

	)

171 
	#UART_FREQ_SEL_26M
 (0 << 2)

	)

172 
	#UART_RATE_FIX_ALL_26M
 (
UART_RATE_FIX_26M
|
UART_AUTORATE_FIX_26M
| \

173 
UART_FREQ_SEL_26M
)

	)

175 
	#UART_RATE_FIX_32M5
 (0 << 0Ë

	)

176 
	#UART_FREQ_SEL_32M5
 (0 << 1)

	)

177 
	#UART_RATE_FIX_ALL_32M5
 (
UART_RATE_FIX_32M5
|
UART_FREQ_SEL_32M5
)

	)

179 
	#UART_RATE_FIX_16M25
 (0 << 0Ë

	)

180 
	#UART_FREQ_SEL_16M25
 (0 << 1)

	)

181 
	#UART_RATE_FIX_ALL_16M25
 (
UART_RATE_FIX_16M25
|
UART_FREQ_SEL_16M25
)

	)

185 
	#UART_AUTOBADUSAM_13M
 7

	)

186 
	#UART_AUTOBADUSAM_26M
 15

	)

187 
	#UART_AUTOBADUSAM_52M
 31

	)

189 
	#UART_AUTOBAUDSAM_58_5M
 31

	)

192 
	#UART_VFIFO_ON
 (1 << 0)

	)

193 
	#UART_FCR_FIFOE
 (1 << 0)

	)

194 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

199 
	mUART1
 = 
UART0_BASE
,

200 
	mUART2
 = 
UART1_BASE
,

201 
	mUART3
 = 
UART2_BASE
,

202 
	mUART4
 = 
UART3_BASE


203 } 
	tMT65XX_UART
;

205 
	#PLL_ON_UART_CLOCK
 (13500000)

206 
	#PLL_OFF_UART_CLOCK
 (13500000)

207 

	)

209 
	#EVB_UART_CLOCK
 (26000000)

	)

210 
	#FPGA_UART_CLOCK
 (12000000)

	)

212 
mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/include/plat_macros.S

31 
	~<gic_v2.h
>

32 
	~"../∂©_def.h
"

34 .
	g£˘i⁄
 .
	grod©a
.
	ggic_ªg_«me
, "aS"

35 
	ggic_ªgs
: .
asciz
 "gic_iar", "gic_ctlr", ""

38 
	#GIC_REG_SIZE
 (2 * 8)

	)

45 .
ma¸o
 
∂©_¥öt_gic_ªgs


46 
mov
 
	gx0
, #CONFIG_GICC_ADDR

47 
bl
 
mt_gë_cfgv¨


49 
ldr
 
	gw1
, [
x0
, #GICC_IAR]

50 
ldr
 
	gw2
, [
x0
, #GICD_CTLR]

51 
sub
 
	g•
, sp, #GIC_REG_SIZE

52 
°p
 
	gx1
, 
	gx2
, [
•
]

53 
adr
 
	gx0
, 
gic_ªgs


54 
mov
 
	gx1
, 
•


55 
bl
 
¥öt_°rög_vÆue


56 
add
 
	g•
, sp, #GIC_REG_SIZE

57 .
	gídm


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/include/platform_def.h

31 #i‚de‡
__PLATFORM_DEF_H__


32 
	#__PLATFORM_DEF_H__


	)

34 
	~<¨ch.h
>

36 
	#CFG_FPGA_PLATFORM
 0

	)

37 
	#PLAT_USE_EL1_AARCH32


	)

42 
	#PLATFORM_LINKER_FORMAT
 "ñf64-lôéó¨ch64"

	)

43 
	#PLATFORM_LINKER_ARCH
 
Ørch64


	)

50 
	#PLATFORM_STACK_SIZE
 0x800

	)

53 #i‡
DEBUG


54 
	#PCPU_DV_MEM_STACK_SIZE
 0x400

	)

56 
	#PCPU_DV_MEM_STACK_SIZE
 0x300

	)

59 
	#FIRMWARE_WELCOME_STR
 "BoŸög MTKÅru°ed fúmw¨êBL31\n\r"

	)

62 
	#BL2_IMAGE_NAME
 "bl2.bö"

	)

65 
	#BL31_IMAGE_NAME
 "bl31.bö"

	)

68 
	#BL32_IMAGE_NAME
 "bl32.bö"

	)

71 
	#BL33_IMAGE_NAME
 "bl33.bö"

	)

73 
	#PLATFORM_CACHE_LINE_SIZE
 64

	)

74 
	#PLATFORM_CLUSTER_COUNT
 2uŒ

	)

75 
	#PLATFORM_CLUSTER0_CORE_COUNT
 4

	)

76 
	#PLATFORM_CLUSTER1_CORE_COUNT
 4

	)

77 
	#PLATFORM_CORE_COUNT
 (
PLATFORM_CLUSTER1_CORE_COUNT
 + \

78 
PLATFORM_CLUSTER0_CORE_COUNT
)

	)

79 
	#PLATFORM_MAX_CPUS_PER_CLUSTER
 4

	)

80 
	#PRIMARY_CPU
 0x0

	)

81 
	#MAX_IO_DEVICES
 3

	)

82 
	#MAX_IO_HANDLES
 4

	)

87 
	#TZROM_BASE
 0x00000000

	)

88 
	#TZROM_SIZE
 0x04000000

	)

92 
	#ATF_ARG_BASE
 (0x00100000)

	)

93 
	#ATF_ARG_SIZE
 (0x10000)

	)

96 
	#TZRAM_BASE
 (0x48000000)

	)

97 
	#TZRAM_SIZE
 0x20000

	)

99 
	#TZRAM2_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

100 
	#TZRAM2_SIZE
 0x10000

	)

103 
	#TZDRAM_BASE
 0x40020000

	)

104 
	#TZDRAM_SIZE
 0x0000C000

	)

111 
	#BL1_RO_BASE
 
TZROM_BASE


	)

112 
	#BL1_RO_LIMIT
 (
TZROM_BASE
 + 
TZROM_SIZE
)

	)

113 
	#BL1_RW_BASE
 
TZRAM_BASE


	)

114 
	#BL1_RW_LIMIT
 
BL31_BASE


	)

119 
	#BL2_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0xc000)

	)

120 
	#BL2_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

125 
	#BL31_BASE
 (
TZRAM_BASE
 + 0x1000)

	)

126 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


127 
	#BL31_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

128 
	#TZRAM2_LIMIT
 (
TZRAM2_BASE
 + 
TZRAM2_SIZE
)

	)

130 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


131 
	#BL31_LIMIT
 
BL2_BASE


	)

140 
	#TSP_IN_TZRAM
 0

	)

141 
	#TSP_IN_TZDRAM
 1

	)

143 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


144 
	#TSP_SEC_MEM_BASE
 
TZRAM_BASE


	)

145 
	#TSP_SEC_MEM_SIZE
 
TZRAM_SIZE


	)

146 
	#BL32_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0x00000)

	)

147 
	#BL32_LIMIT
 
BL2_BASE


	)

148 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


149 
	#TSP_SEC_MEM_BASE
 
TZDRAM_BASE


	)

150 
	#TSP_SEC_MEM_SIZE
 
TZDRAM_SIZE


	)

151 
	#BL32_BASE
 (
TZDRAM_BASE
 + 0x2000)

	)

152 
	#BL32_LIMIT
 (
TZDRAM_BASE
 + (1 << 21))

	)

160 
	#ADDR_SPACE_SIZE
 (1uŒ << 32)

	)

161 
	#MAX_XLAT_TABLES
 8

	)

162 
	#MAX_MMAP_REGIONS
 16

	)

167 
	#IRQ_SEC_PHY_TIMER
 29

	)

169 
	#IO_PHYS
 (0x10000000)

	)

171 
	#INFRACFG_AO_BASE
 (
IO_PHYS
 + 0x0000)

	)

172 
	#MCUCFG_BASE
 (
IO_PHYS
 + 0x00200000)

	)

177 
	#BOOTROM_BOOT_ADDR
 (
INFRACFG_AO_BASE
 + 0x800)

	)

178 
	#BOOTROM_SEC_CTRL
 (
INFRACFG_AO_BASE
 + 0x804)

	)

179 
	#SW_ROM_PD
 (1U << 31)

	)

182 
	#MP0_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MCUCFG_BASE
 + 0x38 + ((˝uË* 8))

	)

183 
	#MP1_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MCUCFG_BASE
 + 0x238 + ((˝uË* 8))

	)

184 
	#MP0_MISC_CONFIG3
 (
MCUCFG_BASE
 + 0x3c)

	)

186 
	#MP0_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0030)

	)

187 
	#MP0_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0054)

	)

188 
	#MP1_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0230)

	)

189 
	#MP1_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0254)

	)

194 
	#MP0_AXI_CONFIG
 (
MCUCFG_BASE
 + 0x002C)

	)

195 
	#MP1_AXI_CONFIG
 (
MCUCFG_BASE
 + 0x022C)

	)

196 
	#ACINACTM
 (1U << 4)

	)

207 
	#CACHE_WRITEBACK_SHIFT
 6

	)

208 
	#CACHE_WRITEBACK_GRANULE
 (1 << 
CACHE_WRITEBACK_SHIFT
)

	)

211 
	#WDT_IRQ_BIT_ID
 (160)

	)

212 
	#FIQ_SMP_CALL_SGI
 13

	)

213 
	#ATF_LOG_IRQ_ID
 281

	)

215 
	#MP0_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0)

	)

216 
	#MP1_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0x200)

	)

217 
	#L2RSTDISABLE
 (1 << 4)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/include/power_tracer.h

1 #i‚de‡
__TRACER_H_


2 
	#__TRACER_H_


	)

4 
	#CPU_UP
 0

	)

5 
	#CPU_DOWN
 1

	)

6 
	#CPU_SUSPEND
 2

	)

7 
	#CLUSTER_UP
 3

	)

8 
	#CLUSTER_DOWN
 4

	)

9 
	#CLUSTER_SUSPEND
 5

	)

11 
åa˚_powî_Êow
(
mpidr
, 
mode
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/include/scu.h

2 #i‚de‡
__SCU_H__


3 
	#__SCU_H__


	)

5 
dißbÀ_scu
(
mpidr
);

6 
íabÀ_scu
(
mpidr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/include/tbase_platform.h

12 #i‚de‡
__TBASE_PLATFORM_H__


13 
	#__TBASE_PLATFORM_H__


	)

15 
	~<bl_comm⁄.h
>

16 
	~<tba£_¥iv©e.h
>

17 
	~<∂©_def.h
>

21 
	#TBASE_PM_ENABLE
 1

	)

23 
	#TBASE_SIP_ROUTE_ENABLE
 0

	)

25 
	#TBASE_OEM_ROUTE_ENABLE
 0

	)

28 
	#TEE_PARAMS
 (((
©f_¨g_t_±r
)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
)->
ãe_boŸ_¨g_addr
)

	)

30 
	#TBASE_NWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamBa£
)

	)

31 
	#TBASE_NWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamSize
)

	)

32 
	#TBASE_SWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
+
TBASE_SWD_IMEM_SIZE
)

	)

33 
	#TBASE_SWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamSize
-
TBASE_SWD_IMEM_SIZE
)

	)

34 
	#TBASE_SWD_IMEM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
)

	)

35 
	#TBASE_SWD_IMEM_SIZE
 (2*1024*1024)

	)

36 
	#TBASE_GIC_DIST_BASE
 (
BASE_GICD_BASE
)

	)

37 
	#TBASE_GIC_CPU_BASE
 (
BASE_GICC_BASE
)

	)

39 
	#TBASE_GIC_VERSION
 (2)

	)

40 
	#TBASE_SPI_COUNT
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
tŸÆ_numbî_•i
)

	)

41 
	#TBASE_SSIQ_NRO
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
ssiq_numbî
)

	)

43 
	#TBASE_MONITOR_FLAGS
 (
TBASE_MONITOR_FLAGS_DEFAULT
)

	)

46 
	#TBASE_MAX_MONITOR_CALL_REGS
 
TBASE_MONITOR_CALL_REGS_MIN


	)

47 
	#TBASE_NWD_REGISTER_COUNT
 
TBASE_NWD_REGISTERS_MIN


	)

51 
	#TBASE_REGISTER_FILE_MMU_FLAGS
 (
	`LOWER_ATTRS
(
ATTR_IWBWA_OWBWA_NTR_INDEX
 | 
ISH
 | 
AP_RW
) |\

52 
	`UPPER_ATTRS
(
XN
) | \

53 
LEVEL3
)

	)

60 #i‚de‡
__ASSEMBLY__


61 
mt_log_£cuª_os_¥öt
(
c
);

63 
	#TBASE_OUTPUT_PUTC
(
c
Ë
	`mt_log_£cuª_os_¥öt
(c)

	)

66 
	#TBASE_EXECUTION_STATUS
(
°©us
)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/mailbox.c

1 
	~"∂©_¥iv©e.h
"

3 
maûbox_t
 
	gmt_mbox
[
PLATFORM_CORE_COUNT
];

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_def.h

31 #i‚de‡
__PLAT_DEF_H__


32 
	#__PLAT_DEF_H__


	)

34 
	~<∂©f‹m_def.h
>

38 
	#FIP_IMAGE_NAME
 "fù.bö"

	)

41 
	#CONFIG_GICD_ADDR
 0

	)

42 
	#CONFIG_GICC_ADDR
 1

	)

43 
	#CONFIG_GICH_ADDR
 2

	)

44 
	#CONFIG_GICV_ADDR
 3

	)

45 
	#CONFIG_MAX_AFF0
 4

	)

46 
	#CONFIG_MAX_AFF1
 5

	)

48 
	#CONFIG_CPU_SETUP
 6

	)

49 
	#CONFIG_BASE_MMAP
 7

	)

51 
	#CONFIG_HAS_CCI
 8

	)

52 
	#CONFIG_HAS_TZC
 9

	)

53 
	#CONFIG_LIMIT
 10

	)

59 
	#FLASH0_BASE
 0x08000000

	)

60 
	#FLASH0_SIZE
 
TZROM_SIZE


	)

83 
	#MTK_DEVICE_BASE
 0x11000000

84 
	#MTK_DEVICE_SIZE
 0x1000000

	)

86 
	#MT_DEV_BASE
 0x10000000

	)

87 
	#MT_DEV_SIZE
 0x400000

	)

89 
	#MT_GIC_BASE
 0x10220000

	)

91 #i‚de‡
__ASSEMBLY__


92 
mt_mbox
[];

94 
	#MBOX_OFF
 
mt_mbox


	)

97 
	#PARAMS_BASE
 
TZDRAM_BASE


	)

99 
	#DRAM1_BASE
 0x41000000uŒ

	)

100 
	#DRAM1_SIZE
 0x1E000000uŒ

	)

101 
	#DRAM1_END
 (
DRAM1_BASE
 + 
DRAM1_SIZE
 - 1)

	)

102 
	#DRAM1_SEC_SIZE
 0x01000000uŒ

	)

104 
	#DRAM_BASE
 
DRAM1_BASE


	)

105 
	#DRAM_SIZE
 
DRAM1_SIZE


	)

107 
	#DRAM2_BASE
 0x880000000uŒ

	)

108 
	#DRAM2_SIZE
 0x780000000uŒ

	)

109 
	#DRAM2_END
 (
DRAM2_BASE
 + 
DRAM2_SIZE
 - 1)

	)

111 
	#PCIE_EXP_BASE
 0x40000000

	)

112 
	#TZRNG_BASE
 0x7„60000

	)

113 
	#TZNVCTR_BASE
 0x7„70000

	)

114 
	#TZROOTKEY_BASE
 0x7„80000

	)

118 
	#VE_SYSREGS_BASE
 0x1c010000

119 
	#V2M_SYS_ID
 0x0

	)

120 
	#V2M_SYS_LED
 0x8

	)

121 
	#V2M_SYS_CFGDATA
 0xa0

	)

122 
	#V2M_SYS_CFGCTRL
 0xa4

	)

126 
	#NS_IMAGE_OFFSET
 0x41E00000

	)

130 
	#MT_BL31_PLAT_PARAM_VAL
 0x0f1e2d3c4b5a6978ULL

	)

142 
	#SYS_LED_SS_SHIFT
 0x0

	)

143 
	#SYS_LED_EL_SHIFT
 0x1

	)

144 
	#SYS_LED_EC_SHIFT
 0x3

	)

146 
	#SYS_LED_SS_MASK
 0x1

	)

147 
	#SYS_LED_EL_MASK
 0x3

	)

148 
	#SYS_LED_EC_MASK
 0x1f

	)

151 
	#SYS_ID_REV_SHIFT
 27

	)

152 
	#SYS_ID_HBI_SHIFT
 16

	)

153 
	#SYS_ID_BLD_SHIFT
 12

	)

154 
	#SYS_ID_ARCH_SHIFT
 8

	)

155 
	#SYS_ID_FPGA_SHIFT
 0

	)

157 
	#SYS_ID_REV_MASK
 0xf

	)

158 
	#SYS_ID_HBI_MASK
 0xfff

	)

159 
	#SYS_ID_BLD_MASK
 0xf

	)

160 
	#SYS_ID_ARCH_MASK
 0xf

	)

161 
	#SYS_ID_FPGA_MASK
 0xff

	)

163 
	#SYS_ID_BLD_LENGTH
 4

	)

165 
	#REV_MT
 0x0

	)

166 
	#HBI_MT_BASE
 0x020

	)

167 
	#HBI_FOUNDATION
 0x010

	)

169 
	#BLD_GIC_VE_MMAP
 0x0

	)

170 
	#BLD_GIC_A53A57_MMAP
 0x1

	)

172 
	#ARCH_MODEL
 0x1

	)

175 
	#PWRC_BASE
 0x1c100000

176 
	#PPOFFR_OFF
 0x0

177 

	)

182 
	#CCI400_BASE
 0x10390000

183 
	#CCI400_SL_IFACE_CLUSTER0
 4

	)

184 
	#CCI400_SL_IFACE_CLUSTER1
 3

	)

185 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

186 
CCI400_SL_IFACE_CLUSTER1
 : \

187 
CCI400_SL_IFACE_CLUSTER0
)

	)

188 
	#CCI_SEC_ACCESS_OFFSET
 (0x8)

	)

196 
	#VE_GICC_BASE
 0x2c002000

199 

	)

201 
	#BASE_GICD_BASE
 (
MT_GIC_BASE
 + 0x1000)

	)

203 
	#BASE_GICC_BASE
 (
MT_GIC_BASE
 + 0x2000)

	)

204 
	#BASE_GICH_BASE
 (
MT_GIC_BASE
 + 0x4000)

	)

205 
	#BASE_GICV_BASE
 (
MT_GIC_BASE
 + 0x6000)

	)

206 
	#INT_POL_CTL0
 0x10200620

	)

208 
	#MT_EDGE_SENSITIVE
 1

	)

209 
	#MT_LEVEL_SENSITIVE
 0

	)

210 
	#MT_POLARITY_LOW
 0

	)

211 
	#MT_POLARITY_HIGH
 1

	)

214 
	#GIC_PRIVATE_SIGNALS
 (32)

	)

215 
	#NR_GIC_SGI
 (16)

	)

216 
	#NR_GIC_PPI
 (16)

	)

217 
	#GIC_PPI_OFFSET
 (27)

	)

218 
	#MT_NR_PPI
 (5)

	)

219 
	#MT_NR_SPI
 (241)

	)

220 
	#NR_MT_IRQ_LINE
 (
GIC_PPI_OFFSET
 + 
MT_NR_PPI
 + 
MT_NR_SPI
)

	)

223 
	#IRQ_SEC_PHY_TIMER
 29

	)

224 
	#IRQ_SEC_SGI_0
 8

	)

225 
	#IRQ_SEC_SGI_1
 9

	)

226 
	#IRQ_SEC_SGI_2
 10

	)

227 
	#IRQ_SEC_SGI_3
 11

	)

228 
	#IRQ_SEC_SGI_4
 12

	)

229 
	#IRQ_SEC_SGI_5
 13

	)

230 
	#IRQ_SEC_SGI_6
 14

	)

231 
	#IRQ_SEC_SGI_7
 15

	)

232 
	#IRQ_SEC_SGI_8
 16

	)

237 
	#PAGE_ADDR_MASK
 (0xFFF00000)

	)

239 
	#UART0_BASE
 (
IO_PHYS
 + 0x01002000)

	)

240 
	#UART1_BASE
 (
IO_PHYS
 + 0x01003000)

	)

241 
	#UART2_BASE
 (
IO_PHYS
 + 0x01004000)

	)

242 
	#UART3_BASE
 (
IO_PHYS
 + 0x01005000)

	)

243 
	#PERICFG_BASE
 (
IO_PHYS
 + 0x2000)

	)

252 
	#MT_AID_WIDTH
 4

	)

255 
	#MT_NSAID_DEFAULT
 0

	)

256 
	#MT_NSAID_PCI
 1

	)

257 
	#MT_NSAID_VIRTIO
 8

	)

258 
	#MT_NSAID_AP
 9

	)

259 
	#MT_NSAID_VIRTIO_OLD
 15

	)

262 
	#MT_NSAID_HDLCD0
 2

	)

263 
	#MT_NSAID_CLCD
 7

	)

268 
	#TRNG_ba£
 (0x1020F000)

269 
	#TRNG_BASE_ADDR
 
TRNG_ba£


	)

270 
	#TRNG_BASE_SIZE
 (0x1000)

	)

271 
	#TRNG_CTRL
 (
TRNG_ba£
+0x0000)

	)

272 
	#TRNG_TIME
 (
TRNG_ba£
+0x0004)

	)

273 
	#TRNG_DATA
 (
TRNG_ba£
+0x0008)

	)

274 
	#TRNG_PDN_ba£
 (0x10000040)

	)

275 
	#TRNG_PDN_BASE_ADDR
 (0x10000000)

	)

276 
	#TRNG_PDN_BASE_SIZE
 (0x1000)

	)

277 
	#TRNG_PDN_SET
 (
TRNG_PDN_ba£
 +0x0000)

	)

278 
	#TRNG_PDN_CLR
 (
TRNG_PDN_ba£
 +0x0004)

	)

279 
	#TRNG_PDN_STATUS
 (
TRNG_PDN_ba£
 +0x0008)

	)

280 
	#TRNG_CTRL_RDY
 0x80000000

	)

281 
	#TRNG_CTRL_START
 0x00000001

	)

286 
	#MTK_WDT_BASE
 (
IO_PHYS
 + 0x00212000)

	)

287 
	#MTK_WDT_SIZE
 (0x1000)

	)

288 
	#MTK_WDT_MODE
 (
MTK_WDT_BASE
+0x0000)

	)

289 
	#MTK_WDT_LENGTH
 (
MTK_WDT_BASE
+0x0004)

	)

290 
	#MTK_WDT_RESTART
 (
MTK_WDT_BASE
+0x0008)

	)

291 
	#MTK_WDT_STATUS
 (
MTK_WDT_BASE
+0x000C)

	)

292 
	#MTK_WDT_INTERVAL
 (
MTK_WDT_BASE
+0x0010)

	)

293 
	#MTK_WDT_SWRST
 (
MTK_WDT_BASE
+0x0014)

	)

294 
	#MTK_WDT_SWSYSRST
 (
MTK_WDT_BASE
+0x0018)

	)

295 
	#MTK_WDT_NONRST_REG
 (
MTK_WDT_BASE
+0x0020)

	)

296 
	#MTK_WDT_NONRST_REG2
 (
MTK_WDT_BASE
+0x0024)

	)

297 
	#MTK_WDT_REQ_MODE
 (
MTK_WDT_BASE
+0x0030)

	)

298 
	#MTK_WDT_REQ_IRQ_EN
 (
MTK_WDT_BASE
+0x0034)

	)

299 
	#MTK_WDT_DEBUG_CTL
 (
MTK_WDT_BASE
+0x0040)

	)

302 
	#MTK_WDT_STATUS_HWWDT_RST
 (0x80000000)

	)

303 
	#MTK_WDT_STATUS_SWWDT_RST
 (0x40000000)

	)

304 
	#MTK_WDT_STATUS_IRQWDT_RST
 (0x20000000)

	)

305 
	#MTK_WDT_STATUS_DEBUGWDT_RST
 (0x00080000)

	)

306 
	#MTK_WDT_STATUS_SPMWDT_RST
 (0x0002)

	)

307 
	#MTK_WDT_STATUS_SPM_THERMAL_RST
 (0x0001)

	)

308 
	#MTK_WDT_STATUS_THERMAL_DIRECT_RST
 (1<<18)

	)

309 
	#MTK_WDT_STATUS_SECURITY_RST
 (1<<28)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_gic.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<debug.h
>

35 
	~<gic_v2.h
>

36 
	~<gic_v3.h
>

37 
	~<öãºu±_mgmt.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°döt.h
>

40 
	~"∂©_def.h
"

41 
	~"∂©_¥iv©e.h
"

42 
	~<∂©f‹m_def.h
>

43 
	~<°dio.h
>

45 #i‚de‡
MAX_GIC_NR


46 
	#MAX_GIC_NR
 1

	)

49 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

52 
	sgic_chù_d©a
 {

53 
	mßved_•i_íabÀ
[
DIV_ROUND_UP
(320, 32)];

54 
	mßved_•i_c⁄f
[
DIV_ROUND_UP
(320, 16)];

55 
	mßved_•i_èrgë
[
DIV_ROUND_UP
(320, 4)];

56 
	mßved_•i_group
[
DIV_ROUND_UP
(320, 32)];

66 
gic_chù_d©a
 
	ggic_d©a
[
MAX_GIC_NR
];

69 
	$gic_di°_ßve
()

71 
gic_úqs
;

72 
di°_ba£
;

73 
i
;

75 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

77 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

79 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

80 
gic_d©a
[0].
ßved_•i_c⁄f
[
i
] =

81 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4);

83 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

84 
gic_d©a
[0].
ßved_•i_èrgë
[
i
] =

85 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4);

87 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

88 
gic_d©a
[0].
ßved_•i_íabÀ
[
i
] =

89 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4);

91 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

92 
gic_d©a
[0].
ßved_•i_group
[
i
] =

93 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4);

94 
	}
}

96 
	$gic_di°_ª°‹e
()

98 
gic_úqs
;

99 
di°_ba£
;

100 
˘Ã
;

101 
i
;

103 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

105 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

108 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
di°_ba£
);

109 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

110 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
);

113 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

114 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_c⁄f
[i]);

119 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

120 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_èrgë
[i]);

122 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

123 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_íabÀ
[i]);

125 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

126 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_group
[i]);

128 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

129 
	}
}

181 
	$úq_øi£_so·úq
(
m≠
, 
úq
)

183 
ßâ
;

185 
ßâ
 = 1 << 15;

187 if(
	`∂©_ic_gë_öãºu±_ty≥
(
úq
Ë=
INTR_TYPE_S_EL1
)

189 
ßâ
 = 0;

192 
	`gicd_wrôe_sgú
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), (
m≠
 << 16Ë| 
ßâ
 | 
úq
);

194 
	`dsb
();

195 
	}
}

197 
	$gë_ack_öfo
()

199  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

200 
	}
}

202 
	$ack_sgi
(
ür
)

204 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
ür
);

205 
	}
}

207 
	$mt_©f_åiggî_úq
()

209 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
ATF_LOG_IRQ_ID
);

210 
	}
}

212 
	$mask_wdt_fiq
()

214 
	`gicd_£t_i˚«bÀr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

215 
	}
}

222 
	$mt_©f_åiggî_WDT_FIQ
()

224 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

225 
	}
}

233 
	$gicv3_˝uif_£tup
()

235 
s¸_vÆ
, 
vÆ
;

236 
uöçå_t
 
ba£
;

246 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

247 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

251 
	`∑nic
();

254 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

256 
vÆ
 &~
WAKER_PS
;

257 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

258 
	`dsb
();

261 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

262 
vÆ
 & 
WAKER_CA
) {

263 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

270 
s¸_vÆ
 = 
	`ªad_s¸
();

271 
	`wrôe_s¸
(
s¸_vÆ
 | 
SCR_NS_BIT
);

272 
	`isb
();

283 
vÆ
 = 
	`ªad_icc_§e_ñ3
();

284 
	`wrôe_icc_§e_ñ3
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

286 
vÆ
 = 
	`ªad_icc_§e_ñ2
();

287 
	`wrôe_icc_§e_ñ2
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

289 
	`wrôe_icc_pmr_ñ1
(
GIC_PRI_MASK
);

290 
	`isb
();

293 
	`wrôe_s¸
(
s¸_vÆ
);

294 
	`isb
();

295 
	}
}

301 
	$gicv3_˝uif_dó˘iv©e
()

303 
vÆ
;

304 
uöçå_t
 
ba£
;

313 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

314 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

318 
	`∑nic
();

321 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

322 
vÆ
 |
WAKER_PS
;

323 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

324 
	`dsb
();

327 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

328 (
vÆ
 & 
WAKER_CA
) == 0) {

329 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

331 
	}
}

338 
	$gic_˝uif_£tup
(
gicc_ba£
)

340 
vÆ
;

343 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

351 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

352 
	`gicv3_˝uif_£tup
();

355 
vÆ
 = 
ENABLE_GRP0
 | 
ENABLE_GRP1
 | 
FIQ_EN
 | 
FIQ_BYP_DIS_GRP0
;

356 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
FIQ_BYP_DIS_GRP1
 | 
IRQ_BYP_DIS_GRP1
;

359 
	`gicc_wrôe_pmr
(
gicc_ba£
, 0x1 << 7);

360 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

362 
	}
}

368 
	$gic_˝uif_dó˘iv©e
(
gicc_ba£
)

370 
vÆ
;

373 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

374 
vÆ
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

375 
vÆ
 |
FIQ_BYP_DIS_GRP1
 | 
FIQ_BYP_DIS_GRP0
;

376 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
IRQ_BYP_DIS_GRP1
;

377 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

379 
vÆ
 = 
	`gicc_ªad_iidr
(
gicc_ba£
);

386 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

387 
	`gicv3_˝uif_dó˘iv©e
();

390 
	}
}

396 
	$gic_p˝u_di°if_£tup
(
gicd_ba£
)

398 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 0, ~0);

401 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

402 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
, 
GIC_HIGHEST_SEC_PRIORITY
);

403 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

406 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

407 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

408 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

409 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

410 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

411 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

412 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

413 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

414 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

416 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
, 
GIC_HIGHEST_SEC_PRIORITY
);

417 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
, 
GIC_HIGHEST_SEC_PRIORITY
);

418 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
, 
GIC_HIGHEST_SEC_PRIORITY
);

419 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
, 
GIC_HIGHEST_SEC_PRIORITY
);

420 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
, 
GIC_HIGHEST_SEC_PRIORITY
);

421 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
, 
GIC_HIGHEST_SEC_PRIORITY
);

422 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
, 
GIC_HIGHEST_SEC_PRIORITY
);

423 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
, 
GIC_HIGHEST_SEC_PRIORITY
);

424 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
, 
GIC_HIGHEST_SEC_PRIORITY
);

426 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

427 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

428 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

429 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

430 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

431 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

432 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

433 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

434 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

436 
	}
}

438 
	$mt_úq_£t_pﬁ¨ôy
(
úq
, 
pﬁ¨ôy
)

441 
off£t
, 
ªg_ödex
, 
vÆue
;

450 
off£t
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) & 0x1F;

451 
ªg_ödex
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) >> 5;

453 i‡(
pﬁ¨ôy
 == 0) {

455 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

456 
vÆue
 |(1 << 
off£t
);

457 
	`mmio_wrôe_32
((
INT_POL_CTL0
 + (
ªg_ödex
 * 4)), 
vÆue
);

460 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

461 
vÆue
 &~(0x1 << 
off£t
);

462 
	`mmio_wrôe_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4), 
vÆue
);

464 
	}
}

467 
	$mt_úq_£t_£ns
(
ba£
, 
úq
, 
£ns
)

469 
c⁄fig
;

471 i‡(
£ns
 =
MT_EDGE_SENSITIVE
)

473 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

474 
c⁄fig
 |(0x2 << (
úq
 % 16) * 2);

475 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

479 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

480 
c⁄fig
 &~(0x2 << (
úq
 % 16) * 2);

481 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

483 
	}
}

491 
	$gic_di°if_£tup
(
gicd_ba£
)

493 
˘r
, 
num_öts
, 
˘Ã
;

496 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
gicd_ba£
);

497 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

498 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
);

505 
num_öts
 = 
	`gicd_ªad_ty≥r
(
gicd_ba£
Ë& 
IT_LINES_NO_MASK
;

506 
num_öts
++;

507 
˘r
 = 0; cå < 
num_öts
; ctr++)

510 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 
˘r
 << 
IGROUPR_SHIFT
, ~0);

516 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

517 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
GIC_HIGHEST_SEC_PRIORITY
);

518 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
,

519 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

520 
	`mt_úq_£t_£ns
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
MT_EDGE_SENSITIVE
);

523 
	`mt_úq_£t_pﬁ¨ôy
(
WDT_IRQ_BIT_ID
, 
MT_POLARITY_LOW
);

525 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

530 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

531 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_TZ_WDOG
, 
GIC_HIGHEST_SEC_PRIORITY
);

532 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
IRQ_TZ_WDOG
,

533 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

534 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

537 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

539 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

540 
	}
}

543 
	$gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
)

545 
	`¥ötf
("GICD_CTLR=0x%08x\n", 
	`gicd_ªad_˘Ã
(
gicd_ba£
));

549 
	`¥ötf
("GICC_CTRL=0x%08x\n", 
	`gicc_ªad_˘Ã
(
gicc_ba£
));

550 
	`¥ötf
("GICC_PMR=0x%08x\n", 
	`gicc_ªad_pmr
(
gicc_ba£
));

551 
	}
}

554 
	$gic_£tup
()

556 
gicd_ba£
, 
gicc_ba£
;

558 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

559 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

561 
	`gic_˝uif_£tup
(
gicc_ba£
);

562 
	`gic_di°if_£tup
(
gicd_ba£
);

565 
i
, 
no_£c
;

566 
i
 = 0; i < 0xFF; i++)

568 
no_£c
 = 
	`gicd_gë_igrou¥
(
gicd_ba£
, 
i
);

569 
	`¥ötf
("úq = %d, group=0x%x(%s)\n", 
i
, 
no_£c
,Ço_sec ? "non-sec":"sec");

572 
	`gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
);

576 
	}
}

590 
uöt32_t
 
	$∂©_öãºu±_ty≥_to_löe
(
uöt32_t
 
ty≥
, uöt32_à
£curôy_°©e
)

592 
uöt32_t
 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

594 
	`as£π
(
ty≥
 =
INTR_TYPE_S_EL1
 ||

595 
ty≥
 =
INTR_TYPE_EL3
 ||

596 
ty≥
 =
INTR_TYPE_NS
);

598 
	`as£π
(
£curôy_°©e
 =
NON_SECURE
 || securôy_°©ê=
SECURE
);

605 #i‡
MT_GIC_ARCH
 == 2

606  
	`gicv2_öãºu±_ty≥_to_löe
(
gicc_ba£
, 
ty≥
);

610 
	}
}

612 #i‡
MT_GIC_ARCH
 == 2

618 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_ty≥
()

620 
uöt32_t
 
id
, 
gicc_ba£
;

622 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

623 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

626 i‡(
id
 < 1022)

627  
INTR_TYPE_S_EL1
;

629 i‡(
id
 =
GIC_SPURIOUS_INTERRUPT
)

630  
INTR_TYPE_INVAL
;

632  
INTR_TYPE_NS
;

633 
	}
}

640 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_id
()

642 
uöt32_t
 
id
, 
gicc_ba£
;

644 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

645 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

647 i‡(
id
 < 1022)

648  
id
;

650 i‡(
id
 == 1023)

651  
INTR_ID_UNAVAILABLE
;

657  
	`gicc_ªad_ahµú
(
gicc_ba£
);

658 
	}
}

664 
uöt32_t
 
	$∂©_ic_acknowÀdge_öãºu±
()

666  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

667 
	}
}

673 
	$∂©_ic_íd_of_öãºu±
(
uöt32_t
 
id
)

675 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
id
);

677 
	}
}

684 
uöt32_t
 
	$∂©_ic_gë_öãºu±_ty≥
(
uöt32_t
 
id
)

686 
uöt32_t
 
group
;

688 
group
 = 
	`gicd_gë_igrou¥
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
id
);

691 i‡(
group
 =
GRP0
)

692  
INTR_TYPE_S_EL1
;

694  
INTR_TYPE_NS
;

695 
	}
}

697 
uöt64_t
 
	$mt_úq_dump_°©us
(
uöt32_t
 
úq
)

699 
uöt32_t
 
di°_ba£
;

700 
bô
;

701 
uöt32_t
 
ªsu…
;

702 
uöt64_t
 
rc
 = 0;

704 
	`¥ötf
("[ATF GIC dump] irq = %d\n", 
úq
);

706 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

709 
bô
 = 1 << (
úq
 % 32);

710 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

711 
	`¥ötf
("[ATF GIC dump]É«bÀ = %x\n", 
ªsu…
);

712 
rc
 |
ªsu…
;

715 
bô
 = 1 << (
úq
 % 32);

717 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

718 
	`¥ötf
("[ATF GIC dump] grou∞%x (0x1:úq,0x0:fiq)\n", 
ªsu…
);

719 
rc
 |
ªsu…
 << 1;

722 
bô
 = 0xf‡<< ((
úq
 % 4)*8);

723 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IPRIORITYR
 + 
úq
 / 4 * 4Ë& 
bô
) >> ((irq % 4)*8));

724 
	`¥ötf
("[ATF GIC dump]Öri‹ôy = %x\n", 
ªsu…
);

725 
rc
 |
ªsu…
 << 2;

728 
bô
 = 0x3 << ((
úq
 % 16)*2);

730 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
úq
 / 16 * 4Ë& 
bô
) >> ((irq % 16)*2));

731 
	`¥ötf
("[ATF GIC dump] sísôivôy = %x (edge:0x1,Üevñ:0x0)\n", 
ªsu…
>>1);

732 
rc
 |(
ªsu…
>>1) << 10;

735 
bô
 = 1 << (
úq
 % 32);

736 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISPENDR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

737 
	`¥ötf
("[ATF GIC dump]Öídög sètu†%x\n", 
ªsu…
);

738 
rc
 |
ªsu…
 << 11;

741 
bô
 = 1 << (
úq
 % 32);

742 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISACTIVER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

743 
	`¥ötf
("[ATF GIC dump]á˘ivê°©u†%x\n", 
ªsu…
);

744 
rc
 |
ªsu…
 << 12;

747 
bô
 = 1 << (
úq
 % 32);

749 
ªsu…
 = ((
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
úq
-32Ë/ 32 * 4Ë& 
bô
)?1:0);

750 
	`¥ötf
("[ATF GIC dump]Öﬁ¨ôy = %x (0x0: high, 0x1:low)\n", 
ªsu…
);

751 
rc
 |
ªsu…
 << 13;

753  
rc
;

754 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_io_storage.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<io_drivî.h
>

34 
	~<io_fù.h
>

35 
	~<io_memm≠.h
>

36 
	~<io_°‹age.h
>

37 
	~<io_£miho°ög.h
>

38 
	~<£miho°ög.h
>

39 
	~<°rög.h
>

40 
	~"∂©_def.h
"

43 
io_∂©_d©a_t
 
	gio_d©a
;

44 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gsh_dev_c⁄
;

45 
uöçå_t
 
	gsh_dev_•ec
;

46 
uöçå_t
 
	gsh_öô_∑øms
;

47 
uöçå_t
 
	gsh_dev_h™dÀ
;

48 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gfù_dev_c⁄
;

49 
uöçå_t
 
	gfù_dev_•ec
;

50 
uöçå_t
 
	gfù_dev_h™dÀ
;

51 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gmemm≠_dev_c⁄
;

52 
uöçå_t
 
	gmemm≠_dev_•ec
;

53 
uöçå_t
 
	gmemm≠_öô_∑øms
;

54 
uöçå_t
 
	gmemm≠_dev_h™dÀ
;

56 c⁄° 
io_block_•ec_t
 
	gfù_block_•ec
 = {

57 .
off£t
 = 
FLASH0_BASE
,

58 .
	gÀngth
 = 
FLASH0_SIZE


61 c⁄° 
io_fûe_•ec_t
 
	gbl2_fûe_•ec
 = {

62 .
∑th
 = 
BL2_IMAGE_NAME
,

63 .
	gmode
 = 
FOPEN_MODE_RB


66 c⁄° 
io_fûe_•ec_t
 
	gbl31_fûe_•ec
 = {

67 .
∑th
 = 
BL31_IMAGE_NAME
,

68 .
	gmode
 = 
FOPEN_MODE_RB


71 c⁄° 
io_fûe_•ec_t
 
	gbl32_fûe_•ec
 = {

72 .
∑th
 = 
BL32_IMAGE_NAME
,

73 .
	gmode
 = 
FOPEN_MODE_RB


76 c⁄° 
io_fûe_•ec_t
 
	gbl33_fûe_•ec
 = {

77 .
∑th
 = 
BL33_IMAGE_NAME
,

78 .
	gmode
 = 
FOPEN_MODE_RB


81 
›í_fù
(c⁄° 
uöçå_t
 
•ec
);

82 
›í_memm≠
(c⁄° 
uöçå_t
 
•ec
);

84 
	s∂©_io_pﬁicy
 {

85 *
	mimage_«me
;

86 
uöçå_t
 *
	mdev_h™dÀ
;

87 
uöçå_t
 
	mimage_•ec
;

88 (*
	mcheck
)(c⁄° 
uöçå_t
 
	m•ec
);

91 c⁄° 
∂©_io_pﬁicy
 
	gpﬁicõs
[] = {

93 
FIP_IMAGE_NAME
,

94 &
memm≠_dev_h™dÀ
,

95 (
uöçå_t
)&
fù_block_•ec
,

96 
›í_memm≠


98 
BL2_IMAGE_NAME
,

99 &
fù_dev_h™dÀ
,

100 (
uöçå_t
)&
bl2_fûe_•ec
,

101 
›í_fù


103 
BL31_IMAGE_NAME
,

104 &
fù_dev_h™dÀ
,

105 (
uöçå_t
)&
bl31_fûe_•ec
,

106 
›í_fù


108 
BL32_IMAGE_NAME
,

109 &
fù_dev_h™dÀ
,

110 (
uöçå_t
)&
bl32_fûe_•ec
,

111 
›í_fù


113 
BL33_IMAGE_NAME
,

114 &
fù_dev_h™dÀ
,

115 (
uöçå_t
)&
bl33_fûe_•ec
,

116 
›í_fù


123 
	$›í_fù
(c⁄° 
uöçå_t
 
•ec
)

125 
ªsu…
 = 
IO_FAIL
;

128 
ªsu…
 = 
	`io_dev_öô
(
fù_dev_h™dÀ
, (
uöçå_t
)
FIP_IMAGE_NAME
);

129 i‡(
ªsu…
 =
IO_SUCCESS
) {

130 
	`INFO
("Using FIP\n");

133  
ªsu…
;

134 
	}
}

137 
	$›í_memm≠
(c⁄° 
uöçå_t
 
•ec
)

139 
ªsu…
 = 
IO_FAIL
;

140 
uöçå_t
 
loˇl_image_h™dÀ
;

142 
ªsu…
 = 
	`io_dev_öô
(
memm≠_dev_h™dÀ
, 
memm≠_öô_∑øms
);

143 i‡(
ªsu…
 =
IO_SUCCESS
) {

144 
ªsu…
 = 
	`io_›í
(
memm≠_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

145 i‡(
ªsu…
 =
IO_SUCCESS
) {

147 
	`io_˛o£
(
loˇl_image_h™dÀ
);

150  
ªsu…
;

151 
	}
}

154 
	$›í_£miho°ög
(c⁄° 
uöçå_t
 
•ec
)

156 
ªsu…
 = 
IO_FAIL
;

157 
uöçå_t
 
loˇl_image_h™dÀ
;

160 
ªsu…
 = 
	`io_dev_öô
(
sh_dev_h™dÀ
, 
sh_öô_∑øms
);

161 i‡(
ªsu…
 =
IO_SUCCESS
) {

162 
ªsu…
 = 
	`io_›í
(
sh_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

163 i‡(
ªsu…
 =
IO_SUCCESS
) {

164 
	`INFO
("Using Semi-hosting IO\n");

165 
	`io_˛o£
(
loˇl_image_h™dÀ
);

168  
ªsu…
;

169 
	}
}

171 
	$mt_io_£tup
 ()

173 
io_ªsu…
 = 
IO_FAIL
;

176 
	`io_öô
(&
io_d©a
);

179 
io_ªsu…
 = 
	`ªgi°î_io_dev_sh
(&
sh_dev_c⁄
);

180 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

182 
io_ªsu…
 = 
	`ªgi°î_io_dev_fù
(&
fù_dev_c⁄
);

183 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

185 
io_ªsu…
 = 
	`ªgi°î_io_dev_memm≠
(&
memm≠_dev_c⁄
);

186 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

189 
io_ªsu…
 = 
	`io_dev_›í
(
sh_dev_c⁄
, 
sh_dev_•ec
, &
sh_dev_h™dÀ
);

190 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

192 
io_ªsu…
 = 
	`io_dev_›í
(
fù_dev_c⁄
, 
fù_dev_•ec
, &
fù_dev_h™dÀ
);

193 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

195 
io_ªsu…
 = 
	`io_dev_›í
(
memm≠_dev_c⁄
, 
memm≠_dev_•ec
,

196 &
memm≠_dev_h™dÀ
);

197 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

200 ()
io_ªsu…
;

201 
	}
}

206 
	$∂©_gë_image_sour˚
(c⁄° *
image_«me
, 
uöçå_t
 *
dev_h™dÀ
,

207 
uöçå_t
 *
image_•ec
)

209 
ªsu…
 = 
IO_FAIL
;

210 c⁄° 
∂©_io_pﬁicy
 *
pﬁicy
;

212 i‡((
image_«me
 !
NULL
Ë&& (
dev_h™dÀ
 != NULL) &&

213 (
image_•ec
 !
NULL
)) {

214 
pﬁicy
 = 
pﬁicõs
;

215 
pﬁicy
->
image_«me
 !
NULL
) {

216 i‡(
	`°rcmp
(
pﬁicy
->
image_«me
, image_name) == 0) {

217 
ªsu…
 = 
pﬁicy
->
	`check
’ﬁicy->
image_•ec
);

218 i‡(
ªsu…
 =
IO_SUCCESS
) {

219 *
image_•ec
 = 
pﬁicy
->image_spec;

220 *
dev_h™dÀ
 = *(
pﬁicy
->dev_handle);

223 
ªsu…
 = 
	`›í_£miho°ög
(

224 
pﬁicy
->
image_•ec
);

225 i‡(
ªsu…
 =
IO_SUCCESS
) {

226 *
dev_h™dÀ
 = 
sh_dev_h™dÀ
;

227 *
image_•ec
 =

228 
pﬁicy
->
image_•ec
;

232 
pﬁicy
++;

235 
ªsu…
 = 
IO_FAIL
;

237  
ªsu…
;

238 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_pm.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bakîy_lock.h
>

34 
	~<cci400.h
>

35 
	~<scu.h
>

36 
	~<mmio.h
>

37 
	~<∂©f‹m.h
>

38 
	~<c⁄sﬁe.h
>

39 
	~<debug.h
>

40 
	~<∂©f‹m_def.h
>

41 
	~<psci.h
>

42 
	~<powî_åa˚r.h
>

43 
	~<°dio.h
>

44 
	~"∂©_def.h
"

45 
	~"∂©_¥iv©e.h
"

46 
	~"Ørch64/∂©_hñ≥rs.h
"

48 
	~"mt_˝uxg±.h
"

50 
	s_ñ3_d‹m™t_d©a
 {

51 
	mmp0_l2a˘Ã_ñ1
;

52 
	mmp0_l2e˘Ã_ñ1
;

53 
	mmp0_l2r°dißbÀ
;

54 
	m°‹age
[32];

55 } 
	gñ3_d‹m™t_d©a
[1];

61 
	$mt_affö°_°™dby
(
powî_°©e
)

63 
èrgë_afÊvl
;

66 
èrgë_afÊvl
 = 
	`psci_gë_p°©e_afÊvl
(
powî_°©e
);

72 i‡(
èrgë_afÊvl
 !
MPIDR_AFFLVL0
)

73  
PSCI_E_INVALID_PARAMS
;

79 
	`dsb
();

80 
	`wfi
();

82  
PSCI_E_SUCCESS
;

83 
	}
}

89 
	$mt_affö°_⁄
(
mpidr
,

90 
£c_íåypoöt
,

91 
ns_íåypoöt
,

92 
afÊvl
,

93 
°©e
)

95 
rc
 = 
PSCI_E_SUCCESS
;

96 
löór_id
;

97 
maûbox_t
 *
mt_mboxes
;

103 i‡(
afÊvl
 !
MPIDR_AFFLVL0
)

104 
exô
;

106 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

107 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

108 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

109 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

112 
	`bl31_⁄_íåypoöt
();

113 i‡(
löór_id
 >= 4) {

114 
	`mmio_wrôe_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4), ()
bl31_⁄_íåypoöt
);

115 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4)));

118 
	`mmio_wrôe_32
(
MP0_MISC_CONFIG3
, 
	`mmio_ªad_32
(MP0_MISC_CONFIG3) | 0x0000E000);

119 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
), ()
bl31_⁄_íåypoöt
);

120 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
)));

123 
exô
:

124  
rc
;

125 
	}
}

139 
	$mt_affö°_off
(
mpidr
,

140 
afÊvl
,

141 
°©e
)

143 
rc
 = 
PSCI_E_SUCCESS
;

144 
gicc_ba£
, 
e˘Ã
;

145 
˝u_£tup
, 
cci_£tup
;

147 
afÊvl
) {

148 
MPIDR_AFFLVL3
:

149 
MPIDR_AFFLVL2
:

151 
MPIDR_AFFLVL1
:

152 i‡(
°©e
 =
PSCI_STATE_OFF
) {

157 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

158 i‡(
cci_£tup
) {

159 
	`cci_dißbÀ_cohîícy
(
mpidr
);

161 
	`dißbÀ_scu
(
mpidr
);

163 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_DOWN
);

167 
MPIDR_AFFLVL0
:

168 i‡(
°©e
 =
PSCI_STATE_OFF
) {

174 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

175 i‡(
˝u_£tup
) {

176 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

177 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

178 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

186 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

187 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

189 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_DOWN
);

194 
	`as£π
(0);

197  
rc
;

198 
	}
}

212 
	$mt_affö°_su•íd
(
mpidr
,

213 
£c_íåypoöt
,

214 
ns_íåypoöt
,

215 
afÊvl
,

216 
°©e
)

218 
rc
 = 
PSCI_E_SUCCESS
;

219 
gicc_ba£
, 
e˘Ã
;

220 
˝u_£tup
, 
cci_£tup
, 
löór_id
;

221 
maûbox_t
 *
mt_mboxes
;

223 
afÊvl
) {

224 
MPIDR_AFFLVL2
:

225 i‡(
°©e
 =
PSCI_STATE_OFF
) {

226 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

228 
p
->
mp0_l2a˘Ã_ñ1
 = 
	`ªad_l2a˘Ã
();

229 
p
->
mp0_l2e˘Ã_ñ1
 = 
	`ªad_l2e˘Ã
();

232 
p
->
mp0_l2r°dißbÀ
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

233 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

234 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
);

237 
	`gíîic_timî_backup
();

239 
	`gic_di°_ßve
();

243 
MPIDR_AFFLVL1
:

244 i‡(
°©e
 =
PSCI_STATE_OFF
) {

249 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

250 i‡(
cci_£tup
) {

251 
	`cci_dißbÀ_cohîícy
(
mpidr
);

253 
	`dißbÀ_scu
(
mpidr
);

255 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_SUSPEND
);

259 
MPIDR_AFFLVL0
:

260 i‡(
°©e
 =
PSCI_STATE_OFF
) {

262 
	`mmio_wrôe_32
(
MP0_MISC_CONFIG3
, 
	`mmio_ªad_32
(MP0_MISC_CONFIG3) | (1<<12));

267 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

268 i‡(
˝u_£tup
) {

269 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

270 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

271 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

275 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

276 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

277 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

278 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

286 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

287 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

288 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_SUSPEND
);

293 
	`as£π
(0);

296  
rc
;

297 
	}
}

300 
	$w‹k¨ound_826319
(
mpidr
)

302 
l2a˘Ã
;

305 i‡(
mpidr
 & 
MPIDR_CPU_MASK
)

314 
l2a˘Ã
 = 
	`ªad_l2a˘Ã
();

315 
l2a˘Ã
 = (l2actlr & ~(1<<14)) | (1<<3);

316 
	`wrôe_l2a˘Ã
(
l2a˘Ã
);

319 
	}
}

321 
	#w‹k¨ound_826319
(Ëdÿ{} 0)

	)

325 
	$w‹k¨ound_836870
(
mpidr
)

327 
˝ua˘Ã
;

338 
˝ua˘Ã
 = 
	`ªad_˝ua˘Ã
();

339 
˝ua˘Ã
 = cpuactlr | (1<<24);

340 
	`wrôe_˝ua˘Ã
(
˝ua˘Ã
);

343 
	}
}

345 
	#w‹k¨ound_836870
(Ëdÿ{} 0)

	)

355 
	$mt_affö°_⁄_föish
(
mpidr
,

356 
afÊvl
,

357 
°©e
)

359 
rc
 = 
PSCI_E_SUCCESS
;

360 
löór_id
, 
˝u_£tup
;

361 
maûbox_t
 *
mt_mboxes
;

362 
gicd_ba£
, 
gicc_ba£
, 
e˘Ã
;

364 
afÊvl
) {

366 
MPIDR_AFFLVL2
:

367 i‡(
°©e
 =
PSCI_STATE_OFF
) {

371 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

372 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

377 
MPIDR_AFFLVL1
:

379 i‡(
°©e
 =
PSCI_STATE_OFF
) {

380 
	`íabÀ_scu
(
mpidr
);

381 
	`mt_cci_£tup
();

382 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_UP
);

386 
MPIDR_AFFLVL0
:

391 
	`w‹k¨ound_836870
(
mpidr
);

397 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

398 i‡(
˝u_£tup
) {

399 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

400 
e˘Ã
 |
CPUECTLR_SMP_BIT
;

401 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

405 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

406 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

407 
mt_mboxes
[
löór_id
].
vÆue
 = 0;

408 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

411 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

413 
	`gic_˝uif_£tup
(
gicc_ba£
);

419 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

420 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

421 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

422 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

423 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

425 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) |

426 (1 << 
	`CNTNSAR_NS_SHIFT
(1));

427 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

430 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

432 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_UP
);

436 
	`as£π
(0);

439  
rc
;

440 
	}
}

449 
	$mt_affö°_su•íd_föish
(
mpidr
,

450 
afÊvl
,

451 
°©e
)

453 
rc
 = 
PSCI_E_SUCCESS
;

455 
afÊvl
) {

456 
MPIDR_AFFLVL2
:

457 i‡(
°©e
 =
PSCI_STATE_OFF
) {

458 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

460 i‡(
p
->
mp0_l2a˘Ã_ñ1
 =0 &&Ö->
mp0_l2e˘Ã_ñ1
==0)

461 
	`∑nic
();

462 
	`wrôe_l2a˘Ã
(
p
->
mp0_l2a˘Ã_ñ1
);

463 
	`wrôe_l2e˘Ã
(
p
->
mp0_l2e˘Ã_ñ1
);

466 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

467 (
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
)

468 | (
p
->
mp0_l2r°dißbÀ
 & 
L2RSTDISABLE
));

470 
	`gic_£tup
();

471 
	`gic_di°_ª°‹e
();

476 
MPIDR_AFFLVL1
:

477 
MPIDR_AFFLVL0
:

478  
	`mt_affö°_⁄_föish
(
mpidr
, 
afÊvl
, 
°©e
);

481 
	`as£π
(0);

484  
rc
;

485 
	}
}

491 c⁄° 
∂©_pm_›s_t
 
	gmt_∂©_pm_›s
 = {

492 
mt_affö°_°™dby
,

493 
mt_affö°_⁄
,

494 
mt_affö°_off
,

495 
mt_affö°_su•íd
,

496 
mt_affö°_⁄_föish
,

497 
mt_affö°_su•íd_föish
,

504 
	$∂©f‹m_£tup_pm
(c⁄° 
∂©_pm_›s_t
 **
∂©_›s
)

506 *
∂©_›s
 = &
mt_∂©_pm_›s
;

508 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_private.h

31 #i‚de‡
__PLAT_PRIVATE_H__


32 
	#__PLAT_PRIVATE_H__


	)

34 
	~<bl_comm⁄.h
>

35 
	~<∂©f‹m_def.h
>

38 vﬁ©ûê
	smaûbox
 {

39 
vÆue


40 
__©åibuã__
((
__Æig√d__
(
CACHE_WRITEBACK_GRANULE
)));

41 } 
	tmaûbox_t
;

48 
	sbl2_to_bl31_∑øms_mem
 {

49 
bl31_∑øms_t
 
	mbl31_∑øms
;

50 
image_öfo_t
 
	mbl31_image_öfo
;

51 
image_öfo_t
 
	mbl32_image_öfo
;

52 
image_öfo_t
 
	mbl33_image_öfo
;

53 
íåy_poöt_öfo_t
 
	mbl33_ï_öfo
;

54 
íåy_poöt_öfo_t
 
	mbl32_ï_öfo
;

55 
íåy_poöt_öfo_t
 
	mbl31_ï_öfo
;

56 } 
	tbl2_to_bl31_∑øms_mem_t
;

61 
	gmemöfo
;

66 
mt_c⁄figuª_mmu_ñ1
(
tŸÆ_ba£
,

67 
tŸÆ_size
,

72 
mt_c⁄figuª_mmu_ñ3
(
tŸÆ_ba£
,

73 
tŸÆ_size
,

78 
mt_gë_cfgv¨
();

79 
mt_c⁄fig_£tup
();

81 #i‡
RESET_TO_BL31


82 
mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

83 
íåy_poöt_öfo
 *
èrgë_íåy_öfo
);

85 
mt_cci_£tup
();

88 
gic_˝uif_dó˘iv©e
();

89 
gic_˝uif_£tup
();

90 
gic_p˝u_di°if_£tup
();

91 
gic_£tup
();

94 
mt_£tup_t›ﬁogy
();

97 
mt_io_£tup
();

100 
mt_£curôy_£tup
();

101 
uöt32_t
 
gë_devöfo_wôh_ödex
(uint32_t);

103 
mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo
 *
bl32_ï
);

106 
mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo
 *
bl33_ï
);

108 
íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_security.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<tzc400.h
>

34 
	~<∂©f‹m.h
>

35 
	~"∂©_def.h
"

36 
	~"∂©_¥iv©e.h
"

39 
	#FILTER_SHIFT
(
fûãr
Ë(1 << fûãr)

	)

47 
	$mt_£curôy_£tup
()

50 
tzc_ö°™˚_t
 
c⁄åﬁÀr
;

61 i‡(!
	`mt_gë_cfgv¨
(
CONFIG_HAS_TZC
))

68 
	`INFO
("Configuring TrustZone Controller\n");

75 
c⁄åﬁÀr
.
ba£
 = 
TZC400_BASE
;

76 
c⁄åﬁÀr
.
aid_width
 = 
MT_AID_WIDTH
;

77 
	`tzc_öô
(&
c⁄åﬁÀr
);

91 
	`tzc_dißbÀ_fûãrs
(&
c⁄åﬁÀr
);

105 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 1,

106 
DRAM1_BASE
, 
DRAM1_END
 - 
DRAM1_SEC_SIZE
,

107 
TZC_REGION_S_NONE
,

108 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

109 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

110 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

111 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

112 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

115 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 3,

116 (
DRAM1_END
 - 
DRAM1_SEC_SIZE
) + 1 , DRAM1_END,

117 
TZC_REGION_S_RDWR
,

121 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 2,

122 
DRAM2_BASE
, 
DRAM2_END
, 
TZC_REGION_S_NONE
,

123 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

124 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

125 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

126 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

127 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

134 
	`tzc_£t_a˘i⁄
(&
c⁄åﬁÀr
, 
TZC_ACTION_ERR
);

137 
	`tzc_íabÀ_fûãrs
(&
c⁄åﬁÀr
);

139 
	}
}

141 
uöt32_t
 
	$gë_devöfo_wôh_ödex
(
uöt32_t
 
i
)

143 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

145 if–
i
 < 
DEVINFO_SIZE
){

146  
ãórg
->
devöfo
[
i
];

150 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_tbase.c

12 
	~<as£π.h
>

13 
	~<debug.h
>

14 
	~<°rög.h
>

15 
	~<tzc400.h
>

16 
	~<∂©f‹m.h
>

17 
	~<mmio.h
>

18 
	~<∂©_def.h
>

19 
	~"∂©_¥iv©e.h
"

21 
	~<¨ch_hñ≥rs.h
>

22 
	~<tba£_¥iv©e.h
>

25 
	#PLAT_TBASE_INPUT_HWIDENTITY
 (0x1)

	)

26 
	#PLAT_TBASE_INPUT_HWKEY
 (0x2)

	)

27 
	#PLAT_TBASE_INPUT_RNG
 (0x3)

	)

29 
	#PLAT_TBASE_INPUT_OK
 ((
uöt32_t
)0)

	)

30 
	#PLAT_TBASE_INPUT_ERROR
 ((
uöt32_t
)-1)

	)

35 
uöt32_t
 
	$∂©_tba£_öput
(
uöt64_t
 
D©aId
,uöt64_t* 
Lígth
,* 
out
)

37 
uöt32_t
 
Sètus
 = 
PLAT_TBASE_INPUT_OK
;

38 
uöt32_t
 
Àngth
 = 0, 
idx
 = 0;

41  
D©aId
 )

43 
PLAT_TBASE_INPUT_HWIDENTITY
:

45 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

47 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
hwuid
)/(uint32_t)); idx++)

49 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
hwuid
[idx];

50 
Àngth
 +(
uöt32_t
);

55 
PLAT_TBASE_INPUT_HWKEY
:

57 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

59 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
HRID
)/(uint32_t)) ; idx++)

61 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
HRID
[idx];

62 
Àngth
 +(
uöt32_t
);

64 *
Lígth
 = 
Àngth
;

67 
PLAT_TBASE_INPUT_RNG
:

69 
uöt32_t
 
vÆue
 = 0;

70 
	`mmio_wrôe_32
(
TRNG_PDN_CLR
, 0x4);

71 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

72 
vÆue
 |
TRNG_CTRL_START
;

73 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

74 0 =(
	`mmio_ªad_32
(
TRNG_CTRL
Ë& 
TRNG_CTRL_RDY
));

75 ((
uöt32_t
*)
out
)[0] = 
	`mmio_ªad_32
(
TRNG_DATA
);

76 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

77 
vÆue
 &~
TRNG_CTRL_START
;

78 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

79 
	`mmio_wrôe_32
(
TRNG_PDN_SET
, 0x4);

80 *
Lígth
 = 4;

85 
Sètus
 = 
PLAT_TBASE_INPUT_ERROR
;

89  
Sètus
;

90 
	}
}

93 
uöt32_t
 
	$∂©_tba£_dump
()

95 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
());

97 
	`¥ötf
–"c‹ê%d i†dum≥d !\n", ()
löór_id
 );

103 
	`´e_wdt_dump
();

107 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_topology.c

31 
	~<as£π.h
>

32 
	~<∂©f‹m_def.h
>

34 
	~<psci.h
>

37 
	#AFFINST_INVAL
 0xff

	)

47 
	safföôy_öfo
 {

48 
	msiblög
;

49 
	mchûd
;

50 
	m°©e
;

51 
	md©a
;

52 } 
	tafföôy_öfo_t
;

60 
afföôy_öfo_t
 
	gmt_aff1_t›ﬁogy_m≠
[
PLATFORM_CLUSTER_COUNT
];

61 
afföôy_öfo_t
 
	gmt_aff0_t›ﬁogy_m≠
[
PLATFORM_CORE_COUNT
];

64 
	gt›ﬁogy_£tup_d⁄e
;

77 
	$∂©_gë_aff_cou¡
(
aff_lvl
,

78 
mpidr
)

80 
aff_cou¡
 = 1, 
˘r
;

81 
∑ª¡_aff_id
;

83 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

85 
aff_lvl
) {

92 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF3_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

93 
	`as£π
(
∑ª¡_aff_id
 == 0);

102 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF2_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

103 
	`as£π
(
∑ª¡_aff_id
 == 0);

106 
˘r
 = 0;

107 
mt_aff1_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

108 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[˘r].
siblög
) {

109 
aff_cou¡
++;

115 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

116 
	`as£π
(
∑ª¡_aff_id
 < 
PLATFORM_CLUSTER_COUNT
);

119 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[
∑ª¡_aff_id
].
chûd
;

120 
mt_aff0_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

121 
˘r
 = 
mt_aff0_t›ﬁogy_m≠
[˘r].
siblög
) {

122 
aff_cou¡
++;

127 
	`as£π
(0);

130  
aff_cou¡
;

131 
	}
}

137 
	$∂©_gë_max_afÊvl
()

139  
MPIDR_AFFLVL2
;

140 
	}
}

157 
	$∂©_gë_aff_°©e
(
aff_lvl
,

158 
mpidr
)

160 
aff_°©e
 = 
PSCI_AFF_ABSENT
, 
idx
;

161 
idx
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

163 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

165 
aff_lvl
) {

168 i‡(
	`∂©_gë_max_afÊvl
(Ë>
aff_lvl
)

169 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

174 
aff_°©e
 = 
mt_aff1_t›ﬁogy_m≠
[
idx
].
°©e
;

181 
idx
 = 
mt_aff1_t›ﬁogy_m≠
[idx].
chûd
;

182 
idx
 +(
mpidr
 >> 
MPIDR_AFF0_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

183 
aff_°©e
 = 
mt_aff0_t›ﬁogy_m≠
[
idx
].
°©e
;

186 
	`as£π
(0);

189  
aff_°©e
;

190 
	}
}

197 
	$mt_£tup_t›ﬁogy
()

199 
aff0
, 
aff1
, 
aff_°©e
, 
aff0_off£t
 = 0;

200 
mpidr
;

202 
t›ﬁogy_£tup_d⁄e
 = 0;

204 
aff1
 = 0;áff1 < 
PLATFORM_CLUSTER_COUNT
;áff1++) {

206 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
chûd
 = 
aff0_off£t
;

207 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
siblög
 =áff1 + 1;

209 
aff0
 = 0;áff0 < 
PLATFORM_MAX_CPUS_PER_CLUSTER
;áff0++) {

211 
mpidr
 = 
aff1
 << 
MPIDR_AFF1_SHIFT
;

212 
mpidr
 |
aff0
 << 
MPIDR_AFF0_SHIFT
;

214 i‡(
	`mt_pwrc_ªad_psy§
(
mpidr
Ë!
PSYSR_INVALID
) {

219 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

220 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 =

221 
PSCI_AFF_PRESENT
;

223 
aff_°©e
 = 
PSCI_AFF_ABSENT
;

226 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

227 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 = 
PSCI_AFF_PRESENT
;

229 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
chûd
 = 
AFFINST_INVAL
;

230 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
°©e
 = 
aff_°©e
;

231 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
siblög
 =

232 
aff0_off£t
 + 1;

235 
aff0_off£t
++;

239 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
 - 1].
siblög
 = 
AFFINST_INVAL
;

243 
mt_aff1_t›ﬁogy_m≠
[
aff1
 - 1].
siblög
 = 
AFFINST_INVAL
;

245 
t›ﬁogy_£tup_d⁄e
 = 1;

247 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/platform.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 #O¿
MTK_∂©f‹m
, 
the
 
TSP
 
ˇn
 
execuã
 
eôhî
 
‰om
 
Tru°ed
 
SRAM
 
‹
 Tru°ed 
DRAM
.

25 #Tru°ed 
SRAM
 
is
 
the
 .

26 
	gTSP_RAM_LOCATION
 :
t§am


28 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
t§am
)

29 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZRAM


30 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
tdøm
)

31 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZDRAM


33 
$
(
îr‹
 "Unsupported TSP_RAM_LOCATION value")

34 
ídif


36 #Pro˚s†
TSP_RAM_LOCATION_ID
 
Êag


37 
$
(
evÆ
 
	$$
(
ˇŒ
 
add_deföe
,
TSP_RAM_LOCATION_ID
))

39 
PLAT_INCLUDES
 :-
I∂©
/
$
{
PLAT
}/ö˛ude/ -I∂©/${PLAT}/ -I∂©/${PLAT}/drivîs/log -I∂©/${PLAT}/drivîs/timî/ -I∂©/${PLAT}/drivîs/dev≠c/ -I∂©/${PLAT}/drivîs/l2c/

41 
PLAT_BL_COMMON_SOURCES
 :
drivîs
/
io
/
io_fù
.
c
 \

42 
drivîs
/
io
/
io_memm≠
.
c
 \

43 
drivîs
/
io
/
io_£miho°ög
.
c
 \

44 
lib
/
mmio
.
c
 \

45 
lib
/
Ørch64
/
sy§eg_hñ≥rs
.
S
 \

46 
lib
/
Ørch64
/
xœt_èbÀs
.
c
 \

47 
lib
/
£miho°ög
/£miho°ög.
c
 \

48 
lib
/
£miho°ög
/
Ørch64
/
£miho°ög_ˇŒ
.
S
 \

49 
∂©
/
comm⁄
/
Ørch64
/
∂©_comm⁄
.
c
 \

50 
∂©
/
$
{
PLAT
}/
∂©_io_°‹age
.
c
 \

51 
∂©
/
comm⁄
/
fiq_smp_ˇŒ
.
c


53 
BL1_SOURCES
 +
drivîs
/
¨m
/
cci400
/cci400.
c
 \

54 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

55 
∂©
/
$
{
PLAT
}/
bl1_∂©_£tup
.
c
 \

56 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

57 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©_hñ≥rs
.
S


59 
BL2_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

60 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

61 
∂©
/
$
{
PLAT
}/
bl2_∂©_£tup
.
c
 \

62 
∂©
/
$
{
PLAT
}/
∂©_£curôy
.
c
 \

63 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©f‹m_comm⁄
.
c


65 
BL31_SOURCES
 +
drivîs
/
¨m
/
gic
/
gic_v2
.
c
 \

66 
drivîs
/
¨m
/
gic
/
gic_v3
.
c
 \

67 
drivîs
/
¨m
/
gic
/
Ørch64
/
gic_v3_sy§egs
.
S
 \

68 
drivîs
/
¨m
/
cci400
/cci400.
c
 \

69 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_mp_°ack
.
S
 \

70 
∂©
/
$
{
PLAT
}/
bl31_∂©_£tup
.
c
 \

71 
∂©
/
$
{
PLAT
}/
∂©_gic
.
c
 \

72 
∂©
/
$
{
PLAT
}/
∂©_pm
.
c
 \

73 
∂©
/
$
{
PLAT
}/
∂©_t›ﬁogy
.
c
 \

74 
∂©
/
$
{
PLAT
}/
scu
.
c
 \

75 
∂©
/
$
{
PLAT
}/
powî_åa˚r
.
c
 \

76 
∂©
/
$
{
PLAT
}/
maûbox
.
c
 \

77 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©_hñ≥rs
.
S
 \

78 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

79 
∂©
/
$
{
PLAT
}/
drivîs
/
u¨t
/u¨t.
c
 \

80 
∂©
/
$
{
PLAT
}/
drivîs
/
timî
/
mt_˝uxg±
.
c
 \

81 
∂©
/
$
{
PLAT
}/
drivîs
/
dev≠c
/dev≠c.
c
 \

82 
∂©
/
$
{
PLAT
}/
drivîs
/
l2c
/l2c.
c


84 
BL31_SOURCES
 +
∂©
/
$
{
PLAT
}/
sù_svc
/
sù_svc_comm⁄
.
c
 \

85 
∂©
/
$
{
PLAT
}/
sù_svc
/
sù_svc_£tup
.
c
 \

86 
∂©
/
$
{
PLAT
}/
drivîs
/
log
/log.
c


88 
i„q
 (
$
{
RESET_TO_BL31
}, 1)

89 
	gBL31_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

90 
∂©
/
$
{
PLAT
}/
∂©_£curôy
.
c


91 
ídif


93 
i„q
 (
$
{
SPD
}, 
tba£
)

94 
	gBL31_SOURCES
 +
∂©
/
$
{
PLAT
}/
∂©_tba£
.
c


95 
ídif


97 #Fœg 
u£d
 
by
 
the
 
MTK_∂©f‹m
 
p‹t
 
to
 
dëîmöe
Åhê
vîsi⁄
 
of
 
ARM
 
GIC
 
¨chôe˘uª


98 #tÿ
u£
 
öãºu±
 
m™agemít
 
ö
 
EL3
.

99 
MT_GIC_ARCH
 := 2

100 
$
(
evÆ
 $(
ˇŒ
 
add_deföe
,
MT_GIC_ARCH
))

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/power_tracer.c

1 
	~<¨ch.h
>

2 
	~<powî_åa˚r.h
>

3 
	~<°dio.h
>

6 
	#åa˚_log
(...Ë
	`¥ötf
("psci: " 
__VA_ARGS__
)

	)

8 
	#åa˚_log
(...)

	)

11 
	$åa˚_powî_Êow
(
mpidr
, 
mode
) {

12 
mode
) {

13 
CPU_UP
:

14 
	`åa˚_log
("core %d:%d ON\n",

15 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

16 (
mpidr
 & 
MPIDR_CPU_MASK
));

18 
CPU_DOWN
:

19 
	`åa˚_log
("core %d:%d OFF\n",

20 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

21 (
mpidr
 & 
MPIDR_CPU_MASK
));

23 
CPU_SUSPEND
:

24 
	`åa˚_log
("core %d:%d SUSPEND\n",

25 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

26 (
mpidr
 & 
MPIDR_CPU_MASK
));

28 
CLUSTER_UP
:

29 
	`åa˚_log
("˛u°î %d ON\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

31 
CLUSTER_DOWN
:

32 
	`åa˚_log
("˛u°î %d OFF\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

34 
CLUSTER_SUSPEND
:

35 
	`åa˚_log
("˛u°î %d SUSPEND\n", (
mpidr
 & 
MPIDR_CPU_MASK
));

38 
	`åa˚_log
("unknownÖower mode\n");

41 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/scu.c

1 
	~<¨ch.h
>

2 
	~<∂©f‹m_def.h
>

3 
	~<mmio.h
>

5 
	$dißbÀ_scu
(
mpidr
) {

6 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

7 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË| 
ACINACTM
);

8 
	}
}

10 
	$íabÀ_scu
(
mpidr
) {

11 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

12 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË& ~
ACINACTM
);

13 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/sip_svc/sip_private.h

38 #i‚de‡
__SIP_PRIVATE_H__


39 
	#__SIP_PRIVATE_H__


	)

41 
	~<¨ch.h
>

42 
	~<bakîy_lock.h
>

48 
uöt64_t
 
sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

49 
uöt64_t
 
x1
,

50 
uöt64_t
 
x2
,

51 
uöt64_t
 
x3
,

52 
uöt64_t
 
x4
,

53 *
cookõ
,

54 *
h™dÀ
,

55 
uöt64_t
 
Êags
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/sip_svc/sip_svc_common.c

38 
	~<¨ch.h
>

39 
	~<¨ch_hñ≥rs.h
>

40 
	~<as£π.h
>

41 
	~<ru¡ime_svc.h
>

42 
	~<debug.h
>

43 
	~<sù_svc.h
>

44 
	~<sù_îr‹.h
>

45 
	~<∂©f‹m.h
>

46 
	~<mmio.h
>

47 
	~"sù_¥iv©e.h
"

52 
	skî√l_öfo
 {

53 
uöt64_t
 
	mpc
;

54 
uöt64_t
 
	mr0
;

55 
uöt64_t
 
	mr1
;

58 
kî√l_öfo
 
	gk_öfo
;

60 
	$ßve_kî√l_öfo
(
uöt64_t
 
pc
, uöt64_à
r0
, uöt64_à
r1
)

62 
k_öfo
.
pc
=pc;

63 
k_öfo
.
r0
=r0;

64 
k_öfo
.
r1
=r1;

65 
	}
}

67 
uöt64_t
 
	$gë_kî√l_öfo_pc
()

69  
k_öfo
.
pc
;

70 
	}
}

72 
uöt64_t
 
	$gë_kî√l_öfo_r0
()

74  
k_öfo
.
r0
;

75 
	}
}

77 
uöt64_t
 
	$gë_kî√l_öfo_r1
()

79  
k_öfo
.
r1
;

80 
	}
}

82 
bl31_¥ï¨e_k64_íåy
();

83 
ñ3_exô
();

89 
uöt64_t
 
	gmcusys_wrôe_cou¡
 = 0;

90 
uöt64_t
 
	$sù_mcusys_wrôe
(
ªg_addr
, 
ªg_vÆue
)

92 if((
ªg_addr
 & 0xFFFF0000Ë!(
MCUCFG_BASE
 & 0xFFFF0000))

93  
SIP_SVC_E_INVALID_R™ge
;

96 if(–
MP0_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP0_MISC_CONFIG9
 ) ||

97 –
MP1_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP1_MISC_CONFIG9
 )) {

98  
SIP_SVC_E_PERMISSION_DENY
;

101 
	`mmio_wrôe_32
(
ªg_addr
, 
ªg_vÆue
);

102 
	`dsb
();

104 
mcusys_wrôe_cou¡
++;

106  
SIP_SVC_E_SUCCESS
;

107 
	}
}

112 
uöt64_t
 
	$sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

113 
uöt64_t
 
x1
,

114 
uöt64_t
 
x2
,

115 
uöt64_t
 
x3
,

116 
uöt64_t
 
x4
,

117 *
cookõ
,

118 *
h™dÀ
,

119 
uöt64_t
 
Êags
)

121 
uöt64_t
 
rc
;

122 
uöt32_t
 
ns
;

123 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

126 
ns
 = 
	`is_ˇŒî_n⁄_£cuª
(
Êags
);

132 
smc_fid
) {

133 
MTK_SIP_TBASE_HWUID_AARCH32
:

135 i‡(
ns
)

136 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

137 
	`SMC_RET4
(
h™dÀ
, 
ãórg
->
hwuid
[0],Åeearg->hwuid[1],

138 
ãórg
->
hwuid
[2],Åeearg->hwuid[3]);

141 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH32
:

142 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH64
:

143 
rc
 = 
	`sù_mcusys_wrôe
(
x1
, 
x2
);

145 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH32
:

146 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH64
:

147 
rc
 = 
mcusys_wrôe_cou¡
;

149 
MTK_SIP_KERNEL_TMP_AARCH32
:

150 
	`¥ötf
("save kernel info\n");

151 
	`ßve_kî√l_öfo
(
x1
, 
x2
, 
x3
);

152 
	`¥ötf
("end bl31_prepare_k64_entry...\n");

153 
	`bl31_¥ï¨e_k64_íåy
();

154 
	`¥ötf
("el3_exit\n");

155 
	`SMC_RET0
(
h™dÀ
);

157 #i‡
DEBUG


158 
MTK_SIP_KERNEL_GIC_DUMP_AARCH32
:

159 
MTK_SIP_KERNEL_GIC_DUMP_AARCH64
:

160 
rc
 = 
	`mt_úq_dump_°©us
(
x1
);

163 
MTK_SIP_KERNEL_WDT_AARCH32
:

164 
MTK_SIP_KERNEL_WDT_AARCH64
:

165 
wdt_kî√l_cb_addr
 = 
x1
;

166 
	`¥ötf
("MTK_SIP_KERNEL_WDT : 0x%∞\n", 
wdt_kî√l_cb_addr
);

167 
	`¥ötf
("teearg->atf_aee_debug_buf_start : 0x%llx \n",

168 
ãórg
->
©f_´e_debug_buf_°¨t
);

169 
rc
 = 
ãórg
->
©f_´e_debug_buf_°¨t
;

172 
rc
 = 
SMC_UNK
;

173 
	`WARN
("Unim∂emíãd SIP CÆl: 0x%x \n", 
smc_fid
);

176 
	`SMC_RET1
(
h™dÀ
, 
rc
);

177 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/sip_svc/sip_svc_setup.c

38 
	~<debug.h
>

39 
	~<ru¡ime_svc.h
>

40 
	~<sù_svc.h
>

41 
	~<°döt.h
>

42 
	~<uuid.h
>

43 
	~"sù_¥iv©e.h
"

46 
DEFINE_SVC_UUID
(
mtk_sù_svc_uid
,

52 
öt32_t
 
	$sù_svc_£tup
()

59 
	}
}

65 
uöt64_t
 
	$sù_svc_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

66 
uöt64_t
 
x1
,

67 
uöt64_t
 
x2
,

68 
uöt64_t
 
x3
,

69 
uöt64_t
 
x4
,

70 *
cookõ
,

71 *
h™dÀ
,

72 
uöt64_t
 
Êags
)

77 i‡(
	`is_sù_fid
(
smc_fid
)) {

78  
	`sù_smc_h™dÀr
(
smc_fid
, 
x1
, 
x2
, 
x3
, 
x4
, 
cookõ
,

79 
h™dÀ
, 
Êags
);

82 
smc_fid
) {

83 
MTK_SIP_SVC_CALL_COUNT
:

88 
	`SMC_RET1
(
h™dÀ
, 
MTK_SIP_SVC_NUM_CALLS
);

90 
MTK_SIP_SVC_UID
:

92 
	`SMC_UUID_RET
(
h™dÀ
, 
mtk_sù_svc_uid
);

94 
MTK_SIP_SVC_VERSION
:

96 
	`SMC_RET2
(
h™dÀ
, 
MTK_SIP_VERSION_MAJOR
, 
MTK_SIP_VERSION_MINOR
);

99 
	`WARN
("Unim∂emíãd SIP Sîvi˚ CÆl: 0x%x \n", 
smc_fid
);

100 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

102 
	}
}

105 
DECLARE_RT_SVC
(

106 
sù_svc
,

108 
OEN_SIP_START
,

109 
OEN_SIP_END
,

110 
SMC_TYPE_FAST
,

111 
sù_svc_£tup
,

112 
sù_svc_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/aarch64/plat_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<bl_comm⁄.h
>

34 
	~<gic_v2.h
>

35 
	~"../drivîs/pwrc/∂©_pwrc.h
"

36 
	~"../∂©_def.h
"

38 .
globl
 
	g∂©f‹m_gë_íåypoöt


39 .
globl
 
	g∂©_£c⁄d¨y_cﬁd_boŸ_£tup


40 .
globl
 
	g∂©f‹m_mem_öô


41 .
globl
 
	g∂©_ªp‹t_ex˚±i⁄


43 .
ma¸o
 
mt_choo£_gicmm≠
 
	g∑øm1
, 
	g∑øm2
, 
	gx_tmp
, 
	gw_tmp
, 
ªs


44 
	gldr
 \
	gx_tmp
, =
VE_SYSREGS_BASE
 + 
V2M_SYS_ID


45 
ldr
 \
w_tmp
, [\
x_tmp
]

46 
	gubfx
 \
	gw_tmp
, \w_tmp, #SYS_ID_BLD_SHIFT, #SYS_ID_BLD_LENGTH

47 
	gcmp
 \
	gw_tmp
, #BLD_GIC_VE_MMAP

48 
	gc£l
 \
	gªs
, \
	g∑øm1
, \
	g∑øm2
, 
	geq


49 .
ídm


62 
func
 
∂©_£c⁄d¨y_cﬁd_boŸ_£tup


71 
mrs
 
	gx0
, 
mpidr_ñ1


72 
ldr
 
	gx1
, =
PWRC_BASE


73 
°r
 
w0
, [
x1
, #PPOFFR_OFF]

79 
ldr
 
	gx0
, =
VE_GICC_BASE


80 
ldr
 
x1
, =
BASE_GICC_BASE


81 
mt_choo£_gicmm≠
 
x0
, 
	gx1
, 
	gx2
, 
	gw2
, 
x1


82 
mov
 
	gw0
, #(
	gIRQ_BYP_DIS_GRP1
 | 
	gFIQ_BYP_DIS_GRP1
)

83 
‹r
 
	gw0
, w0, #(
	gIRQ_BYP_DIS_GRP0
 | 
	gFIQ_BYP_DIS_GRP0
)

84 
°r
 
	gw0
, [
x1
, #GICC_CTLR]

92 
dsb
 
sy


93 
wfi


94 
	gcb_∑nic
:

95 
b
 
cb_∑nic


118 
func
 
∂©f‹m_gë_íåypoöt


119 
mov
 
x9
, 
x30


125 
ldr
 
	gx1
, =
fú°_boŸ


126 
ldr
 
w2
, [
x1
]

127 
cmp
 
	gw2
, #0

128 
beq
 
w¨m_ª£t


129 
°r
 
	gwzr
, [
x1
]

130 
mov
 
	gx0
, #0

131 
b
 
exô


132 
	gw¨m_ª£t
:

140 
ldr
 
x10
, =
MBOX_OFF


141 
bl
 
∂©f‹m_gë_c‹e_pos


142 
l¶
 
x0
, 
	gx0
, #CACHE_WRITEBACK_SHIFT

143 
ldr
 
	gx0
, [
x10
, 
x0
]

144 
cbz
 
	gx0
, 
_∑nic


145 
	gexô
:

146 
ªt
 
x9


147 
_∑nic
: 
b
 _panic

161 
func
 
∂©f‹m_mem_öô


162 
ldr
 
x0
, =
MBOX_OFF


163 
mov
 
w1
, #PLATFORM_CORE_COUNT

164 
	glo›
:

165 
°r
 
xzr
, [
x0
], #CACHE_WRITEBACK_GRANULE

166 
subs
 
	gw1
, w1, #1

167 
	gb
.
gt
 
lo›


168 
ªt


178 
func
 
∂©_ªp‹t_ex˚±i⁄


179 
mrs
 
	gx1
, 
CuºítEl


180 
l§
 
	gx1
, x1, #MODE_EL_SHIFT

181 
l¶
 
	gx1
, x1, #SYS_LED_EL_SHIFT

182 
l¶
 
	gx0
, x0, #SYS_LED_EC_SHIFT

183 
mov
 
	gx2
, #(
	gSECURE
 << 
	gSYS_LED_SS_SHIFT
)

184 
‹r
 
	gx0
, x0, 
x2


185 
‹r
 
	gx0
, x0, 
x1


186 
mov
 
	gx1
, #VE_SYSREGS_BASE

187 
add
 
	gx1
, x1, #V2M_SYS_LED

188 
°r
 
	gw0
, [
x1
]

189 
	gªt


191 .
d©a


192 
	gfú°_boŸ
:

195 .
globl
 
ªad_l2a˘Ã


196 
func
 
ªad_l2a˘Ã


197 
dsb
 
sy


198 
MRS
 
x0
, 
S3_1_C15_C0_0


199 
dsb
 
sy


200 
isb


201 
	gªt


203 .
globl
 
wrôe_l2a˘Ã


204 
func
 
wrôe_l2a˘Ã


205 
dsb
 
sy


206 
MSR
 
	gS3_1_C15_C0_0
, 
x0


207 
isb


208 
dsb
 
sy


209 
	gªt


211 .
globl
 
ªad_l2e˘Ã


212 
func
 
ªad_l2e˘Ã


213 
MRS
 
	gx0
, 
S3_1_C11_C0_3


214 
dsb
 
sy


215 
isb


216 
	gªt


218 .
globl
 
wrôe_l2e˘Ã


219 
func
 
wrôe_l2e˘Ã


220 
dsb
 
sy


221 
MSR
 
	gS3_1_C11_C0_3
, 
x0


222 
isb


223 
dsb
 
sy


224 
	gªt


226 .
globl
 
ªad_˝ua˘Ã


227 
func
 
ªad_˝ua˘Ã


228 
dsb
 
sy


229 
MRS
 
	gx0
, 
S3_1_C15_C2_0


230 
dsb
 
sy


231 
isb


232 
	gªt


234 .
globl
 
wrôe_˝ua˘Ã


235 
func
 
wrôe_˝ua˘Ã


236 
dsb
 
sy


237 
MSR
 
	gS3_1_C15_C2_0
, 
x0


238 
isb


239 
dsb
 
sy


240 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/aarch64/plat_helpers.h

1 #i‚de‡
PLAT_HELPERS_H


2 
	#PLAT_HELPERS_H


	)

4 
ªad_l2a˘Ã
();

5 
ªad_l2e˘Ã
();

7 
wrôe_l2a˘Ã
();

8 
wrôe_l2e˘Ã
();

10 
ªad_˝ua˘Ã
();

11 
wrôe_˝ua˘Ã
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/aarch64/platform_common.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<cci400.h
>

36 
	~<debug.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<xœt_èbÀs.h
>

40 
	~"../∂©_def.h
"

51 
	gmt_c⁄fig
[
CONFIG_LIMIT
];

59 c⁄° 
mm≠_ªgi⁄_t
 
	gmt_mm≠
[] = {

61 {(
TZRAM_BASE
 & 
PAGE_ADDR_MASK
),

62 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
), 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
},

68 { 
MTK_DEVICE_BASE
, 
MTK_DEVICE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

71 {(
MT_DEV_BASE
 & 
PAGE_ADDR_MASK
),
MT_DEV_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

74 {
TRNG_BASE_ADDR
, 
TRNG_BASE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

75 {
TRNG_PDN_BASE_ADDR
, 
TRNG_PDN_BASE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

78 { 
MTK_WDT_BASE
, 
MTK_WDT_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

91 
	#DEFINE_CONFIGURE_MMU_EL
(
_ñ
) \

92 
mt_c⁄figuª_mmu_ñ
##
	`_ñ
(
tŸÆ_ba£
, \

93 
tŸÆ_size
, \

94 
ro_°¨t
, \

95 
ro_limô
, \

96 
coh_°¨t
, \

97 
coh_limô
) \

99 
	`mm≠_add_ªgi⁄
(
tŸÆ_ba£
, \

100 
tŸÆ_size
, \

101 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
); \

102 
	`mm≠_add_ªgi⁄
(
ro_°¨t
, 
ro_limô
 -Ño_start, \

103 
MT_MEMORY
 | 
MT_RO
 | 
MT_SECURE
); \

104 
	`mm≠_add_ªgi⁄
(
coh_°¨t
, 
coh_limô
 - coh_start, \

105 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
); \

106 
	`mm≠_add
(
mt_mm≠
); \

107 
	`öô_xœt_èbÀs
(); \

109 
íabÀ_mmu_ñ
##
	`_ñ
(); \

110 }

	)

113 
	$DEFINE_CONFIGURE_MMU_EL
(1)

114 
	$DEFINE_CONFIGURE_MMU_EL
(3)

117 
	$mt_gë_cfgv¨
(
v¨_id
)

119 
	`as£π
(
v¨_id
 < 
CONFIG_LIMIT
);

120  
mt_c⁄fig
[
v¨_id
];

121 
	}
}

130 
	$mt_c⁄fig_£tup
()

132 
ªv
, 
hbi
, 
bld
, 
¨ch
, 
sys_id
, 
midr_≤
;

134 
sys_id
 = 
	`mmio_ªad_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_ID
);

135 
ªv
 = (
sys_id
 >> 
SYS_ID_REV_SHIFT
Ë& 
SYS_ID_REV_MASK
;

136 
hbi
 = (
sys_id
 >> 
SYS_ID_HBI_SHIFT
Ë& 
SYS_ID_HBI_MASK
;

137 
bld
 = (
sys_id
 >> 
SYS_ID_BLD_SHIFT
Ë& 
SYS_ID_BLD_MASK
;

138 
¨ch
 = (
sys_id
 >> 
SYS_ID_ARCH_SHIFT
Ë& 
SYS_ID_ARCH_MASK
;

140 
¨ch
 = 
ARCH_MODEL
;

141 
bld
 = 
BLD_GIC_A53A57_MMAP
;

142 
hbi
 = 
HBI_MT_BASE
;

144 i‡((
ªv
 !
REV_MT
Ë|| (
¨ch
 !
ARCH_MODEL
))

145 
	`∑nic
();

151 
bld
) {

153 
BLD_GIC_VE_MMAP
:

154 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
VE_GICD_BASE
;

155 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
VE_GICC_BASE
;

156 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
VE_GICH_BASE
;

157 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
VE_GICV_BASE
;

160 
BLD_GIC_A53A57_MMAP
:

161 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
BASE_GICD_BASE
;

162 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
BASE_GICC_BASE
;

163 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
BASE_GICH_BASE
;

164 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
BASE_GICV_BASE
;

167 
	`as£π
(0);

174 
hbi
) {

175 
HBI_FOUNDATION
:

176 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

177 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 1;

178 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

179 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 0;

180 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 0;

181 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

183 
HBI_MT_BASE
:

184 
midr_≤
 = (
	`ªad_midr
(Ë>> 
MIDR_PN_SHIFT
Ë& 
MIDR_PN_MASK
;

185 i‡((
midr_≤
 =
MIDR_PN_A57
Ë|| (midr_≤ =
MIDR_PN_A53
))

186 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 1;

188 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

190 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

191 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 2;

192 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 1;

193 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 1;

194 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

197 
	`as£π
(0);

201 
	}
}

203 
	$∂©_gë_ns_image_íåypoöt
()

206  
BL33_START_ADDRESS
;

208 
	}
}

210 
uöt64_t
 
	$∂©_gë_sys˙t_‰eq
()

212 
uöt64_t
 
cou¡î_ba£_‰equícy
;

216 
cou¡î_ba£_‰equícy
 = 13000000;

219 
	`as£π
(
cou¡î_ba£_‰equícy
 != 0);

221  
cou¡î_ba£_‰equícy
;

222 
	}
}

224 
	$mt_cci_£tup
()

226 
cci_£tup
;

233 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

234 i‡(
cci_£tup
)

235 
	`cci_íabÀ_cohîícy
(
	`ªad_mpidr
());

236 
	}
}

242 
	$mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

244 
	`SET_SECURITY_STATE
(
bl32_ï_öfo
->
h
.
©å
, 
SECURE
);

249 
bl32_ï_öfo
->
•§
 = 0;

250 
	}
}

255 
	$mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

257 
ñ_°©us
;

258 
mode
;

259 
rw
, 
ì
;

260 
daif
;

264 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

265 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

267 i‡(
ñ_°©us
)

268 
mode
 = 
MODE_EL2
;

270 
mode
 = 
MODE_EL1
;

305 
rw
 = 0;

307 
rw
 = 1;

309 i‡(0 =
rw
) {

310 
	`¥ötf
("LK is AArch32\n");

311 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

312 
mode
 = 
MODE32_svc
;

313 
ì
 = 0;

318 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

320 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

327 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)
BOOT_ARGUMENT_LOCATION
;

328 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

330 
	`¥ötf
("LK is AArch64\n");

331 
bl33_ï_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

333 
	`SET_SECURITY_STATE
(
bl33_ï_öfo
->
h
.
©å
, 
NON_SECURE
);

334 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/bl1_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<mmio.h
>

36 
	~<∂©f‹m.h
>

37 
	~<∂©f‹m_def.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__COHERENT_RAM_START__
;

46 
__COHERENT_RAM_END__
;

48 
__BL1_RAM_START__
;

49 
__BL1_RAM_END__
;

58 
	#BL1_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

59 
	#BL1_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

61 
	#BL1_RAM_BASE
 ()(&
__BL1_RAM_START__
)

	)

62 
	#BL1_RAM_LIMIT
 ()(&
__BL1_RAM_END__
)

	)

66 
memöfo_t
 
	gbl1_tzøm_œyout
;

68 
memöfo_t
 *
	$bl1_∂©_£c_mem_œyout
()

70  &
bl1_tzøm_œyout
;

71 
	}
}

76 
	$bl1_óæy_∂©f‹m_£tup
()

78 c⁄° 
bl1_øm_ba£
 = 
BL1_RAM_BASE
;

79 c⁄° 
bl1_øm_limô
 = 
BL1_RAM_LIMIT
;

80 c⁄° 
tzøm_limô
 = 
TZRAM_BASE
 + 
TZRAM_SIZE
;

83 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

93 
bl1_tzøm_œyout
.
tŸÆ_ba£
 = 
TZRAM_BASE
;

94 
bl1_tzøm_œyout
.
tŸÆ_size
 = 
TZRAM_SIZE
;

96 i‡(
bl1_øm_limô
 =
tzøm_limô
) {

98 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
TZRAM_BASE
;

99 
bl1_tzøm_œyout
.
‰ì_size
 = 
bl1_øm_ba£
 - 
TZRAM_BASE
;

102 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
bl1_øm_limô
;

103 
bl1_tzøm_œyout
.
‰ì_size
 =

104 
tzøm_limô
 - 
bl1_øm_limô
;

108 
	`mt_c⁄fig_£tup
();

109 
	}
}

116 
	$bl1_∂©f‹m_£tup
()

119 
	`mt_io_£tup
();

120 
	}
}

128 
	$bl1_∂©_¨ch_£tup
()

130 
	`mt_cci_£tup
();

132 
	`mt_c⁄figuª_mmu_ñ3
(
bl1_tzøm_œyout
.
tŸÆ_ba£
,

133 
bl1_tzøm_œyout
.
tŸÆ_size
,

134 
TZROM_BASE
,

135 
TZROM_BASE
 + 
TZROM_SIZE
,

136 
BL1_COHERENT_RAM_BASE
,

137 
BL1_COHERENT_RAM_LIMIT
);

138 
	}
}

147 
	$bl1_∂©_£t_bl2_ï_öfo
(
image_öfo_t
 *
bl2_image
,

148 
íåy_poöt_öfo_t
 *
bl2_ï
)

150 
	`SET_SECURITY_STATE
(
bl2_ï
->
h
.
©å
, 
SECURE
);

151 
bl2_ï
->
•§
 = 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

152 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/bl2_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<∂©f‹m.h
>

36 
	~<∂©f‹m_def.h
>

37 
	~<°rög.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__RO_START__
;

46 
__RO_END__
;

48 
__COHERENT_RAM_START__
;

49 
__COHERENT_RAM_END__
;

57 
	#BL2_RO_BASE
 ()(&
__RO_START__
)

	)

58 
	#BL2_RO_LIMIT
 ()(&
__RO_END__
)

	)

67 
	#BL2_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

68 
	#BL2_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

71 **
bl2_ñ_ch™ge_mem_±r
;

74 
memöfo_t
 
bl2_tzøm_œyout


75 
__©åibuã__
 ((
Æig√d
(
PLATFORM_CACHE_LINE_SIZE
),

76 
£˘i⁄
("tzfw_coherent_mem")));

82 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

83 
íåy_poöt_öfo_t
 *
	gbl31_ï_öfo
;

85 
memöfo_t
 *
	$bl2_∂©_£c_mem_œyout
()

87  &
bl2_tzøm_œyout
;

88 
	}
}

99 
bl31_∑øms_t
 *
	$bl2_∂©_gë_bl31_∑øms
()

101 
bl2_to_bl31_∑øms_mem_t
 *
bl31_∑øms_mem
;

103 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


108 
	`as£π
(
BL32_BASE
 > 
PARAMS_BASE
 + (
bl2_to_bl31_∑øms_mem_t
));

115 
bl31_∑øms_mem
 = (
bl2_to_bl31_∑øms_mem_t
 *)
PARAMS_BASE
;

116 
	`mem£t
((*)
PARAMS_BASE
, 0, (
bl2_to_bl31_∑øms_mem_t
));

119 
bl2_to_bl31_∑øms
 = &
bl31_∑øms_mem
->
bl31_∑øms
;

120 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
, 
PARAM_BL31
, 
VERSION_1
, 0);

123 
bl31_ï_öfo
 = &
bl31_∑øms_mem
->bl31_ep_info;

124 
bl2_to_bl31_∑øms
->
bl31_image_öfo
 = &
bl31_∑øms_mem
->bl31_image_info;

125 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl31_image_öfo
, 
PARAM_IMAGE_BINARY
,

126 
VERSION_1
, 0);

129 i‡(
BL32_BASE
) {

130 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
 =

131 &
bl31_∑øms_mem
->
bl32_ï_öfo
;

132 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_ï_öfo
,

133 
PARAM_EP
, 
VERSION_1
, 0);

134 
bl2_to_bl31_∑øms
->
bl32_image_öfo
 =

135 &
bl31_∑øms_mem
->
bl32_image_öfo
;

136 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_image_öfo
,

137 
PARAM_IMAGE_BINARY
,

138 
VERSION_1
, 0);

142 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 = &
bl31_∑øms_mem
->bl33_ep_info;

143 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_ï_öfo
,

144 
PARAM_EP
, 
VERSION_1
, 0);

145 
bl2_to_bl31_∑øms
->
bl33_image_öfo
 = &
bl31_∑øms_mem
->bl33_image_info;

146 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_image_öfo
, 
PARAM_IMAGE_BINARY
,

147 
VERSION_1
, 0);

149  
bl2_to_bl31_∑øms
;

150 
	}
}

157 
íåy_poöt_öfo
 *
	$bl2_∂©_gë_bl31_ï_öfo
()

159 #i‡
DEBUG


160 
bl31_ï_öfo
->
¨gs
.
¨g1
 = 
MT_BL31_PLAT_PARAM_VAL
;

162  
bl31_ï_öfo
;

163 
	}
}

171 
	$bl2_óæy_∂©f‹m_£tup
(
memöfo_t
 *
mem_œyout
)

174 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

177 
bl2_tzøm_œyout
.
tŸÆ_ba£
 = 
mem_œyout
->total_base;

178 
bl2_tzøm_œyout
.
tŸÆ_size
 = 
mem_œyout
->total_size;

179 
bl2_tzøm_œyout
.
‰ì_ba£
 = 
mem_œyout
->free_base;

180 
bl2_tzøm_œyout
.
‰ì_size
 = 
mem_œyout
->free_size;

181 
bl2_tzøm_œyout
.
©å
 = 
mem_œyout
->attr;

182 
bl2_tzøm_œyout
.
√xt
 = 0;

185 
	`mt_c⁄fig_£tup
();

186 
	}
}

192 
	$bl2_∂©f‹m_£tup
()

200 
	`mt_£curôy_£tup
();

203 
	`mt_io_£tup
();

204 
	}
}

207 
	$bl2_∂©_Êush_bl31_∑øms
()

209 
	`Êush_dˇche_ønge
(()
PARAMS_BASE
, \

210 (
bl2_to_bl31_∑øms_mem_t
));

211 
	}
}

218 
	$bl2_∂©_¨ch_£tup
()

220 
	`mt_c⁄figuª_mmu_ñ1
(
bl2_tzøm_œyout
.
tŸÆ_ba£
,

221 
bl2_tzøm_œyout
.
tŸÆ_size
,

222 
BL2_RO_BASE
,

223 
BL2_RO_LIMIT
,

224 
BL2_COHERENT_RAM_BASE
,

225 
BL2_COHERENT_RAM_LIMIT
);

226 
	}
}

234 
	$bl2_∂©_£t_bl31_ï_öfo
(
image_öfo_t
 *
bl31_image_öfo
,

235 
íåy_poöt_öfo_t
 *
bl31_ï_öfo
)

237 
	`SET_SECURITY_STATE
(
bl31_ï_öfo
->
h
.
©å
, 
SECURE
);

238 
bl31_ï_öfo
->
•§
 = 
	`SPSR_64
(
MODE_EL3
, 
MODE_SP_ELX
,

239 
DISABLE_ALL_EXCEPTIONS
);

240 
	}
}

249 
	$bl2_∂©_£t_bl32_ï_öfo
(
image_öfo_t
 *
bl32_image_öfo
,

250 
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

252 
	`mt_£t_bl32_ï_öfo
(
bl32_ï_öfo
);

253 
	}
}

261 
	$bl2_∂©_£t_bl33_ï_öfo
(
image_öfo_t
 *
image
,

262 
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

264 
	`mt_£t_bl33_ï_öfo
(
bl33_ï_öfo
);

265 
	}
}

271 
	$bl2_∂©_gë_bl32_memöfo
(
memöfo_t
 *
bl32_memöfo
)

276 
bl32_memöfo
->
tŸÆ_ba£
 = 
BL32_BASE
;

277 
bl32_memöfo
->
‰ì_ba£
 = 
BL32_BASE
;

278 
bl32_memöfo
->
tŸÆ_size
 =

279 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

280 
bl32_memöfo
->
‰ì_size
 =

281 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

282 
bl32_memöfo
->
©å
 = 
BOT_LOAD
;

283 
bl32_memöfo
->
√xt
 = 0;

284 
	}
}

290 
	$bl2_∂©_gë_bl33_memöfo
(
memöfo_t
 *
bl33_memöfo
)

292 
bl33_memöfo
->
tŸÆ_ba£
 = 
DRAM_BASE
;

293 
bl33_memöfo
->
tŸÆ_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

294 
bl33_memöfo
->
‰ì_ba£
 = 
DRAM_BASE
;

295 
bl33_memöfo
->
‰ì_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

296 
bl33_memöfo
->
©å
 = 0;

297 
bl33_memöfo
->
©å
 = 0;

298 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/bl31_plat_setup.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<c⁄sﬁe.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°ddef.h
>

40 
	~"drivîs/pwrc/∂©_pwrc.h
"

41 
	~"∂©_def.h
"

42 
	~"∂©_¥iv©e.h
"

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<xœt_èbÀs.h
>

46 
	~"l2c.h
"

47 
	~"mt_˝uxg±.h
"

52 
bl31_⁄_íåypoöt
();

54 
__RO_START__
;

55 
__RO_END__
;

57 
__COHERENT_RAM_START__
;

58 
__COHERENT_RAM_END__
;

66 
	#BL31_RO_BASE
 ()(&
__RO_START__
)

	)

67 
	#BL31_RO_LIMIT
 ()(&
__RO_END__
)

	)

76 
	#BL31_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

77 
	#BL31_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

80 #i‡
RESET_TO_BL31


81 
íåy_poöt_öfo_t
 
	gbl32_íåypoöt_öfo
;

82 
íåy_poöt_öfo_t
 
	gbl33_íåypoöt_öfo
;

88 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

97 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_image_ï_öfo
(
uöt32_t
 
ty≥
)

99 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

101 #i‡
RESET_TO_BL31


103 i‡(
ty≥
 =
NON_SECURE
)

104 
	`mt_gë_íåy_poöt_öfo
(
NON_SECURE
, &
bl33_íåypoöt_öfo
);

106 
	`mt_gë_íåy_poöt_öfo
(
SECURE
, &
bl32_íåypoöt_öfo
);

108 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

109 &
bl33_íåypoöt_öfo
 :

110 &
bl32_íåypoöt_öfo
;

112 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

113 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

114 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

119 i‡(
√xt_image_öfo
->
pc
)

120  
√xt_image_öfo
;

122  
NULL
;

123 
	}
}

126 
uöt64_t
 
gë_kî√l_öfo_pc
();

127 
uöt64_t
 
gë_kî√l_öfo_r0
();

128 
uöt64_t
 
gë_kî√l_öfo_r1
();

130 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_kî√l_ï_öfo
(
uöt32_t
 
ty≥
)

132 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

133 
ñ_°©us
;

134 
mode
;

136 #i‡
RESET_TO_BL31


137 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

138 &
bl33_íåypoöt_öfo
 :

139 &
bl32_íåypoöt_öfo
;

141 
	`mt_gë_íåy_poöt_öfo
(
ty≥
, 
√xt_image_öfo
);

144 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

145 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

146 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

151 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

152 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

154 i‡(
ñ_°©us
)

155 
mode
 = 
MODE_EL2
;

157 
mode
 = 
MODE_EL1
;

160 i‡(0 =
rw
) {

161 
	`¥ötf
("LK is AArch32\n");

162 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

163 
mode
 = 
MODE32_svc
;

164 
ì
 = 0;

169 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

171 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

178 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)&
∂_boŸ_¨gumít
;

179 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

183 
	`¥ötf
("Kernel is 64Bit\n");

184 
√xt_image_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

185 
√xt_image_öfo
->
pc
 = 
	`gë_kî√l_öfo_pc
();

186 
√xt_image_öfo
->
¨gs
.
¨g0
=
	`gë_kî√l_öfo_r0
();

187 
√xt_image_öfo
->
¨gs
.
¨g1
=
	`gë_kî√l_öfo_r1
();

189 
	`¥ötf
("pc=0x%llx,Ñ0=0x%llx,Ñ1=0x%llx\n",

190 
√xt_image_öfo
->
pc
,

191 
√xt_image_öfo
->
¨gs
.
¨g0
,

192 
√xt_image_öfo
->
¨gs
.
¨g1
);

195 
	`SET_SECURITY_STATE
(
√xt_image_öfo
->
h
.
©å
, 
NON_SECURE
);

199 i‡(
√xt_image_öfo
->
pc
)

200  
√xt_image_öfo
;

202  
NULL
;

203 
	}
}

217 
	$bl31_óæy_∂©f‹m_£tup
(
bl31_∑øms_t
 *
‰om_bl2
,

218 *
∂©_∑øms_‰om_bl2
)

220 
n‹mÆ_ba£
;

221 
©f_ba£
;

223 
	`c⁄fig_L2_size
();

225 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

228 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(0), ()
bl31_⁄_íåypoöt
);

230 
n‹mÆ_ba£
 = 0;

234 
©f_ba£
 = 
	`ªad_˙ç˘_ñ0
();

235 
	`©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

238 
	`c⁄sﬁe_öô
(
ãórg
->
©f_log_p‹t
);

239 
	`¥ötf
("LK bootárgument\n\r");

240 
	`¥ötf
("loˇti⁄=0x%x size=0x%x\n\r", 
BOOT_ARGUMENT_LOCATION
, 
BOOT_ARGUMENT_SIZE
);

241 
	`¥ötf
("©f_magic=0x%x\n\r", 
ãórg
->
©f_magic
);

242 
	`¥ötf
("ãe_suµ‹t=0x%x\n\r", 
ãórg
->
ãe_suµ‹t
);

243 
	`¥ötf
("ãe_íåy=0x%x\n\r", 
ãórg
->
ãe_íåy
);

244 
	`¥ötf
("ãe_boŸ_¨g_addr=0x%x\n\r", 
ãórg
->
ãe_boŸ_¨g_addr
);

245 
	`¥ötf
("©f_log_p‹t=0x%x\n\r", 
ãórg
->
©f_log_p‹t
);

246 
	`¥ötf
("©f_log_baudøã=0x%x\n\r", 
ãórg
->
©f_log_baudøã
);

247 
	`¥ötf
("©f_log_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
);

248 
	`¥ötf
("©f_log_buf_size=0x%x\n\r", 
ãórg
->
©f_log_buf_size
);

249 
	`¥ötf
("©f_´e_debug_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_°¨t
);

250 
	`¥ötf
("©f_´e_debug_buf_size=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_size
);

251 
	`¥ötf
("©f_úq_num=%d\n\r", 
ãórg
->
©f_úq_num
);

252 
	`¥ötf
("BL33_START_ADDRESS=0x%x\n\r", 
BL33_START_ADDRESS
);

255 
	`mt_c⁄fig_£tup
();

257 
	`¥ötf
("bl31_setup\n\r");

258 #i‡
RESET_TO_BL31


260 
	`as£π
(
‰om_bl2
 =
NULL
);

261 
	`as£π
(
∂©_∑øms_‰om_bl2
 =
NULL
);

262 
	`¥ötf
("RESET_TO_BL31\n\r");

278 
	`¥ötf
("not RESET_TO_BL31\n");

280 
	`as£π
(
‰om_bl2
 !
NULL
);

281 
	`as£π
(
‰om_bl2
->
h
.
ty≥
 =
PARAM_BL31
);

282 
	`as£π
(
‰om_bl2
->
h
.
vîsi⁄
 >
VERSION_1
);

284 
bl2_to_bl31_∑øms
 = 
‰om_bl2
;

285 
	`as£π
((()
∂©_∑øms_‰om_bl2
Ë=
MT_BL31_PLAT_PARAM_VAL
);

287 
	}
}

293 
	$bl31_∂©f‹m_£tup
()

298 
	`gic_£tup
();

306 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGDATA
, 0);

307 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGCTRL
,

313 
	`mmio_wrôe_32
(
SYS_CNTCTL_BASE
 + 
CNTCR_OFF
, 
	`CNTCR_FCREQ
(0Ë| 
CNTCR_EN
);

316 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

317 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

318 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

319 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

320 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

322 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) | (1 << CNTNSAR_NS_SHIFT(1));

323 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

328 
	`mt_pwrc_£tup
();

331 
	`mt_£tup_t›ﬁogy
();

332 
	}
}

338 
	$bl31_∂©_¨ch_£tup
()

340 
mpidr
 = 
	`ªad_mpidr
();

346 
	`w‹k¨ound_836870
(
mpidr
);

351 
	`˛ór_˙tvoff
(
mpidr
);

353 #i‡
RESET_TO_BL31


354 
	`mt_cci_£tup
();

358 
	`mmio_wrôe_32
(
CCI400_BASE
 + 
CCI_SEC_ACCESS_OFFSET
 , 0x1);

361 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

362 if(
ãórg
->
©f_log_buf_size
 !=0 ) {

363 
	`¥ötf
("mm≠át‡buf„∏: 0x%x, 0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
,

364 
ãórg
->
©f_log_buf_size
);

365 
	`mm≠_add_ªgi⁄
((
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
,

366 
MT_DEVICE
 | 
MT_RW
 | 
MT_NS
);

367 
	`¥ötf
("mmapátf buffer (force 2MBáligned): 0x%x, 0x%x\n\r",

368 (
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
);

373 
	`mm≠_add_ªgi⁄
(
TZRAM2_BASE
, ((
TZRAM2_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

374 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
);

378 
	`mt_c⁄figuª_mmu_ñ3
(
TZRAM_BASE
,

379 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

380 
BL31_RO_BASE
,

381 
BL31_RO_LIMIT
,

382 
BL31_COHERENT_RAM_BASE
,

383 
BL31_COHERENT_RAM_LIMIT
);

389 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

390 
	}
}

392 #i‡
RESET_TO_BL31


397 
	$mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

398 
íåy_poöt_öfo_t
 *
èrgë_íåy_öfo
)

400 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

401 i‡(
èrgë_£curôy
 =
NON_SECURE
) {

402 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

403 
PARAM_EP
,

404 
VERSION_1
,

410 
èrgë_íåy_öfo
->
pc
 = 
	`∂©_gë_ns_image_íåypoöt
();

412 
	`mt_£t_bl33_ï_öfo
(
èrgë_íåy_öfo
);

415 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

416 
PARAM_EP
,

417 
VERSION_1
,

420 i‡(
ãórg
->
ãe_suµ‹t
)

422 
èrgë_íåy_öfo
->
pc
 = 
ãórg
->
ãe_íåy
;

423 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

427 i‡(
BL32_BASE
 != 0) {

430 
èrgë_íåy_öfo
->
pc
 = 
BL32_BASE
;

431 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

435 
	}
}

438 
	$íabÀ_ns_ac˚ss_to_˝ue˘Ã
() {

439 
√xt_a˘Ã
;

442 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ2
();

443 
√xt_a˘Ã
 |(
ACTLR_CPUECTLR_BIT
);

444 
	`wrôe_a˘Ã_ñ2
(
√xt_a˘Ã
);

446 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ3
();

447 
√xt_a˘Ã
 |(
ACTLR_CPUECTLR_BIT
);

448 
	`wrôe_a˘Ã_ñ3
(
√xt_a˘Ã
);

454 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/bl32_plat_setup.c

31 
	~<bl_comm⁄.h
>

32 
	~<c⁄sﬁe.h
>

33 
	~<∂©f‹m.h
>

34 
	~"∂©_def.h
"

35 
	~"∂©_¥iv©e.h
"

41 
__RO_START__
;

42 
__RO_END__
;

44 
__COHERENT_RAM_START__
;

45 
__COHERENT_RAM_END__
;

53 
	#BL32_RO_BASE
 ()(&
__RO_START__
)

	)

54 
	#BL32_RO_LIMIT
 ()(&
__RO_END__
)

	)

63 
	#BL32_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

64 
	#BL32_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

69 
	$bl32_óæy_∂©f‹m_£tup
()

75 
	`c⁄sﬁe_öô
(
PL011_UART1_BASE
);

78 
	`mt_c⁄fig_£tup
();

79 
	}
}

84 
	$bl32_∂©f‹m_£tup
()

87 
	}
}

93 
	$bl32_∂©_¨ch_£tup
()

95 
	`mt_c⁄figuª_mmu_ñ1
(
BL32_RO_BASE
,

96 (
BL32_COHERENT_RAM_LIMIT
 - 
BL32_RO_BASE
),

97 
BL32_RO_BASE
,

98 
BL32_RO_LIMIT
,

99 
BL32_COHERENT_RAM_BASE
,

100 
BL32_COHERENT_RAM_LIMIT
);

101 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/l2c/l2c.c

1 
	~<∂©f‹m_def.h
>

2 
	~<¨ch.h
>

3 
	~<¨ch_hñ≥rs.h
>

4 
	~<mmio.h
>

5 
	~<sù_îr‹.h
>

6 
	~<•ölock.h
>

7 
	~<debug.h
>

8 
	~"∂©_¥iv©e.h
"

9 
	~"l2c.h
"

12 
•ölock_t
 
	gl2_sh¨e_lock
;

14 
	$c⁄fig_L2_size
()

16 
ˇche_cfg0
, 
ˇche_cfg1
;

19 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_512K
 << 
L2C_SIZE_CFG_OFF
);

20 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

21 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

22 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

24 if(((
	`gë_devöfo_wôh_ödex
(0)>>4)&0xff) == 0xc0)

27 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
);

28 
ˇche_cfg1
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

29 
ˇche_cfg1
 |(
CONFIGED_256K
 << 
L2C_SIZE_CFG_OFF
);

30 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

31 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

32 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

37 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_512K
 << 
L2C_SIZE_CFG_OFF
);

38 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

39 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

40 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

42 
	}
}

44 
uöt64_t
 
	$swôch_L2_size
(
uöt64_t
 
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
)

46 
ˇche_cfg0
, 
ˇche_cfg1
;

47 
ªt
 = 
SIP_SVC_E_SUCCESS
;

48 
l2c_sh¨e_öfo
 
sh¨e_öfo
;

50 
sh¨e_öfo
.
˛u°î_b‹row
 = (
˛u°î_b‹row_ªtu∫
 >> 16) & 0xFFFF;

51 
sh¨e_öfo
.
˛u°î_ªtu∫
 = 
˛u°î_b‹row_ªtu∫
 & 0xFFFF;

52 
sh¨e_öfo
.
sh¨e_˛u°î_num
 = share_cluster_num;

54 
	`•ö_lock
(&
l2_sh¨e_lock
);

58 
	`dis_i_d_dcsw_›_Æl
(
DCCISW
);

62 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

63 
ˇche_cfg0
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

64 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
);

65 
ˇche_cfg1
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

67 
›ti⁄
) {

68 
BORROW_L2
:

69 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

71 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

72 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

73 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

74 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

77 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

79 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

80 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

81 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

82 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

85 
ˇche_cfg1
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

86 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

87 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

88 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

92 
RETURN_L2
:

93 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

95 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

96 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

97 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

98 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

101 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

103 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

104 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

105 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

106 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

109 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

110 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

111 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

112 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

116 if((
	`gë_devöfo_wôh_ödex
(0)&0xff) == 0xc0)

118 
	`¥ötf
("switch L2$ size 5.1\n");

120 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_256K
 << 
L2C_SIZE_CFG_OFF
);

121 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

122 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

123 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

133 
ªt
 = 
SIP_SVC_E_NOT_SUPPORTED
;

138 
	`íabÀ_ˇche
();

140 
	`¥ötf
("switch L2$ size 7\n");

142 
	`•ö_u∆ock
(&
l2_sh¨e_lock
);

144  
ªt
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/l2c/l2c.h

1 #i‚de‡
_MT_L2C_H_


2 
	#_MT_L2C_H_


	)

4 
	#CONFIGED_256K
 0x1

	)

5 
	#CONFIGED_512K
 0x3

	)

6 
	#L2C_SIZE_CFG_OFF
 8

	)

7 
	#L2C_SHARE_ENABLE
 12

	)

9 
	e›ti⁄s
{

10 
	mBORROW_L2
,

11 
	mRETURN_L2
,

12 
	mBORROW_NONE


15 
	s_l2c_sh¨e_öfo
{

16 
uöt32_t
 
	msh¨e_˛u°î_num
;

17 
uöt32_t
 
	m˛u°î_b‹row
;

18 
uöt32_t
 
	m˛u°î_ªtu∫
;

19 }
	tl2c_sh¨e_öfo
;

21 
c⁄fig_L2_size
();

22 
uöt64_t
 
swôch_L2_size
(uöt64_à
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/log/log.c

38 
	~<log.h
>

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<°döt.h
>

42 
	~<∂©f‹m.h
>

43 
	~<¨ch.h
>

44 
	~<¨ch_hñ≥rs.h
>

45 
	~<mmio.h
>

46 
	~<∂©_def.h
>

48 
	#DEBUG_LOG_SERVICE
 1

	)

49 #i‡
DEBUG_LOG_SERVICE


50 
	#debug_¥öt
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

52 
	#debug_¥öt
(...Ë(()0)

	)

55 
bl31_log_£rvi˚_ªgi°î
((*
lock_gë
)(),

56 (*
log_putc
)(),

57 (*
lock_ªÀa£
)());

59 
	`bl31_log_£rvi˚_ªgi°î2
((*
lock_gë
)(),

60 (*
log_putc
)(),

61 (*
lock_ªÀa£
)());

64 
mt_log_buf_°¨t
 = 0;

65 
mt_log_buf_size
 = 0;

66 
mt_log_buf_íd
 = 0;

67 *
mt_ex˚±i⁄_buf_íd
 = 0;

68 
©f_log_˘æ_t
 *
p_©f_log_˘æ
 = 0;

69 *
±r_©f_¸ash_Êag
 = 0;

70 *
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = 0;

73 
	$mt_log_su•íd_Êush
()

75 if–
mt_log_buf_size
 != 0 )

77 
	`Êush_dˇche_ønge
((
uöt64_t
)
mt_log_buf_°¨t
, (uöt64_t)
mt_log_buf_size
);

79 
	}
}

82 
	$mt_log_lock_acquúe
()

84 
	`•ö_lock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

87 
	}
}

90 
	$mt_log_wrôe
(
c
)

92 *(*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
c
;

94 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
++;

96 if–
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 < 
mt_log_buf_íd
 )

97 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
++;

99 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

102 
	}
}

104 
	$mt_log_wrôe2
(
c
)

106 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

107 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

108 *
±r_ex_buf
 = 
NULL
;

109 *
±r_wrôe_pos
 = 
NULL
;

112 if(
±r_©f_¸ash_Êag
 =
NULL
)

115 
±r_wrôe_pos
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
löór_id
];

116 
±r_ex_buf
 = (*)((
uöçå_t
)*
±r_wrôe_pos
);

119 if((
uöçå_t
)
±r_ex_buf
 <(uöçå_t)
mt_ex˚±i⁄_buf_íd
) {

120 *
±r_ex_buf
 = 
c
;

121 (*
±r_wrôe_pos
)++;

127 
	}
}

130 
	$mt_¸ash_log_dump
(
uöt8_t
 *
¸ash_log_addr
, 
uöt32_t
 
¸ash_log_size
)

133 
uöt64_t
 
ªt
 = 0;

134 
uöt64_t
 
ªad_cou¡
;

135 
uöt64_t
 
off£t
;

136 
uöt64_t
 
pos
;

137 
uöt64_t
 
wrôe_cou¡
 = 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
;

138 
uöt8_t
 *
r_±r
 = 
NULL
;

139 
uöt8_t
 *
w_±r
 = 
NULL
;

140 
uöt8_t
 *
°¨t_±r
 = (uöt8_t*)(
uöçå_t
)(
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
);

142 if(
wrôe_cou¡
 == 0)

145 if(
wrôe_cou¡
 > 
¸ash_log_size
) {

146 
off£t
 = 
¸ash_log_size
-1;

147 
ªad_cou¡
 = 
¸ash_log_size
;

149 
off£t
 = 
wrôe_cou¡
-1;

150 
ªad_cou¡
 = 
wrôe_cou¡
;

153 
pos
 = 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
-1;

154 if(
pos
 < (
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
))

155 
pos
 = 
mt_log_buf_íd
;

156 
r_±r
 = (
uöt8_t
 *)((
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

158 
w_±r
 = 
¸ash_log_addr
 + 
off£t
;

159 
ªad_cou¡
) {

160 *(
w_±r
--Ë*(
r_±r
--);

161 if(
r_±r
 < 
°¨t_±r
)

162 
r_±r
 = (
uöt8_t
*)(
uöçå_t
)
mt_log_buf_íd
;

163 
ªad_cou¡
--;

164 
ªt
++;

167  
ªt
;

168 
	}
}

170 
	$mt_gë_uƒód_log_size
()

172 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =p_©f_log_˘æ->öfo.
©f_wrôe_pos
)

176 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 <Ö_©f_log_˘æ->öfo.
©f_wrôe_pos
)

178  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 -Ö_©f_log_˘æ->öfo.
©f_ªad_pos
);

182  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 +Ö_©f_log_˘æ->öfo.
©f_buf_size
)

183 - 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
;

184 
	}
}

187 
	$mt_log_lock_ªÀa£
()

189 
©f_buf_uƒód_size
 = 
	`mt_gë_uƒód_log_size
();

192 if(
©f_buf_uƒód_size
 >
ATF_LOG_SIGNAL_THRESHOLD_SIZE
)

199 if(
p_©f_log_˘æ
->
öfo
.
©f_ªadî_Æive
)

201 
	`mt_©f_åiggî_úq
();

202 
p_©f_log_˘æ
->
öfo
.
©f_úq_cou¡
++;

205 
p_©f_log_˘æ
->
öfo
.
©f_buf_uƒód_size
 =átf_buf_unread_size;

208 
	`•ö_u∆ock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

211 
	}
}

213 
uöt32_t
 
	$is_powî_⁄_boŸ
()

215 
uöt32_t
 
wdt_°a
, 
wdt_öãrvÆ
;

216 
wdt_°a
 = 
	`mmio_ªad_32
(
MTK_WDT_STATUS
);

217 
wdt_öãrvÆ
 = 
	`mmio_ªad_32
(
MTK_WDT_INTERVAL
);

218 
	`¥ötf
("°a=0x%x i¡=0x%x\r\n", 
wdt_°a
, 
wdt_öãrvÆ
);

222 if(
wdt_öãrvÆ
 & (1<<2))

225 
	}
}

227 
	$mt_log_£t_¸ash_Êag
()

229 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

230 
	}
}

232 
	$mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
)

234 
uöt32_t
 
dump_ªt
=0;

235 
i
;

236 
mt_log_buf_°¨t
 = 
°¨t
;

237 
mt_log_buf_size
 = 
size
;

238 
mt_log_buf_íd
 = 
°¨t
 + 
size
 - 1 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

239 
mt_ex˚±i⁄_buf_íd
 = (*)(
uöçå_t
)(
°¨t
 + 
size
 - 1 - 
´e_buf_size
);

241 
p_©f_log_˘æ
 = (
©f_log_˘æ_t
*)(
uöçå_t
)
°¨t
;

244 
±r_©f_¸ash_Êag
 = &
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
;

245 
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[0];

247 if(
	`is_powî_⁄_boŸ
()) {

248 
	`debug_¥öt
("is_power_on_boot:Årue\n");

249 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

251 
	`debug_¥öt
("is_power_on_boot: false\n");

252 if(
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 =
ATF_CRASH_MAGIC_NO
) {

253 
	`debug_¥öt
("¸ash fœg: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

254 
	`debug_¥öt
("©f_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

255 
	`debug_¥öt
("©f_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

256 
	`debug_¥öt
("dump crashlog\n");

257 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

258 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

259 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

260 
	`debug_¥öt
("©f_¸ash_log_addr: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

261 
dump_ªt
 = 
	`mt_¸ash_log_dump
((
uöt8_t
*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
, 
ATF_CRASH_LAST_LOG_SIZE
);

262 
	`debug_¥öt
("dump_ªt=%d.\n", 
dump_ªt
);

267 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0,

268 
size
-
´e_buf_size
-
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

269 
	`mem£t
((*)(
uöçå_t
)(
°¨t
+(
size
-
´e_buf_size
)), 0x0,áee_buf_size);

271 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

275 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
 = 
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

276 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
 = 
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

277 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

278 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

279 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

280 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
 = 0;

282 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

283 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

284 
	`debug_¥öt
("mt_log_£tu∞-átf_wrôe_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

285 
	`debug_¥öt
("mt_log_£tu∞-átf_ªad_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
);

286 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_lock : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
);

287 
	`debug_¥öt
("mt_log_£tu∞- mt_log_buf_íd : 0x%x\n", 
mt_log_buf_íd
);

289 
	`debug_¥öt
("mt_log_£tu∞- ATF_CRASH_LAST_LOG_SIZE : 0x%x\n", 
ATF_CRASH_LAST_LOG_SIZE
);

290 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE_PER_CPU : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE_PER_CPU
);

291 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE
);

292 
	`debug_¥öt
("mt_log_£tu∞- PLATFORM_CORE_COUNT : 0x%x\n", 
PLATFORM_CORE_COUNT
);

294 
i
=0; i<
PLATFORM_CORE_COUNT
; i++) {

295 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
i
] = (
°¨t
+(
size
-
´e_buf_size
)-
ATF_EXCEPT_BUF_SIZE
)+ i*
ATF_EXCEPT_BUF_SIZE_PER_CPU
;

296 
	`debug_¥öt
("mt_log_£tu∞-átf_ex˚±_wrôe_pos_≥r_˝u[%d]: 0x%x\n", 
i
, 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[i]);

299 if(
dump_ªt
) {

301 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

302 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

303 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
 = 
ATF_CRASH_LAST_LOG_SIZE
 + 
ATF_EXCEPT_BUF_SIZE
;

304 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

307 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_Êag : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

308 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

309 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
);

311 
	`bl31_log_£rvi˚_ªgi°î
(&
mt_log_lock_acquúe
, &
mt_log_wrôe
,

312 &
mt_log_lock_ªÀa£
);

313 
	`bl31_log_£rvi˚_ªgi°î2
(
NULL
, &
mt_log_wrôe2
, NULL);

314 
	}
}

317 
	#MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 120

	)

318 
	#TBASE_TAG
 "TBASE"

	)

319 
	gmt_log_£cuª_os_buf
[
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
+1] = {0};

320 
	gmt_log_£cuª_os_pos
 = 0;

322 
	$mt_log_£cuª_os_¥öt
(
c
)

324 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = 
c
;

327 if–
c
 == '\n' )

329 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
+1] = '\0';

330 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

331 
mt_log_£cuª_os_pos
 = 0;

335 
mt_log_£cuª_os_pos
++;

338 if–
mt_log_£cuª_os_pos
 =
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 )

340 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = '\0';

341 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

342 
mt_log_£cuª_os_pos
 = 0;

344 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/log/log.h

49 #i‚de‡
ATF_LOG_DRV_H


50 
	#ATF_LOG_DRV_H


	)

52 
	~<•ölock.h
>

53 
	~<°döt.h
>

54 
	~<∂©f‹m_def.h
>

56 
	#ATF_LOG_CTRL_BUF_SIZE
 256

	)

57 
	#ATF_LOG_SIGNAL_THRESHOLD_SIZE
 1024

	)

59 
	#ATF_CRASH_MAGIC_NO
 0xdód1abf

	)

75 
	#ATF_CRASH_LAST_LOG_SIZE
 (32*1024)

	)

76 
	#ATF_EXCEPT_BUF_SIZE_PER_CPU
 (4*1024)

	)

77 
	#ATF_EXCEPT_BUF_SIZE
 (
ATF_EXCEPT_BUF_SIZE_PER_CPU
 * 
PLATFORM_CORE_COUNT
)

	)

79 
	u©f_log_˘æ


83 
	m©f_buf_addr
;

84 
	m©f_buf_size
;

85 
	m©f_wrôe_pos
;

86 
	m©f_ªad_pos
;

87 
•ölock_t
 
	m©f_buf_lock
;

88 
	m©f_buf_uƒód_size
;

89 
	m©f_úq_cou¡
;

90 
	m©f_ªadî_Æive
;

91 
uöt64_t
 
	m©f_tŸÆ_wrôe_cou¡
;

92 
uöt64_t
 
	m©f_tŸÆ_ªad_cou¡
;

93 
	m©f_´e_dbg_buf_addr
;

94 
	m©f_´e_dbg_buf_size
;

95 
	m©f_¸ash_log_addr
;

96 
	m©f_¸ash_log_size
;

97 
	m©f_¸ash_Êag
;

98 
	m©f_ex˚±_wrôe_pos_≥r_˝u
[
PLATFORM_CORE_COUNT
];

99 } 
	möfo
;

100 
	md©a
[
ATF_LOG_CTRL_BUF_SIZE
];

101 } 
	t©f_log_˘æ_t
;

103 
mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
);

104 
mt_log_lock_acquúe
();

105 
mt_log_wrôe
(
c
);

106 
mt_log_lock_ªÀa£
();

107 
mt_log_su•íd_Êush
();

108 
mt_log_£cuª_os_¥öt
(
c
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/pwrc/plat_pwrc.c

31 
	~<bakîy_lock.h
>

32 
	~<mmio.h
>

33 
	~"../../∂©_def.h
"

34 
	~"∂©_pwrc.h
"

40 
bakîy_lock_t
 
pwrc_lock
 
__©åibuã__
 ((
£˘i⁄
("tzfw_coherent_mem")));

42 
	$mt_pwrc_gë_˝u_wkr
(
mpidr
)

44 
rc
 = 0;

45 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

46 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PSYSR_OFF
, (Ë
mpidr
);

47 
rc
 = 
	`PSYSR_WK
(
	`mmio_ªad_32
(
PWRC_BASE
 + 
PSYSR_OFF
));

48 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

49  
rc
;

50 
	}
}

52 
	$mt_pwrc_ªad_psy§
(
mpidr
)

54 
rc
 = 0;

55 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

56 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PSYSR_OFF
, (Ë
mpidr
);

57 
rc
 = 
	`mmio_ªad_32
(
PWRC_BASE
 + 
PSYSR_OFF
);

58 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

59  
rc
;

60 
	}
}

62 
	$mt_pwrc_wrôe_µ⁄r
(
mpidr
)

64 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

65 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PPONR_OFF
, (Ë
mpidr
);

66 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

67 
	}
}

69 
	$mt_pwrc_wrôe_µof‰
(
mpidr
)

71 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

72 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PPOFFR_OFF
, (Ë
mpidr
);

73 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

74 
	}
}

76 
	$mt_pwrc_£t_wí
(
mpidr
)

78 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

79 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PWKUPR_OFF
,

80 (Ë(
PWKUPR_WEN
 | 
mpidr
));

81 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

82 
	}
}

84 
	$mt_pwrc_˛r_wí
(
mpidr
)

86 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

87 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PWKUPR_OFF
,

88 (Ë
mpidr
);

89 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

90 
	}
}

92 
	$mt_pwrc_wrôe_pcof‰
(
mpidr
)

94 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

95 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PCOFFR_OFF
, (Ë
mpidr
);

96 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

97 
	}
}

100 
	$mt_pwrc_£tup
()

102 
	`bakîy_lock_öô
(&
pwrc_lock
);

104 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/pwrc/plat_pwrc.h

31 #i‚de‡
__PLAT_PWRC_H__


32 
	#__PLAT_PWRC_H__


	)

35 
	#PPOFFR_OFF
 0x0

	)

36 
	#PPONR_OFF
 0x4

	)

37 
	#PCOFFR_OFF
 0x8

	)

38 
	#PWKUPR_OFF
 0xc

	)

39 
	#PSYSR_OFF
 0x10

	)

41 
	#PWKUPR_WEN
 (1uŒ << 31)

	)

43 
	#PSYSR_AFF_L2
 (1 << 31)

	)

44 
	#PSYSR_AFF_L1
 (1 << 30)

	)

45 
	#PSYSR_AFF_L0
 (1 << 29)

	)

46 
	#PSYSR_WEN
 (1 << 28)

	)

47 
	#PSYSR_PC
 (1 << 27)

	)

48 
	#PSYSR_PP
 (1 << 26)

	)

50 
	#PSYSR_WK_SHIFT
 24

	)

51 
	#PSYSR_WK_MASK
 0x3

	)

52 
	#PSYSR_WK
(
x
Ë(x >> 
PSYSR_WK_SHIFT
Ë& 
PSYSR_WK_MASK


	)

54 
	#WKUP_COLD
 0x0

	)

55 
	#WKUP_RESET
 0x1

	)

56 
	#WKUP_PPONR
 0x2

	)

57 
	#WKUP_GICREQ
 0x3

	)

59 
	#PSYSR_INVALID
 0xffffffff

	)

61 #i‚de‡
__ASSEMBLY__


66 
mt_pwrc_£tup
();

67 
mt_pwrc_wrôe_pcof‰
();

68 
mt_pwrc_wrôe_µof‰
();

69 
mt_pwrc_wrôe_µ⁄r
();

70 
mt_pwrc_£t_wí
();

71 
mt_pwrc_˛r_wí
();

72 
mt_pwrc_ªad_psy§
();

73 
mt_pwrc_gë_˝u_wkr
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/timer/mt_cpuxgpt.c

37 
	~<°döt.h
>

38 
	~<¨ch_hñ≥rs.h
>

39 
	~"ty≥defs.h
"

40 
	~"∂©f‹m.h
"

41 
	~"mt_˝uxg±.h
"

43 
	#CPUXGPT_BASE
 0x10200000

	)

44 
	#INDEX_BASE
 (
CPUXGPT_BASE
+0x0674)

	)

45 
	#CTL_BASE
 (
CPUXGPT_BASE
+0x0670)

	)

47 
__u64
 
	gn‹mÆ_time_ba£
;

48 
__u64
 
	g©f_time_ba£
;

51 
	$__ªad_˝uxg±
(
ªg_ödex
 )

53 
vÆue
 = 0;

54 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

56 
vÆue
 = 
	`DRV_Reg32
(
CTL_BASE
);

57  
vÆue
;

58 
	}
}

61 
	$__wrôe_˝uxg±
(
ªg_ödex
,
vÆue
 )

64 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

65 
	`DRV_WrôeReg32
(
CTL_BASE
,
vÆue
);

66 
	}
}

68 
	$__˝uxg±_£t_öô_˙t
(
cou¡H
,
cou¡L
)

70 
	`__wrôe_˝uxg±
(
INDEX_CNT_H_INIT
,
cou¡H
);

71 
	`__wrôe_˝uxg±
(
INDEX_CNT_L_INIT
,
cou¡L
);

72 
	}
}

74 
	$gíîic_timî_backup
()

76 
__u64
 
cvÆ
;

78 
cvÆ
 = 
	`ªad_˙ç˘_ñ0
();

79 
	`__˝uxg±_£t_öô_˙t
((
__u32
)(
cvÆ
 >> 32), (__u32)(cval & 0xffffffff));

80 
	}
}

82 
	$©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
)

84 
n‹mÆ_time_ba£
 = 
n‹mÆ_ba£
;

85 
©f_time_ba£
 = 
©f_ba£
;

87 
	}
}

89 
	$©f_sched_˛ock
()

91 
__u64
 
cvÆ
;

93 
cvÆ
 = (((
	`ªad_˙ç˘_ñ0
(Ë- 
©f_time_ba£
)*1000)/13Ë+ 
n‹mÆ_time_ba£
;

94  
cvÆ
;

95 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/timer/mt_cpuxgpt.h

49 #i‚de‡
_MT_CPUXGPT_H_


50 
	#_MT_CPUXGPT_H_


	)

53 
	e˝uxg±_num
 {

54 
	mCPUXGPT0
=0,

55 
	mCPUXGPT1
,

56 
	mCPUXGPT2
,

57 
	mCPUXGPT3
,

58 
	mCPUXGPT4
,

59 
	mCPUXGPT5
,

60 
	mCPUXGPT6
,

61 
	mCPUXGPT7
,

62 
	mCPUXGPTNUMBERS
,

63 }
	tCPUXGPT_NUM
;

65 
	#CPUXGPT0_IRQID
 88

	)

66 
	#CPUXGPT1_IRQID
 89

	)

67 
	#CPUXGPT2_IRQID
 90

	)

68 
	#CPUXGPT3_IRQID
 91

	)

69 
	#CPUXGPT4_IRQID
 92

	)

70 
	#CPUXGPT5_IRQID
 93

	)

71 
	#CPUXGPT6_IRQID
 94

	)

72 
	#CPUXGPT7_IRQID
 95

	)

74 
	#CPUXGPT_IRQID_BASE
 
CPUXGPT0_IRQID


	)

77 
	#INDEX_CTL_REG
 0x000

	)

78 
	#INDEX_STA_REG
 0x004

	)

79 
	#INDEX_CNT_L_INIT
 0x008

	)

80 
	#INDEX_CNT_H_INIT
 0x00C

	)

81 
	#INDEX_IRQ_MASK
 0x030

82 

	)

83 
	#INDEX_CMP_BASE
 0x034

	)

87 
	#EN_CPUXGPT
 0x01

	)

88 
	#EN_AHLT_DEBUG
 0x02

	)

92 
	#CLK_DIV1
 (0x1 << 8)

	)

93 
	#CLK_DIV2
 (0x2 << 8)

	)

94 
	#CLK_DIV4
 (0x4 << 8)

	)

95 
	#CLK_DIV_MASK
 (~(0x7<<8))

	)

97 
	#CPUX_GPT0_ACK
 (1<<0x0)

	)

98 
	#CPUX_GPT1_ACK
 (1<<0x1)

	)

99 
	#CPUX_GPT2_ACK
 (1<<0x2)

	)

100 
	#CPUX_GPT3_ACK
 (1<<0x3)

	)

101 
	#CPUX_GPT4_ACK
 (1<<0x4)

	)

102 
	#CPUX_GPT5_ACK
 (1<<0x5)

	)

103 
	#CPUX_GPT6_ACK
 (1<<0x6)

	)

104 
	#CPUX_GPT7_ACK
 (1<<0x7)

	)

107 
gíîic_timî_backup
();

108 
©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

109 
©f_sched_˛ock
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/timer/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/uart/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/uart/uart.c

37 
	~<°döt.h
>

38 
	~<as£π.h
>

39 
	~<c⁄sﬁe.h
>

40 
	~"ty≥defs.h
"

41 
	~"∂©f‹m.h
"

42 
	~"u¨t.h
"

48 
	#Dñay_Cou¡
 324675

	)

50 
	#UART_BASE
(
u¨t
Ë(u¨t)

	)

52 
	#UART_RBR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

53 
	#UART_THR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

54 
	#UART_IER
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

55 
	#UART_IIR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

56 
	#UART_FCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

57 
	#UART_LCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0xc)

	)

58 
	#UART_MCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

59 
	#UART_LSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

60 
	#UART_MSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

61 
	#UART_SCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

62 
	#UART_DLL
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0)

	)

63 
	#UART_DLH
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

64 
	#UART_EFR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8)

	)

65 
	#UART_XON1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

66 
	#UART_XON2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

67 
	#UART_XOFF1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

68 
	#UART_XOFF2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

69 
	#UART_AUTOBAUD_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x20)

	)

70 
	#UART_HIGHSPEED
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x24)

	)

71 
	#UART_SAMPLE_COUNT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x28)

	)

72 
	#UART_SAMPLE_POINT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x2c)

	)

73 
	#UART_AUTOBAUD_REG
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x30)

	)

74 
	#UART_RATE_FIX_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x34)

	)

75 
	#UART_AUTOBAUD_SAMPLE
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x38)

	)

76 
	#UART_GUARD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x3c)

	)

77 
	#UART_ESCAPE_DAT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x40)

	)

78 
	#UART_ESCAPE_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x44)

	)

79 
	#UART_SLEEP_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x48)

	)

80 
	#UART_VFIFO_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4c)

	)

81 
	#UART_RXTRI_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x50)

	)

85 
	#UART_SET_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(
uöçå_t
)(REG)Ë|(U32)(BS))

	)

86 
	#UART_CLR_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(REG)Ë&~((U32)(BS)))

	)

87 
	#UART_WRITE16
(
VAL
, 
REG
Ë
	`DRV_WrôeReg
(REG,VAL)

	)

88 
	#UART_READ32
(
REG
Ë
	`DRV_Reg32
(REG)

	)

89 
	#UART_WRITE32
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

91 #i‡
CFG_FPGA_PLATFORM


92 vﬁ©ûê
	gg_u¨t
 = 
UART1
;

93 
	#UART_SRC_CLK
 
FPGA_UART_CLOCK


	)

95 vﬁ©ûê
	gg_u¨t
 = 
UART2
;

96 
	#UART_SRC_CLK
 
EVB_UART_CLOCK


	)

99 
	gIsOuçutToUARTFœg
=1;

102 
	$WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
)

104 *(vﬁ©ûê
uöt8_t
*)
addr
 = 
vÆue
;

105 
	}
}

108 
uöt8_t
 
	$READ_REGISTER_UINT8
(
uöçå_t
 
addr
)

110  *(vﬁ©ûê
uöt8_t
*)
addr
;

111 
	}
}

113 
	$WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
)

115 *(vﬁ©ûê
uöt32_t
*)
addr
 = 
vÆue
;

116 
	}
}

118 
uöt32_t
 
	$READ_REGISTER_UINT32
(
uöçå_t
 
addr
)

120  *(vﬁ©ûê
uöt32_t
*)
addr
;

121 
	}
}

123 
	$WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
)

125 *(vﬁ©ûê
uöt16_t
*)
addr
 = 
vÆue
;

126 
	}
}

128 
uöt16_t
 
	$READ_REGISTER_UINT16
(
uöçå_t
 
addr
)

130  *(vﬁ©ûê
uöt16_t
*)
addr
;

131 
	}
}

135 
	$£rül_£tbrg
 (
U32
 
u¨t˛k
, U32 
baudøã
)

137 #i‡(
CFG_FPGA_PLATFORM
)

138 
	#MAX_SAMPLE_COUNT
 256

	)

140 
U16
 
tmp
;

141 
U32
 
divis‹
;

142 
U32
 
ßm∂e_d©a
;

143 
U32
 
ßm∂e_cou¡
;

144 
U32
 
ßm∂e_poöt
;

147 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

160 
	`UART_WRITE32
(0x0003, 
	`UART_HIGHSPEED
(
g_u¨t
));

164 
ßm∂e_d©a
 = (
u¨t˛k
+(
baudøã
/2))/baudrate;

166 
divis‹
 = (
ßm∂e_d©a
+(
MAX_SAMPLE_COUNT
-1))/MAX_SAMPLE_COUNT;

168 
ßm∂e_cou¡
 = 
ßm∂e_d©a
/
divis‹
;

170 
ßm∂e_poöt
 = (
ßm∂e_cou¡
-1)/2;

172 
	`UART_WRITE32
((
ßm∂e_cou¡
-1), 
	`UART_SAMPLE_COUNT
(
g_u¨t
));

174 
	`UART_WRITE32
(
ßm∂e_poöt
, 
	`UART_SAMPLE_POINT
(
g_u¨t
));

176 
tmp
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

177 
	`UART_WRITE32
((
tmp
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

179 
	`UART_WRITE32
((
divis‹
&0xFF), 
	`UART_DLL
(
g_u¨t
));

180 
	`UART_WRITE32
(((
divis‹
>>8)&0xFF), 
	`UART_DLH
(
g_u¨t
));

181 
	`UART_WRITE32
(
tmp
, 
	`UART_LCR
(
g_u¨t
));

184 
byã
;

185 
high•ìd
;

186 
quŸ
, 
divis‹
, 
ªmaödî
;

188 i‡(
baudøã
 <= 115200 ) {

189 
high•ìd
 = 0;

190 
quŸ
 = 16;

192 
high•ìd
 = 2;

193 
quŸ
 = 4;

197 
divis‹
 = 
u¨t˛k
 / (
quŸ
 * 
baudøã
);

198 
ªmaödî
 = 
u¨t˛k
 % (
quŸ
 * 
baudøã
);

200 i‡(
ªmaödî
 >(
quŸ
 / 2Ë* 
baudøã
)

201 
divis‹
 += 1;

203 
	`UART_WRITE16
(
high•ìd
, 
	`UART_HIGHSPEED
(
g_u¨t
));

204 
byã
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

205 
	`UART_WRITE32
((
byã
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

206 
	`UART_WRITE32
((
divis‹
 & 0x00ff), 
	`UART_DLL
(
g_u¨t
));

207 
	`UART_WRITE32
(((
divis‹
 >> 8)&0x00ff), 
	`UART_DLH
(
g_u¨t
));

210 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

212 
	}
}

216 
	$£rül_n⁄block_gëc
()

218  ()
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

219 
	}
}

221 
	$mtk_£rül_£t_cuºít_u¨t
(
MT65XX_UART
 
u¨t_ba£
)

223 
g_u¨t
 = 
u¨t_ba£
;

224 
	}
}

226 
	$mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
)

228 
g_u¨t
 = 
u¨t_p‹t
;

229 #i‡!
CFG_FPGA_PLATFORM


230 #ifde‡
GPIO_UART_UTXD1_PIN


231 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

232 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

235 #ifde‡
GPIO_UART_URXD1_PIN


236 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

237 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

238 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

239 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

242 #ifde‡
GPIO_UART_UTXD2_PIN


243 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD2_PIN
, 
GPIO_MODE_01
);

244 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD2_PIN
, 
GPIO_DIR_OUT
);

247 #ifde‡
GPIO_UART_URXD2_PIN


248 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD2_PIN
, 
GPIO_MODE_01
);

249 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD2_PIN
, 
GPIO_DIR_IN
);

250 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_ENABLE
);

251 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_UP
);

254 #ifde‡
GPIO_UART_UTXD3_PIN


255 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD3_PIN
, 
GPIO_MODE_01
);

256 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD3_PIN
, 
GPIO_DIR_OUT
);

259 #ifde‡
GPIO_UART_URXD3_PIN


260 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD3_PIN
, 
GPIO_MODE_01
);

261 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD3_PIN
, 
GPIO_DIR_IN
);

262 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_ENABLE
);

263 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_UP
);

267 
	#AP_PERI_GLOBALCON_RST0
 (
PERICFG_BASE
+0x0)

	)

268 
	#AP_PERI_GLOBALCON_PDN0
 (
PERICFG_BASE
+0x10)

	)

271 if(0 =
u¨t˛k
){

273 
u¨t˛k
 = 
UART_SRC_CLK
;

276 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
	`deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

278 
	`mtk_£rül_£t_cuºít_u¨t
(
UART2
);

280 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

281 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

282 
	`£rül_£tbrg
(
u¨t˛k
, 
CFG_LOG_BAUDRATE
);

286 #ifde‡
GPIO_UART_UTXD1_PIN


287 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

288 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

291 #ifde‡
GPIO_UART_URXD1_PIN


292 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

293 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

294 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

295 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

305 
	`UART_CLR_BITS
(1 << 22, 
AP_PERI_GLOBALCON_PDN0
);

307 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

308 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

309 
	`£rül_£tbrg
(
u¨t˛k
, 
baudøã
);

310 
	}
}

312 
	$PutUARTByã
 (c⁄° 
c
)

314 !(
	`UART_READ32
 (
	`UART_LSR
(
g_u¨t
)Ë& 
UART_LSR_THRE
))

318 i‡(
c
 == '\n')

320 
	`UART_WRITE32
 ((Ë0xD, 
	`UART_THR
(
g_u¨t
));

322 
	`UART_WRITE32
 ((Ë
c
, 
	`UART_THR
(
g_u¨t
));

323 
	}
}

325 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

326 
	$PutUART1_Byã
(c⁄° 
c
)

328 !(
	`UART_READ32
 (
	`UART_LSR
(
UART2
)Ë& 
UART_LSR_THRE
))

332 i‡(
c
 == '\n')

333 
	`UART_WRITE32
((Ë'\r', 
	`UART_THR
(
UART2
));

335 
	`UART_WRITE32
((Ë
c
, 
	`UART_THR
(
UART2
));

336 
	}
}

339 
	$GëUARTByãs
(
u8
 *
buf
, 
u32
 
size
, u32 
tmo_ms
)

343 
u32
 
LSR
;

344 
tmo_í
 = (
tmo_ms
) ? 1 : 0;

345 
ul⁄g
 
°¨t_time
 = 
	`gë_timî
(0);

347 
size
) {

348 i‡(
tmo_í
 && (
	`gë_timî
(
°¨t_time
Ë> 
tmo_ms
))

352 i‡(!
tmo_í
)

353 
	`∂©f‹m_wdt_kick
();

355 
LSR
 = 
	`UART_READ32
(
	`UART_LSR
(
g_u¨t
));

356 i‡(
LSR
 & 
UART_LSR_DR
) {

357 *
buf
++ = (
u8
)
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

358 
size
--;

362  (0 =
size
) ? 0 : -1;

366 
	}
}

368 
	$c⁄sﬁe_öô
(
ba£_addr
)

375 
	`as£π
(
ba£_addr
);

378 
g_u¨t
 = 
ba£_addr
;

380 
	#CFG_LOG_BAUDRATE
 921600

	)

382 #i‡
CFG_FPGA_PLATFORM


383 
	#UART_SRC_CLK_FRQ
 (12000000)

	)

385 
	#UART_SRC_CLK_FRQ
 (0Ë

	)

390 
	`mtk_u¨t_öô
(
ba£_addr
, 
UART_SRC_CLK_FRQ
, 
CFG_LOG_BAUDRATE
);

393 
	}
}

395 
	$c⁄sﬁe_putc
(
c
)

397 if(
IsOuçutToUARTFœg
){

398 
	`PutUARTByã
 (
c
);

400  
c
;

401 
	}
}

403 
	$c⁄sﬁe_gëc
()

405 
c
 = 0;

406 if(
IsOuçutToUARTFœg
){

407 
	`GëUARTByãs
(&
c
, 1, 10);

409  
c
;

410 
	}
}

411 
	$£t_u¨t_Êag
()

413 
IsOuçutToUARTFœg
=1;

414 
	}
}

415 
	$˛ór_u¨t_Êag
()

417 
IsOuçutToUARTFœg
=0;

418 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/uart/uart.h

49 #i‚de‡
UART_HW_H


50 
	#UART_HW_H


	)

54 
	~"∂©f‹m_def.h
"

59 
	#UART_FCR_FIFOE
 (1 << 0)

	)

60 
	#UART_FCR_CLRR
 (1 << 1)

	)

61 
	#UART_FCR_CLRT
 (1 << 2)

	)

62 
	#UART_FCR_DMA1
 (1 << 3)

	)

63 
	#UART_FCR_RXFIFO_1B_TRI
 (0 << 6)

	)

64 
	#UART_FCR_RXFIFO_6B_TRI
 (1 << 6)

	)

65 
	#UART_FCR_RXFIFO_12B_TRI
 (2 << 6)

	)

66 
	#UART_FCR_RXFIFO_RX_TRI
 (3 << 6)

	)

67 
	#UART_FCR_TXFIFO_1B_TRI
 (0 << 4)

	)

68 
	#UART_FCR_TXFIFO_4B_TRI
 (1 << 4)

	)

69 
	#UART_FCR_TXFIFO_8B_TRI
 (2 << 4)

	)

70 
	#UART_FCR_TXFIFO_14B_TRI
 (3 << 4)

	)

72 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

73 
	#UART_FCR_NORMAL
 (
UART_FCR_FIFO_INIT
 | \

74 
UART_FCR_TXFIFO_4B_TRI
| \

75 
UART_FCR_RXFIFO_12B_TRI
)

	)

79 
	#UART_LCR_BREAK
 (1 << 6)

	)

80 
	#UART_LCR_DLAB
 (1 << 7)

	)

82 
	#UART_WLS_5
 (0 << 0)

	)

83 
	#UART_WLS_6
 (1 << 0)

	)

84 
	#UART_WLS_7
 (2 << 0)

	)

85 
	#UART_WLS_8
 (3 << 0)

	)

86 
	#UART_WLS_MASK
 (3 << 0)

	)

88 
	#UART_1_STOP
 (0 << 2)

	)

89 
	#UART_2_STOP
 (1 << 2)

	)

90 
	#UART_1_5_STOP
 (1 << 2Ë

	)

91 
	#UART_STOP_MASK
 (1 << 2)

	)

93 
	#UART_NONE_PARITY
 (0 << 3)

	)

94 
	#UART_ODD_PARITY
 (0x1 << 3)

	)

95 
	#UART_EVEN_PARITY
 (0x3 << 3)

	)

96 
	#UART_MARK_PARITY
 (0x5 << 3)

	)

97 
	#UART_SPACE_PARITY
 (0x7 << 3)

	)

98 
	#UART_PARITY_MASK
 (0x7 << 3)

	)

101 
	#UART_MCR_DTR
 (1 << 0)

	)

102 
	#UART_MCR_RTS
 (1 << 1)

	)

103 
	#UART_MCR_OUT1
 (1 << 2)

	)

104 
	#UART_MCR_OUT2
 (1 << 3)

	)

105 
	#UART_MCR_LOOP
 (1 << 4)

	)

106 
	#UART_MCR_XOFF
 (1 << 7Ë

	)

107 
	#UART_MCR_NORMAL
 (
UART_MCR_DTR
|
UART_MCR_RTS
)

	)

110 
	#UART_LSR_DR
 (1 << 0)

	)

111 
	#UART_LSR_OE
 (1 << 1)

	)

112 
	#UART_LSR_PE
 (1 << 2)

	)

113 
	#UART_LSR_FE
 (1 << 3)

	)

114 
	#UART_LSR_BI
 (1 << 4)

	)

115 
	#UART_LSR_THRE
 (1 << 5)

	)

116 
	#UART_LSR_TEMT
 (1 << 6)

	)

117 
	#UART_LSR_FIFOERR
 (1 << 7)

	)

120 
	#UART_MSR_DCTS
 (1 << 0)

	)

121 
	#UART_MSR_DDSR
 (1 << 1)

	)

122 
	#UART_MSR_TERI
 (1 << 2)

	)

123 
	#UART_MSR_DDCD
 (1 << 3)

	)

124 
	#UART_MSR_CTS
 (1 << 4)

	)

125 
	#UART_MSR_DSR
 (1 << 5)

	)

126 
	#UART_MSR_RI
 (1 << 6)

	)

127 
	#UART_MSR_DCD
 (1 << 7)

	)

130 
	#UART_EFR_EN
 (1 << 4)

	)

131 
	#UART_EFR_AUTO_RTS
 (1 << 6)

	)

132 
	#UART_EFR_AUTO_CTS
 (1 << 7)

	)

133 
	#UART_EFR_SW_CTRL_MASK
 (0x‡<< 0)

	)

135 
	#UART_EFR_NO_SW_CTRL
 (0)

	)

136 
	#UART_EFR_NO_FLOW_CTRL
 (0)

	)

137 
	#UART_EFR_AUTO_RTSCTS
 (
UART_EFR_AUTO_RTS
|
UART_EFR_AUTO_CTS
)

	)

138 
	#UART_EFR_XON1_XOFF1
 (0xaË

	)

139 
	#UART_EFR_XON2_XOFF2
 (0x5Ë

	)

140 
	#UART_EFR_XON12_XOFF12
 (0xfË

	)

143 
	#UART_EFR_XON1_XOFF1_MASK
 (0xa)

	)

144 
	#UART_EFR_XON2_XOFF2_MASK
 (0x5)

	)

147 
	#UART_IIR_NO_INT_PENDING
 (0x01)

	)

148 
	#UART_IIR_RLS
 (0x06Ë

	)

149 
	#UART_IIR_RDA
 (0x04Ë

	)

150 
	#UART_IIR_CTI
 (0x0CË

	)

151 
	#UART_IIR_THRE
 (0x02Ë

	)

153 
	#UART_IIR_MS
 (0x00Ë

	)

154 
	#UART_IIR_SW_FLOW_CTRL
 (0x10Ë

	)

155 
	#UART_IIR_HW_FLOW_CTRL
 (0x20Ë

	)

156 
	#UART_IIR_FIFO_EN
 (0xc0)

	)

157 
	#UART_IIR_INT_MASK
 (0x1f)

	)

160 
	#UART_RATE_FIX
 (1 << 0)

	)

163 
	#UART_FREQ_SEL
 (1 << 1)

	)

165 
	#UART_RATE_FIX_13M
 (1 << 0Ë

	)

166 
	#UART_AUTORATE_FIX_13M
 (1 << 1)

	)

167 
	#UART_FREQ_SEL_13M
 (1 << 2)

	)

168 
	#UART_RATE_FIX_ALL_13M
 (
UART_RATE_FIX_13M
|
UART_AUTORATE_FIX_13M
| \

169 
UART_FREQ_SEL_13M
)

	)

171 
	#UART_RATE_FIX_26M
 (0 << 0Ë

	)

172 
	#UART_AUTORATE_FIX_26M
 (0 << 1)

	)

173 
	#UART_FREQ_SEL_26M
 (0 << 2)

	)

174 
	#UART_RATE_FIX_ALL_26M
 (
UART_RATE_FIX_26M
|
UART_AUTORATE_FIX_26M
| \

175 
UART_FREQ_SEL_26M
)

	)

177 
	#UART_RATE_FIX_32M5
 (0 << 0Ë

	)

178 
	#UART_FREQ_SEL_32M5
 (0 << 1)

	)

179 
	#UART_RATE_FIX_ALL_32M5
 (
UART_RATE_FIX_32M5
|
UART_FREQ_SEL_32M5
)

	)

181 
	#UART_RATE_FIX_16M25
 (0 << 0Ë

	)

182 
	#UART_FREQ_SEL_16M25
 (0 << 1)

	)

183 
	#UART_RATE_FIX_ALL_16M25
 (
UART_RATE_FIX_16M25
|
UART_FREQ_SEL_16M25
)

	)

187 
	#UART_AUTOBADUSAM_13M
 7

	)

188 
	#UART_AUTOBADUSAM_26M
 15

	)

189 
	#UART_AUTOBADUSAM_52M
 31

	)

191 
	#UART_AUTOBAUDSAM_58_5M
 31

	)

194 
	#UART_VFIFO_ON
 (1 << 0)

	)

195 
	#UART_FCR_FIFOE
 (1 << 0)

	)

196 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

201 
	mUART1
 = 
UART0_BASE
,

202 
	mUART2
 = 
UART1_BASE
,

203 
	mUART3
 = 
UART2_BASE
,

204 
	mUART4
 = 
UART3_BASE


205 } 
	tMT65XX_UART
;

207 
	#PLL_ON_UART_CLOCK
 (13500000)

208 
	#PLL_OFF_UART_CLOCK
 (13500000)

209 

	)

211 
	#EVB_UART_CLOCK
 (26000000)

	)

212 
	#FPGA_UART_CLOCK
 (12000000)

	)

214 
mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/include/plat_macros.S

31 
	~<gic_v2.h
>

32 
	~"../∂©_def.h
"

34 .
	g£˘i⁄
 .
	grod©a
.
	ggic_ªg_«me
, "aS"

35 
	ggic_ªgs
: .
asciz
 "gic_iar", "gic_ctlr", ""

38 
	#GIC_REG_SIZE
 (2 * 8)

	)

45 .
ma¸o
 
∂©_¥öt_gic_ªgs


46 
mov
 
	gx0
, #CONFIG_GICC_ADDR

47 
bl
 
mt_gë_cfgv¨


49 
ldr
 
	gw1
, [
x0
, #GICC_IAR]

50 
ldr
 
	gw2
, [
x0
, #GICD_CTLR]

51 
sub
 
	g•
, sp, #GIC_REG_SIZE

52 
°p
 
	gx1
, 
	gx2
, [
•
]

53 
adr
 
	gx0
, 
gic_ªgs


54 
mov
 
	gx1
, 
•


55 
bl
 
¥öt_°rög_vÆue


56 
add
 
	g•
, sp, #GIC_REG_SIZE

57 .
	gídm


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/include/platform_def.h

31 #i‚de‡
__PLATFORM_DEF_H__


32 
	#__PLATFORM_DEF_H__


	)

34 
	~<¨ch.h
>

36 
	#PLAT_USE_EL1_AARCH32


	)

41 
	#PLATFORM_LINKER_FORMAT
 "ñf64-lôéó¨ch64"

	)

42 
	#PLATFORM_LINKER_ARCH
 
Ørch64


	)

49 
	#PLATFORM_STACK_SIZE
 0x800

	)

52 #i‡
DEBUG


53 
	#PCPU_DV_MEM_STACK_SIZE
 0x400

	)

55 
	#PCPU_DV_MEM_STACK_SIZE
 0x300

	)

58 
	#FIRMWARE_WELCOME_STR
 "BoŸög MTKÅru°ed fúmw¨êBL31\n\r"

	)

61 
	#BL2_IMAGE_NAME
 "bl2.bö"

	)

64 
	#BL31_IMAGE_NAME
 "bl31.bö"

	)

67 
	#BL32_IMAGE_NAME
 "bl32.bö"

	)

70 
	#BL33_IMAGE_NAME
 "bl33.bö"

	)

72 
	#PLATFORM_CACHE_LINE_SIZE
 64

	)

73 
	#PLATFORM_CLUSTER_COUNT
 2uŒ

	)

74 
	#PLATFORM_CLUSTER0_CORE_COUNT
 4

	)

75 
	#PLATFORM_CLUSTER1_CORE_COUNT
 4

	)

76 
	#PLATFORM_CORE_COUNT
 (
PLATFORM_CLUSTER1_CORE_COUNT
 + \

77 
PLATFORM_CLUSTER0_CORE_COUNT
)

	)

78 
	#PLATFORM_MAX_CPUS_PER_CLUSTER
 4

	)

79 
	#PRIMARY_CPU
 0x0

	)

80 
	#MAX_IO_DEVICES
 3

	)

81 
	#MAX_IO_HANDLES
 4

	)

86 
	#TZROM_BASE
 0x00000000

	)

87 
	#TZROM_SIZE
 0x04000000

	)

89 
	#TZRAM_BASE
 0x00110000

	)

90 
	#TZRAM_SIZE
 0x1C400

	)

92 
	#TZRAM2_BASE
 0x00100000

	)

93 
	#TZRAM2_SIZE
 0xDC00

	)

96 
	#TZDRAM_BASE
 0x00120000

	)

97 
	#TZDRAM_SIZE
 0x0000C000

	)

104 
	#BL1_RO_BASE
 
TZROM_BASE


	)

105 
	#BL1_RO_LIMIT
 (
TZROM_BASE
 + 
TZROM_SIZE
)

	)

106 
	#BL1_RW_BASE
 
TZRAM_BASE


	)

107 
	#BL1_RW_LIMIT
 
BL31_BASE


	)

112 
	#BL2_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0xc000)

	)

113 
	#BL2_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

118 
	#BL31_BASE
 (
TZRAM_BASE
 + 0x1000)

	)

119 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


120 
	#BL31_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

121 
	#TZRAM2_LIMIT
 (
TZRAM2_BASE
 + 
TZRAM2_SIZE
)

	)

123 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


124 
	#BL31_LIMIT
 
BL2_BASE


	)

133 
	#TSP_IN_TZRAM
 0

	)

134 
	#TSP_IN_TZDRAM
 1

	)

136 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


137 
	#TSP_SEC_MEM_BASE
 
TZRAM_BASE


	)

138 
	#TSP_SEC_MEM_SIZE
 
TZRAM_SIZE


	)

139 
	#BL32_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0x00000)

	)

140 
	#BL32_LIMIT
 
BL2_BASE


	)

141 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


142 
	#TSP_SEC_MEM_BASE
 
TZDRAM_BASE


	)

143 
	#TSP_SEC_MEM_SIZE
 
TZDRAM_SIZE


	)

144 
	#BL32_BASE
 (
TZDRAM_BASE
 + 0x2000)

	)

145 
	#BL32_LIMIT
 (
TZDRAM_BASE
 + (1 << 21))

	)

153 
	#ADDR_SPACE_SIZE
 (1uŒ << 32)

	)

154 
	#MAX_XLAT_TABLES
 4

	)

155 
	#MAX_MMAP_REGIONS
 16

	)

160 
	#IRQ_SEC_PHY_TIMER
 29

	)

165 
	#CCI400_BASE
 0x10390000

	)

166 
	#CCI400_SL_IFACE_CLUSTER0
 4

	)

167 
	#CCI400_SL_IFACE_CLUSTER1
 3

	)

168 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

169 
CCI400_SL_IFACE_CLUSTER1
 : \

170 
CCI400_SL_IFACE_CLUSTER0
)

	)

171 
	#CCI_SEC_ACCESS_OFFSET
 (0x8)

	)

174 
	#IO_PHYS
 (0x10000000)

	)

175 
	#MCUCFG_BASE
 (
IO_PHYS
 + 0x00200000)

	)

176 
	#UART0_BASE
 (
IO_PHYS
 + 0x01002000)

	)

177 
	#UART1_BASE
 (
IO_PHYS
 + 0x01003000)

	)

178 
	#UART2_BASE
 (
IO_PHYS
 + 0x01004000)

	)

179 
	#UART3_BASE
 (
IO_PHYS
 + 0x01005000)

	)

180 
	#CFG_FPGA_PLATFORM
 0

	)

181 
	#PERICFG_BASE
 (
IO_PHYS
 + 0x3000)

	)

186 
	#MP0_MISC_CONFIG_BASE
 (
IO_PHYS
 + 0x00200000)

	)

187 
	#MP0_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MP0_MISC_CONFIG_BASE
 + 0x38 + ((˝uË* 8))

	)

188 
	#MP1_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MP0_MISC_CONFIG_BASE
 + 0x238 + ((˝uË* 8))

	)

189 
	#MP0_MISC_CONFIG3
 (
MCUCFG_BASE
 + 0x3c)

	)

191 
	#INFRACFG_AO_BASE
 (
IO_PHYS
 + 0x1000)

	)

192 
	#BOOTROM_BOOT_ADDR
 (
INFRACFG_AO_BASE
 + 0x800)

	)

193 
	#BOOTROM_SEC_CTRL
 (
INFRACFG_AO_BASE
 + 0x804)

	)

194 
	#SW_ROM_PD
 (1U << 31)

	)

196 
	#MP0_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0030)

	)

197 
	#MP0_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0054)

	)

198 
	#MP1_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0230)

	)

199 
	#MP1_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0254)

	)

204 
	#MP0_AXI_CONFIG
 (
MP0_MISC_CONFIG_BASE
 + 0x002C)

	)

205 
	#MP1_AXI_CONFIG
 (
MP0_MISC_CONFIG_BASE
 + 0x022C)

	)

206 
	#ACINACTM
 (1U << 4)

	)

217 
	#CACHE_WRITEBACK_SHIFT
 6

	)

218 
	#CACHE_WRITEBACK_GRANULE
 (1 << 
CACHE_WRITEBACK_SHIFT
)

	)

221 
	#WDT_IRQ_BIT_ID
 (160)

	)

222 
	#FIQ_SMP_CALL_SGI
 13

	)

223 
	#ATF_LOG_IRQ_ID
 281

	)

226 
	#MP0_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0)

	)

227 
	#MP1_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0x200)

	)

228 
	#L2RSTDISABLE
 (1 << 4)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/include/power_tracer.h

1 #i‚de‡
__TRACER_H_


2 
	#__TRACER_H_


	)

4 
	#CPU_UP
 0

	)

5 
	#CPU_DOWN
 1

	)

6 
	#CPU_SUSPEND
 2

	)

7 
	#CLUSTER_UP
 3

	)

8 
	#CLUSTER_DOWN
 4

	)

9 
	#CLUSTER_SUSPEND
 5

	)

11 
åa˚_powî_Êow
(
mpidr
, 
mode
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/include/scu.h

2 #i‚de‡
__SCU_H__


3 
	#__SCU_H__


	)

5 
dißbÀ_scu
(
mpidr
);

6 
íabÀ_scu
(
mpidr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/include/tbase_platform.h

12 #i‚de‡
__TBASE_PLATFORM_H__


13 
	#__TBASE_PLATFORM_H__


	)

15 
	~<bl_comm⁄.h
>

16 
	~<tba£_¥iv©e.h
>

17 
	~<∂©_def.h
>

21 
	#TBASE_PM_ENABLE
 1

	)

23 
	#TBASE_SIP_ROUTE_ENABLE
 0

	)

25 
	#TBASE_OEM_ROUTE_ENABLE
 0

	)

28 
	#TEE_PARAMS
 (((
©f_¨g_t_±r
)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
)->
ãe_boŸ_¨g_addr
)

	)

30 
	#TBASE_NWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamBa£
)

	)

31 
	#TBASE_NWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamSize
)

	)

32 
	#TBASE_SWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
+
TBASE_SWD_IMEM_SIZE
)

	)

33 
	#TBASE_SWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamSize
-
TBASE_SWD_IMEM_SIZE
)

	)

34 
	#TBASE_SWD_IMEM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
)

	)

35 
	#TBASE_SWD_IMEM_SIZE
 (2*1024*1024)

	)

36 
	#TBASE_GIC_DIST_BASE
 (
BASE_GICD_BASE
)

	)

37 
	#TBASE_GIC_CPU_BASE
 (
BASE_GICC_BASE
)

	)

39 
	#TBASE_GIC_VERSION
 (2)

	)

40 
	#TBASE_SPI_COUNT
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
tŸÆ_numbî_•i
)

	)

41 
	#TBASE_SSIQ_NRO
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
ssiq_numbî
)

	)

43 
	#TBASE_MONITOR_FLAGS
 (
TBASE_MONITOR_FLAGS_DEFAULT
)

	)

46 
	#TBASE_MAX_MONITOR_CALL_REGS
 
TBASE_MONITOR_CALL_REGS_MIN


	)

47 
	#TBASE_NWD_REGISTER_COUNT
 
TBASE_NWD_REGISTERS_MIN


	)

51 
	#TBASE_REGISTER_FILE_MMU_FLAGS
 (
	`LOWER_ATTRS
(
ATTR_IWBWA_OWBWA_NTR_INDEX
 | 
ISH
 | 
AP_RW
) |\

52 
	`UPPER_ATTRS
(
XN
) | \

53 
LEVEL3
)

	)

60 #i‚de‡
__ASSEMBLY__


61 
mt_log_£cuª_os_¥öt
(
c
);

63 
	#TBASE_OUTPUT_PUTC
(
c
Ë
	`mt_log_£cuª_os_¥öt
(c)

	)

66 
	#TBASE_EXECUTION_STATUS
(
°©us
)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/mailbox.c

1 
	~"∂©_¥iv©e.h
"

3 
maûbox_t
 
	gmt_mbox
[
PLATFORM_CORE_COUNT
];

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_def.h

31 #i‚de‡
__PLAT_DEF_H__


32 
	#__PLAT_DEF_H__


	)

34 
	~<∂©f‹m_def.h
>

38 
	#FIP_IMAGE_NAME
 "fù.bö"

	)

41 
	#CONFIG_GICD_ADDR
 0

	)

42 
	#CONFIG_GICC_ADDR
 1

	)

43 
	#CONFIG_GICH_ADDR
 2

	)

44 
	#CONFIG_GICV_ADDR
 3

	)

45 
	#CONFIG_MAX_AFF0
 4

	)

46 
	#CONFIG_MAX_AFF1
 5

	)

48 
	#CONFIG_CPU_SETUP
 6

	)

49 
	#CONFIG_BASE_MMAP
 7

	)

51 
	#CONFIG_HAS_CCI
 8

	)

52 
	#CONFIG_HAS_TZC
 9

	)

53 
	#CONFIG_LIMIT
 10

	)

59 
	#FLASH0_BASE
 0x08000000

	)

60 
	#FLASH0_SIZE
 
TZROM_SIZE


	)

83 
	#MTK_DEVICE_BASE
 0x11000000

	)

84 
	#MTK_DEVICE_SIZE
 0x1000000

	)

86 
	#MT_DEV_BASE
 0x10200000

	)

87 
	#MT_DEV_SIZE
 0x200000

	)

89 
	#MT_GIC_BASE
 0x10220000

	)

91 #i‚de‡
__ASSEMBLY__


92 
mt_mbox
[];

94 
	#MBOX_OFF
 
mt_mbox


	)

97 
	#PARAMS_BASE
 
TZDRAM_BASE


	)

99 
	#DRAM1_BASE
 0x41000000uŒ

	)

100 
	#DRAM1_SIZE
 0x1E000000uŒ

	)

101 
	#DRAM1_END
 (
DRAM1_BASE
 + 
DRAM1_SIZE
 - 1)

	)

102 
	#DRAM1_SEC_SIZE
 0x01000000uŒ

	)

104 
	#DRAM_BASE
 
DRAM1_BASE


	)

105 
	#DRAM_SIZE
 
DRAM1_SIZE


	)

107 
	#DRAM2_BASE
 0x880000000uŒ

	)

108 
	#DRAM2_SIZE
 0x780000000uŒ

	)

109 
	#DRAM2_END
 (
DRAM2_BASE
 + 
DRAM2_SIZE
 - 1)

	)

111 
	#PCIE_EXP_BASE
 0x40000000

	)

112 
	#TZRNG_BASE
 0x7„60000

	)

113 
	#TZNVCTR_BASE
 0x7„70000

	)

114 
	#TZROOTKEY_BASE
 0x7„80000

	)

117 
	#SYS_CNTCTL_BASE
 0x2a430000

	)

118 
	#SYS_CNTREAD_BASE
 0x2a800000

	)

119 
	#SYS_TIMCTL_BASE
 0x2a810000

	)

122 
	#VE_SYSREGS_BASE
 0x1c010000

	)

123 
	#V2M_SYS_ID
 0x0

	)

124 
	#V2M_SYS_LED
 0x8

	)

125 
	#V2M_SYS_CFGDATA
 0xa0

	)

126 
	#V2M_SYS_CFGCTRL
 0xa4

	)

130 
	#NS_IMAGE_OFFSET
 0x41E00000

	)

134 
	#MT_BL31_PLAT_PARAM_VAL
 0x0f1e2d3c4b5a6978ULL

	)

146 
	#SYS_LED_SS_SHIFT
 0x0

	)

147 
	#SYS_LED_EL_SHIFT
 0x1

	)

148 
	#SYS_LED_EC_SHIFT
 0x3

	)

150 
	#SYS_LED_SS_MASK
 0x1

	)

151 
	#SYS_LED_EL_MASK
 0x3

	)

152 
	#SYS_LED_EC_MASK
 0x1f

	)

155 
	#SYS_ID_REV_SHIFT
 27

	)

156 
	#SYS_ID_HBI_SHIFT
 16

	)

157 
	#SYS_ID_BLD_SHIFT
 12

	)

158 
	#SYS_ID_ARCH_SHIFT
 8

	)

159 
	#SYS_ID_FPGA_SHIFT
 0

	)

161 
	#SYS_ID_REV_MASK
 0xf

	)

162 
	#SYS_ID_HBI_MASK
 0xfff

	)

163 
	#SYS_ID_BLD_MASK
 0xf

	)

164 
	#SYS_ID_ARCH_MASK
 0xf

	)

165 
	#SYS_ID_FPGA_MASK
 0xff

	)

167 
	#SYS_ID_BLD_LENGTH
 4

	)

169 
	#REV_MT
 0x0

	)

170 
	#HBI_MT_BASE
 0x020

	)

171 
	#HBI_FOUNDATION
 0x010

	)

173 
	#BLD_GIC_VE_MMAP
 0x0

	)

174 
	#BLD_GIC_A53A57_MMAP
 0x1

	)

176 
	#ARCH_MODEL
 0x1

	)

179 
	#PWRC_BASE
 0x1c100000

	)

185 
	#CCI400_BASE
 0x10390000

	)

186 
	#CCI400_SL_IFACE_CLUSTER0
 4

	)

187 
	#CCI400_SL_IFACE_CLUSTER1
 3

	)

188 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

189 
CCI400_SL_IFACE_CLUSTER1
 : \

190 
CCI400_SL_IFACE_CLUSTER0
)

	)

191 
	#CCI_SEC_ACCESS_OFFSET
 (0x8)

	)

198 
	#VE_GICC_BASE
 0x2c002000

	)

203 
	#BASE_GICD_BASE
 (
MT_GIC_BASE
 + 0x1000)

	)

205 
	#BASE_GICC_BASE
 (
MT_GIC_BASE
 + 0x2000)

	)

206 
	#BASE_GICH_BASE
 (
MT_GIC_BASE
 + 0x4000)

	)

207 
	#BASE_GICV_BASE
 (
MT_GIC_BASE
 + 0x6000)

	)

208 
	#INT_POL_CTL0
 0x10200620

	)

210 
	#MT_EDGE_SENSITIVE
 1

	)

211 
	#MT_LEVEL_SENSITIVE
 0

	)

212 
	#MT_POLARITY_LOW
 0

	)

213 
	#MT_POLARITY_HIGH
 1

	)

216 
	#GIC_PRIVATE_SIGNALS
 (32)

	)

217 
	#NR_GIC_SGI
 (16)

	)

218 
	#NR_GIC_PPI
 (16)

	)

219 
	#GIC_PPI_OFFSET
 (27)

	)

220 
	#MT_NR_PPI
 (5)

	)

221 
	#MT_NR_SPI
 (241)

	)

222 
	#NR_MT_IRQ_LINE
 (
GIC_PPI_OFFSET
 + 
MT_NR_PPI
 + 
MT_NR_SPI
)

	)

225 
	#IRQ_SEC_PHY_TIMER
 29

	)

226 
	#IRQ_SEC_SGI_0
 8

	)

227 
	#IRQ_SEC_SGI_1
 9

	)

228 
	#IRQ_SEC_SGI_2
 10

	)

229 
	#IRQ_SEC_SGI_3
 11

	)

230 
	#IRQ_SEC_SGI_4
 12

	)

231 
	#IRQ_SEC_SGI_5
 13

	)

232 
	#IRQ_SEC_SGI_6
 14

	)

233 
	#IRQ_SEC_SGI_7
 15

	)

234 
	#IRQ_SEC_SGI_8
 16

	)

239 
	#PAGE_ADDR_MASK
 (0xFFF00000)

	)

241 
	#PL011_UART0_BASE
 0x1c090000

	)

242 
	#PL011_UART1_BASE
 0x1c0a0000

	)

243 
	#PL011_UART2_BASE
 0x1c0b0000

	)

244 
	#PL011_UART3_BASE
 0x1c0c0000

	)

251 
	#UART0_BASE
 (
IO_PHYS
 + 0x01002000)

	)

252 
	#UART1_BASE
 (
IO_PHYS
 + 0x01003000)

	)

253 
	#UART2_BASE
 (
IO_PHYS
 + 0x01004000)

	)

254 
	#UART3_BASE
 (
IO_PHYS
 + 0x01005000)

	)

255 
	#CFG_FPGA_PLATFORM
 0

	)

256 
	#PERICFG_BASE
 (
IO_PHYS
 + 0x3000)

	)

260 
	#TZC400_BASE
 0x2a4a0000

	)

267 
	#MT_AID_WIDTH
 4

	)

270 
	#MT_NSAID_DEFAULT
 0

	)

271 
	#MT_NSAID_PCI
 1

	)

272 
	#MT_NSAID_VIRTIO
 8

	)

273 
	#MT_NSAID_AP
 9

	)

274 
	#MT_NSAID_VIRTIO_OLD
 15

	)

277 
	#MT_NSAID_HDLCD0
 2

	)

278 
	#MT_NSAID_CLCD
 7

	)

283 
	#TRNG_ba£
 (0x1020F000)

284 
	#TRNG_BASE_ADDR
 
TRNG_ba£


	)

285 
	#TRNG_BASE_SIZE
 (0x1000)

	)

286 
	#TRNG_CTRL
 (
TRNG_ba£
+0x0000)

	)

287 
	#TRNG_TIME
 (
TRNG_ba£
+0x0004)

	)

288 
	#TRNG_DATA
 (
TRNG_ba£
+0x0008)

	)

289 
	#TRNG_PDN_ba£
 (0x10001088)

	)

290 
	#TRNG_PDN_BASE_ADDR
 (0x10001000)

	)

291 
	#TRNG_PDN_BASE_SIZE
 (0x1000)

	)

292 
	#TRNG_PDN_SET
 (
TRNG_PDN_ba£
 +0x0000)

	)

293 
	#TRNG_PDN_CLR
 (
TRNG_PDN_ba£
 +0x0004)

	)

294 
	#TRNG_PDN_STATUS
 (
TRNG_PDN_ba£
 +0x0008)

	)

295 
	#TRNG_CTRL_RDY
 0x80000000

	)

296 
	#TRNG_CTRL_START
 0x00000001

	)

301 
	#MTK_WDT_BASE
 (
IO_PHYS
 + 0x7000)

	)

302 
	#MTK_WDT_SIZE
 (0x1000)

	)

303 
	#MTK_WDT_MODE
 (
MTK_WDT_BASE
+0x0000)

	)

304 
	#MTK_WDT_LENGTH
 (
MTK_WDT_BASE
+0x0004)

	)

305 
	#MTK_WDT_RESTART
 (
MTK_WDT_BASE
+0x0008)

	)

306 
	#MTK_WDT_STATUS
 (
MTK_WDT_BASE
+0x000C)

	)

307 
	#MTK_WDT_INTERVAL
 (
MTK_WDT_BASE
+0x0010)

	)

308 
	#MTK_WDT_SWRST
 (
MTK_WDT_BASE
+0x0014)

	)

309 
	#MTK_WDT_SWSYSRST
 (
MTK_WDT_BASE
+0x0018)

	)

310 
	#MTK_WDT_NONRST_REG
 (
MTK_WDT_BASE
+0x0020)

	)

311 
	#MTK_WDT_NONRST_REG2
 (
MTK_WDT_BASE
+0x0024)

	)

312 
	#MTK_WDT_REQ_MODE
 (
MTK_WDT_BASE
+0x0030)

	)

313 
	#MTK_WDT_REQ_IRQ_EN
 (
MTK_WDT_BASE
+0x0034)

	)

314 
	#MTK_WDT_DEBUG_CTL
 (
MTK_WDT_BASE
+0x0040)

	)

317 
	#MTK_WDT_STATUS_HWWDT_RST
 (0x80000000)

	)

318 
	#MTK_WDT_STATUS_SWWDT_RST
 (0x40000000)

	)

319 
	#MTK_WDT_STATUS_IRQWDT_RST
 (0x20000000)

	)

320 
	#MTK_WDT_STATUS_DEBUGWDT_RST
 (0x00080000)

	)

321 
	#MTK_WDT_STATUS_SPMWDT_RST
 (0x0002)

	)

322 
	#MTK_WDT_STATUS_SPM_THERMAL_RST
 (0x0001)

	)

323 
	#MTK_WDT_STATUS_THERMAL_DIRECT_RST
 (1<<18)

	)

324 
	#MTK_WDT_STATUS_SECURITY_RST
 (1<<28)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_gic.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<debug.h
>

35 
	~<gic_v2.h
>

36 
	~<gic_v3.h
>

37 
	~<öãºu±_mgmt.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°döt.h
>

40 
	~"∂©_def.h
"

41 
	~"∂©_¥iv©e.h
"

42 
	~<∂©f‹m_def.h
>

43 
	~<°dio.h
>

45 #i‚de‡
MAX_GIC_NR


46 
	#MAX_GIC_NR
 1

	)

49 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

52 
	sgic_chù_d©a
 {

53 
	mßved_•i_íabÀ
[
DIV_ROUND_UP
(320, 32)];

54 
	mßved_•i_c⁄f
[
DIV_ROUND_UP
(320, 16)];

55 
	mßved_•i_èrgë
[
DIV_ROUND_UP
(320, 4)];

56 
	mßved_•i_group
[
DIV_ROUND_UP
(320, 32)];

66 
gic_chù_d©a
 
	ggic_d©a
[
MAX_GIC_NR
];

69 
	$gic_di°_ßve
()

71 
gic_úqs
;

72 
di°_ba£
;

73 
i
;

75 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

77 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

79 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

80 
gic_d©a
[0].
ßved_•i_c⁄f
[
i
] =

81 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4);

83 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

84 
gic_d©a
[0].
ßved_•i_èrgë
[
i
] =

85 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4);

87 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

88 
gic_d©a
[0].
ßved_•i_íabÀ
[
i
] =

89 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4);

91 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

92 
gic_d©a
[0].
ßved_•i_group
[
i
] =

93 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4);

94 
	}
}

96 
	$gic_di°_ª°‹e
()

98 
gic_úqs
;

99 
di°_ba£
;

100 
˘Ã
;

101 
i
;

103 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

105 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

108 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
di°_ba£
);

109 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

110 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
);

113 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

114 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_c⁄f
[i]);

119 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

120 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_èrgë
[i]);

122 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

123 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_íabÀ
[i]);

125 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

126 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_group
[i]);

128 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

129 
	}
}

181 
	$úq_øi£_so·úq
(
m≠
, 
úq
)

183 
ßâ
;

185 
ßâ
 = 1 << 15;

187 if(
	`∂©_ic_gë_öãºu±_ty≥
(
úq
Ë=
INTR_TYPE_S_EL1
)

189 
ßâ
 = 0;

192 
	`gicd_wrôe_sgú
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), (
m≠
 << 16Ë| 
ßâ
 | 
úq
);

194 
	`dsb
();

195 
	}
}

197 
	$gë_ack_öfo
()

199  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

200 
	}
}

202 
	$ack_sgi
(
ür
)

204 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
ür
);

205 
	}
}

207 
	$mt_©f_åiggî_úq
()

209 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
ATF_LOG_IRQ_ID
);

210 
	}
}

212 
	$mask_wdt_fiq
()

214 
	`gicd_£t_i˚«bÀr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

215 
	}
}

222 
	$mt_©f_åiggî_WDT_FIQ
()

224 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

225 
	}
}

233 
	$gicv3_˝uif_£tup
()

235 
s¸_vÆ
, 
vÆ
;

236 
uöçå_t
 
ba£
;

246 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

247 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

251 
	`∑nic
();

254 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

256 
vÆ
 &~
WAKER_PS
;

257 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

258 
	`dsb
();

261 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

262 
vÆ
 & 
WAKER_CA
) {

263 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

270 
s¸_vÆ
 = 
	`ªad_s¸
();

271 
	`wrôe_s¸
(
s¸_vÆ
 | 
SCR_NS_BIT
);

272 
	`isb
();

283 
vÆ
 = 
	`ªad_icc_§e_ñ3
();

284 
	`wrôe_icc_§e_ñ3
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

286 
vÆ
 = 
	`ªad_icc_§e_ñ2
();

287 
	`wrôe_icc_§e_ñ2
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

289 
	`wrôe_icc_pmr_ñ1
(
GIC_PRI_MASK
);

290 
	`isb
();

293 
	`wrôe_s¸
(
s¸_vÆ
);

294 
	`isb
();

295 
	}
}

301 
	$gicv3_˝uif_dó˘iv©e
()

303 
vÆ
;

304 
uöçå_t
 
ba£
;

313 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

314 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

318 
	`∑nic
();

321 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

322 
vÆ
 |
WAKER_PS
;

323 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

324 
	`dsb
();

327 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

328 (
vÆ
 & 
WAKER_CA
) == 0) {

329 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

331 
	}
}

338 
	$gic_˝uif_£tup
(
gicc_ba£
)

340 
vÆ
;

343 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

351 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

352 
	`gicv3_˝uif_£tup
();

355 
vÆ
 = 
ENABLE_GRP0
 | 
ENABLE_GRP1
 | 
FIQ_EN
 | 
FIQ_BYP_DIS_GRP0
;

356 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
FIQ_BYP_DIS_GRP1
 | 
IRQ_BYP_DIS_GRP1
;

359 
	`gicc_wrôe_pmr
(
gicc_ba£
, 0x1 << 7);

360 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

362 
	}
}

368 
	$gic_˝uif_dó˘iv©e
(
gicc_ba£
)

370 
vÆ
;

373 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

374 
vÆ
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

375 
vÆ
 |
FIQ_BYP_DIS_GRP1
 | 
FIQ_BYP_DIS_GRP0
;

376 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
IRQ_BYP_DIS_GRP1
;

377 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

379 
vÆ
 = 
	`gicc_ªad_iidr
(
gicc_ba£
);

386 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

387 
	`gicv3_˝uif_dó˘iv©e
();

390 
	}
}

396 
	$gic_p˝u_di°if_£tup
(
gicd_ba£
)

398 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 0, ~0);

401 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

402 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
, 
GIC_HIGHEST_SEC_PRIORITY
);

403 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

406 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

407 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

408 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

409 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

410 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

411 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

412 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

413 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

414 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

416 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
, 
GIC_HIGHEST_SEC_PRIORITY
);

417 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
, 
GIC_HIGHEST_SEC_PRIORITY
);

418 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
, 
GIC_HIGHEST_SEC_PRIORITY
);

419 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
, 
GIC_HIGHEST_SEC_PRIORITY
);

420 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
, 
GIC_HIGHEST_SEC_PRIORITY
);

421 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
, 
GIC_HIGHEST_SEC_PRIORITY
);

422 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
, 
GIC_HIGHEST_SEC_PRIORITY
);

423 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
, 
GIC_HIGHEST_SEC_PRIORITY
);

424 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
, 
GIC_HIGHEST_SEC_PRIORITY
);

426 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

427 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

428 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

429 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

430 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

431 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

432 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

433 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

434 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

436 
	}
}

438 
	$mt_úq_£t_pﬁ¨ôy
(
úq
, 
pﬁ¨ôy
)

441 
off£t
, 
ªg_ödex
, 
vÆue
;

450 
off£t
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) & 0x1F;

451 
ªg_ödex
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) >> 5;

453 i‡(
pﬁ¨ôy
 == 0) {

455 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

456 
vÆue
 |(1 << 
off£t
);

457 
	`mmio_wrôe_32
((
INT_POL_CTL0
 + (
ªg_ödex
 * 4)), 
vÆue
);

460 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

461 
vÆue
 &~(0x1 << 
off£t
);

462 
	`mmio_wrôe_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4), 
vÆue
);

464 
	}
}

467 
	$mt_úq_£t_£ns
(
ba£
, 
úq
, 
£ns
)

469 
c⁄fig
;

471 i‡(
£ns
 =
MT_EDGE_SENSITIVE
)

473 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

474 
c⁄fig
 |(0x2 << (
úq
 % 16) * 2);

475 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

479 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

480 
c⁄fig
 &~(0x2 << (
úq
 % 16) * 2);

481 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

483 
	}
}

491 
	$gic_di°if_£tup
(
gicd_ba£
)

493 
˘r
, 
num_öts
, 
˘Ã
;

496 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
gicd_ba£
);

497 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

498 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
);

505 
num_öts
 = 
	`gicd_ªad_ty≥r
(
gicd_ba£
Ë& 
IT_LINES_NO_MASK
;

506 
num_öts
++;

507 
˘r
 = 0; cå < 
num_öts
; ctr++)

510 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 
˘r
 << 
IGROUPR_SHIFT
, ~0);

516 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

517 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
GIC_HIGHEST_SEC_PRIORITY
);

518 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
,

519 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

520 
	`mt_úq_£t_£ns
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
MT_EDGE_SENSITIVE
);

523 
	`mt_úq_£t_pﬁ¨ôy
(
WDT_IRQ_BIT_ID
, 
MT_POLARITY_LOW
);

525 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

530 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

531 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_TZ_WDOG
, 
GIC_HIGHEST_SEC_PRIORITY
);

532 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
IRQ_TZ_WDOG
,

533 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

534 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

537 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

539 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

540 
	}
}

543 
	$gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
)

545 
	`¥ötf
("GICD_CTLR=0x%08x\n", 
	`gicd_ªad_˘Ã
(
gicd_ba£
));

549 
	`¥ötf
("GICC_CTRL=0x%08x\n", 
	`gicc_ªad_˘Ã
(
gicc_ba£
));

550 
	`¥ötf
("GICC_PMR=0x%08x\n", 
	`gicc_ªad_pmr
(
gicc_ba£
));

551 
	}
}

554 
	$gic_£tup
()

556 
gicd_ba£
, 
gicc_ba£
;

558 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

559 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

561 
	`gic_˝uif_£tup
(
gicc_ba£
);

562 
	`gic_di°if_£tup
(
gicd_ba£
);

565 
i
, 
no_£c
;

566 
i
 = 0; i < 0xFF; i++)

568 
no_£c
 = 
	`gicd_gë_igrou¥
(
gicd_ba£
, 
i
);

569 
	`¥ötf
("úq = %d, group=0x%x(%s)\n", 
i
, 
no_£c
,Ço_sec ? "non-sec":"sec");

572 
	`gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
);

576 
	}
}

590 
uöt32_t
 
	$∂©_öãºu±_ty≥_to_löe
(
uöt32_t
 
ty≥
, uöt32_à
£curôy_°©e
)

592 
uöt32_t
 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

594 
	`as£π
(
ty≥
 =
INTR_TYPE_S_EL1
 ||

595 
ty≥
 =
INTR_TYPE_EL3
 ||

596 
ty≥
 =
INTR_TYPE_NS
);

598 
	`as£π
(
£curôy_°©e
 =
NON_SECURE
 || securôy_°©ê=
SECURE
);

605 #i‡
MT_GIC_ARCH
 == 2

606  
	`gicv2_öãºu±_ty≥_to_löe
(
gicc_ba£
, 
ty≥
);

610 
	}
}

612 #i‡
MT_GIC_ARCH
 == 2

618 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_ty≥
()

620 
uöt32_t
 
id
, 
gicc_ba£
;

622 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

623 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

626 i‡(
id
 < 1022)

627  
INTR_TYPE_S_EL1
;

629 i‡(
id
 =
GIC_SPURIOUS_INTERRUPT
)

630  
INTR_TYPE_INVAL
;

632  
INTR_TYPE_NS
;

633 
	}
}

640 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_id
()

642 
uöt32_t
 
id
, 
gicc_ba£
;

644 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

645 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

647 i‡(
id
 < 1022)

648  
id
;

650 i‡(
id
 == 1023)

651  
INTR_ID_UNAVAILABLE
;

657  
	`gicc_ªad_ahµú
(
gicc_ba£
);

658 
	}
}

664 
uöt32_t
 
	$∂©_ic_acknowÀdge_öãºu±
()

666  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

667 
	}
}

673 
	$∂©_ic_íd_of_öãºu±
(
uöt32_t
 
id
)

675 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
id
);

677 
	}
}

684 
uöt32_t
 
	$∂©_ic_gë_öãºu±_ty≥
(
uöt32_t
 
id
)

686 
uöt32_t
 
group
;

688 
group
 = 
	`gicd_gë_igrou¥
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
id
);

691 i‡(
group
 =
GRP0
)

692  
INTR_TYPE_S_EL1
;

694  
INTR_TYPE_NS
;

695 
	}
}

697 
uöt64_t
 
	$mt_úq_dump_°©us
(
uöt32_t
 
úq
)

699 
uöt32_t
 
di°_ba£
;

700 
bô
;

701 
uöt32_t
 
ªsu…
;

702 
uöt64_t
 
rc
 = 0;

704 
	`¥ötf
("[ATF GIC dump] irq = %d\n", 
úq
);

706 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

709 
bô
 = 1 << (
úq
 % 32);

710 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

711 
	`¥ötf
("[ATF GIC dump]É«bÀ = %x\n", 
ªsu…
);

712 
rc
 |
ªsu…
;

715 
bô
 = 1 << (
úq
 % 32);

717 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

718 
	`¥ötf
("[ATF GIC dump] grou∞%x (0x1:úq,0x0:fiq)\n", 
ªsu…
);

719 
rc
 |
ªsu…
 << 1;

722 
bô
 = 0xf‡<< ((
úq
 % 4)*8);

723 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IPRIORITYR
 + 
úq
 / 4 * 4Ë& 
bô
) >> ((irq % 4)*8));

724 
	`¥ötf
("[ATF GIC dump]Öri‹ôy = %x\n", 
ªsu…
);

725 
rc
 |
ªsu…
 << 2;

728 
bô
 = 0x3 << ((
úq
 % 16)*2);

730 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
úq
 / 16 * 4Ë& 
bô
) >> ((irq % 16)*2));

731 
	`¥ötf
("[ATF GIC dump] sísôivôy = %x (edge:0x1,Üevñ:0x0)\n", 
ªsu…
>>1);

732 
rc
 |(
ªsu…
>>1) << 10;

735 
bô
 = 1 << (
úq
 % 32);

736 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISPENDR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

737 
	`¥ötf
("[ATF GIC dump]Öídög sètu†%x\n", 
ªsu…
);

738 
rc
 |
ªsu…
 << 11;

741 
bô
 = 1 << (
úq
 % 32);

742 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISACTIVER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

743 
	`¥ötf
("[ATF GIC dump]á˘ivê°©u†%x\n", 
ªsu…
);

744 
rc
 |
ªsu…
 << 12;

747 
bô
 = 1 << (
úq
 % 32);

749 
ªsu…
 = ((
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
úq
-32Ë/ 32 * 4Ë& 
bô
)?1:0);

750 
	`¥ötf
("[ATF GIC dump]Öﬁ¨ôy = %x (0x0: high, 0x1:low)\n", 
ªsu…
);

751 
rc
 |
ªsu…
 << 13;

753  
rc
;

754 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_io_storage.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<io_drivî.h
>

34 
	~<io_fù.h
>

35 
	~<io_memm≠.h
>

36 
	~<io_°‹age.h
>

37 
	~<io_£miho°ög.h
>

38 
	~<£miho°ög.h
>

39 
	~<°rög.h
>

40 
	~"∂©_def.h
"

43 
io_∂©_d©a_t
 
	gio_d©a
;

44 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gsh_dev_c⁄
;

45 
uöçå_t
 
	gsh_dev_•ec
;

46 
uöçå_t
 
	gsh_öô_∑øms
;

47 
uöçå_t
 
	gsh_dev_h™dÀ
;

48 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gfù_dev_c⁄
;

49 
uöçå_t
 
	gfù_dev_•ec
;

50 
uöçå_t
 
	gfù_dev_h™dÀ
;

51 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gmemm≠_dev_c⁄
;

52 
uöçå_t
 
	gmemm≠_dev_•ec
;

53 
uöçå_t
 
	gmemm≠_öô_∑øms
;

54 
uöçå_t
 
	gmemm≠_dev_h™dÀ
;

56 c⁄° 
io_block_•ec_t
 
	gfù_block_•ec
 = {

57 .
off£t
 = 
FLASH0_BASE
,

58 .
	gÀngth
 = 
FLASH0_SIZE


61 c⁄° 
io_fûe_•ec_t
 
	gbl2_fûe_•ec
 = {

62 .
∑th
 = 
BL2_IMAGE_NAME
,

63 .
	gmode
 = 
FOPEN_MODE_RB


66 c⁄° 
io_fûe_•ec_t
 
	gbl31_fûe_•ec
 = {

67 .
∑th
 = 
BL31_IMAGE_NAME
,

68 .
	gmode
 = 
FOPEN_MODE_RB


71 c⁄° 
io_fûe_•ec_t
 
	gbl32_fûe_•ec
 = {

72 .
∑th
 = 
BL32_IMAGE_NAME
,

73 .
	gmode
 = 
FOPEN_MODE_RB


76 c⁄° 
io_fûe_•ec_t
 
	gbl33_fûe_•ec
 = {

77 .
∑th
 = 
BL33_IMAGE_NAME
,

78 .
	gmode
 = 
FOPEN_MODE_RB


81 
›í_fù
(c⁄° 
uöçå_t
 
•ec
);

82 
›í_memm≠
(c⁄° 
uöçå_t
 
•ec
);

84 
	s∂©_io_pﬁicy
 {

85 *
	mimage_«me
;

86 
uöçå_t
 *
	mdev_h™dÀ
;

87 
uöçå_t
 
	mimage_•ec
;

88 (*
	mcheck
)(c⁄° 
uöçå_t
 
	m•ec
);

91 c⁄° 
∂©_io_pﬁicy
 
	gpﬁicõs
[] = {

93 
FIP_IMAGE_NAME
,

94 &
memm≠_dev_h™dÀ
,

95 (
uöçå_t
)&
fù_block_•ec
,

96 
›í_memm≠


98 
BL2_IMAGE_NAME
,

99 &
fù_dev_h™dÀ
,

100 (
uöçå_t
)&
bl2_fûe_•ec
,

101 
›í_fù


103 
BL31_IMAGE_NAME
,

104 &
fù_dev_h™dÀ
,

105 (
uöçå_t
)&
bl31_fûe_•ec
,

106 
›í_fù


108 
BL32_IMAGE_NAME
,

109 &
fù_dev_h™dÀ
,

110 (
uöçå_t
)&
bl32_fûe_•ec
,

111 
›í_fù


113 
BL33_IMAGE_NAME
,

114 &
fù_dev_h™dÀ
,

115 (
uöçå_t
)&
bl33_fûe_•ec
,

116 
›í_fù


123 
	$›í_fù
(c⁄° 
uöçå_t
 
•ec
)

125 
ªsu…
 = 
IO_FAIL
;

128 
ªsu…
 = 
	`io_dev_öô
(
fù_dev_h™dÀ
, (
uöçå_t
)
FIP_IMAGE_NAME
);

129 i‡(
ªsu…
 =
IO_SUCCESS
) {

130 
	`INFO
("Using FIP\n");

133  
ªsu…
;

134 
	}
}

137 
	$›í_memm≠
(c⁄° 
uöçå_t
 
•ec
)

139 
ªsu…
 = 
IO_FAIL
;

140 
uöçå_t
 
loˇl_image_h™dÀ
;

142 
ªsu…
 = 
	`io_dev_öô
(
memm≠_dev_h™dÀ
, 
memm≠_öô_∑øms
);

143 i‡(
ªsu…
 =
IO_SUCCESS
) {

144 
ªsu…
 = 
	`io_›í
(
memm≠_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

145 i‡(
ªsu…
 =
IO_SUCCESS
) {

147 
	`io_˛o£
(
loˇl_image_h™dÀ
);

150  
ªsu…
;

151 
	}
}

154 
	$›í_£miho°ög
(c⁄° 
uöçå_t
 
•ec
)

156 
ªsu…
 = 
IO_FAIL
;

157 
uöçå_t
 
loˇl_image_h™dÀ
;

160 
ªsu…
 = 
	`io_dev_öô
(
sh_dev_h™dÀ
, 
sh_öô_∑øms
);

161 i‡(
ªsu…
 =
IO_SUCCESS
) {

162 
ªsu…
 = 
	`io_›í
(
sh_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

163 i‡(
ªsu…
 =
IO_SUCCESS
) {

164 
	`INFO
("Using Semi-hosting IO\n");

165 
	`io_˛o£
(
loˇl_image_h™dÀ
);

168  
ªsu…
;

169 
	}
}

171 
	$mt_io_£tup
 ()

173 
io_ªsu…
 = 
IO_FAIL
;

176 
	`io_öô
(&
io_d©a
);

179 
io_ªsu…
 = 
	`ªgi°î_io_dev_sh
(&
sh_dev_c⁄
);

180 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

182 
io_ªsu…
 = 
	`ªgi°î_io_dev_fù
(&
fù_dev_c⁄
);

183 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

185 
io_ªsu…
 = 
	`ªgi°î_io_dev_memm≠
(&
memm≠_dev_c⁄
);

186 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

189 
io_ªsu…
 = 
	`io_dev_›í
(
sh_dev_c⁄
, 
sh_dev_•ec
, &
sh_dev_h™dÀ
);

190 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

192 
io_ªsu…
 = 
	`io_dev_›í
(
fù_dev_c⁄
, 
fù_dev_•ec
, &
fù_dev_h™dÀ
);

193 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

195 
io_ªsu…
 = 
	`io_dev_›í
(
memm≠_dev_c⁄
, 
memm≠_dev_•ec
,

196 &
memm≠_dev_h™dÀ
);

197 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

200 ()
io_ªsu…
;

201 
	}
}

206 
	$∂©_gë_image_sour˚
(c⁄° *
image_«me
, 
uöçå_t
 *
dev_h™dÀ
,

207 
uöçå_t
 *
image_•ec
)

209 
ªsu…
 = 
IO_FAIL
;

210 c⁄° 
∂©_io_pﬁicy
 *
pﬁicy
;

212 i‡((
image_«me
 !
NULL
Ë&& (
dev_h™dÀ
 != NULL) &&

213 (
image_•ec
 !
NULL
)) {

214 
pﬁicy
 = 
pﬁicõs
;

215 
pﬁicy
->
image_«me
 !
NULL
) {

216 i‡(
	`°rcmp
(
pﬁicy
->
image_«me
, image_name) == 0) {

217 
ªsu…
 = 
pﬁicy
->
	`check
’ﬁicy->
image_•ec
);

218 i‡(
ªsu…
 =
IO_SUCCESS
) {

219 *
image_•ec
 = 
pﬁicy
->image_spec;

220 *
dev_h™dÀ
 = *(
pﬁicy
->dev_handle);

223 
ªsu…
 = 
	`›í_£miho°ög
(

224 
pﬁicy
->
image_•ec
);

225 i‡(
ªsu…
 =
IO_SUCCESS
) {

226 *
dev_h™dÀ
 = 
sh_dev_h™dÀ
;

227 *
image_•ec
 =

228 
pﬁicy
->
image_•ec
;

232 
pﬁicy
++;

235 
ªsu…
 = 
IO_FAIL
;

237  
ªsu…
;

238 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_pm.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bakîy_lock.h
>

34 
	~<cci400.h
>

35 
	~<scu.h
>

36 
	~<mmio.h
>

37 
	~<∂©f‹m.h
>

38 
	~<c⁄sﬁe.h
>

39 
	~<debug.h
>

40 
	~<∂©f‹m_def.h
>

41 
	~<psci.h
>

42 
	~<powî_åa˚r.h
>

43 
	~<°dio.h
>

44 
	~"drivîs/pwrc/∂©_pwrc.h
"

45 
	~"∂©_def.h
"

46 
	~"∂©_¥iv©e.h
"

47 
	~"Ørch64/∂©_hñ≥rs.h
"

49 
	~"mt_˝uxg±.h
"

51 
	s_ñ3_d‹m™t_d©a
 {

53 
	mmp0_l2e˘Ã_ñ1
;

54 
	mmp0_l2r°dißbÀ
;

56 } 
	gñ3_d‹m™t_d©a
[1] = {{ .
mp0_l2e˘Ã_ñ1
 = 0xDEADDEAD }};

62 
	$mt_affö°_°™dby
(
powî_°©e
)

64 
èrgë_afÊvl
;

67 
èrgë_afÊvl
 = 
	`psci_gë_p°©e_afÊvl
(
powî_°©e
);

73 i‡(
èrgë_afÊvl
 !
MPIDR_AFFLVL0
)

74  
PSCI_E_INVALID_PARAMS
;

80 
	`dsb
();

81 
	`wfi
();

83  
PSCI_E_SUCCESS
;

84 
	}
}

90 
	$mt_affö°_⁄
(
mpidr
,

91 
£c_íåypoöt
,

92 
ns_íåypoöt
,

93 
afÊvl
,

94 
°©e
)

96 
rc
 = 
PSCI_E_SUCCESS
;

97 
löór_id
;

98 
maûbox_t
 *
mt_mboxes
;

104 i‡(
afÊvl
 !
MPIDR_AFFLVL0
)

105 
exô
;

107 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

108 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

109 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

110 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

113 
	`bl31_⁄_íåypoöt
();

114 i‡(
löór_id
 >= 4) {

115 
	`mmio_wrôe_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4), ()
bl31_⁄_íåypoöt
);

116 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4)));

118 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
), ()
bl31_⁄_íåypoöt
);

119 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
)));

122 
exô
:

123  
rc
;

124 
	}
}

138 
	$mt_affö°_off
(
mpidr
,

139 
afÊvl
,

140 
°©e
)

142 
rc
 = 
PSCI_E_SUCCESS
;

143 
gicc_ba£
, 
e˘Ã
;

144 
˝u_£tup
, 
cci_£tup
;

146 
afÊvl
) {

147 
MPIDR_AFFLVL3
:

148 
MPIDR_AFFLVL2
:

150 
MPIDR_AFFLVL1
:

151 i‡(
°©e
 =
PSCI_STATE_OFF
) {

156 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

157 i‡(
cci_£tup
) {

158 
	`cci_dißbÀ_cohîícy
(
mpidr
);

160 
	`dißbÀ_scu
(
mpidr
);

162 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_DOWN
);

166 
MPIDR_AFFLVL0
:

167 i‡(
°©e
 =
PSCI_STATE_OFF
) {

173 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

174 i‡(
˝u_£tup
) {

175 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

176 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

177 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

185 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

186 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

188 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_DOWN
);

193 
	`as£π
(0);

196  
rc
;

197 
	}
}

211 
	$mt_affö°_su•íd
(
mpidr
,

212 
£c_íåypoöt
,

213 
ns_íåypoöt
,

214 
afÊvl
,

215 
°©e
)

217 
rc
 = 
PSCI_E_SUCCESS
;

218 
gicc_ba£
, 
e˘Ã
;

219 
˝u_£tup
, 
cci_£tup
, 
löór_id
;

220 
maûbox_t
 *
mt_mboxes
;

222 
afÊvl
) {

223 
MPIDR_AFFLVL2
:

224 i‡(
°©e
 =
PSCI_STATE_OFF
) {

225 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

228 
p
->
mp0_l2e˘Ã_ñ1
 = 
	`ªad_l2e˘Ã
();

231 
p
->
mp0_l2r°dißbÀ
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

232 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

233 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
);

236 
	`gíîic_timî_backup
();

238 
	`gic_di°_ßve
();

242 
MPIDR_AFFLVL1
:

243 i‡(
°©e
 =
PSCI_STATE_OFF
) {

248 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

249 i‡(
cci_£tup
) {

250 
	`cci_dißbÀ_cohîícy
(
mpidr
);

252 
	`dißbÀ_scu
(
mpidr
);

254 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_SUSPEND
);

258 
MPIDR_AFFLVL0
:

259 i‡(
°©e
 =
PSCI_STATE_OFF
) {

261 
	`mmio_wrôe_32
(
MP0_MISC_CONFIG3
, 
	`mmio_ªad_32
(MP0_MISC_CONFIG3) | (1<<12));

266 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

267 i‡(
˝u_£tup
) {

268 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

269 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

270 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

274 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

275 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

276 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

277 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

285 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

286 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

287 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_SUSPEND
);

292 
	`as£π
(0);

295  
rc
;

296 
	}
}

299 
	$w‹k¨ound_826319
(
mpidr
)

301 
l2a˘Ã
;

304 i‡(
mpidr
 & 
MPIDR_CPU_MASK
)

313 
l2a˘Ã
 = 
	`ªad_l2a˘Ã
();

314 
l2a˘Ã
 = (l2actlr & ~(1<<14)) | (1<<3);

315 
	`wrôe_l2a˘Ã
(
l2a˘Ã
);

318 
	}
}

320 
	#w‹k¨ound_826319
(Ëdÿ{} 0)

	)

324 
	$w‹k¨ound_836870
(
mpidr
)

326 
˝ua˘Ã
;

337 
˝ua˘Ã
 = 
	`ªad_˝ua˘Ã
();

338 
˝ua˘Ã
 = cpuactlr | (1<<24);

339 
	`wrôe_˝ua˘Ã
(
˝ua˘Ã
);

342 
	}
}

344 
	#w‹k¨ound_836870
(Ëdÿ{} 0)

	)

347 
	$˛ór_˙tvoff
(
mpidr
)

349 
s¸_vÆ
, 
vÆ
;

354 
vÆ
 = 0;

357 
s¸_vÆ
 = 
	`ªad_s¸
();

358 
	`wrôe_s¸
(
s¸_vÆ
 | 
SCR_NS_BIT
);

360 
	`wrôe_˙tvoff_ñ2
(
vÆ
);

363 
	`wrôe_s¸
(
s¸_vÆ
);

365 
	`¥ötf
("[0x%X] c¡voff_ñ2=0x%x\n",
mpidr
, 
	`ªad_˙tvoff_ñ2
());

366  
vÆ
;

367 
	}
}

376 
	$mt_affö°_⁄_föish
(
mpidr
,

377 
afÊvl
,

378 
°©e
)

380 
rc
 = 
PSCI_E_SUCCESS
;

381 
löór_id
, 
˝u_£tup
;

382 
maûbox_t
 *
mt_mboxes
;

383 
gicd_ba£
, 
gicc_ba£
, 
e˘Ã
;

385 
afÊvl
) {

387 
MPIDR_AFFLVL2
:

388 i‡(
°©e
 =
PSCI_STATE_OFF
) {

392 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

393 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

398 
MPIDR_AFFLVL1
:

400 i‡(
°©e
 =
PSCI_STATE_OFF
) {

402 
	`w‹k¨ound_826319
(
mpidr
);

403 
	`íabÀ_scu
(
mpidr
);

404 
	`mt_cci_£tup
();

405 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_UP
);

409 
MPIDR_AFFLVL0
:

414 
	`w‹k¨ound_836870
(
mpidr
);

419 
	`˛ór_˙tvoff
(
mpidr
);

425 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

426 i‡(
˝u_£tup
) {

427 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

428 
e˘Ã
 |
CPUECTLR_SMP_BIT
;

429 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

433 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

434 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

435 
mt_mboxes
[
löór_id
].
vÆue
 = 0;

436 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

439 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

441 
	`gic_˝uif_£tup
(
gicc_ba£
);

447 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

448 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

449 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

450 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

451 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

453 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) |

454 (1 << 
	`CNTNSAR_NS_SHIFT
(1));

455 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

458 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

460 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_UP
);

464 
	`as£π
(0);

469  
rc
;

470 
	}
}

479 
	$mt_affö°_su•íd_föish
(
mpidr
,

480 
afÊvl
,

481 
°©e
)

483 
rc
 = 
PSCI_E_SUCCESS
;

485 
afÊvl
) {

486 
MPIDR_AFFLVL2
:

487 i‡(
°©e
 =
PSCI_STATE_OFF
) {

488 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

490 i‡(
p
->
mp0_l2e˘Ã_ñ1
==0xDEADDEAD)

491 
	`∑nic
();

493 
	`wrôe_l2e˘Ã
(
p
->
mp0_l2e˘Ã_ñ1
);

497 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

498 (
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
)

499 | (
p
->
mp0_l2r°dißbÀ
 & 
L2RSTDISABLE
));

501 
	`gic_£tup
();

502 
	`gic_di°_ª°‹e
();

507 
MPIDR_AFFLVL1
:

508 
MPIDR_AFFLVL0
:

509  
	`mt_affö°_⁄_föish
(
mpidr
, 
afÊvl
, 
°©e
);

512 
	`as£π
(0);

515  
rc
;

516 
	}
}

522 c⁄° 
∂©_pm_›s_t
 
	gmt_∂©_pm_›s
 = {

523 
mt_affö°_°™dby
,

524 
mt_affö°_⁄
,

525 
mt_affö°_off
,

526 
mt_affö°_su•íd
,

527 
mt_affö°_⁄_föish
,

528 
mt_affö°_su•íd_föish
,

535 
	$∂©f‹m_£tup_pm
(c⁄° 
∂©_pm_›s_t
 **
∂©_›s
)

537 *
∂©_›s
 = &
mt_∂©_pm_›s
;

539 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_private.h

31 #i‚de‡
__PLAT_PRIVATE_H__


32 
	#__PLAT_PRIVATE_H__


	)

34 
	~<bl_comm⁄.h
>

35 
	~<∂©f‹m_def.h
>

38 vﬁ©ûê
	smaûbox
 {

39 
vÆue


40 
__©åibuã__
((
__Æig√d__
(
CACHE_WRITEBACK_GRANULE
)));

41 } 
	tmaûbox_t
;

48 
	sbl2_to_bl31_∑øms_mem
 {

49 
bl31_∑øms_t
 
	mbl31_∑øms
;

50 
image_öfo_t
 
	mbl31_image_öfo
;

51 
image_öfo_t
 
	mbl32_image_öfo
;

52 
image_öfo_t
 
	mbl33_image_öfo
;

53 
íåy_poöt_öfo_t
 
	mbl33_ï_öfo
;

54 
íåy_poöt_öfo_t
 
	mbl32_ï_öfo
;

55 
íåy_poöt_öfo_t
 
	mbl31_ï_öfo
;

56 } 
	tbl2_to_bl31_∑øms_mem_t
;

61 
	gmemöfo
;

66 
mt_c⁄figuª_mmu_ñ1
(
tŸÆ_ba£
,

67 
tŸÆ_size
,

72 
mt_c⁄figuª_mmu_ñ3
(
tŸÆ_ba£
,

73 
tŸÆ_size
,

78 
mt_gë_cfgv¨
();

79 
mt_c⁄fig_£tup
();

81 #i‡
RESET_TO_BL31


82 
mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

83 
íåy_poöt_öfo
 *
èrgë_íåy_öfo
);

85 
mt_cci_£tup
();

88 
gic_˝uif_dó˘iv©e
();

89 
gic_˝uif_£tup
();

90 
gic_p˝u_di°if_£tup
();

91 
gic_£tup
();

94 
mt_£tup_t›ﬁogy
();

97 
mt_io_£tup
();

100 
mt_£curôy_£tup
();

101 
uöt32_t
 
gë_devöfo_wôh_ödex
(uint32_t);

103 
mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo
 *
bl32_ï
);

106 
mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo
 *
bl33_ï
);

108 
íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

110 
w‹k¨ound_836870
(
mpidr
);

111 
˛ór_˙tvoff
(
mpidr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_security.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<tzc400.h
>

34 
	~<∂©f‹m.h
>

35 
	~"∂©_def.h
"

36 
	~"∂©_¥iv©e.h
"

39 
	#FILTER_SHIFT
(
fûãr
Ë(1 << fûãr)

	)

47 
	$mt_£curôy_£tup
()

49 
tzc_ö°™˚_t
 
c⁄åﬁÀr
;

60 i‡(!
	`mt_gë_cfgv¨
(
CONFIG_HAS_TZC
))

67 
	`INFO
("Configuring TrustZone Controller\n");

74 
c⁄åﬁÀr
.
ba£
 = 
TZC400_BASE
;

75 
c⁄åﬁÀr
.
aid_width
 = 
MT_AID_WIDTH
;

76 
	`tzc_öô
(&
c⁄åﬁÀr
);

90 
	`tzc_dißbÀ_fûãrs
(&
c⁄åﬁÀr
);

104 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 1,

105 
DRAM1_BASE
, 
DRAM1_END
 - 
DRAM1_SEC_SIZE
,

106 
TZC_REGION_S_NONE
,

107 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

108 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

109 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

110 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

111 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

114 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 3,

115 (
DRAM1_END
 - 
DRAM1_SEC_SIZE
) + 1 , DRAM1_END,

116 
TZC_REGION_S_RDWR
,

120 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 2,

121 
DRAM2_BASE
, 
DRAM2_END
, 
TZC_REGION_S_NONE
,

122 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

123 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

124 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

125 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

126 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

133 
	`tzc_£t_a˘i⁄
(&
c⁄åﬁÀr
, 
TZC_ACTION_ERR
);

136 
	`tzc_íabÀ_fûãrs
(&
c⁄åﬁÀr
);

137 
	}
}

139 
uöt32_t
 
	$gë_devöfo_wôh_ödex
(
uöt32_t
 
i
)

141 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

143 if–
i
 < 
DEVINFO_SIZE
){

144  
ãórg
->
devöfo
[
i
];

148 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_tbase.c

12 
	~<as£π.h
>

13 
	~<debug.h
>

14 
	~<°rög.h
>

15 
	~<tzc400.h
>

16 
	~<∂©f‹m.h
>

17 
	~<mmio.h
>

18 
	~<∂©_def.h
>

19 
	~"∂©_¥iv©e.h
"

21 
	~<¨ch_hñ≥rs.h
>

22 
	~<tba£_¥iv©e.h
>

25 
	#PLAT_TBASE_INPUT_HWIDENTITY
 (0x1)

	)

26 
	#PLAT_TBASE_INPUT_HWKEY
 (0x2)

	)

27 
	#PLAT_TBASE_INPUT_RNG
 (0x3)

	)

29 
	#PLAT_TBASE_INPUT_OK
 ((
uöt32_t
)0)

	)

30 
	#PLAT_TBASE_INPUT_ERROR
 ((
uöt32_t
)-1)

	)

35 
uöt32_t
 
	$∂©_tba£_öput
(
uöt64_t
 
D©aId
,uöt64_t* 
Lígth
,* 
out
)

37 
uöt32_t
 
Sètus
 = 
PLAT_TBASE_INPUT_OK
;

38 
uöt32_t
 
Àngth
 = 0, 
idx
 = 0;

41  
D©aId
 )

43 
PLAT_TBASE_INPUT_HWIDENTITY
:

45 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

47 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
hwuid
)/(uint32_t)); idx++)

49 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
hwuid
[idx];

50 
Àngth
 +(
uöt32_t
);

55 
PLAT_TBASE_INPUT_HWKEY
:

57 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

59 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
HRID
)/(uint32_t)) ; idx++)

61 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
HRID
[idx];

62 
Àngth
 +(
uöt32_t
);

64 *
Lígth
 = 
Àngth
;

67 
PLAT_TBASE_INPUT_RNG
:

69 
uöt32_t
 
vÆue
 = 0;

70 
	`mmio_wrôe_32
(
TRNG_PDN_CLR
, 0x100);

71 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

72 
vÆue
 |
TRNG_CTRL_START
;

73 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

74 0 =(
	`mmio_ªad_32
(
TRNG_CTRL
Ë& 
TRNG_CTRL_RDY
));

75 ((
uöt32_t
*)
out
)[0] = 
	`mmio_ªad_32
(
TRNG_DATA
);

76 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

77 
vÆue
 &~
TRNG_CTRL_START
;

78 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

79 
	`mmio_wrôe_32
(
TRNG_PDN_SET
, 0x100);

80 *
Lígth
 = 4;

85 
Sètus
 = 
PLAT_TBASE_INPUT_ERROR
;

89  
Sètus
;

90 
	}
}

93 
uöt32_t
 
	$∂©_tba£_dump
()

95 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
());

97 
	`¥ötf
–"c‹ê%d i†dum≥d !\n", ()
löór_id
 );

103 
	`´e_wdt_dump
();

107 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_topology.c

31 
	~<as£π.h
>

32 
	~<∂©f‹m_def.h
>

34 
	~<psci.h
>

35 
	~"drivîs/pwrc/∂©_pwrc.h
"

38 
	#AFFINST_INVAL
 0xff

	)

48 
	safföôy_öfo
 {

49 
	msiblög
;

50 
	mchûd
;

51 
	m°©e
;

52 
	md©a
;

53 } 
	tafföôy_öfo_t
;

61 
afföôy_öfo_t
 
	gmt_aff1_t›ﬁogy_m≠
[
PLATFORM_CLUSTER_COUNT
];

62 
afföôy_öfo_t
 
	gmt_aff0_t›ﬁogy_m≠
[
PLATFORM_CORE_COUNT
];

65 
	gt›ﬁogy_£tup_d⁄e
;

78 
	$∂©_gë_aff_cou¡
(
aff_lvl
,

79 
mpidr
)

81 
aff_cou¡
 = 1, 
˘r
;

82 
∑ª¡_aff_id
;

84 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

86 
aff_lvl
) {

93 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF3_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

94 
	`as£π
(
∑ª¡_aff_id
 == 0);

103 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF2_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

104 
	`as£π
(
∑ª¡_aff_id
 == 0);

107 
˘r
 = 0;

108 
mt_aff1_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

109 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[˘r].
siblög
) {

110 
aff_cou¡
++;

116 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

117 
	`as£π
(
∑ª¡_aff_id
 < 
PLATFORM_CLUSTER_COUNT
);

120 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[
∑ª¡_aff_id
].
chûd
;

121 
mt_aff0_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

122 
˘r
 = 
mt_aff0_t›ﬁogy_m≠
[˘r].
siblög
) {

123 
aff_cou¡
++;

128 
	`as£π
(0);

131  
aff_cou¡
;

132 
	}
}

138 
	$∂©_gë_max_afÊvl
()

140  
MPIDR_AFFLVL2
;

141 
	}
}

158 
	$∂©_gë_aff_°©e
(
aff_lvl
,

159 
mpidr
)

161 
aff_°©e
 = 
PSCI_AFF_ABSENT
, 
idx
;

162 
idx
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

164 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

166 
aff_lvl
) {

169 i‡(
	`∂©_gë_max_afÊvl
(Ë>
aff_lvl
)

170 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

175 
aff_°©e
 = 
mt_aff1_t›ﬁogy_m≠
[
idx
].
°©e
;

182 
idx
 = 
mt_aff1_t›ﬁogy_m≠
[idx].
chûd
;

183 
idx
 +(
mpidr
 >> 
MPIDR_AFF0_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

184 
aff_°©e
 = 
mt_aff0_t›ﬁogy_m≠
[
idx
].
°©e
;

187 
	`as£π
(0);

190  
aff_°©e
;

191 
	}
}

198 
	$mt_£tup_t›ﬁogy
()

200 
aff0
, 
aff1
, 
aff_°©e
, 
aff0_off£t
 = 0;

201 
mpidr
;

203 
t›ﬁogy_£tup_d⁄e
 = 0;

205 
aff1
 = 0;áff1 < 
PLATFORM_CLUSTER_COUNT
;áff1++) {

207 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
chûd
 = 
aff0_off£t
;

208 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
siblög
 =áff1 + 1;

210 
aff0
 = 0;áff0 < 
PLATFORM_MAX_CPUS_PER_CLUSTER
;áff0++) {

212 
mpidr
 = 
aff1
 << 
MPIDR_AFF1_SHIFT
;

213 
mpidr
 |
aff0
 << 
MPIDR_AFF0_SHIFT
;

215 i‡(
	`mt_pwrc_ªad_psy§
(
mpidr
Ë!
PSYSR_INVALID
) {

220 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

221 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 =

222 
PSCI_AFF_PRESENT
;

224 
aff_°©e
 = 
PSCI_AFF_ABSENT
;

227 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

228 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 = 
PSCI_AFF_PRESENT
;

230 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
chûd
 = 
AFFINST_INVAL
;

231 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
°©e
 = 
aff_°©e
;

232 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
siblög
 =

233 
aff0_off£t
 + 1;

236 
aff0_off£t
++;

240 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
 - 1].
siblög
 = 
AFFINST_INVAL
;

244 
mt_aff1_t›ﬁogy_m≠
[
aff1
 - 1].
siblög
 = 
AFFINST_INVAL
;

246 
t›ﬁogy_£tup_d⁄e
 = 1;

248 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/platform.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 #O¿
MTK_∂©f‹m
, 
the
 
TSP
 
ˇn
 
execuã
 
eôhî
 
‰om
 
Tru°ed
 
SRAM
 
‹
 Tru°ed 
DRAM
.

25 #Tru°ed 
SRAM
 
is
 
the
 .

26 
	gTSP_RAM_LOCATION
 :
t§am


28 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
t§am
)

29 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZRAM


30 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
tdøm
)

31 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZDRAM


33 
$
(
îr‹
 "Unsupported TSP_RAM_LOCATION value")

34 
ídif


36 #Pro˚s†
TSP_RAM_LOCATION_ID
 
Êag


37 
$
(
evÆ
 
	$$
(
ˇŒ
 
add_deföe
,
TSP_RAM_LOCATION_ID
))

39 
PLAT_INCLUDES
 :-
I∂©
/
mt6752
/
ö˛ude
/ -I∂©/mt6752/ -I∂©/mt6752/
drivîs
/
log
 -I∂©/mt6752/drivîs/
timî
/ -I∂©/mt6752/drivîs/
l2c
/

42 
PLAT_BL_COMMON_SOURCES
 :
drivîs
/
io
/
io_fù
.
c
 \

43 
drivîs
/
io
/
io_memm≠
.
c
 \

44 
drivîs
/
io
/
io_£miho°ög
.
c
 \

45 
lib
/
mmio
.
c
 \

46 
lib
/
Ørch64
/
sy§eg_hñ≥rs
.
S
 \

47 
lib
/
Ørch64
/
xœt_èbÀs
.
c
 \

48 
lib
/
£miho°ög
/£miho°ög.
c
 \

49 
lib
/
£miho°ög
/
Ørch64
/
£miho°ög_ˇŒ
.
S
 \

50 
∂©
/
comm⁄
/
Ørch64
/
∂©_comm⁄
.
c
 \

51 
∂©
/
mt6752
/
∂©_io_°‹age
.
c
 \

52 
∂©
/
comm⁄
/
fiq_smp_ˇŒ
.
c


54 
BL1_SOURCES
 +
drivîs
/
¨m
/
cci400
/cci400.
c
 \

55 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

56 
∂©
/
mt6752
/
bl1_∂©_£tup
.
c
 \

57 
∂©
/
mt6752
/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

58 
∂©
/
mt6752
/
Ørch64
/
∂©_hñ≥rs
.
S


60 
BL2_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

61 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

62 
∂©
/
mt6752
/
bl2_∂©_£tup
.
c
 \

63 
∂©
/
mt6752
/
∂©_£curôy
.
c
 \

64 
∂©
/
mt6752
/
Ørch64
/
∂©f‹m_comm⁄
.
c


66 
BL31_SOURCES
 +
drivîs
/
¨m
/
gic
/
gic_v2
.
c
 \

67 
drivîs
/
¨m
/
gic
/
gic_v3
.
c
 \

68 
drivîs
/
¨m
/
gic
/
Ørch64
/
gic_v3_sy§egs
.
S
 \

69 
drivîs
/
¨m
/
cci400
/cci400.
c
 \

70 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_mp_°ack
.
S
 \

71 
∂©
/
mt6752
/
bl31_∂©_£tup
.
c
 \

72 
∂©
/
mt6752
/
∂©_gic
.
c
 \

73 
∂©
/
mt6752
/
∂©_pm
.
c
 \

74 
∂©
/
mt6752
/
∂©_t›ﬁogy
.
c
 \

75 
∂©
/
mt6752
/
scu
.
c
 \

76 
∂©
/
mt6752
/
powî_åa˚r
.
c
 \

77 
∂©
/
mt6752
/
maûbox
.
c
 \

78 
∂©
/
mt6752
/
Ørch64
/
∂©_hñ≥rs
.
S
 \

79 
∂©
/
mt6752
/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

80 
∂©
/
mt6752
/
drivîs
/
pwrc
/
∂©_pwrc
.
c
 \

81 
∂©
/
mt6752
/
drivîs
/
u¨t
/u¨t.
c
 \

82 
∂©
/
mt6752
/
drivîs
/
timî
/
mt_˝uxg±
.
c
 \

83 
∂©
/
mt6752
/
drivîs
/
l2c
/l2c.
c


85 
BL31_SOURCES
 +
∂©
/
mt6752
/
sù_svc
/
sù_svc_comm⁄
.
c
 \

86 
∂©
/
mt6752
/
sù_svc
/
sù_svc_£tup
.
c
 \

87 
∂©
/
mt6752
/
drivîs
/
log
/log.
c


89 
	`i„q
 (
$
{
RESET_TO_BL31
}, 1)

90 
	gBL31_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

91 
∂©
/
mt6752
/
∂©_£curôy
.
c


92 
ídif


94 
i„q
 (
$
{
SPD
}, 
tba£
)

95 
	gBL31_SOURCES
 +
∂©
/
mt6752
/
∂©_tba£
.
c


96 
ídif


98 #Fœg 
u£d
 
by
 
the
 
MTK_∂©f‹m
 
p‹t
 
to
 
dëîmöe
Åhê
vîsi⁄
 
of
 
ARM
 
GIC
 
¨chôe˘uª


99 #tÿ
u£
 
öãºu±
 
m™agemít
 
ö
 
EL3
.

100 
MT_GIC_ARCH
 := 2

101 
$
(
evÆ
 $(
ˇŒ
 
add_deföe
,
MT_GIC_ARCH
))

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/power_tracer.c

1 
	~<¨ch.h
>

2 
	~<powî_åa˚r.h
>

3 
	~<°dio.h
>

6 
	#åa˚_log
(...Ë
	`¥ötf
("psci: " 
__VA_ARGS__
)

	)

8 
	#åa˚_log
(...)

	)

11 
	$åa˚_powî_Êow
(
mpidr
, 
mode
) {

12 
mode
) {

13 
CPU_UP
:

14 
	`åa˚_log
("core %d:%d ON\n",

15 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

16 (
mpidr
 & 
MPIDR_CPU_MASK
));

18 
CPU_DOWN
:

19 
	`åa˚_log
("core %d:%d OFF\n",

20 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

21 (
mpidr
 & 
MPIDR_CPU_MASK
));

23 
CPU_SUSPEND
:

24 
	`åa˚_log
("core %d:%d SUSPEND\n",

25 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

26 (
mpidr
 & 
MPIDR_CPU_MASK
));

28 
CLUSTER_UP
:

29 
	`åa˚_log
("˛u°î %d ON\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

31 
CLUSTER_DOWN
:

32 
	`åa˚_log
("˛u°î %d OFF\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

34 
CLUSTER_SUSPEND
:

35 
	`åa˚_log
("˛u°î %d SUSPEND\n", (
mpidr
 & 
MPIDR_CPU_MASK
));

38 
	`åa˚_log
("unknownÖower mode\n");

41 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/scu.c

1 
	~<¨ch.h
>

2 
	~<∂©f‹m_def.h
>

3 
	~<mmio.h
>

5 
	$dißbÀ_scu
(
mpidr
) {

6 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

7 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË| 
ACINACTM
);

8 
	}
}

10 
	$íabÀ_scu
(
mpidr
) {

11 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

12 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË& ~
ACINACTM
);

13 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/sip_svc/sip_private.h

38 #i‚de‡
__SIP_PRIVATE_H__


39 
	#__SIP_PRIVATE_H__


	)

41 
	~<¨ch.h
>

42 
	~<bakîy_lock.h
>

48 
uöt64_t
 
sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

49 
uöt64_t
 
x1
,

50 
uöt64_t
 
x2
,

51 
uöt64_t
 
x3
,

52 
uöt64_t
 
x4
,

53 *
cookõ
,

54 *
h™dÀ
,

55 
uöt64_t
 
Êags
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/sip_svc/sip_svc_common.c

38 
	~<¨ch.h
>

39 
	~<¨ch_hñ≥rs.h
>

40 
	~<as£π.h
>

41 
	~<ru¡ime_svc.h
>

42 
	~<debug.h
>

43 
	~<sù_svc.h
>

44 
	~<sù_îr‹.h
>

45 
	~<∂©f‹m.h
>

46 
	~<mmio.h
>

47 
	~"sù_¥iv©e.h
"

48 
	~"l2c.h
"

53 
	skî√l_öfo
 {

54 
uöt64_t
 
	mpc
;

55 
uöt64_t
 
	mr0
;

56 
uöt64_t
 
	mr1
;

59 
kî√l_öfo
 
	gk_öfo
;

61 
	$ßve_kî√l_öfo
(
uöt64_t
 
pc
, uöt64_à
r0
, uöt64_à
r1
)

63 
k_öfo
.
pc
=pc;

64 
k_öfo
.
r0
=r0;

65 
k_öfo
.
r1
=r1;

66 
	}
}

68 
uöt64_t
 
	$gë_kî√l_öfo_pc
()

70  
k_öfo
.
pc
;

71 
	}
}

73 
uöt64_t
 
	$gë_kî√l_öfo_r0
()

75  
k_öfo
.
r0
;

76 
	}
}

78 
uöt64_t
 
	$gë_kî√l_öfo_r1
()

80  
k_öfo
.
r1
;

81 
	}
}

83 
bl31_¥ï¨e_k64_íåy
();

84 
ñ3_exô
();

90 
uöt64_t
 
	gmcusys_wrôe_cou¡
 = 0;

91 
uöt64_t
 
	$sù_mcusys_wrôe
(
ªg_addr
, 
ªg_vÆue
)

93 if((
ªg_addr
 & 0xFFFF0000Ë!(
MCUCFG_BASE
 & 0xFFFF0000))

94  
SIP_SVC_E_INVALID_R™ge
;

97 if(–
MP0_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP0_MISC_CONFIG9
 ) ||

98 –
MP1_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP1_MISC_CONFIG9
 )) {

99  
SIP_SVC_E_PERMISSION_DENY
;

102 
	`mmio_wrôe_32
(
ªg_addr
, 
ªg_vÆue
);

103 
	`dsb
();

105 
mcusys_wrôe_cou¡
++;

107  
SIP_SVC_E_SUCCESS
;

108 
	}
}

113 
uöt64_t
 
	$sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

114 
uöt64_t
 
x1
,

115 
uöt64_t
 
x2
,

116 
uöt64_t
 
x3
,

117 
uöt64_t
 
x4
,

118 *
cookõ
,

119 *
h™dÀ
,

120 
uöt64_t
 
Êags
)

122 
uöt64_t
 
rc
;

123 
uöt32_t
 
ns
;

124 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

127 
ns
 = 
	`is_ˇŒî_n⁄_£cuª
(
Êags
);

133 
smc_fid
) {

134 
MTK_SIP_TBASE_HWUID_AARCH32
:

136 i‡(
ns
)

137 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

138 
	`SMC_RET4
(
h™dÀ
, 
ãórg
->
hwuid
[0],Åeearg->hwuid[1],

139 
ãórg
->
hwuid
[2],Åeearg->hwuid[3]);

142 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH32
:

143 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH64
:

144 
rc
 = 
	`sù_mcusys_wrôe
(
x1
, 
x2
);

146 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH32
:

147 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH64
:

148 
rc
 = 
mcusys_wrôe_cou¡
;

150 
MTK_SIP_KERNEL_TMP_AARCH32
:

151 
	`¥ötf
("save kernel info\n");

152 
	`ßve_kî√l_öfo
(
x1
, 
x2
, 
x3
);

153 
	`¥ötf
("end bl31_prepare_k64_entry...\n");

154 
	`bl31_¥ï¨e_k64_íåy
();

155 
	`¥ötf
("el3_exit\n");

156 
	`SMC_RET0
(
h™dÀ
);

158 
MTK_SIP_KERNEL_L2_SHARING_AARCH32
:

159 
MTK_SIP_KERNEL_L2_SHARING_AARCH64
:

160 
	`¥ötf
("config L2$ size\n");

161 
rc
 = 
	`swôch_L2_size
(
x1
, 
x2
, 
x3
);

162 
	`¥ötf
("config L2$ size done\n");

164 #i‡
DEBUG


165 
MTK_SIP_KERNEL_GIC_DUMP_AARCH32
:

166 
MTK_SIP_KERNEL_GIC_DUMP_AARCH64
:

167 
rc
 = 
	`mt_úq_dump_°©us
(
x1
);

170 
MTK_SIP_KERNEL_WDT_AARCH32
:

171 
MTK_SIP_KERNEL_WDT_AARCH64
:

172 
wdt_kî√l_cb_addr
 = 
x1
;

173 
	`¥ötf
("MTK_SIP_KERNEL_WDT : 0x%∞\n", 
wdt_kî√l_cb_addr
);

174 
	`¥ötf
("teearg->atf_aee_debug_buf_start : 0x%llx \n",

175 
ãórg
->
©f_´e_debug_buf_°¨t
);

176 
rc
 = 
ãórg
->
©f_´e_debug_buf_°¨t
;

179 
rc
 = 
SMC_UNK
;

180 
	`WARN
("Unim∂emíãd SIP CÆl: 0x%x \n", 
smc_fid
);

183 
	`SMC_RET1
(
h™dÀ
, 
rc
);

184 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/sip_svc/sip_svc_setup.c

38 
	~<debug.h
>

39 
	~<ru¡ime_svc.h
>

40 
	~<sù_svc.h
>

41 
	~<°döt.h
>

42 
	~<uuid.h
>

43 
	~"sù_¥iv©e.h
"

46 
DEFINE_SVC_UUID
(
mtk_sù_svc_uid
,

52 
öt32_t
 
	$sù_svc_£tup
()

59 
	}
}

65 
uöt64_t
 
	$sù_svc_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

66 
uöt64_t
 
x1
,

67 
uöt64_t
 
x2
,

68 
uöt64_t
 
x3
,

69 
uöt64_t
 
x4
,

70 *
cookõ
,

71 *
h™dÀ
,

72 
uöt64_t
 
Êags
)

77 i‡(
	`is_sù_fid
(
smc_fid
)) {

78  
	`sù_smc_h™dÀr
(
smc_fid
, 
x1
, 
x2
, 
x3
, 
x4
, 
cookõ
,

79 
h™dÀ
, 
Êags
);

82 
smc_fid
) {

83 
MTK_SIP_SVC_CALL_COUNT
:

88 
	`SMC_RET1
(
h™dÀ
, 
MTK_SIP_SVC_NUM_CALLS
);

90 
MTK_SIP_SVC_UID
:

92 
	`SMC_UUID_RET
(
h™dÀ
, 
mtk_sù_svc_uid
);

94 
MTK_SIP_SVC_VERSION
:

96 
	`SMC_RET2
(
h™dÀ
, 
MTK_SIP_VERSION_MAJOR
, 
MTK_SIP_VERSION_MINOR
);

99 
	`WARN
("Unim∂emíãd SIP Sîvi˚ CÆl: 0x%x \n", 
smc_fid
);

100 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

102 
	}
}

105 
DECLARE_RT_SVC
(

106 
sù_svc
,

108 
OEN_SIP_START
,

109 
OEN_SIP_END
,

110 
SMC_TYPE_FAST
,

111 
sù_svc_£tup
,

112 
sù_svc_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/aarch64/plat_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<bl_comm⁄.h
>

34 
	~<gic_v2.h
>

35 
	~"../drivîs/pwrc/∂©_pwrc.h
"

36 
	~"../∂©_def.h
"

38 .
globl
 
	g∂©f‹m_gë_íåypoöt


39 .
globl
 
	g∂©_£c⁄d¨y_cﬁd_boŸ_£tup


40 .
globl
 
	g∂©f‹m_mem_öô


41 .
globl
 
	g∂©_ªp‹t_ex˚±i⁄


43 .
ma¸o
 
mt_choo£_gicmm≠
 
	g∑øm1
, 
	g∑øm2
, 
	gx_tmp
, 
	gw_tmp
, 
ªs


44 
	gldr
 \
	gx_tmp
, =
VE_SYSREGS_BASE
 + 
V2M_SYS_ID


45 
ldr
 \
w_tmp
, [\
x_tmp
]

46 
	gubfx
 \
	gw_tmp
, \w_tmp, #SYS_ID_BLD_SHIFT, #SYS_ID_BLD_LENGTH

47 
	gcmp
 \
	gw_tmp
, #BLD_GIC_VE_MMAP

48 
	gc£l
 \
	gªs
, \
	g∑øm1
, \
	g∑øm2
, 
	geq


49 .
ídm


62 
func
 
∂©_£c⁄d¨y_cﬁd_boŸ_£tup


71 
mrs
 
	gx0
, 
mpidr_ñ1


72 
ldr
 
	gx1
, =
PWRC_BASE


73 
°r
 
w0
, [
x1
, #PPOFFR_OFF]

79 
ldr
 
	gx0
, =
VE_GICC_BASE


80 
ldr
 
x1
, =
BASE_GICC_BASE


81 
mt_choo£_gicmm≠
 
x0
, 
	gx1
, 
	gx2
, 
	gw2
, 
x1


82 
mov
 
	gw0
, #(
	gIRQ_BYP_DIS_GRP1
 | 
	gFIQ_BYP_DIS_GRP1
)

83 
‹r
 
	gw0
, w0, #(
	gIRQ_BYP_DIS_GRP0
 | 
	gFIQ_BYP_DIS_GRP0
)

84 
°r
 
	gw0
, [
x1
, #GICC_CTLR]

92 
dsb
 
sy


93 
wfi


94 
	gcb_∑nic
:

95 
b
 
cb_∑nic


118 
func
 
∂©f‹m_gë_íåypoöt


119 
mov
 
x9
, 
x30


125 
ldr
 
	gx1
, =
fú°_boŸ


126 
ldr
 
w2
, [
x1
]

127 
cmp
 
	gw2
, #0

128 
beq
 
w¨m_ª£t


129 
°r
 
	gwzr
, [
x1
]

130 
mov
 
	gx0
, #0

131 
b
 
exô


132 
	gw¨m_ª£t
:

140 
ldr
 
x10
, =
MBOX_OFF


141 
bl
 
∂©f‹m_gë_c‹e_pos


142 
l¶
 
x0
, 
	gx0
, #CACHE_WRITEBACK_SHIFT

143 
ldr
 
	gx0
, [
x10
, 
x0
]

144 
cbz
 
	gx0
, 
_∑nic


145 
	gexô
:

146 
ªt
 
x9


147 
_∑nic
: 
b
 _panic

161 
func
 
∂©f‹m_mem_öô


162 
ldr
 
x0
, =
MBOX_OFF


163 
mov
 
w1
, #PLATFORM_CORE_COUNT

164 
	glo›
:

165 
°r
 
xzr
, [
x0
], #CACHE_WRITEBACK_GRANULE

166 
subs
 
	gw1
, w1, #1

167 
	gb
.
gt
 
lo›


168 
ªt


178 
func
 
∂©_ªp‹t_ex˚±i⁄


179 
mrs
 
	gx1
, 
CuºítEl


180 
l§
 
	gx1
, x1, #MODE_EL_SHIFT

181 
l¶
 
	gx1
, x1, #SYS_LED_EL_SHIFT

182 
l¶
 
	gx0
, x0, #SYS_LED_EC_SHIFT

183 
mov
 
	gx2
, #(
	gSECURE
 << 
	gSYS_LED_SS_SHIFT
)

184 
‹r
 
	gx0
, x0, 
x2


185 
‹r
 
	gx0
, x0, 
x1


186 
mov
 
	gx1
, #VE_SYSREGS_BASE

187 
add
 
	gx1
, x1, #V2M_SYS_LED

188 
°r
 
	gw0
, [
x1
]

189 
	gªt


191 .
d©a


192 
	gfú°_boŸ
:

195 .
globl
 
ªad_l2a˘Ã


196 
func
 
ªad_l2a˘Ã


197 
dsb
 
sy


198 
MRS
 
x0
, 
S3_1_C15_C0_0


199 
dsb
 
sy


200 
isb


201 
	gªt


203 .
globl
 
wrôe_l2a˘Ã


204 
func
 
wrôe_l2a˘Ã


205 
dsb
 
sy


206 
MSR
 
	gS3_1_C15_C0_0
, 
x0


207 
isb


208 
dsb
 
sy


209 
	gªt


211 .
globl
 
ªad_l2e˘Ã


212 
func
 
ªad_l2e˘Ã


213 
MRS
 
	gx0
, 
S3_1_C11_C0_3


214 
dsb
 
sy


215 
isb


216 
	gªt


218 .
globl
 
wrôe_l2e˘Ã


219 
func
 
wrôe_l2e˘Ã


220 
dsb
 
sy


221 
MSR
 
	gS3_1_C11_C0_3
, 
x0


222 
isb


223 
dsb
 
sy


224 
	gªt


226 .
globl
 
ªad_˝ua˘Ã


227 
func
 
ªad_˝ua˘Ã


228 
dsb
 
sy


229 
MRS
 
	gx0
, 
S3_1_C15_C2_0


230 
dsb
 
sy


231 
isb


232 
	gªt


234 .
globl
 
wrôe_˝ua˘Ã


235 
func
 
wrôe_˝ua˘Ã


236 
dsb
 
sy


237 
MSR
 
	gS3_1_C15_C2_0
, 
x0


238 
isb


239 
dsb
 
sy


240 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/aarch64/plat_helpers.h

1 #i‚de‡
PLAT_HELPERS_H


2 
	#PLAT_HELPERS_H


	)

4 
ªad_l2a˘Ã
();

5 
ªad_l2e˘Ã
();

7 
wrôe_l2a˘Ã
();

8 
wrôe_l2e˘Ã
();

10 
ªad_˝ua˘Ã
();

11 
wrôe_˝ua˘Ã
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/aarch64/platform_common.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<cci400.h
>

36 
	~<debug.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<xœt_èbÀs.h
>

40 
	~"../∂©_def.h
"

51 
	gmt_c⁄fig
[
CONFIG_LIMIT
];

59 c⁄° 
mm≠_ªgi⁄_t
 
	gmt_mm≠
[] = {

61 {(
TZRAM_BASE
 & 
PAGE_ADDR_MASK
),

62 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
), 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
},

68 { 
MTK_DEVICE_BASE
, 
MTK_DEVICE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

71 {(
MT_DEV_BASE
 & 
PAGE_ADDR_MASK
),
MT_DEV_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

74 {
TRNG_BASE_ADDR
, 
TRNG_BASE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

75 {
TRNG_PDN_BASE_ADDR
, 
TRNG_PDN_BASE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

78 { 
MTK_WDT_BASE
, 
MTK_WDT_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

91 
	#DEFINE_CONFIGURE_MMU_EL
(
_ñ
) \

92 
mt_c⁄figuª_mmu_ñ
##
	`_ñ
(
tŸÆ_ba£
, \

93 
tŸÆ_size
, \

94 
ro_°¨t
, \

95 
ro_limô
, \

96 
coh_°¨t
, \

97 
coh_limô
) \

99 
	`mm≠_add_ªgi⁄
(
tŸÆ_ba£
, \

100 
tŸÆ_size
, \

101 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
); \

102 
	`mm≠_add_ªgi⁄
(
ro_°¨t
, 
ro_limô
 -Ño_start, \

103 
MT_MEMORY
 | 
MT_RO
 | 
MT_SECURE
); \

104 
	`mm≠_add_ªgi⁄
(
coh_°¨t
, 
coh_limô
 - coh_start, \

105 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
); \

106 
	`mm≠_add
(
mt_mm≠
); \

107 
	`öô_xœt_èbÀs
(); \

109 
íabÀ_mmu_ñ
##
	`_ñ
(); \

110 }

	)

113 
	$DEFINE_CONFIGURE_MMU_EL
(1)

114 
	$DEFINE_CONFIGURE_MMU_EL
(3)

117 
	$mt_gë_cfgv¨
(
v¨_id
)

119 
	`as£π
(
v¨_id
 < 
CONFIG_LIMIT
);

120  
mt_c⁄fig
[
v¨_id
];

121 
	}
}

130 
	$mt_c⁄fig_£tup
()

132 
ªv
, 
hbi
, 
bld
, 
¨ch
, 
sys_id
, 
midr_≤
;

134 
sys_id
 = 
	`mmio_ªad_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_ID
);

135 
ªv
 = (
sys_id
 >> 
SYS_ID_REV_SHIFT
Ë& 
SYS_ID_REV_MASK
;

136 
hbi
 = (
sys_id
 >> 
SYS_ID_HBI_SHIFT
Ë& 
SYS_ID_HBI_MASK
;

137 
bld
 = (
sys_id
 >> 
SYS_ID_BLD_SHIFT
Ë& 
SYS_ID_BLD_MASK
;

138 
¨ch
 = (
sys_id
 >> 
SYS_ID_ARCH_SHIFT
Ë& 
SYS_ID_ARCH_MASK
;

140 
¨ch
 = 
ARCH_MODEL
;

141 
bld
 = 
BLD_GIC_A53A57_MMAP
;

142 
hbi
 = 
HBI_MT_BASE
;

144 i‡((
ªv
 !
REV_MT
Ë|| (
¨ch
 !
ARCH_MODEL
))

145 
	`∑nic
();

151 
bld
) {

153 
BLD_GIC_VE_MMAP
:

154 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
VE_GICD_BASE
;

155 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
VE_GICC_BASE
;

156 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
VE_GICH_BASE
;

157 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
VE_GICV_BASE
;

160 
BLD_GIC_A53A57_MMAP
:

161 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
BASE_GICD_BASE
;

162 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
BASE_GICC_BASE
;

163 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
BASE_GICH_BASE
;

164 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
BASE_GICV_BASE
;

167 
	`as£π
(0);

174 
hbi
) {

175 
HBI_FOUNDATION
:

176 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

177 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 1;

178 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

179 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 0;

180 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 0;

181 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

183 
HBI_MT_BASE
:

184 
midr_≤
 = (
	`ªad_midr
(Ë>> 
MIDR_PN_SHIFT
Ë& 
MIDR_PN_MASK
;

185 i‡((
midr_≤
 =
MIDR_PN_A57
Ë|| (midr_≤ =
MIDR_PN_A53
))

186 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 1;

188 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

190 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

191 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 2;

192 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 1;

193 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 1;

194 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

197 
	`as£π
(0);

201 
	}
}

203 
	$∂©_gë_ns_image_íåypoöt
()

206  
BL33_START_ADDRESS
;

208 
	}
}

210 
uöt64_t
 
	$∂©_gë_sys˙t_‰eq
()

212 
uöt64_t
 
cou¡î_ba£_‰equícy
;

216 
cou¡î_ba£_‰equícy
 = 13000000;

219 
	`as£π
(
cou¡î_ba£_‰equícy
 != 0);

221  
cou¡î_ba£_‰equícy
;

222 
	}
}

224 
	$mt_cci_£tup
()

226 
cci_£tup
;

233 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

234 i‡(
cci_£tup
)

235 
	`cci_íabÀ_cohîícy
(
	`ªad_mpidr
());

236 
	}
}

242 
	$mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

244 
	`SET_SECURITY_STATE
(
bl32_ï_öfo
->
h
.
©å
, 
SECURE
);

249 
bl32_ï_öfo
->
•§
 = 0;

250 
	}
}

255 
	$mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

257 
ñ_°©us
;

258 
mode
;

259 
rw
, 
ì
;

260 
daif
;

264 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

265 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

267 i‡(
ñ_°©us
)

268 
mode
 = 
MODE_EL2
;

270 
mode
 = 
MODE_EL1
;

305 
rw
 = 0;

307 
rw
 = 1;

309 i‡(0 =
rw
) {

310 
	`¥ötf
("LK is AArch32\n");

311 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

312 
mode
 = 
MODE32_svc
;

313 
ì
 = 0;

318 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

320 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

327 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)
BOOT_ARGUMENT_LOCATION
;

328 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

330 
	`¥ötf
("LK is AArch64\n");

331 
bl33_ï_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

333 
	`SET_SECURITY_STATE
(
bl33_ï_öfo
->
h
.
©å
, 
NON_SECURE
);

334 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/bl1_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<mmio.h
>

36 
	~<∂©f‹m.h
>

37 
	~<∂©f‹m_def.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__COHERENT_RAM_START__
;

46 
__COHERENT_RAM_END__
;

48 
__BL1_RAM_START__
;

49 
__BL1_RAM_END__
;

58 
	#BL1_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

59 
	#BL1_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

61 
	#BL1_RAM_BASE
 ()(&
__BL1_RAM_START__
)

	)

62 
	#BL1_RAM_LIMIT
 ()(&
__BL1_RAM_END__
)

	)

66 
memöfo_t
 
	gbl1_tzøm_œyout
;

68 
memöfo_t
 *
	$bl1_∂©_£c_mem_œyout
()

70  &
bl1_tzøm_œyout
;

71 
	}
}

76 
	$bl1_óæy_∂©f‹m_£tup
()

78 c⁄° 
bl1_øm_ba£
 = 
BL1_RAM_BASE
;

79 c⁄° 
bl1_øm_limô
 = 
BL1_RAM_LIMIT
;

80 c⁄° 
tzøm_limô
 = 
TZRAM_BASE
 + 
TZRAM_SIZE
;

83 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

93 
bl1_tzøm_œyout
.
tŸÆ_ba£
 = 
TZRAM_BASE
;

94 
bl1_tzøm_œyout
.
tŸÆ_size
 = 
TZRAM_SIZE
;

96 i‡(
bl1_øm_limô
 =
tzøm_limô
) {

98 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
TZRAM_BASE
;

99 
bl1_tzøm_œyout
.
‰ì_size
 = 
bl1_øm_ba£
 - 
TZRAM_BASE
;

102 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
bl1_øm_limô
;

103 
bl1_tzøm_œyout
.
‰ì_size
 =

104 
tzøm_limô
 - 
bl1_øm_limô
;

108 
	`mt_c⁄fig_£tup
();

109 
	}
}

116 
	$bl1_∂©f‹m_£tup
()

119 
	`mt_io_£tup
();

120 
	}
}

128 
	$bl1_∂©_¨ch_£tup
()

130 
	`mt_cci_£tup
();

132 
	`mt_c⁄figuª_mmu_ñ3
(
bl1_tzøm_œyout
.
tŸÆ_ba£
,

133 
bl1_tzøm_œyout
.
tŸÆ_size
,

134 
TZROM_BASE
,

135 
TZROM_BASE
 + 
TZROM_SIZE
,

136 
BL1_COHERENT_RAM_BASE
,

137 
BL1_COHERENT_RAM_LIMIT
);

138 
	}
}

147 
	$bl1_∂©_£t_bl2_ï_öfo
(
image_öfo_t
 *
bl2_image
,

148 
íåy_poöt_öfo_t
 *
bl2_ï
)

150 
	`SET_SECURITY_STATE
(
bl2_ï
->
h
.
©å
, 
SECURE
);

151 
bl2_ï
->
•§
 = 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

152 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/bl2_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<∂©f‹m.h
>

36 
	~<∂©f‹m_def.h
>

37 
	~<°rög.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__RO_START__
;

46 
__RO_END__
;

48 
__COHERENT_RAM_START__
;

49 
__COHERENT_RAM_END__
;

57 
	#BL2_RO_BASE
 ()(&
__RO_START__
)

	)

58 
	#BL2_RO_LIMIT
 ()(&
__RO_END__
)

	)

67 
	#BL2_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

68 
	#BL2_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

71 **
bl2_ñ_ch™ge_mem_±r
;

74 
memöfo_t
 
bl2_tzøm_œyout


75 
__©åibuã__
 ((
Æig√d
(
PLATFORM_CACHE_LINE_SIZE
),

76 
£˘i⁄
("tzfw_coherent_mem")));

82 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

83 
íåy_poöt_öfo_t
 *
	gbl31_ï_öfo
;

85 
memöfo_t
 *
	$bl2_∂©_£c_mem_œyout
()

87  &
bl2_tzøm_œyout
;

88 
	}
}

99 
bl31_∑øms_t
 *
	$bl2_∂©_gë_bl31_∑øms
()

101 
bl2_to_bl31_∑øms_mem_t
 *
bl31_∑øms_mem
;

103 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


108 
	`as£π
(
BL32_BASE
 > 
PARAMS_BASE
 + (
bl2_to_bl31_∑øms_mem_t
));

115 
bl31_∑øms_mem
 = (
bl2_to_bl31_∑øms_mem_t
 *)
PARAMS_BASE
;

116 
	`mem£t
((*)
PARAMS_BASE
, 0, (
bl2_to_bl31_∑øms_mem_t
));

119 
bl2_to_bl31_∑øms
 = &
bl31_∑øms_mem
->
bl31_∑øms
;

120 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
, 
PARAM_BL31
, 
VERSION_1
, 0);

123 
bl31_ï_öfo
 = &
bl31_∑øms_mem
->bl31_ep_info;

124 
bl2_to_bl31_∑øms
->
bl31_image_öfo
 = &
bl31_∑øms_mem
->bl31_image_info;

125 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl31_image_öfo
, 
PARAM_IMAGE_BINARY
,

126 
VERSION_1
, 0);

129 i‡(
BL32_BASE
) {

130 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
 =

131 &
bl31_∑øms_mem
->
bl32_ï_öfo
;

132 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_ï_öfo
,

133 
PARAM_EP
, 
VERSION_1
, 0);

134 
bl2_to_bl31_∑øms
->
bl32_image_öfo
 =

135 &
bl31_∑øms_mem
->
bl32_image_öfo
;

136 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_image_öfo
,

137 
PARAM_IMAGE_BINARY
,

138 
VERSION_1
, 0);

142 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 = &
bl31_∑øms_mem
->bl33_ep_info;

143 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_ï_öfo
,

144 
PARAM_EP
, 
VERSION_1
, 0);

145 
bl2_to_bl31_∑øms
->
bl33_image_öfo
 = &
bl31_∑øms_mem
->bl33_image_info;

146 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_image_öfo
, 
PARAM_IMAGE_BINARY
,

147 
VERSION_1
, 0);

149  
bl2_to_bl31_∑øms
;

150 
	}
}

157 
íåy_poöt_öfo
 *
	$bl2_∂©_gë_bl31_ï_öfo
()

159 #i‡
DEBUG


160 
bl31_ï_öfo
->
¨gs
.
¨g1
 = 
MT_BL31_PLAT_PARAM_VAL
;

162  
bl31_ï_öfo
;

163 
	}
}

171 
	$bl2_óæy_∂©f‹m_£tup
(
memöfo_t
 *
mem_œyout
)

174 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

177 
bl2_tzøm_œyout
.
tŸÆ_ba£
 = 
mem_œyout
->total_base;

178 
bl2_tzøm_œyout
.
tŸÆ_size
 = 
mem_œyout
->total_size;

179 
bl2_tzøm_œyout
.
‰ì_ba£
 = 
mem_œyout
->free_base;

180 
bl2_tzøm_œyout
.
‰ì_size
 = 
mem_œyout
->free_size;

181 
bl2_tzøm_œyout
.
©å
 = 
mem_œyout
->attr;

182 
bl2_tzøm_œyout
.
√xt
 = 0;

185 
	`mt_c⁄fig_£tup
();

186 
	}
}

192 
	$bl2_∂©f‹m_£tup
()

200 
	`mt_£curôy_£tup
();

203 
	`mt_io_£tup
();

204 
	}
}

207 
	$bl2_∂©_Êush_bl31_∑øms
()

209 
	`Êush_dˇche_ønge
(()
PARAMS_BASE
, \

210 (
bl2_to_bl31_∑øms_mem_t
));

211 
	}
}

218 
	$bl2_∂©_¨ch_£tup
()

220 
	`mt_c⁄figuª_mmu_ñ1
(
bl2_tzøm_œyout
.
tŸÆ_ba£
,

221 
bl2_tzøm_œyout
.
tŸÆ_size
,

222 
BL2_RO_BASE
,

223 
BL2_RO_LIMIT
,

224 
BL2_COHERENT_RAM_BASE
,

225 
BL2_COHERENT_RAM_LIMIT
);

226 
	}
}

234 
	$bl2_∂©_£t_bl31_ï_öfo
(
image_öfo_t
 *
bl31_image_öfo
,

235 
íåy_poöt_öfo_t
 *
bl31_ï_öfo
)

237 
	`SET_SECURITY_STATE
(
bl31_ï_öfo
->
h
.
©å
, 
SECURE
);

238 
bl31_ï_öfo
->
•§
 = 
	`SPSR_64
(
MODE_EL3
, 
MODE_SP_ELX
,

239 
DISABLE_ALL_EXCEPTIONS
);

240 
	}
}

249 
	$bl2_∂©_£t_bl32_ï_öfo
(
image_öfo_t
 *
bl32_image_öfo
,

250 
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

252 
	`mt_£t_bl32_ï_öfo
(
bl32_ï_öfo
);

253 
	}
}

261 
	$bl2_∂©_£t_bl33_ï_öfo
(
image_öfo_t
 *
image
,

262 
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

264 
	`mt_£t_bl33_ï_öfo
(
bl33_ï_öfo
);

265 
	}
}

271 
	$bl2_∂©_gë_bl32_memöfo
(
memöfo_t
 *
bl32_memöfo
)

276 
bl32_memöfo
->
tŸÆ_ba£
 = 
BL32_BASE
;

277 
bl32_memöfo
->
‰ì_ba£
 = 
BL32_BASE
;

278 
bl32_memöfo
->
tŸÆ_size
 =

279 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

280 
bl32_memöfo
->
‰ì_size
 =

281 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

282 
bl32_memöfo
->
©å
 = 
BOT_LOAD
;

283 
bl32_memöfo
->
√xt
 = 0;

284 
	}
}

290 
	$bl2_∂©_gë_bl33_memöfo
(
memöfo_t
 *
bl33_memöfo
)

292 
bl33_memöfo
->
tŸÆ_ba£
 = 
DRAM_BASE
;

293 
bl33_memöfo
->
tŸÆ_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

294 
bl33_memöfo
->
‰ì_ba£
 = 
DRAM_BASE
;

295 
bl33_memöfo
->
‰ì_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

296 
bl33_memöfo
->
©å
 = 0;

297 
bl33_memöfo
->
©å
 = 0;

298 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/bl31_plat_setup.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<c⁄sﬁe.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°ddef.h
>

40 
	~"drivîs/pwrc/∂©_pwrc.h
"

41 
	~"∂©_def.h
"

42 
	~"∂©_¥iv©e.h
"

43 
	~<°dio.h
>

44 
	~<°rög.h
>

45 
	~<xœt_èbÀs.h
>

46 
	~"l2c.h
"

47 
	~"mt_˝uxg±.h
"

52 
bl31_⁄_íåypoöt
();

54 
__RO_START__
;

55 
__RO_END__
;

57 
__COHERENT_RAM_START__
;

58 
__COHERENT_RAM_END__
;

66 
	#BL31_RO_BASE
 ()(&
__RO_START__
)

	)

67 
	#BL31_RO_LIMIT
 ()(&
__RO_END__
)

	)

76 
	#BL31_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

77 
	#BL31_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

80 #i‡
RESET_TO_BL31


81 
íåy_poöt_öfo_t
 
	gbl32_íåypoöt_öfo
;

82 
íåy_poöt_öfo_t
 
	gbl33_íåypoöt_öfo
;

88 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

97 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_image_ï_öfo
(
uöt32_t
 
ty≥
)

99 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

101 #i‡
RESET_TO_BL31


103 i‡(
ty≥
 =
NON_SECURE
)

104 
	`mt_gë_íåy_poöt_öfo
(
NON_SECURE
, &
bl33_íåypoöt_öfo
);

106 
	`mt_gë_íåy_poöt_öfo
(
SECURE
, &
bl32_íåypoöt_öfo
);

108 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

109 &
bl33_íåypoöt_öfo
 :

110 &
bl32_íåypoöt_öfo
;

112 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

113 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

114 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

119 i‡(
√xt_image_öfo
->
pc
)

120  
√xt_image_öfo
;

122  
NULL
;

123 
	}
}

126 
uöt64_t
 
gë_kî√l_öfo_pc
();

127 
uöt64_t
 
gë_kî√l_öfo_r0
();

128 
uöt64_t
 
gë_kî√l_öfo_r1
();

130 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_kî√l_ï_öfo
(
uöt32_t
 
ty≥
)

132 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

133 
ñ_°©us
;

134 
mode
;

136 #i‡
RESET_TO_BL31


137 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

138 &
bl33_íåypoöt_öfo
 :

139 &
bl32_íåypoöt_öfo
;

141 
	`mt_gë_íåy_poöt_öfo
(
ty≥
, 
√xt_image_öfo
);

144 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

145 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

146 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

151 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

152 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

154 i‡(
ñ_°©us
)

155 
mode
 = 
MODE_EL2
;

157 
mode
 = 
MODE_EL1
;

160 i‡(0 =
rw
) {

161 
	`¥ötf
("LK is AArch32\n");

162 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

163 
mode
 = 
MODE32_svc
;

164 
ì
 = 0;

169 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

171 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

178 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)&
∂_boŸ_¨gumít
;

179 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

183 
	`¥ötf
("Kernel is 64Bit\n");

184 
√xt_image_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

185 
√xt_image_öfo
->
pc
 = 
	`gë_kî√l_öfo_pc
();

186 
√xt_image_öfo
->
¨gs
.
¨g0
=
	`gë_kî√l_öfo_r0
();

187 
√xt_image_öfo
->
¨gs
.
¨g1
=
	`gë_kî√l_öfo_r1
();

189 
	`¥ötf
("pc=0x%llx,Ñ0=0x%llx,Ñ1=0x%llx\n",

190 
√xt_image_öfo
->
pc
,

191 
√xt_image_öfo
->
¨gs
.
¨g0
,

192 
√xt_image_öfo
->
¨gs
.
¨g1
);

195 
	`SET_SECURITY_STATE
(
√xt_image_öfo
->
h
.
©å
, 
NON_SECURE
);

199 i‡(
√xt_image_öfo
->
pc
)

200  
√xt_image_öfo
;

202  
NULL
;

203 
	}
}

217 
	$bl31_óæy_∂©f‹m_£tup
(
bl31_∑øms_t
 *
‰om_bl2
,

218 *
∂©_∑øms_‰om_bl2
)

220 
n‹mÆ_ba£
;

221 
©f_ba£
;

223 
	`c⁄fig_L2_size
();

225 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

228 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(0), ()
bl31_⁄_íåypoöt
);

230 
n‹mÆ_ba£
 = 0;

234 
©f_ba£
 = 
	`ªad_˙ç˘_ñ0
();

235 
	`©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

238 
	`c⁄sﬁe_öô
(
ãórg
->
©f_log_p‹t
);

239 
	`¥ötf
("LK bootárgument\n\r");

240 
	`¥ötf
("loˇti⁄=0x%x size=0x%x\n\r", 
BOOT_ARGUMENT_LOCATION
, 
BOOT_ARGUMENT_SIZE
);

241 
	`¥ötf
("©f_magic=0x%x\n\r", 
ãórg
->
©f_magic
);

242 
	`¥ötf
("ãe_suµ‹t=0x%x\n\r", 
ãórg
->
ãe_suµ‹t
);

243 
	`¥ötf
("ãe_íåy=0x%x\n\r", 
ãórg
->
ãe_íåy
);

244 
	`¥ötf
("ãe_boŸ_¨g_addr=0x%x\n\r", 
ãórg
->
ãe_boŸ_¨g_addr
);

245 
	`¥ötf
("©f_log_p‹t=0x%x\n\r", 
ãórg
->
©f_log_p‹t
);

246 
	`¥ötf
("©f_log_baudøã=0x%x\n\r", 
ãórg
->
©f_log_baudøã
);

247 
	`¥ötf
("©f_log_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
);

248 
	`¥ötf
("©f_log_buf_size=0x%x\n\r", 
ãórg
->
©f_log_buf_size
);

249 
	`¥ötf
("©f_´e_debug_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_°¨t
);

250 
	`¥ötf
("©f_´e_debug_buf_size=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_size
);

251 
	`¥ötf
("©f_úq_num=%d\n\r", 
ãórg
->
©f_úq_num
);

252 
	`¥ötf
("BL33_START_ADDRESS=0x%x\n\r", 
BL33_START_ADDRESS
);

255 
	`mt_c⁄fig_£tup
();

257 
	`¥ötf
("bl31_setup\n\r");

258 #i‡
RESET_TO_BL31


260 
	`as£π
(
‰om_bl2
 =
NULL
);

261 
	`as£π
(
∂©_∑øms_‰om_bl2
 =
NULL
);

262 
	`¥ötf
("RESET_TO_BL31\n\r");

278 
	`¥ötf
("not RESET_TO_BL31\n");

280 
	`as£π
(
‰om_bl2
 !
NULL
);

281 
	`as£π
(
‰om_bl2
->
h
.
ty≥
 =
PARAM_BL31
);

282 
	`as£π
(
‰om_bl2
->
h
.
vîsi⁄
 >
VERSION_1
);

284 
bl2_to_bl31_∑øms
 = 
‰om_bl2
;

285 
	`as£π
((()
∂©_∑øms_‰om_bl2
Ë=
MT_BL31_PLAT_PARAM_VAL
);

287 
	}
}

293 
	$bl31_∂©f‹m_£tup
()

298 
	`gic_£tup
();

306 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGDATA
, 0);

307 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGCTRL
,

313 
	`mmio_wrôe_32
(
SYS_CNTCTL_BASE
 + 
CNTCR_OFF
, 
	`CNTCR_FCREQ
(0Ë| 
CNTCR_EN
);

316 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

317 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

318 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

319 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

320 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

322 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) | (1 << CNTNSAR_NS_SHIFT(1));

323 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

328 
	`mt_pwrc_£tup
();

331 
	`mt_£tup_t›ﬁogy
();

332 
	}
}

338 
	$bl31_∂©_¨ch_£tup
()

340 
mpidr
 = 
	`ªad_mpidr
();

346 
	`w‹k¨ound_836870
(
mpidr
);

348 #i‡
RESET_TO_BL31


349 
	`mt_cci_£tup
();

353 
	`mmio_wrôe_32
(
CCI400_BASE
 + 
CCI_SEC_ACCESS_OFFSET
 , 0x1);

356 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

357 if(
ãórg
->
©f_log_buf_size
 !=0 ) {

358 
	`¥ötf
("mm≠át‡buf„∏: 0x%x, 0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
,

359 
ãórg
->
©f_log_buf_size
);

360 
	`mm≠_add_ªgi⁄
((
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
,

361 
MT_DEVICE
 | 
MT_RW
 | 
MT_NS
);

362 
	`¥ötf
("mmapátf buffer (force 2MBáligned): 0x%x, 0x%x\n\r",

363 (
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
);

368 
	`mm≠_add_ªgi⁄
(
TZRAM2_BASE
, ((
TZRAM2_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

369 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
);

373 
	`mt_c⁄figuª_mmu_ñ3
(
TZRAM_BASE
,

374 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

375 
BL31_RO_BASE
,

376 
BL31_RO_LIMIT
,

377 
BL31_COHERENT_RAM_BASE
,

378 
BL31_COHERENT_RAM_LIMIT
);

384 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

385 
	}
}

387 #i‡
RESET_TO_BL31


392 
	$mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

393 
íåy_poöt_öfo_t
 *
èrgë_íåy_öfo
)

395 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

396 i‡(
èrgë_£curôy
 =
NON_SECURE
) {

397 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

398 
PARAM_EP
,

399 
VERSION_1
,

405 
èrgë_íåy_öfo
->
pc
 = 
	`∂©_gë_ns_image_íåypoöt
();

407 
	`mt_£t_bl33_ï_öfo
(
èrgë_íåy_öfo
);

410 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

411 
PARAM_EP
,

412 
VERSION_1
,

415 i‡(
ãórg
->
ãe_suµ‹t
)

417 
èrgë_íåy_öfo
->
pc
 = 
ãórg
->
ãe_íåy
;

418 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

422 i‡(
BL32_BASE
 != 0) {

425 
èrgë_íåy_öfo
->
pc
 = 
BL32_BASE
;

426 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

430 
	}
}

433 
	$íabÀ_ns_ac˚ss_to_˝ue˘Ã
() {

434 
√xt_a˘Ã
;

437 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ2
();

438 
√xt_a˘Ã
 |(
ACTLR_CPUECTLR_BIT
);

439 
	`wrôe_a˘Ã_ñ2
(
√xt_a˘Ã
);

441 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ3
();

442 
√xt_a˘Ã
 |(
ACTLR_CPUECTLR_BIT
);

443 
	`wrôe_a˘Ã_ñ3
(
√xt_a˘Ã
);

449 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/bl32_plat_setup.c

31 
	~<bl_comm⁄.h
>

32 
	~<c⁄sﬁe.h
>

33 
	~<∂©f‹m.h
>

34 
	~"∂©_def.h
"

35 
	~"∂©_¥iv©e.h
"

41 
__RO_START__
;

42 
__RO_END__
;

44 
__COHERENT_RAM_START__
;

45 
__COHERENT_RAM_END__
;

53 
	#BL32_RO_BASE
 ()(&
__RO_START__
)

	)

54 
	#BL32_RO_LIMIT
 ()(&
__RO_END__
)

	)

63 
	#BL32_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

64 
	#BL32_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

69 
	$bl32_óæy_∂©f‹m_£tup
()

75 
	`c⁄sﬁe_öô
(
PL011_UART1_BASE
);

78 
	`mt_c⁄fig_£tup
();

79 
	}
}

84 
	$bl32_∂©f‹m_£tup
()

87 
	}
}

93 
	$bl32_∂©_¨ch_£tup
()

95 
	`mt_c⁄figuª_mmu_ñ1
(
BL32_RO_BASE
,

96 (
BL32_COHERENT_RAM_LIMIT
 - 
BL32_RO_BASE
),

97 
BL32_RO_BASE
,

98 
BL32_RO_LIMIT
,

99 
BL32_COHERENT_RAM_BASE
,

100 
BL32_COHERENT_RAM_LIMIT
);

101 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/l2c/l2c.c

1 
	~<∂©f‹m_def.h
>

2 
	~<¨ch.h
>

3 
	~<¨ch_hñ≥rs.h
>

4 
	~<mmio.h
>

5 
	~<sù_îr‹.h
>

6 
	~<•ölock.h
>

7 
	~<debug.h
>

8 
	~"∂©_¥iv©e.h
"

9 
	~"l2c.h
"

12 
•ölock_t
 
	gl2_sh¨e_lock
;

14 
	$c⁄fig_L2_size
()

16 
ˇche_cfg0
, 
ˇche_cfg1
;

19 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_512K
 << 
L2C_SIZE_CFG_OFF
);

20 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

21 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

22 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

24 if(((
	`gë_devöfo_wôh_ödex
(0)>>4)&0xff) == 0xc0)

27 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
);

28 
ˇche_cfg1
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

29 
ˇche_cfg1
 |(
CONFIGED_256K
 << 
L2C_SIZE_CFG_OFF
);

30 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

31 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

32 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

37 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_512K
 << 
L2C_SIZE_CFG_OFF
);

38 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

39 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

40 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

42 
	}
}

44 
uöt64_t
 
	$swôch_L2_size
(
uöt64_t
 
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
)

46 
ˇche_cfg0
, 
ˇche_cfg1
;

47 
ªt
 = 
SIP_SVC_E_SUCCESS
;

48 
l2c_sh¨e_öfo
 
sh¨e_öfo
;

50 
sh¨e_öfo
.
˛u°î_b‹row
 = (
˛u°î_b‹row_ªtu∫
 >> 16) & 0xFFFF;

51 
sh¨e_öfo
.
˛u°î_ªtu∫
 = 
˛u°î_b‹row_ªtu∫
 & 0xFFFF;

52 
sh¨e_öfo
.
sh¨e_˛u°î_num
 = share_cluster_num;

54 
	`•ö_lock
(&
l2_sh¨e_lock
);

58 
	`dis_i_d_dcsw_›_Æl
(
DCCISW
);

62 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

63 
ˇche_cfg0
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

64 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
);

65 
ˇche_cfg1
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

67 
›ti⁄
) {

68 
BORROW_L2
:

69 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

71 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

72 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

73 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

74 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

77 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

79 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

80 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

81 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

82 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

85 
ˇche_cfg1
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

86 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

87 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

88 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

92 
RETURN_L2
:

93 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

95 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

96 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

97 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

98 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

101 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

103 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

104 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

105 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

106 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

109 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

110 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

111 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

112 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

116 if((
	`gë_devöfo_wôh_ödex
(0)&0xff) == 0xc0)

118 
	`¥ötf
("switch L2$ size 5.1\n");

120 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_256K
 << 
L2C_SIZE_CFG_OFF
);

121 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

122 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

123 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

133 
ªt
 = 
SIP_SVC_E_NOT_SUPPORTED
;

138 
	`íabÀ_ˇche
();

140 
	`¥ötf
("switch L2$ size 7\n");

142 
	`•ö_u∆ock
(&
l2_sh¨e_lock
);

144  
ªt
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/l2c/l2c.h

1 #i‚de‡
_MT_L2C_H_


2 
	#_MT_L2C_H_


	)

4 
	#CONFIGED_256K
 0x1

	)

5 
	#CONFIGED_512K
 0x3

	)

6 
	#L2C_SIZE_CFG_OFF
 8

	)

7 
	#L2C_SHARE_ENABLE
 12

	)

9 
	e›ti⁄s
{

10 
	mBORROW_L2
,

11 
	mRETURN_L2
,

12 
	mBORROW_NONE


15 
	s_l2c_sh¨e_öfo
{

16 
uöt32_t
 
	msh¨e_˛u°î_num
;

17 
uöt32_t
 
	m˛u°î_b‹row
;

18 
uöt32_t
 
	m˛u°î_ªtu∫
;

19 }
	tl2c_sh¨e_öfo
;

21 
c⁄fig_L2_size
();

22 
uöt64_t
 
swôch_L2_size
(uöt64_à
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/log/log.c

38 
	~<log.h
>

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<°döt.h
>

42 
	~<∂©f‹m.h
>

43 
	~<¨ch.h
>

44 
	~<¨ch_hñ≥rs.h
>

45 
	~<mmio.h
>

46 
	~<∂©_def.h
>

48 
	#DEBUG_LOG_SERVICE
 1

	)

49 #i‡
DEBUG_LOG_SERVICE


50 
	#debug_¥öt
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

52 
	#debug_¥öt
(...Ë(()0)

	)

55 
bl31_log_£rvi˚_ªgi°î
((*
lock_gë
)(),

56 (*
log_putc
)(),

57 (*
lock_ªÀa£
)());

59 
	`bl31_log_£rvi˚_ªgi°î2
((*
lock_gë
)(),

60 (*
log_putc
)(),

61 (*
lock_ªÀa£
)());

64 
mt_log_buf_°¨t
 = 0;

65 
mt_log_buf_size
 = 0;

66 
mt_log_buf_íd
 = 0;

67 *
mt_ex˚±i⁄_buf_íd
 = 0;

68 
©f_log_˘æ_t
 *
p_©f_log_˘æ
 = 0;

69 *
±r_©f_¸ash_Êag
 = 0;

70 *
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = 0;

73 
	$mt_log_su•íd_Êush
()

75 if–
mt_log_buf_size
 != 0 )

77 
	`Êush_dˇche_ønge
((
uöt64_t
)
mt_log_buf_°¨t
, (uöt64_t)
mt_log_buf_size
);

79 
	}
}

82 
	$mt_log_lock_acquúe
()

84 
	`•ö_lock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

87 
	}
}

90 
	$mt_log_wrôe
(
c
)

92 *(*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
c
;

94 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
++;

96 if–
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 < 
mt_log_buf_íd
 )

97 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
++;

99 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

102 
	}
}

104 
	$mt_log_wrôe2
(
c
)

106 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

107 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

108 *
±r_ex_buf
 = 
NULL
;

109 *
±r_wrôe_pos
 = 
NULL
;

112 if(
±r_©f_¸ash_Êag
 =
NULL
)

115 
±r_wrôe_pos
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
löór_id
];

116 
±r_ex_buf
 = (*)((
uöçå_t
)*
±r_wrôe_pos
);

119 if((
uöçå_t
)
±r_ex_buf
 <(uöçå_t)
mt_ex˚±i⁄_buf_íd
) {

120 *
±r_ex_buf
 = 
c
;

121 (*
±r_wrôe_pos
)++;

127 
	}
}

130 
	$mt_¸ash_log_dump
(
uöt8_t
 *
¸ash_log_addr
, 
uöt32_t
 
¸ash_log_size
)

133 
uöt64_t
 
ªt
 = 0;

134 
uöt64_t
 
ªad_cou¡
;

135 
uöt64_t
 
off£t
;

136 
uöt64_t
 
pos
;

137 
uöt64_t
 
wrôe_cou¡
 = 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
;

138 
uöt8_t
 *
r_±r
 = 
NULL
;

139 
uöt8_t
 *
w_±r
 = 
NULL
;

140 
uöt8_t
 *
°¨t_±r
 = (uöt8_t*)(
uöçå_t
)(
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
);

142 if(
wrôe_cou¡
 == 0)

145 if(
wrôe_cou¡
 > 
¸ash_log_size
) {

146 
off£t
 = 
¸ash_log_size
-1;

147 
ªad_cou¡
 = 
¸ash_log_size
;

149 
off£t
 = 
wrôe_cou¡
-1;

150 
ªad_cou¡
 = 
wrôe_cou¡
;

153 
pos
 = 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
-1;

154 if(
pos
 < (
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
))

155 
pos
 = 
mt_log_buf_íd
;

156 
r_±r
 = (
uöt8_t
 *)((
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

158 
w_±r
 = 
¸ash_log_addr
 + 
off£t
;

159 
ªad_cou¡
) {

160 *(
w_±r
--Ë*(
r_±r
--);

161 if(
r_±r
 < 
°¨t_±r
)

162 
r_±r
 = (
uöt8_t
*)(
uöçå_t
)
mt_log_buf_íd
;

163 
ªad_cou¡
--;

164 
ªt
++;

167  
ªt
;

168 
	}
}

170 
	$mt_gë_uƒód_log_size
()

172 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =p_©f_log_˘æ->öfo.
©f_wrôe_pos
)

176 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 <Ö_©f_log_˘æ->öfo.
©f_wrôe_pos
)

178  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 -Ö_©f_log_˘æ->öfo.
©f_ªad_pos
);

182  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 +Ö_©f_log_˘æ->öfo.
©f_buf_size
)

183 - 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
;

184 
	}
}

187 
	$mt_log_lock_ªÀa£
()

189 
©f_buf_uƒód_size
 = 
	`mt_gë_uƒód_log_size
();

192 if(
©f_buf_uƒód_size
 >
ATF_LOG_SIGNAL_THRESHOLD_SIZE
)

199 if(
p_©f_log_˘æ
->
öfo
.
©f_ªadî_Æive
)

201 
	`mt_©f_åiggî_úq
();

202 
p_©f_log_˘æ
->
öfo
.
©f_úq_cou¡
++;

205 
p_©f_log_˘æ
->
öfo
.
©f_buf_uƒód_size
 =átf_buf_unread_size;

208 
	`•ö_u∆ock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

211 
	}
}

213 
uöt32_t
 
	$is_powî_⁄_boŸ
()

215 
uöt32_t
 
wdt_°a
, 
wdt_öãrvÆ
;

216 
wdt_°a
 = 
	`mmio_ªad_32
(
MTK_WDT_STATUS
);

217 
wdt_öãrvÆ
 = 
	`mmio_ªad_32
(
MTK_WDT_INTERVAL
);

218 
	`¥ötf
("°a=0x%x i¡=0x%x\r\n", 
wdt_°a
, 
wdt_öãrvÆ
);

222 if(
wdt_öãrvÆ
 & (1<<2))

225 
	}
}

227 
	$mt_log_£t_¸ash_Êag
()

229 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

230 
	}
}

232 
	$mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
)

234 
uöt32_t
 
dump_ªt
=0;

235 
i
;

236 
mt_log_buf_°¨t
 = 
°¨t
;

237 
mt_log_buf_size
 = 
size
;

238 
mt_log_buf_íd
 = 
°¨t
 + 
size
 - 1 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

239 
mt_ex˚±i⁄_buf_íd
 = (*)(
uöçå_t
)(
°¨t
 + 
size
 - 1 - 
´e_buf_size
);

241 
p_©f_log_˘æ
 = (
©f_log_˘æ_t
*)(
uöçå_t
)
°¨t
;

244 
±r_©f_¸ash_Êag
 = &
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
;

245 
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[0];

247 if(
	`is_powî_⁄_boŸ
()) {

248 
	`debug_¥öt
("is_power_on_boot:Årue\n");

249 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

251 
	`debug_¥öt
("is_power_on_boot: false\n");

252 if(
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 =
ATF_CRASH_MAGIC_NO
) {

253 
	`debug_¥öt
("¸ash fœg: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

254 
	`debug_¥öt
("©f_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

255 
	`debug_¥öt
("©f_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

256 
	`debug_¥öt
("dump crashlog\n");

257 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

258 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

259 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

260 
	`debug_¥öt
("©f_¸ash_log_addr: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

261 
dump_ªt
 = 
	`mt_¸ash_log_dump
((
uöt8_t
*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
, 
ATF_CRASH_LAST_LOG_SIZE
);

262 
	`debug_¥öt
("dump_ªt=%d.\n", 
dump_ªt
);

267 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0,

268 
size
-
´e_buf_size
-
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

269 
	`mem£t
((*)(
uöçå_t
)(
°¨t
+(
size
-
´e_buf_size
)), 0x0,áee_buf_size);

271 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

275 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
 = 
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

276 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
 = 
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

277 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

278 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

279 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

280 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
 = 0;

282 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

283 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

284 
	`debug_¥öt
("mt_log_£tu∞-átf_wrôe_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

285 
	`debug_¥öt
("mt_log_£tu∞-átf_ªad_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
);

286 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_lock : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
);

287 
	`debug_¥öt
("mt_log_£tu∞- mt_log_buf_íd : 0x%x\n", 
mt_log_buf_íd
);

289 
	`debug_¥öt
("mt_log_£tu∞- ATF_CRASH_LAST_LOG_SIZE : 0x%x\n", 
ATF_CRASH_LAST_LOG_SIZE
);

290 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE_PER_CPU : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE_PER_CPU
);

291 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE
);

292 
	`debug_¥öt
("mt_log_£tu∞- PLATFORM_CORE_COUNT : 0x%x\n", 
PLATFORM_CORE_COUNT
);

294 
i
=0; i<
PLATFORM_CORE_COUNT
; i++) {

295 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
i
] = (
°¨t
+(
size
-
´e_buf_size
)-
ATF_EXCEPT_BUF_SIZE
)+ i*
ATF_EXCEPT_BUF_SIZE_PER_CPU
;

296 
	`debug_¥öt
("mt_log_£tu∞-átf_ex˚±_wrôe_pos_≥r_˝u[%d]: 0x%x\n", 
i
, 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[i]);

299 if(
dump_ªt
) {

301 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

302 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

303 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
 = 
ATF_CRASH_LAST_LOG_SIZE
 + 
ATF_EXCEPT_BUF_SIZE
;

304 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

307 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_Êag : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

308 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

309 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
);

311 
	`bl31_log_£rvi˚_ªgi°î
(&
mt_log_lock_acquúe
, &
mt_log_wrôe
,

312 &
mt_log_lock_ªÀa£
);

313 
	`bl31_log_£rvi˚_ªgi°î2
(
NULL
, &
mt_log_wrôe2
, NULL);

314 
	}
}

317 
	#MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 120

	)

318 
	#TBASE_TAG
 "TBASE"

	)

319 
	gmt_log_£cuª_os_buf
[
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
+1] = {0};

320 
	gmt_log_£cuª_os_pos
 = 0;

322 
	$mt_log_£cuª_os_¥öt
(
c
)

324 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = 
c
;

327 if–
c
 == '\n' )

329 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
+1] = '\0';

330 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

331 
mt_log_£cuª_os_pos
 = 0;

335 
mt_log_£cuª_os_pos
++;

338 if–
mt_log_£cuª_os_pos
 =
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 )

340 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = '\0';

341 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

342 
mt_log_£cuª_os_pos
 = 0;

344 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/log/log.h

49 #i‚de‡
ATF_LOG_DRV_H


50 
	#ATF_LOG_DRV_H


	)

52 
	~<•ölock.h
>

53 
	~<°döt.h
>

54 
	~<∂©f‹m_def.h
>

56 
	#ATF_LOG_CTRL_BUF_SIZE
 256

	)

57 
	#ATF_LOG_SIGNAL_THRESHOLD_SIZE
 1024

	)

59 
	#ATF_CRASH_MAGIC_NO
 0xdód1abf

	)

75 
	#ATF_CRASH_LAST_LOG_SIZE
 (32*1024)

	)

76 
	#ATF_EXCEPT_BUF_SIZE_PER_CPU
 (4*1024)

	)

77 
	#ATF_EXCEPT_BUF_SIZE
 (
ATF_EXCEPT_BUF_SIZE_PER_CPU
 * 
PLATFORM_CORE_COUNT
)

	)

79 
	u©f_log_˘æ


83 
	m©f_buf_addr
;

84 
	m©f_buf_size
;

85 
	m©f_wrôe_pos
;

86 
	m©f_ªad_pos
;

87 
•ölock_t
 
	m©f_buf_lock
;

88 
	m©f_buf_uƒód_size
;

89 
	m©f_úq_cou¡
;

90 
	m©f_ªadî_Æive
;

91 
uöt64_t
 
	m©f_tŸÆ_wrôe_cou¡
;

92 
uöt64_t
 
	m©f_tŸÆ_ªad_cou¡
;

93 
	m©f_´e_dbg_buf_addr
;

94 
	m©f_´e_dbg_buf_size
;

95 
	m©f_¸ash_log_addr
;

96 
	m©f_¸ash_log_size
;

97 
	m©f_¸ash_Êag
;

98 
	m©f_ex˚±_wrôe_pos_≥r_˝u
[
PLATFORM_CORE_COUNT
];

99 } 
	möfo
;

100 
	md©a
[
ATF_LOG_CTRL_BUF_SIZE
];

101 } 
	t©f_log_˘æ_t
;

103 
mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
);

104 
mt_log_lock_acquúe
();

105 
mt_log_wrôe
(
c
);

106 
mt_log_lock_ªÀa£
();

107 
mt_log_su•íd_Êush
();

108 
mt_log_£cuª_os_¥öt
(
c
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/pwrc/plat_pwrc.c

31 
	~<bakîy_lock.h
>

32 
	~<mmio.h
>

33 
	~"../../∂©_def.h
"

34 
	~"∂©_pwrc.h
"

40 
bakîy_lock_t
 
pwrc_lock
 
__©åibuã__
 ((
£˘i⁄
("tzfw_coherent_mem")));

42 
	$mt_pwrc_gë_˝u_wkr
(
mpidr
)

44 
rc
 = 0;

45 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

46 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PSYSR_OFF
, (Ë
mpidr
);

47 
rc
 = 
	`PSYSR_WK
(
	`mmio_ªad_32
(
PWRC_BASE
 + 
PSYSR_OFF
));

48 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

49  
rc
;

50 
	}
}

52 
	$mt_pwrc_ªad_psy§
(
mpidr
)

54 
rc
 = 0;

55 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

56 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PSYSR_OFF
, (Ë
mpidr
);

57 
rc
 = 
	`mmio_ªad_32
(
PWRC_BASE
 + 
PSYSR_OFF
);

58 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

59  
rc
;

60 
	}
}

62 
	$mt_pwrc_wrôe_µ⁄r
(
mpidr
)

64 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

65 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PPONR_OFF
, (Ë
mpidr
);

66 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

67 
	}
}

69 
	$mt_pwrc_wrôe_µof‰
(
mpidr
)

71 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

72 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PPOFFR_OFF
, (Ë
mpidr
);

73 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

74 
	}
}

76 
	$mt_pwrc_£t_wí
(
mpidr
)

78 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

79 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PWKUPR_OFF
,

80 (Ë(
PWKUPR_WEN
 | 
mpidr
));

81 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

82 
	}
}

84 
	$mt_pwrc_˛r_wí
(
mpidr
)

86 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

87 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PWKUPR_OFF
,

88 (Ë
mpidr
);

89 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

90 
	}
}

92 
	$mt_pwrc_wrôe_pcof‰
(
mpidr
)

94 
	`bakîy_lock_gë
(
mpidr
, &
pwrc_lock
);

95 
	`mmio_wrôe_32
(
PWRC_BASE
 + 
PCOFFR_OFF
, (Ë
mpidr
);

96 
	`bakîy_lock_ªÀa£
(
mpidr
, &
pwrc_lock
);

97 
	}
}

100 
	$mt_pwrc_£tup
()

102 
	`bakîy_lock_öô
(&
pwrc_lock
);

104 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/pwrc/plat_pwrc.h

31 #i‚de‡
__PLAT_PWRC_H__


32 
	#__PLAT_PWRC_H__


	)

35 
	#PPOFFR_OFF
 0x0

	)

36 
	#PPONR_OFF
 0x4

	)

37 
	#PCOFFR_OFF
 0x8

	)

38 
	#PWKUPR_OFF
 0xc

	)

39 
	#PSYSR_OFF
 0x10

	)

41 
	#PWKUPR_WEN
 (1uŒ << 31)

	)

43 
	#PSYSR_AFF_L2
 (1 << 31)

	)

44 
	#PSYSR_AFF_L1
 (1 << 30)

	)

45 
	#PSYSR_AFF_L0
 (1 << 29)

	)

46 
	#PSYSR_WEN
 (1 << 28)

	)

47 
	#PSYSR_PC
 (1 << 27)

	)

48 
	#PSYSR_PP
 (1 << 26)

	)

50 
	#PSYSR_WK_SHIFT
 24

	)

51 
	#PSYSR_WK_MASK
 0x3

	)

52 
	#PSYSR_WK
(
x
Ë(x >> 
PSYSR_WK_SHIFT
Ë& 
PSYSR_WK_MASK


	)

54 
	#WKUP_COLD
 0x0

	)

55 
	#WKUP_RESET
 0x1

	)

56 
	#WKUP_PPONR
 0x2

	)

57 
	#WKUP_GICREQ
 0x3

	)

59 
	#PSYSR_INVALID
 0xffffffff

	)

61 #i‚de‡
__ASSEMBLY__


66 
mt_pwrc_£tup
();

67 
mt_pwrc_wrôe_pcof‰
();

68 
mt_pwrc_wrôe_µof‰
();

69 
mt_pwrc_wrôe_µ⁄r
();

70 
mt_pwrc_£t_wí
();

71 
mt_pwrc_˛r_wí
();

72 
mt_pwrc_ªad_psy§
();

73 
mt_pwrc_gë_˝u_wkr
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/timer/mt_cpuxgpt.c

37 
	~<°döt.h
>

38 
	~<¨ch_hñ≥rs.h
>

39 
	~"ty≥defs.h
"

40 
	~"∂©f‹m.h
"

41 
	~"mt_˝uxg±.h
"

43 
	#CPUXGPT_BASE
 0x10200000

	)

44 
	#INDEX_BASE
 (
CPUXGPT_BASE
+0x0674)

	)

45 
	#CTL_BASE
 (
CPUXGPT_BASE
+0x0670)

	)

47 
__u64
 
	gn‹mÆ_time_ba£
;

48 
__u64
 
	g©f_time_ba£
;

51 
	$__ªad_˝uxg±
(
ªg_ödex
 )

53 
vÆue
 = 0;

54 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

56 
vÆue
 = 
	`DRV_Reg32
(
CTL_BASE
);

57  
vÆue
;

58 
	}
}

61 
	$__wrôe_˝uxg±
(
ªg_ödex
,
vÆue
 )

64 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

65 
	`DRV_WrôeReg32
(
CTL_BASE
,
vÆue
);

66 
	}
}

68 
	$__˝uxg±_£t_öô_˙t
(
cou¡H
,
cou¡L
)

70 
	`__wrôe_˝uxg±
(
INDEX_CNT_H_INIT
,
cou¡H
);

71 
	`__wrôe_˝uxg±
(
INDEX_CNT_L_INIT
,
cou¡L
);

72 
	}
}

74 
	$gíîic_timî_backup
()

76 
__u64
 
cvÆ
;

78 
cvÆ
 = 
	`ªad_˙ç˘_ñ0
();

79 
	`__˝uxg±_£t_öô_˙t
((
__u32
)(
cvÆ
 >> 32), (__u32)(cval & 0xffffffff));

80 
	}
}

82 
	$©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
)

84 
n‹mÆ_time_ba£
 = 
n‹mÆ_ba£
;

85 
©f_time_ba£
 = 
©f_ba£
;

87 
	}
}

89 
	$©f_sched_˛ock
()

91 
__u64
 
cvÆ
;

93 
cvÆ
 = (((
	`ªad_˙ç˘_ñ0
(Ë- 
©f_time_ba£
)*1000)/13Ë+ 
n‹mÆ_time_ba£
;

94  
cvÆ
;

95 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/timer/mt_cpuxgpt.h

49 #i‚de‡
_MT_CPUXGPT_H_


50 
	#_MT_CPUXGPT_H_


	)

53 
	e˝uxg±_num
 {

54 
	mCPUXGPT0
=0,

55 
	mCPUXGPT1
,

56 
	mCPUXGPT2
,

57 
	mCPUXGPT3
,

58 
	mCPUXGPT4
,

59 
	mCPUXGPT5
,

60 
	mCPUXGPT6
,

61 
	mCPUXGPT7
,

62 
	mCPUXGPTNUMBERS
,

63 }
	tCPUXGPT_NUM
;

65 
	#CPUXGPT0_IRQID
 88

	)

66 
	#CPUXGPT1_IRQID
 89

	)

67 
	#CPUXGPT2_IRQID
 90

	)

68 
	#CPUXGPT3_IRQID
 91

	)

69 
	#CPUXGPT4_IRQID
 92

	)

70 
	#CPUXGPT5_IRQID
 93

	)

71 
	#CPUXGPT6_IRQID
 94

	)

72 
	#CPUXGPT7_IRQID
 95

	)

74 
	#CPUXGPT_IRQID_BASE
 
CPUXGPT0_IRQID


	)

77 
	#INDEX_CTL_REG
 0x000

	)

78 
	#INDEX_STA_REG
 0x004

	)

79 
	#INDEX_CNT_L_INIT
 0x008

	)

80 
	#INDEX_CNT_H_INIT
 0x00C

	)

81 
	#INDEX_IRQ_MASK
 0x030

82 

	)

83 
	#INDEX_CMP_BASE
 0x034

	)

87 
	#EN_CPUXGPT
 0x01

	)

88 
	#EN_AHLT_DEBUG
 0x02

	)

92 
	#CLK_DIV1
 (0x1 << 8)

	)

93 
	#CLK_DIV2
 (0x2 << 8)

	)

94 
	#CLK_DIV4
 (0x4 << 8)

	)

95 
	#CLK_DIV_MASK
 (~(0x7<<8))

	)

97 
	#CPUX_GPT0_ACK
 (1<<0x0)

	)

98 
	#CPUX_GPT1_ACK
 (1<<0x1)

	)

99 
	#CPUX_GPT2_ACK
 (1<<0x2)

	)

100 
	#CPUX_GPT3_ACK
 (1<<0x3)

	)

101 
	#CPUX_GPT4_ACK
 (1<<0x4)

	)

102 
	#CPUX_GPT5_ACK
 (1<<0x5)

	)

103 
	#CPUX_GPT6_ACK
 (1<<0x6)

	)

104 
	#CPUX_GPT7_ACK
 (1<<0x7)

	)

107 
gíîic_timî_backup
();

108 
©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

109 
©f_sched_˛ock
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/timer/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/uart/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/uart/uart.c

37 
	~<°döt.h
>

38 
	~<as£π.h
>

39 
	~<c⁄sﬁe.h
>

40 
	~"ty≥defs.h
"

41 
	~"∂©f‹m.h
"

42 
	~"u¨t.h
"

48 
	#Dñay_Cou¡
 324675

	)

50 
	#UART_BASE
(
u¨t
Ë(u¨t)

	)

52 
	#UART_RBR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

53 
	#UART_THR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

54 
	#UART_IER
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

55 
	#UART_IIR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

56 
	#UART_FCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

57 
	#UART_LCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0xc)

	)

58 
	#UART_MCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

59 
	#UART_LSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

60 
	#UART_MSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

61 
	#UART_SCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

62 
	#UART_DLL
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0)

	)

63 
	#UART_DLH
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

64 
	#UART_EFR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8)

	)

65 
	#UART_XON1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

66 
	#UART_XON2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

67 
	#UART_XOFF1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

68 
	#UART_XOFF2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

69 
	#UART_AUTOBAUD_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x20)

	)

70 
	#UART_HIGHSPEED
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x24)

	)

71 
	#UART_SAMPLE_COUNT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x28)

	)

72 
	#UART_SAMPLE_POINT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x2c)

	)

73 
	#UART_AUTOBAUD_REG
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x30)

	)

74 
	#UART_RATE_FIX_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x34)

	)

75 
	#UART_AUTOBAUD_SAMPLE
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x38)

	)

76 
	#UART_GUARD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x3c)

	)

77 
	#UART_ESCAPE_DAT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x40)

	)

78 
	#UART_ESCAPE_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x44)

	)

79 
	#UART_SLEEP_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x48)

	)

80 
	#UART_VFIFO_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4c)

	)

81 
	#UART_RXTRI_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x50)

	)

85 
	#UART_SET_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(
uöçå_t
)(REG)Ë|(U32)(BS))

	)

86 
	#UART_CLR_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(REG)Ë&~((U32)(BS)))

	)

87 
	#UART_WRITE16
(
VAL
, 
REG
Ë
	`DRV_WrôeReg
(REG,VAL)

	)

88 
	#UART_READ32
(
REG
Ë
	`DRV_Reg32
(REG)

	)

89 
	#UART_WRITE32
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

91 #i‡
CFG_FPGA_PLATFORM


92 vﬁ©ûê
	gg_u¨t
 = 
UART1
;

93 
	#UART_SRC_CLK
 
FPGA_UART_CLOCK


	)

95 vﬁ©ûê
	gg_u¨t
 = 
UART2
;

96 
	#UART_SRC_CLK
 
EVB_UART_CLOCK


	)

99 
	gIsOuçutToUARTFœg
=1;

102 
	$WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
)

104 *(vﬁ©ûê
uöt8_t
*)
addr
 = 
vÆue
;

105 
	}
}

108 
uöt8_t
 
	$READ_REGISTER_UINT8
(
uöçå_t
 
addr
)

110  *(vﬁ©ûê
uöt8_t
*)
addr
;

111 
	}
}

113 
	$WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
)

115 *(vﬁ©ûê
uöt32_t
*)
addr
 = 
vÆue
;

116 
	}
}

118 
uöt32_t
 
	$READ_REGISTER_UINT32
(
uöçå_t
 
addr
)

120  *(vﬁ©ûê
uöt32_t
*)
addr
;

121 
	}
}

123 
	$WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
)

125 *(vﬁ©ûê
uöt16_t
*)
addr
 = 
vÆue
;

126 
	}
}

128 
uöt16_t
 
	$READ_REGISTER_UINT16
(
uöçå_t
 
addr
)

130  *(vﬁ©ûê
uöt16_t
*)
addr
;

131 
	}
}

135 
	$£rül_£tbrg
 (
U32
 
u¨t˛k
, U32 
baudøã
)

137 #i‡(
CFG_FPGA_PLATFORM
)

138 
	#MAX_SAMPLE_COUNT
 256

	)

140 
U16
 
tmp
;

141 
U32
 
divis‹
;

142 
U32
 
ßm∂e_d©a
;

143 
U32
 
ßm∂e_cou¡
;

144 
U32
 
ßm∂e_poöt
;

147 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

160 
	`UART_WRITE32
(0x0003, 
	`UART_HIGHSPEED
(
g_u¨t
));

164 
ßm∂e_d©a
 = (
u¨t˛k
+(
baudøã
/2))/baudrate;

166 
divis‹
 = (
ßm∂e_d©a
+(
MAX_SAMPLE_COUNT
-1))/MAX_SAMPLE_COUNT;

168 
ßm∂e_cou¡
 = 
ßm∂e_d©a
/
divis‹
;

170 
ßm∂e_poöt
 = (
ßm∂e_cou¡
-1)/2;

172 
	`UART_WRITE32
((
ßm∂e_cou¡
-1), 
	`UART_SAMPLE_COUNT
(
g_u¨t
));

174 
	`UART_WRITE32
(
ßm∂e_poöt
, 
	`UART_SAMPLE_POINT
(
g_u¨t
));

176 
tmp
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

177 
	`UART_WRITE32
((
tmp
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

179 
	`UART_WRITE32
((
divis‹
&0xFF), 
	`UART_DLL
(
g_u¨t
));

180 
	`UART_WRITE32
(((
divis‹
>>8)&0xFF), 
	`UART_DLH
(
g_u¨t
));

181 
	`UART_WRITE32
(
tmp
, 
	`UART_LCR
(
g_u¨t
));

184 
byã
;

185 
high•ìd
;

186 
quŸ
, 
divis‹
, 
ªmaödî
;

188 i‡(
baudøã
 <= 115200 ) {

189 
high•ìd
 = 0;

190 
quŸ
 = 16;

192 
high•ìd
 = 2;

193 
quŸ
 = 4;

197 
divis‹
 = 
u¨t˛k
 / (
quŸ
 * 
baudøã
);

198 
ªmaödî
 = 
u¨t˛k
 % (
quŸ
 * 
baudøã
);

200 i‡(
ªmaödî
 >(
quŸ
 / 2Ë* 
baudøã
)

201 
divis‹
 += 1;

203 
	`UART_WRITE16
(
high•ìd
, 
	`UART_HIGHSPEED
(
g_u¨t
));

204 
byã
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

205 
	`UART_WRITE32
((
byã
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

206 
	`UART_WRITE32
((
divis‹
 & 0x00ff), 
	`UART_DLL
(
g_u¨t
));

207 
	`UART_WRITE32
(((
divis‹
 >> 8)&0x00ff), 
	`UART_DLH
(
g_u¨t
));

210 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

212 
	}
}

216 
	$£rül_n⁄block_gëc
()

218  ()
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

219 
	}
}

221 
	$mtk_£rül_£t_cuºít_u¨t
(
MT65XX_UART
 
u¨t_ba£
)

223 
g_u¨t
 = 
u¨t_ba£
;

224 
	}
}

226 
	$mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
)

228 
g_u¨t
 = 
u¨t_p‹t
;

229 #i‡!
CFG_FPGA_PLATFORM


230 #ifde‡
GPIO_UART_UTXD1_PIN


231 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

232 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

235 #ifde‡
GPIO_UART_URXD1_PIN


236 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

237 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

238 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

239 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

242 #ifde‡
GPIO_UART_UTXD2_PIN


243 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD2_PIN
, 
GPIO_MODE_01
);

244 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD2_PIN
, 
GPIO_DIR_OUT
);

247 #ifde‡
GPIO_UART_URXD2_PIN


248 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD2_PIN
, 
GPIO_MODE_01
);

249 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD2_PIN
, 
GPIO_DIR_IN
);

250 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_ENABLE
);

251 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_UP
);

254 #ifde‡
GPIO_UART_UTXD3_PIN


255 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD3_PIN
, 
GPIO_MODE_01
);

256 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD3_PIN
, 
GPIO_DIR_OUT
);

259 #ifde‡
GPIO_UART_URXD3_PIN


260 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD3_PIN
, 
GPIO_MODE_01
);

261 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD3_PIN
, 
GPIO_DIR_IN
);

262 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_ENABLE
);

263 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_UP
);

267 
	#AP_PERI_GLOBALCON_RST0
 (
PERICFG_BASE
+0x0)

	)

268 
	#AP_PERI_GLOBALCON_PDN0
 (
PERICFG_BASE
+0x10)

	)

271 if(0 =
u¨t˛k
){

273 
u¨t˛k
 = 
UART_SRC_CLK
;

276 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
	`deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

278 
	`mtk_£rül_£t_cuºít_u¨t
(
UART2
);

280 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

281 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

282 
	`£rül_£tbrg
(
u¨t˛k
, 
CFG_LOG_BAUDRATE
);

286 #ifde‡
GPIO_UART_UTXD1_PIN


287 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

288 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

291 #ifde‡
GPIO_UART_URXD1_PIN


292 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

293 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

294 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

295 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

305 
	`UART_CLR_BITS
(1 << 22, 
AP_PERI_GLOBALCON_PDN0
);

307 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

308 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

309 
	`£rül_£tbrg
(
u¨t˛k
, 
baudøã
);

310 
	}
}

312 
	$PutUARTByã
 (c⁄° 
c
)

314 !(
	`UART_READ32
 (
	`UART_LSR
(
g_u¨t
)Ë& 
UART_LSR_THRE
))

318 i‡(
c
 == '\n')

320 
	`UART_WRITE32
 ((Ë0xD, 
	`UART_THR
(
g_u¨t
));

322 
	`UART_WRITE32
 ((Ë
c
, 
	`UART_THR
(
g_u¨t
));

323 
	}
}

325 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

326 
	$PutUART1_Byã
(c⁄° 
c
)

328 !(
	`UART_READ32
 (
	`UART_LSR
(
UART2
)Ë& 
UART_LSR_THRE
))

332 i‡(
c
 == '\n')

333 
	`UART_WRITE32
((Ë'\r', 
	`UART_THR
(
UART2
));

335 
	`UART_WRITE32
((Ë
c
, 
	`UART_THR
(
UART2
));

336 
	}
}

339 
	$GëUARTByãs
(
u8
 *
buf
, 
u32
 
size
, u32 
tmo_ms
)

343 
u32
 
LSR
;

344 
tmo_í
 = (
tmo_ms
) ? 1 : 0;

345 
ul⁄g
 
°¨t_time
 = 
	`gë_timî
(0);

347 
size
) {

348 i‡(
tmo_í
 && (
	`gë_timî
(
°¨t_time
Ë> 
tmo_ms
))

352 i‡(!
tmo_í
)

353 
	`∂©f‹m_wdt_kick
();

355 
LSR
 = 
	`UART_READ32
(
	`UART_LSR
(
g_u¨t
));

356 i‡(
LSR
 & 
UART_LSR_DR
) {

357 *
buf
++ = (
u8
)
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

358 
size
--;

362  (0 =
size
) ? 0 : -1;

366 
	}
}

368 
	$c⁄sﬁe_öô
(
ba£_addr
)

375 
	`as£π
(
ba£_addr
);

378 
g_u¨t
 = 
ba£_addr
;

380 
	#CFG_LOG_BAUDRATE
 921600

	)

382 #i‡
CFG_FPGA_PLATFORM


383 
	#UART_SRC_CLK_FRQ
 (12000000)

	)

385 
	#UART_SRC_CLK_FRQ
 (0Ë

	)

390 
	`mtk_u¨t_öô
(
ba£_addr
, 
UART_SRC_CLK_FRQ
, 
CFG_LOG_BAUDRATE
);

393 
	}
}

395 
	$c⁄sﬁe_putc
(
c
)

397 if(
IsOuçutToUARTFœg
){

398 
	`PutUARTByã
 (
c
);

400  
c
;

401 
	}
}

403 
	$c⁄sﬁe_gëc
()

405 
c
 = 0;

406 if(
IsOuçutToUARTFœg
){

407 
	`GëUARTByãs
(&
c
, 1, 10);

409  
c
;

410 
	}
}

411 
	$£t_u¨t_Êag
()

413 
IsOuçutToUARTFœg
=1;

414 
	}
}

415 
	$˛ór_u¨t_Êag
()

417 
IsOuçutToUARTFœg
=0;

418 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/uart/uart.h

49 #i‚de‡
UART_HW_H


50 
	#UART_HW_H


	)

54 
	~"∂©f‹m_def.h
"

59 
	#UART_FCR_FIFOE
 (1 << 0)

	)

60 
	#UART_FCR_CLRR
 (1 << 1)

	)

61 
	#UART_FCR_CLRT
 (1 << 2)

	)

62 
	#UART_FCR_DMA1
 (1 << 3)

	)

63 
	#UART_FCR_RXFIFO_1B_TRI
 (0 << 6)

	)

64 
	#UART_FCR_RXFIFO_6B_TRI
 (1 << 6)

	)

65 
	#UART_FCR_RXFIFO_12B_TRI
 (2 << 6)

	)

66 
	#UART_FCR_RXFIFO_RX_TRI
 (3 << 6)

	)

67 
	#UART_FCR_TXFIFO_1B_TRI
 (0 << 4)

	)

68 
	#UART_FCR_TXFIFO_4B_TRI
 (1 << 4)

	)

69 
	#UART_FCR_TXFIFO_8B_TRI
 (2 << 4)

	)

70 
	#UART_FCR_TXFIFO_14B_TRI
 (3 << 4)

	)

72 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

73 
	#UART_FCR_NORMAL
 (
UART_FCR_FIFO_INIT
 | \

74 
UART_FCR_TXFIFO_4B_TRI
| \

75 
UART_FCR_RXFIFO_12B_TRI
)

	)

79 
	#UART_LCR_BREAK
 (1 << 6)

	)

80 
	#UART_LCR_DLAB
 (1 << 7)

	)

82 
	#UART_WLS_5
 (0 << 0)

	)

83 
	#UART_WLS_6
 (1 << 0)

	)

84 
	#UART_WLS_7
 (2 << 0)

	)

85 
	#UART_WLS_8
 (3 << 0)

	)

86 
	#UART_WLS_MASK
 (3 << 0)

	)

88 
	#UART_1_STOP
 (0 << 2)

	)

89 
	#UART_2_STOP
 (1 << 2)

	)

90 
	#UART_1_5_STOP
 (1 << 2Ë

	)

91 
	#UART_STOP_MASK
 (1 << 2)

	)

93 
	#UART_NONE_PARITY
 (0 << 3)

	)

94 
	#UART_ODD_PARITY
 (0x1 << 3)

	)

95 
	#UART_EVEN_PARITY
 (0x3 << 3)

	)

96 
	#UART_MARK_PARITY
 (0x5 << 3)

	)

97 
	#UART_SPACE_PARITY
 (0x7 << 3)

	)

98 
	#UART_PARITY_MASK
 (0x7 << 3)

	)

101 
	#UART_MCR_DTR
 (1 << 0)

	)

102 
	#UART_MCR_RTS
 (1 << 1)

	)

103 
	#UART_MCR_OUT1
 (1 << 2)

	)

104 
	#UART_MCR_OUT2
 (1 << 3)

	)

105 
	#UART_MCR_LOOP
 (1 << 4)

	)

106 
	#UART_MCR_XOFF
 (1 << 7Ë

	)

107 
	#UART_MCR_NORMAL
 (
UART_MCR_DTR
|
UART_MCR_RTS
)

	)

110 
	#UART_LSR_DR
 (1 << 0)

	)

111 
	#UART_LSR_OE
 (1 << 1)

	)

112 
	#UART_LSR_PE
 (1 << 2)

	)

113 
	#UART_LSR_FE
 (1 << 3)

	)

114 
	#UART_LSR_BI
 (1 << 4)

	)

115 
	#UART_LSR_THRE
 (1 << 5)

	)

116 
	#UART_LSR_TEMT
 (1 << 6)

	)

117 
	#UART_LSR_FIFOERR
 (1 << 7)

	)

120 
	#UART_MSR_DCTS
 (1 << 0)

	)

121 
	#UART_MSR_DDSR
 (1 << 1)

	)

122 
	#UART_MSR_TERI
 (1 << 2)

	)

123 
	#UART_MSR_DDCD
 (1 << 3)

	)

124 
	#UART_MSR_CTS
 (1 << 4)

	)

125 
	#UART_MSR_DSR
 (1 << 5)

	)

126 
	#UART_MSR_RI
 (1 << 6)

	)

127 
	#UART_MSR_DCD
 (1 << 7)

	)

130 
	#UART_EFR_EN
 (1 << 4)

	)

131 
	#UART_EFR_AUTO_RTS
 (1 << 6)

	)

132 
	#UART_EFR_AUTO_CTS
 (1 << 7)

	)

133 
	#UART_EFR_SW_CTRL_MASK
 (0x‡<< 0)

	)

135 
	#UART_EFR_NO_SW_CTRL
 (0)

	)

136 
	#UART_EFR_NO_FLOW_CTRL
 (0)

	)

137 
	#UART_EFR_AUTO_RTSCTS
 (
UART_EFR_AUTO_RTS
|
UART_EFR_AUTO_CTS
)

	)

138 
	#UART_EFR_XON1_XOFF1
 (0xaË

	)

139 
	#UART_EFR_XON2_XOFF2
 (0x5Ë

	)

140 
	#UART_EFR_XON12_XOFF12
 (0xfË

	)

143 
	#UART_EFR_XON1_XOFF1_MASK
 (0xa)

	)

144 
	#UART_EFR_XON2_XOFF2_MASK
 (0x5)

	)

147 
	#UART_IIR_NO_INT_PENDING
 (0x01)

	)

148 
	#UART_IIR_RLS
 (0x06Ë

	)

149 
	#UART_IIR_RDA
 (0x04Ë

	)

150 
	#UART_IIR_CTI
 (0x0CË

	)

151 
	#UART_IIR_THRE
 (0x02Ë

	)

153 
	#UART_IIR_MS
 (0x00Ë

	)

154 
	#UART_IIR_SW_FLOW_CTRL
 (0x10Ë

	)

155 
	#UART_IIR_HW_FLOW_CTRL
 (0x20Ë

	)

156 
	#UART_IIR_FIFO_EN
 (0xc0)

	)

157 
	#UART_IIR_INT_MASK
 (0x1f)

	)

160 
	#UART_RATE_FIX
 (1 << 0)

	)

163 
	#UART_FREQ_SEL
 (1 << 1)

	)

165 
	#UART_RATE_FIX_13M
 (1 << 0Ë

	)

166 
	#UART_AUTORATE_FIX_13M
 (1 << 1)

	)

167 
	#UART_FREQ_SEL_13M
 (1 << 2)

	)

168 
	#UART_RATE_FIX_ALL_13M
 (
UART_RATE_FIX_13M
|
UART_AUTORATE_FIX_13M
| \

169 
UART_FREQ_SEL_13M
)

	)

171 
	#UART_RATE_FIX_26M
 (0 << 0Ë

	)

172 
	#UART_AUTORATE_FIX_26M
 (0 << 1)

	)

173 
	#UART_FREQ_SEL_26M
 (0 << 2)

	)

174 
	#UART_RATE_FIX_ALL_26M
 (
UART_RATE_FIX_26M
|
UART_AUTORATE_FIX_26M
| \

175 
UART_FREQ_SEL_26M
)

	)

177 
	#UART_RATE_FIX_32M5
 (0 << 0Ë

	)

178 
	#UART_FREQ_SEL_32M5
 (0 << 1)

	)

179 
	#UART_RATE_FIX_ALL_32M5
 (
UART_RATE_FIX_32M5
|
UART_FREQ_SEL_32M5
)

	)

181 
	#UART_RATE_FIX_16M25
 (0 << 0Ë

	)

182 
	#UART_FREQ_SEL_16M25
 (0 << 1)

	)

183 
	#UART_RATE_FIX_ALL_16M25
 (
UART_RATE_FIX_16M25
|
UART_FREQ_SEL_16M25
)

	)

187 
	#UART_AUTOBADUSAM_13M
 7

	)

188 
	#UART_AUTOBADUSAM_26M
 15

	)

189 
	#UART_AUTOBADUSAM_52M
 31

	)

191 
	#UART_AUTOBAUDSAM_58_5M
 31

	)

194 
	#UART_VFIFO_ON
 (1 << 0)

	)

195 
	#UART_FCR_FIFOE
 (1 << 0)

	)

196 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

201 
	mUART1
 = 
UART0_BASE
,

202 
	mUART2
 = 
UART1_BASE
,

203 
	mUART3
 = 
UART2_BASE
,

204 
	mUART4
 = 
UART3_BASE


205 } 
	tMT65XX_UART
;

207 
	#PLL_ON_UART_CLOCK
 (13500000)

208 
	#PLL_OFF_UART_CLOCK
 (13500000)

209 

	)

211 
	#EVB_UART_CLOCK
 (26000000)

	)

212 
	#FPGA_UART_CLOCK
 (12000000)

	)

214 
mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/include/plat_macros.S

31 
	~<gic_v2.h
>

32 
	~"../∂©_def.h
"

34 .
	g£˘i⁄
 .
	grod©a
.
	ggic_ªg_«me
, "aS"

35 
	ggic_ªgs
: .
asciz
 "gic_iar", "gic_ctlr", ""

38 
	#GIC_REG_SIZE
 (2 * 8)

	)

45 .
ma¸o
 
∂©_¥öt_gic_ªgs


46 
mov
 
	gx0
, #CONFIG_GICC_ADDR

47 
bl
 
mt_gë_cfgv¨


49 
ldr
 
	gw1
, [
x0
, #GICC_IAR]

50 
ldr
 
	gw2
, [
x0
, #GICD_CTLR]

51 
sub
 
	g•
, sp, #GIC_REG_SIZE

52 
°p
 
	gx1
, 
	gx2
, [
•
]

53 
adr
 
	gx0
, 
gic_ªgs


54 
mov
 
	gx1
, 
•


55 
bl
 
¥öt_°rög_vÆue


56 
add
 
	g•
, sp, #GIC_REG_SIZE

57 .
	gídm


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/include/platform_def.h

31 #i‚de‡
__PLATFORM_DEF_H__


32 
	#__PLATFORM_DEF_H__


	)

34 
	~<¨ch.h
>

36 
	#PLAT_USE_EL1_AARCH32


	)

41 
	#PLATFORM_LINKER_FORMAT
 "ñf64-lôéó¨ch64"

	)

42 
	#PLATFORM_LINKER_ARCH
 
Ørch64


	)

49 
	#PLATFORM_STACK_SIZE
 0x800

	)

52 #i‡
DEBUG


53 
	#PCPU_DV_MEM_STACK_SIZE
 0x400

	)

55 
	#PCPU_DV_MEM_STACK_SIZE
 0x300

	)

58 
	#FIRMWARE_WELCOME_STR
 "BoŸög MTKÅru°ed fúmw¨êBL31\n\r"

	)

61 
	#BL2_IMAGE_NAME
 "bl2.bö"

	)

64 
	#BL31_IMAGE_NAME
 "bl31.bö"

	)

67 
	#BL32_IMAGE_NAME
 "bl32.bö"

	)

70 
	#BL33_IMAGE_NAME
 "bl33.bö"

	)

72 
	#PLATFORM_CACHE_LINE_SIZE
 64

	)

73 
	#PLATFORM_CLUSTER_COUNT
 2uŒ

	)

74 
	#PLATFORM_CLUSTER0_CORE_COUNT
 4

	)

75 
	#PLATFORM_CLUSTER1_CORE_COUNT
 4

	)

76 
	#PLATFORM_CORE_COUNT
 (
PLATFORM_CLUSTER1_CORE_COUNT
 + \

77 
PLATFORM_CLUSTER0_CORE_COUNT
)

	)

78 
	#PLATFORM_MAX_CPUS_PER_CLUSTER
 4

	)

79 
	#PRIMARY_CPU
 0x0

	)

80 
	#MAX_IO_DEVICES
 3

	)

81 
	#MAX_IO_HANDLES
 4

	)

86 
	#TZROM_BASE
 0x00000000

	)

87 
	#TZROM_SIZE
 0x04000000

	)

89 
	#TZRAM_BASE
 0x00110000

	)

90 
	#TZRAM_SIZE
 0x1C400

	)

92 
	#TZRAM2_BASE
 0x00100000

	)

93 
	#TZRAM2_SIZE
 0xDC00

	)

96 
	#TZDRAM_BASE
 0x00120000

	)

97 
	#TZDRAM_SIZE
 0x0000C000

	)

104 
	#BL1_RO_BASE
 
TZROM_BASE


	)

105 
	#BL1_RO_LIMIT
 (
TZROM_BASE
 + 
TZROM_SIZE
)

	)

106 
	#BL1_RW_BASE
 
TZRAM_BASE


	)

107 
	#BL1_RW_LIMIT
 
BL31_BASE


	)

112 
	#BL2_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0xc000)

	)

113 
	#BL2_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

118 
	#BL31_BASE
 (
TZRAM_BASE
 + 0x1000)

	)

119 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


120 
	#BL31_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

121 
	#TZRAM2_LIMIT
 (
TZRAM2_BASE
 + 
TZRAM2_SIZE
)

	)

123 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


124 
	#BL31_LIMIT
 
BL2_BASE


	)

133 
	#TSP_IN_TZRAM
 0

	)

134 
	#TSP_IN_TZDRAM
 1

	)

136 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


137 
	#TSP_SEC_MEM_BASE
 
TZRAM_BASE


	)

138 
	#TSP_SEC_MEM_SIZE
 
TZRAM_SIZE


	)

139 
	#BL32_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0x00000)

	)

140 
	#BL32_LIMIT
 
BL2_BASE


	)

141 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


142 
	#TSP_SEC_MEM_BASE
 
TZDRAM_BASE


	)

143 
	#TSP_SEC_MEM_SIZE
 
TZDRAM_SIZE


	)

144 
	#BL32_BASE
 (
TZDRAM_BASE
 + 0x2000)

	)

145 
	#BL32_LIMIT
 (
TZDRAM_BASE
 + (1 << 21))

	)

153 
	#ADDR_SPACE_SIZE
 (1uŒ << 32)

	)

154 
	#MAX_XLAT_TABLES
 4

	)

155 
	#MAX_MMAP_REGIONS
 16

	)

160 
	#IRQ_SEC_PHY_TIMER
 29

	)

165 
	#CCI400_BASE
 0x10390000

	)

166 
	#CCI400_SL_IFACE_CLUSTER0
 4

	)

167 
	#CCI400_SL_IFACE_CLUSTER1
 3

	)

168 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

169 
CCI400_SL_IFACE_CLUSTER1
 : \

170 
CCI400_SL_IFACE_CLUSTER0
)

	)

171 
	#CCI_SEC_ACCESS_OFFSET
 (0x8)

	)

174 
	#IO_PHYS
 (0x10000000)

	)

175 
	#MCUCFG_BASE
 (
IO_PHYS
 + 0x00200000)

	)

176 
	#UART0_BASE
 (
IO_PHYS
 + 0x01002000)

	)

177 
	#UART1_BASE
 (
IO_PHYS
 + 0x01003000)

	)

178 
	#UART2_BASE
 (
IO_PHYS
 + 0x01004000)

	)

179 
	#UART3_BASE
 (
IO_PHYS
 + 0x01005000)

	)

180 
	#CFG_FPGA_PLATFORM
 0

	)

181 
	#PERICFG_BASE
 (
IO_PHYS
 + 0x3000)

	)

186 
	#MP0_MISC_CONFIG_BASE
 (
IO_PHYS
 + 0x00200000)

	)

187 
	#MP0_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MP0_MISC_CONFIG_BASE
 + 0x38 + ((˝uË* 8))

	)

188 
	#MP1_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MP0_MISC_CONFIG_BASE
 + 0x238 + ((˝uË* 8))

	)

189 
	#MP0_MISC_CONFIG3
 (
MCUCFG_BASE
 + 0x3c)

	)

191 
	#INFRACFG_AO_BASE
 (
IO_PHYS
 + 0x1000)

	)

192 
	#BOOTROM_BOOT_ADDR
 (
INFRACFG_AO_BASE
 + 0x800)

	)

193 
	#BOOTROM_SEC_CTRL
 (
INFRACFG_AO_BASE
 + 0x804)

	)

194 
	#SW_ROM_PD
 (1U << 31)

	)

196 
	#MP0_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0030)

	)

197 
	#MP0_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0054)

	)

198 
	#MP1_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0230)

	)

199 
	#MP1_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0254)

	)

204 
	#MP0_AXI_CONFIG
 (
MP0_MISC_CONFIG_BASE
 + 0x002C)

	)

205 
	#MP1_AXI_CONFIG
 (
MP0_MISC_CONFIG_BASE
 + 0x022C)

	)

206 
	#ACINACTM
 (1U << 4)

	)

217 
	#CACHE_WRITEBACK_SHIFT
 6

	)

218 
	#CACHE_WRITEBACK_GRANULE
 (1 << 
CACHE_WRITEBACK_SHIFT
)

	)

221 
	#WDT_IRQ_BIT_ID
 (160)

	)

222 
	#FIQ_SMP_CALL_SGI
 13

	)

223 
	#ATF_LOG_IRQ_ID
 281

	)

226 
	#MP0_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0)

	)

227 
	#MP1_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0x200)

	)

228 
	#L2RSTDISABLE
 (1 << 4)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/include/power_tracer.h

1 #i‚de‡
__TRACER_H_


2 
	#__TRACER_H_


	)

4 
	#CPU_UP
 0

	)

5 
	#CPU_DOWN
 1

	)

6 
	#CPU_SUSPEND
 2

	)

7 
	#CLUSTER_UP
 3

	)

8 
	#CLUSTER_DOWN
 4

	)

9 
	#CLUSTER_SUSPEND
 5

	)

11 
åa˚_powî_Êow
(
mpidr
, 
mode
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/include/scu.h

2 #i‚de‡
__SCU_H__


3 
	#__SCU_H__


	)

5 
dißbÀ_scu
(
mpidr
);

6 
íabÀ_scu
(
mpidr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/include/tbase_platform.h

12 #i‚de‡
__TBASE_PLATFORM_H__


13 
	#__TBASE_PLATFORM_H__


	)

15 
	~<bl_comm⁄.h
>

16 
	~<tba£_¥iv©e.h
>

17 
	~<∂©_def.h
>

21 
	#TBASE_PM_ENABLE
 1

	)

23 
	#TBASE_SIP_ROUTE_ENABLE
 0

	)

25 
	#TBASE_OEM_ROUTE_ENABLE
 0

	)

28 
	#TEE_PARAMS
 (((
©f_¨g_t_±r
)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
)->
ãe_boŸ_¨g_addr
)

	)

30 
	#TBASE_NWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamBa£
)

	)

31 
	#TBASE_NWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamSize
)

	)

32 
	#TBASE_SWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
+
TBASE_SWD_IMEM_SIZE
)

	)

33 
	#TBASE_SWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamSize
-
TBASE_SWD_IMEM_SIZE
)

	)

34 
	#TBASE_SWD_IMEM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
)

	)

35 
	#TBASE_SWD_IMEM_SIZE
 (2*1024*1024)

	)

36 
	#TBASE_GIC_DIST_BASE
 (
BASE_GICD_BASE
)

	)

37 
	#TBASE_GIC_CPU_BASE
 (
BASE_GICC_BASE
)

	)

39 
	#TBASE_GIC_VERSION
 (2)

	)

40 
	#TBASE_SPI_COUNT
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
tŸÆ_numbî_•i
)

	)

41 
	#TBASE_SSIQ_NRO
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
ssiq_numbî
)

	)

43 
	#TBASE_MONITOR_FLAGS
 (
TBASE_MONITOR_FLAGS_DEFAULT
)

	)

46 
	#TBASE_MAX_MONITOR_CALL_REGS
 
TBASE_MONITOR_CALL_REGS_MIN


	)

47 
	#TBASE_NWD_REGISTER_COUNT
 
TBASE_NWD_REGISTERS_MIN


	)

51 
	#TBASE_REGISTER_FILE_MMU_FLAGS
 (
	`LOWER_ATTRS
(
ATTR_IWBWA_OWBWA_NTR_INDEX
 | 
ISH
 | 
AP_RW
) |\

52 
	`UPPER_ATTRS
(
XN
) | \

53 
LEVEL3
)

	)

60 #i‚de‡
__ASSEMBLY__


61 
mt_log_£cuª_os_¥öt
(
c
);

63 
	#TBASE_OUTPUT_PUTC
(
c
Ë
	`mt_log_£cuª_os_¥öt
(c)

	)

66 
	#TBASE_EXECUTION_STATUS
(
°©us
)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/mailbox.c

1 
	~"∂©_¥iv©e.h
"

3 
maûbox_t
 
	gmt_mbox
[
PLATFORM_CORE_COUNT
];

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_def.h

31 #i‚de‡
__PLAT_DEF_H__


32 
	#__PLAT_DEF_H__


	)

34 
	~<∂©f‹m_def.h
>

38 
	#FIP_IMAGE_NAME
 "fù.bö"

	)

41 
	#CONFIG_GICD_ADDR
 0

	)

42 
	#CONFIG_GICC_ADDR
 1

	)

43 
	#CONFIG_GICH_ADDR
 2

	)

44 
	#CONFIG_GICV_ADDR
 3

	)

45 
	#CONFIG_MAX_AFF0
 4

	)

46 
	#CONFIG_MAX_AFF1
 5

	)

48 
	#CONFIG_CPU_SETUP
 6

	)

49 
	#CONFIG_BASE_MMAP
 7

	)

51 
	#CONFIG_HAS_CCI
 8

	)

52 
	#CONFIG_HAS_TZC
 9

	)

53 
	#CONFIG_LIMIT
 10

	)

59 
	#FLASH0_BASE
 0x08000000

	)

60 
	#FLASH0_SIZE
 
TZROM_SIZE


	)

83 
	#MTK_DEVICE_BASE
 0x11000000

	)

84 
	#MTK_DEVICE_SIZE
 0x1000000

	)

86 
	#MT_DEV_BASE
 0x10200000

	)

87 
	#MT_DEV_SIZE
 0x200000

	)

89 
	#MT_GIC_BASE
 0x10220000

	)

91 #i‚de‡
__ASSEMBLY__


92 
mt_mbox
[];

94 
	#MBOX_OFF
 
mt_mbox


	)

97 
	#PARAMS_BASE
 
TZDRAM_BASE


	)

99 
	#DRAM1_BASE
 0x41000000uŒ

	)

100 
	#DRAM1_SIZE
 0x1E000000uŒ

	)

101 
	#DRAM1_END
 (
DRAM1_BASE
 + 
DRAM1_SIZE
 - 1)

	)

102 
	#DRAM1_SEC_SIZE
 0x01000000uŒ

	)

104 
	#DRAM_BASE
 
DRAM1_BASE


	)

105 
	#DRAM_SIZE
 
DRAM1_SIZE


	)

107 
	#DRAM2_BASE
 0x880000000uŒ

	)

108 
	#DRAM2_SIZE
 0x780000000uŒ

	)

109 
	#DRAM2_END
 (
DRAM2_BASE
 + 
DRAM2_SIZE
 - 1)

	)

111 
	#PCIE_EXP_BASE
 0x40000000

	)

112 
	#TZRNG_BASE
 0x7„60000

	)

113 
	#TZNVCTR_BASE
 0x7„70000

	)

114 
	#TZROOTKEY_BASE
 0x7„80000

	)

117 
	#SYS_CNTCTL_BASE
 0x2a430000

	)

118 
	#SYS_CNTREAD_BASE
 0x2a800000

	)

119 
	#SYS_TIMCTL_BASE
 0x2a810000

	)

122 
	#VE_SYSREGS_BASE
 0x1c010000

	)

123 
	#V2M_SYS_ID
 0x0

	)

124 
	#V2M_SYS_LED
 0x8

	)

125 
	#V2M_SYS_CFGDATA
 0xa0

	)

126 
	#V2M_SYS_CFGCTRL
 0xa4

	)

130 
	#NS_IMAGE_OFFSET
 0x41E00000

	)

134 
	#MT_BL31_PLAT_PARAM_VAL
 0x0f1e2d3c4b5a6978ULL

	)

146 
	#SYS_LED_SS_SHIFT
 0x0

	)

147 
	#SYS_LED_EL_SHIFT
 0x1

	)

148 
	#SYS_LED_EC_SHIFT
 0x3

	)

150 
	#SYS_LED_SS_MASK
 0x1

	)

151 
	#SYS_LED_EL_MASK
 0x3

	)

152 
	#SYS_LED_EC_MASK
 0x1f

	)

155 
	#SYS_ID_REV_SHIFT
 27

	)

156 
	#SYS_ID_HBI_SHIFT
 16

	)

157 
	#SYS_ID_BLD_SHIFT
 12

	)

158 
	#SYS_ID_ARCH_SHIFT
 8

	)

159 
	#SYS_ID_FPGA_SHIFT
 0

	)

161 
	#SYS_ID_REV_MASK
 0xf

	)

162 
	#SYS_ID_HBI_MASK
 0xfff

	)

163 
	#SYS_ID_BLD_MASK
 0xf

	)

164 
	#SYS_ID_ARCH_MASK
 0xf

	)

165 
	#SYS_ID_FPGA_MASK
 0xff

	)

167 
	#SYS_ID_BLD_LENGTH
 4

	)

169 
	#REV_MT
 0x0

	)

170 
	#HBI_MT_BASE
 0x020

	)

171 
	#HBI_FOUNDATION
 0x010

	)

173 
	#BLD_GIC_VE_MMAP
 0x0

	)

174 
	#BLD_GIC_A53A57_MMAP
 0x1

	)

176 
	#ARCH_MODEL
 0x1

	)

179 
	#PWRC_BASE
 0x1c100000

	)

185 
	#CCI400_BASE
 0x10390000

	)

186 
	#CCI400_SL_IFACE_CLUSTER0
 4

	)

187 
	#CCI400_SL_IFACE_CLUSTER1
 3

	)

188 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

189 
CCI400_SL_IFACE_CLUSTER1
 : \

190 
CCI400_SL_IFACE_CLUSTER0
)

	)

191 
	#CCI_SEC_ACCESS_OFFSET
 (0x8)

	)

198 
	#VE_GICC_BASE
 0x2c002000

	)

203 
	#BASE_GICD_BASE
 (
MT_GIC_BASE
 + 0x1000)

	)

205 
	#BASE_GICC_BASE
 (
MT_GIC_BASE
 + 0x2000)

	)

206 
	#BASE_GICH_BASE
 (
MT_GIC_BASE
 + 0x4000)

	)

207 
	#BASE_GICV_BASE
 (
MT_GIC_BASE
 + 0x6000)

	)

208 
	#INT_POL_CTL0
 0x10200620

	)

210 
	#MT_EDGE_SENSITIVE
 1

	)

211 
	#MT_LEVEL_SENSITIVE
 0

	)

212 
	#MT_POLARITY_LOW
 0

	)

213 
	#MT_POLARITY_HIGH
 1

	)

216 
	#GIC_PRIVATE_SIGNALS
 (32)

	)

217 
	#NR_GIC_SGI
 (16)

	)

218 
	#NR_GIC_PPI
 (16)

	)

219 
	#GIC_PPI_OFFSET
 (27)

	)

220 
	#MT_NR_PPI
 (5)

	)

221 
	#MT_NR_SPI
 (241)

	)

222 
	#NR_MT_IRQ_LINE
 (
GIC_PPI_OFFSET
 + 
MT_NR_PPI
 + 
MT_NR_SPI
)

	)

225 
	#IRQ_SEC_PHY_TIMER
 29

	)

226 
	#IRQ_SEC_SGI_0
 8

	)

227 
	#IRQ_SEC_SGI_1
 9

	)

228 
	#IRQ_SEC_SGI_2
 10

	)

229 
	#IRQ_SEC_SGI_3
 11

	)

230 
	#IRQ_SEC_SGI_4
 12

	)

231 
	#IRQ_SEC_SGI_5
 13

	)

232 
	#IRQ_SEC_SGI_6
 14

	)

233 
	#IRQ_SEC_SGI_7
 15

	)

234 
	#IRQ_SEC_SGI_8
 16

	)

239 
	#PAGE_ADDR_MASK
 (0xFFF00000)

	)

241 
	#PL011_UART0_BASE
 0x1c090000

	)

242 
	#PL011_UART1_BASE
 0x1c0a0000

	)

243 
	#PL011_UART2_BASE
 0x1c0b0000

	)

244 
	#PL011_UART3_BASE
 0x1c0c0000

	)

251 
	#UART0_BASE
 (
IO_PHYS
 + 0x01002000)

	)

252 
	#UART1_BASE
 (
IO_PHYS
 + 0x01003000)

	)

253 
	#UART2_BASE
 (
IO_PHYS
 + 0x01004000)

	)

254 
	#UART3_BASE
 (
IO_PHYS
 + 0x01005000)

	)

255 
	#CFG_FPGA_PLATFORM
 0

	)

256 
	#PERICFG_BASE
 (
IO_PHYS
 + 0x3000)

	)

260 
	#TZC400_BASE
 0x2a4a0000

	)

267 
	#MT_AID_WIDTH
 4

	)

270 
	#MT_NSAID_DEFAULT
 0

	)

271 
	#MT_NSAID_PCI
 1

	)

272 
	#MT_NSAID_VIRTIO
 8

	)

273 
	#MT_NSAID_AP
 9

	)

274 
	#MT_NSAID_VIRTIO_OLD
 15

	)

277 
	#MT_NSAID_HDLCD0
 2

	)

278 
	#MT_NSAID_CLCD
 7

	)

283 
	#TRNG_ba£
 (0x1020F000)

284 
	#TRNG_BASE_ADDR
 
TRNG_ba£


	)

285 
	#TRNG_BASE_SIZE
 (0x1000)

	)

286 
	#TRNG_CTRL
 (
TRNG_ba£
+0x0000)

	)

287 
	#TRNG_TIME
 (
TRNG_ba£
+0x0004)

	)

288 
	#TRNG_DATA
 (
TRNG_ba£
+0x0008)

	)

289 
	#TRNG_PDN_ba£
 (0x10001088)

	)

290 
	#TRNG_PDN_BASE_ADDR
 (0x10001000)

	)

291 
	#TRNG_PDN_BASE_SIZE
 (0x1000)

	)

292 
	#TRNG_PDN_SET
 (
TRNG_PDN_ba£
 +0x0000)

	)

293 
	#TRNG_PDN_CLR
 (
TRNG_PDN_ba£
 +0x0004)

	)

294 
	#TRNG_PDN_STATUS
 (
TRNG_PDN_ba£
 +0x0008)

	)

295 
	#TRNG_CTRL_RDY
 0x80000000

	)

296 
	#TRNG_CTRL_START
 0x00000001

	)

301 
	#MTK_WDT_BASE
 (
IO_PHYS
 + 0x7000)

	)

302 
	#MTK_WDT_SIZE
 (0x1000)

	)

303 
	#MTK_WDT_MODE
 (
MTK_WDT_BASE
+0x0000)

	)

304 
	#MTK_WDT_LENGTH
 (
MTK_WDT_BASE
+0x0004)

	)

305 
	#MTK_WDT_RESTART
 (
MTK_WDT_BASE
+0x0008)

	)

306 
	#MTK_WDT_STATUS
 (
MTK_WDT_BASE
+0x000C)

	)

307 
	#MTK_WDT_INTERVAL
 (
MTK_WDT_BASE
+0x0010)

	)

308 
	#MTK_WDT_SWRST
 (
MTK_WDT_BASE
+0x0014)

	)

309 
	#MTK_WDT_SWSYSRST
 (
MTK_WDT_BASE
+0x0018)

	)

310 
	#MTK_WDT_NONRST_REG
 (
MTK_WDT_BASE
+0x0020)

	)

311 
	#MTK_WDT_NONRST_REG2
 (
MTK_WDT_BASE
+0x0024)

	)

312 
	#MTK_WDT_REQ_MODE
 (
MTK_WDT_BASE
+0x0030)

	)

313 
	#MTK_WDT_REQ_IRQ_EN
 (
MTK_WDT_BASE
+0x0034)

	)

314 
	#MTK_WDT_DEBUG_CTL
 (
MTK_WDT_BASE
+0x0040)

	)

317 
	#MTK_WDT_STATUS_HWWDT_RST
 (0x80000000)

	)

318 
	#MTK_WDT_STATUS_SWWDT_RST
 (0x40000000)

	)

319 
	#MTK_WDT_STATUS_IRQWDT_RST
 (0x20000000)

	)

320 
	#MTK_WDT_STATUS_DEBUGWDT_RST
 (0x00080000)

	)

321 
	#MTK_WDT_STATUS_SPMWDT_RST
 (0x0002)

	)

322 
	#MTK_WDT_STATUS_SPM_THERMAL_RST
 (0x0001)

	)

323 
	#MTK_WDT_STATUS_THERMAL_DIRECT_RST
 (1<<18)

	)

324 
	#MTK_WDT_STATUS_SECURITY_RST
 (1<<28)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_gic.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<debug.h
>

35 
	~<gic_v2.h
>

36 
	~<gic_v3.h
>

37 
	~<öãºu±_mgmt.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°döt.h
>

40 
	~"∂©_def.h
"

41 
	~"∂©_¥iv©e.h
"

42 
	~<∂©f‹m_def.h
>

43 
	~<°dio.h
>

45 #i‚de‡
MAX_GIC_NR


46 
	#MAX_GIC_NR
 1

	)

49 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

52 
	sgic_chù_d©a
 {

53 
	mßved_•i_íabÀ
[
DIV_ROUND_UP
(320, 32)];

54 
	mßved_•i_c⁄f
[
DIV_ROUND_UP
(320, 16)];

55 
	mßved_•i_èrgë
[
DIV_ROUND_UP
(320, 4)];

56 
	mßved_•i_group
[
DIV_ROUND_UP
(320, 32)];

66 
gic_chù_d©a
 
	ggic_d©a
[
MAX_GIC_NR
];

69 
	$gic_di°_ßve
()

71 
gic_úqs
;

72 
di°_ba£
;

73 
i
;

75 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

77 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

79 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

80 
gic_d©a
[0].
ßved_•i_c⁄f
[
i
] =

81 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4);

83 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

84 
gic_d©a
[0].
ßved_•i_èrgë
[
i
] =

85 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4);

87 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

88 
gic_d©a
[0].
ßved_•i_íabÀ
[
i
] =

89 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4);

91 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

92 
gic_d©a
[0].
ßved_•i_group
[
i
] =

93 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4);

94 
	}
}

96 
	$gic_di°_ª°‹e
()

98 
gic_úqs
;

99 
di°_ba£
;

100 
˘Ã
;

101 
i
;

103 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

105 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

108 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
di°_ba£
);

109 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

110 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
);

113 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

114 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_c⁄f
[i]);

119 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

120 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_èrgë
[i]);

122 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

123 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_íabÀ
[i]);

125 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

126 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_group
[i]);

128 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

129 
	}
}

181 
	$úq_øi£_so·úq
(
m≠
, 
úq
)

183 
ßâ
;

185 
ßâ
 = 1 << 15;

187 if(
	`∂©_ic_gë_öãºu±_ty≥
(
úq
Ë=
INTR_TYPE_S_EL1
)

189 
ßâ
 = 0;

192 
	`gicd_wrôe_sgú
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), (
m≠
 << 16Ë| 
ßâ
 | 
úq
);

194 
	`dsb
();

195 
	}
}

197 
	$gë_ack_öfo
()

199  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

200 
	}
}

202 
	$ack_sgi
(
ür
)

204 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
ür
);

205 
	}
}

207 
	$mt_©f_åiggî_úq
()

209 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
ATF_LOG_IRQ_ID
);

210 
	}
}

212 
	$mask_wdt_fiq
()

214 
	`gicd_£t_i˚«bÀr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

215 
	}
}

222 
	$mt_©f_åiggî_WDT_FIQ
()

224 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

225 
	}
}

233 
	$gicv3_˝uif_£tup
()

235 
s¸_vÆ
, 
vÆ
;

236 
uöçå_t
 
ba£
;

246 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

247 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

251 
	`∑nic
();

254 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

256 
vÆ
 &~
WAKER_PS
;

257 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

258 
	`dsb
();

261 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

262 
vÆ
 & 
WAKER_CA
) {

263 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

270 
s¸_vÆ
 = 
	`ªad_s¸
();

271 
	`wrôe_s¸
(
s¸_vÆ
 | 
SCR_NS_BIT
);

272 
	`isb
();

283 
vÆ
 = 
	`ªad_icc_§e_ñ3
();

284 
	`wrôe_icc_§e_ñ3
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

286 
vÆ
 = 
	`ªad_icc_§e_ñ2
();

287 
	`wrôe_icc_§e_ñ2
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

289 
	`wrôe_icc_pmr_ñ1
(
GIC_PRI_MASK
);

290 
	`isb
();

293 
	`wrôe_s¸
(
s¸_vÆ
);

294 
	`isb
();

295 
	}
}

301 
	$gicv3_˝uif_dó˘iv©e
()

303 
vÆ
;

304 
uöçå_t
 
ba£
;

313 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

314 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

318 
	`∑nic
();

321 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

322 
vÆ
 |
WAKER_PS
;

323 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

324 
	`dsb
();

327 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

328 (
vÆ
 & 
WAKER_CA
) == 0) {

329 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

331 
	}
}

338 
	$gic_˝uif_£tup
(
gicc_ba£
)

340 
vÆ
;

343 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

351 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

352 
	`gicv3_˝uif_£tup
();

355 
vÆ
 = 
ENABLE_GRP0
 | 
ENABLE_GRP1
 | 
FIQ_EN
 | 
FIQ_BYP_DIS_GRP0
;

356 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
FIQ_BYP_DIS_GRP1
 | 
IRQ_BYP_DIS_GRP1
;

359 
	`gicc_wrôe_pmr
(
gicc_ba£
, 0x1 << 7);

360 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

362 
	}
}

368 
	$gic_˝uif_dó˘iv©e
(
gicc_ba£
)

370 
vÆ
;

373 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

374 
vÆ
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

375 
vÆ
 |
FIQ_BYP_DIS_GRP1
 | 
FIQ_BYP_DIS_GRP0
;

376 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
IRQ_BYP_DIS_GRP1
;

377 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

379 
vÆ
 = 
	`gicc_ªad_iidr
(
gicc_ba£
);

386 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

387 
	`gicv3_˝uif_dó˘iv©e
();

390 
	}
}

396 
	$gic_p˝u_di°if_£tup
(
gicd_ba£
)

398 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 0, ~0);

401 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

402 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
, 
GIC_HIGHEST_SEC_PRIORITY
);

403 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

406 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

407 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

408 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

409 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

410 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

411 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

412 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

413 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

414 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

416 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
, 
GIC_HIGHEST_SEC_PRIORITY
);

417 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
, 
GIC_HIGHEST_SEC_PRIORITY
);

418 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
, 
GIC_HIGHEST_SEC_PRIORITY
);

419 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
, 
GIC_HIGHEST_SEC_PRIORITY
);

420 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
, 
GIC_HIGHEST_SEC_PRIORITY
);

421 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
, 
GIC_HIGHEST_SEC_PRIORITY
);

422 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
, 
GIC_HIGHEST_SEC_PRIORITY
);

423 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
, 
GIC_HIGHEST_SEC_PRIORITY
);

424 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
, 
GIC_HIGHEST_SEC_PRIORITY
);

426 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

427 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

428 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

429 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

430 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

431 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

432 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

433 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

434 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

436 
	}
}

438 
	$mt_úq_£t_pﬁ¨ôy
(
úq
, 
pﬁ¨ôy
)

441 
off£t
, 
ªg_ödex
, 
vÆue
;

450 
off£t
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) & 0x1F;

451 
ªg_ödex
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) >> 5;

453 i‡(
pﬁ¨ôy
 == 0) {

455 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

456 
vÆue
 |(1 << 
off£t
);

457 
	`mmio_wrôe_32
((
INT_POL_CTL0
 + (
ªg_ödex
 * 4)), 
vÆue
);

460 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

461 
vÆue
 &~(0x1 << 
off£t
);

462 
	`mmio_wrôe_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4), 
vÆue
);

464 
	}
}

467 
	$mt_úq_£t_£ns
(
ba£
, 
úq
, 
£ns
)

469 
c⁄fig
;

471 i‡(
£ns
 =
MT_EDGE_SENSITIVE
)

473 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

474 
c⁄fig
 |(0x2 << (
úq
 % 16) * 2);

475 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

479 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

480 
c⁄fig
 &~(0x2 << (
úq
 % 16) * 2);

481 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

483 
	}
}

491 
	$gic_di°if_£tup
(
gicd_ba£
)

493 
˘r
, 
num_öts
, 
˘Ã
;

496 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
gicd_ba£
);

497 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

498 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
);

505 
num_öts
 = 
	`gicd_ªad_ty≥r
(
gicd_ba£
Ë& 
IT_LINES_NO_MASK
;

506 
num_öts
++;

507 
˘r
 = 0; cå < 
num_öts
; ctr++)

510 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 
˘r
 << 
IGROUPR_SHIFT
, ~0);

516 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

517 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
GIC_HIGHEST_SEC_PRIORITY
);

518 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
,

519 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

520 
	`mt_úq_£t_£ns
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
MT_EDGE_SENSITIVE
);

523 
	`mt_úq_£t_pﬁ¨ôy
(
WDT_IRQ_BIT_ID
, 
MT_POLARITY_LOW
);

525 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

530 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

531 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_TZ_WDOG
, 
GIC_HIGHEST_SEC_PRIORITY
);

532 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
IRQ_TZ_WDOG
,

533 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

534 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

537 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

539 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

540 
	}
}

543 
	$gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
)

545 
	`¥ötf
("GICD_CTLR=0x%08x\n", 
	`gicd_ªad_˘Ã
(
gicd_ba£
));

549 
	`¥ötf
("GICC_CTRL=0x%08x\n", 
	`gicc_ªad_˘Ã
(
gicc_ba£
));

550 
	`¥ötf
("GICC_PMR=0x%08x\n", 
	`gicc_ªad_pmr
(
gicc_ba£
));

551 
	}
}

554 
	$gic_£tup
()

556 
gicd_ba£
, 
gicc_ba£
;

558 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

559 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

561 
	`gic_˝uif_£tup
(
gicc_ba£
);

562 
	`gic_di°if_£tup
(
gicd_ba£
);

565 
i
, 
no_£c
;

566 
i
 = 0; i < 0xFF; i++)

568 
no_£c
 = 
	`gicd_gë_igrou¥
(
gicd_ba£
, 
i
);

569 
	`¥ötf
("úq = %d, group=0x%x(%s)\n", 
i
, 
no_£c
,Ço_sec ? "non-sec":"sec");

572 
	`gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
);

576 
	}
}

590 
uöt32_t
 
	$∂©_öãºu±_ty≥_to_löe
(
uöt32_t
 
ty≥
, uöt32_à
£curôy_°©e
)

592 
uöt32_t
 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

594 
	`as£π
(
ty≥
 =
INTR_TYPE_S_EL1
 ||

595 
ty≥
 =
INTR_TYPE_EL3
 ||

596 
ty≥
 =
INTR_TYPE_NS
);

598 
	`as£π
(
£curôy_°©e
 =
NON_SECURE
 || securôy_°©ê=
SECURE
);

605 #i‡
MT_GIC_ARCH
 == 2

606  
	`gicv2_öãºu±_ty≥_to_löe
(
gicc_ba£
, 
ty≥
);

610 
	}
}

612 #i‡
MT_GIC_ARCH
 == 2

618 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_ty≥
()

620 
uöt32_t
 
id
, 
gicc_ba£
;

622 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

623 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

626 i‡(
id
 < 1022)

627  
INTR_TYPE_S_EL1
;

629 i‡(
id
 =
GIC_SPURIOUS_INTERRUPT
)

630  
INTR_TYPE_INVAL
;

632  
INTR_TYPE_NS
;

633 
	}
}

640 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_id
()

642 
uöt32_t
 
id
, 
gicc_ba£
;

644 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

645 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

647 i‡(
id
 < 1022)

648  
id
;

650 i‡(
id
 == 1023)

651  
INTR_ID_UNAVAILABLE
;

657  
	`gicc_ªad_ahµú
(
gicc_ba£
);

658 
	}
}

664 
uöt32_t
 
	$∂©_ic_acknowÀdge_öãºu±
()

666  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

667 
	}
}

673 
	$∂©_ic_íd_of_öãºu±
(
uöt32_t
 
id
)

675 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
id
);

677 
	}
}

684 
uöt32_t
 
	$∂©_ic_gë_öãºu±_ty≥
(
uöt32_t
 
id
)

686 
uöt32_t
 
group
;

688 
group
 = 
	`gicd_gë_igrou¥
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
id
);

691 i‡(
group
 =
GRP0
)

692  
INTR_TYPE_S_EL1
;

694  
INTR_TYPE_NS
;

695 
	}
}

697 
uöt64_t
 
	$mt_úq_dump_°©us
(
uöt32_t
 
úq
)

699 
uöt32_t
 
di°_ba£
;

700 
bô
;

701 
uöt32_t
 
ªsu…
;

702 
uöt64_t
 
rc
 = 0;

704 
	`¥ötf
("[ATF GIC dump] irq = %d\n", 
úq
);

706 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

709 
bô
 = 1 << (
úq
 % 32);

710 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

711 
	`¥ötf
("[ATF GIC dump]É«bÀ = %x\n", 
ªsu…
);

712 
rc
 |
ªsu…
;

715 
bô
 = 1 << (
úq
 % 32);

717 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

718 
	`¥ötf
("[ATF GIC dump] grou∞%x (0x1:úq,0x0:fiq)\n", 
ªsu…
);

719 
rc
 |
ªsu…
 << 1;

722 
bô
 = 0xf‡<< ((
úq
 % 4)*8);

723 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IPRIORITYR
 + 
úq
 / 4 * 4Ë& 
bô
) >> ((irq % 4)*8));

724 
	`¥ötf
("[ATF GIC dump]Öri‹ôy = %x\n", 
ªsu…
);

725 
rc
 |
ªsu…
 << 2;

728 
bô
 = 0x3 << ((
úq
 % 16)*2);

730 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
úq
 / 16 * 4Ë& 
bô
) >> ((irq % 16)*2));

731 
	`¥ötf
("[ATF GIC dump] sísôivôy = %x (edge:0x1,Üevñ:0x0)\n", 
ªsu…
>>1);

732 
rc
 |(
ªsu…
>>1) << 10;

735 
bô
 = 1 << (
úq
 % 32);

736 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISPENDR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

737 
	`¥ötf
("[ATF GIC dump]Öídög sètu†%x\n", 
ªsu…
);

738 
rc
 |
ªsu…
 << 11;

741 
bô
 = 1 << (
úq
 % 32);

742 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISACTIVER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

743 
	`¥ötf
("[ATF GIC dump]á˘ivê°©u†%x\n", 
ªsu…
);

744 
rc
 |
ªsu…
 << 12;

747 
bô
 = 1 << (
úq
 % 32);

749 
ªsu…
 = ((
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
úq
-32Ë/ 32 * 4Ë& 
bô
)?1:0);

750 
	`¥ötf
("[ATF GIC dump]Öﬁ¨ôy = %x (0x0: high, 0x1:low)\n", 
ªsu…
);

751 
rc
 |
ªsu…
 << 13;

753  
rc
;

754 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_io_storage.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<io_drivî.h
>

34 
	~<io_fù.h
>

35 
	~<io_memm≠.h
>

36 
	~<io_°‹age.h
>

37 
	~<io_£miho°ög.h
>

38 
	~<£miho°ög.h
>

39 
	~<°rög.h
>

40 
	~"∂©_def.h
"

43 
io_∂©_d©a_t
 
	gio_d©a
;

44 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gsh_dev_c⁄
;

45 
uöçå_t
 
	gsh_dev_•ec
;

46 
uöçå_t
 
	gsh_öô_∑øms
;

47 
uöçå_t
 
	gsh_dev_h™dÀ
;

48 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gfù_dev_c⁄
;

49 
uöçå_t
 
	gfù_dev_•ec
;

50 
uöçå_t
 
	gfù_dev_h™dÀ
;

51 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gmemm≠_dev_c⁄
;

52 
uöçå_t
 
	gmemm≠_dev_•ec
;

53 
uöçå_t
 
	gmemm≠_öô_∑øms
;

54 
uöçå_t
 
	gmemm≠_dev_h™dÀ
;

56 c⁄° 
io_block_•ec_t
 
	gfù_block_•ec
 = {

57 .
off£t
 = 
FLASH0_BASE
,

58 .
	gÀngth
 = 
FLASH0_SIZE


61 c⁄° 
io_fûe_•ec_t
 
	gbl2_fûe_•ec
 = {

62 .
∑th
 = 
BL2_IMAGE_NAME
,

63 .
	gmode
 = 
FOPEN_MODE_RB


66 c⁄° 
io_fûe_•ec_t
 
	gbl31_fûe_•ec
 = {

67 .
∑th
 = 
BL31_IMAGE_NAME
,

68 .
	gmode
 = 
FOPEN_MODE_RB


71 c⁄° 
io_fûe_•ec_t
 
	gbl32_fûe_•ec
 = {

72 .
∑th
 = 
BL32_IMAGE_NAME
,

73 .
	gmode
 = 
FOPEN_MODE_RB


76 c⁄° 
io_fûe_•ec_t
 
	gbl33_fûe_•ec
 = {

77 .
∑th
 = 
BL33_IMAGE_NAME
,

78 .
	gmode
 = 
FOPEN_MODE_RB


81 
›í_fù
(c⁄° 
uöçå_t
 
•ec
);

82 
›í_memm≠
(c⁄° 
uöçå_t
 
•ec
);

84 
	s∂©_io_pﬁicy
 {

85 *
	mimage_«me
;

86 
uöçå_t
 *
	mdev_h™dÀ
;

87 
uöçå_t
 
	mimage_•ec
;

88 (*
	mcheck
)(c⁄° 
uöçå_t
 
	m•ec
);

91 c⁄° 
∂©_io_pﬁicy
 
	gpﬁicõs
[] = {

93 
FIP_IMAGE_NAME
,

94 &
memm≠_dev_h™dÀ
,

95 (
uöçå_t
)&
fù_block_•ec
,

96 
›í_memm≠


98 
BL2_IMAGE_NAME
,

99 &
fù_dev_h™dÀ
,

100 (
uöçå_t
)&
bl2_fûe_•ec
,

101 
›í_fù


103 
BL31_IMAGE_NAME
,

104 &
fù_dev_h™dÀ
,

105 (
uöçå_t
)&
bl31_fûe_•ec
,

106 
›í_fù


108 
BL32_IMAGE_NAME
,

109 &
fù_dev_h™dÀ
,

110 (
uöçå_t
)&
bl32_fûe_•ec
,

111 
›í_fù


113 
BL33_IMAGE_NAME
,

114 &
fù_dev_h™dÀ
,

115 (
uöçå_t
)&
bl33_fûe_•ec
,

116 
›í_fù


123 
	$›í_fù
(c⁄° 
uöçå_t
 
•ec
)

125 
ªsu…
 = 
IO_FAIL
;

128 
ªsu…
 = 
	`io_dev_öô
(
fù_dev_h™dÀ
, (
uöçå_t
)
FIP_IMAGE_NAME
);

129 i‡(
ªsu…
 =
IO_SUCCESS
) {

130 
	`INFO
("Using FIP\n");

133  
ªsu…
;

134 
	}
}

137 
	$›í_memm≠
(c⁄° 
uöçå_t
 
•ec
)

139 
ªsu…
 = 
IO_FAIL
;

140 
uöçå_t
 
loˇl_image_h™dÀ
;

142 
ªsu…
 = 
	`io_dev_öô
(
memm≠_dev_h™dÀ
, 
memm≠_öô_∑øms
);

143 i‡(
ªsu…
 =
IO_SUCCESS
) {

144 
ªsu…
 = 
	`io_›í
(
memm≠_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

145 i‡(
ªsu…
 =
IO_SUCCESS
) {

147 
	`io_˛o£
(
loˇl_image_h™dÀ
);

150  
ªsu…
;

151 
	}
}

154 
	$›í_£miho°ög
(c⁄° 
uöçå_t
 
•ec
)

156 
ªsu…
 = 
IO_FAIL
;

157 
uöçå_t
 
loˇl_image_h™dÀ
;

160 
ªsu…
 = 
	`io_dev_öô
(
sh_dev_h™dÀ
, 
sh_öô_∑øms
);

161 i‡(
ªsu…
 =
IO_SUCCESS
) {

162 
ªsu…
 = 
	`io_›í
(
sh_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

163 i‡(
ªsu…
 =
IO_SUCCESS
) {

164 
	`INFO
("Using Semi-hosting IO\n");

165 
	`io_˛o£
(
loˇl_image_h™dÀ
);

168  
ªsu…
;

169 
	}
}

171 
	$mt_io_£tup
 ()

173 
io_ªsu…
 = 
IO_FAIL
;

176 
	`io_öô
(&
io_d©a
);

179 
io_ªsu…
 = 
	`ªgi°î_io_dev_sh
(&
sh_dev_c⁄
);

180 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

182 
io_ªsu…
 = 
	`ªgi°î_io_dev_fù
(&
fù_dev_c⁄
);

183 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

185 
io_ªsu…
 = 
	`ªgi°î_io_dev_memm≠
(&
memm≠_dev_c⁄
);

186 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

189 
io_ªsu…
 = 
	`io_dev_›í
(
sh_dev_c⁄
, 
sh_dev_•ec
, &
sh_dev_h™dÀ
);

190 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

192 
io_ªsu…
 = 
	`io_dev_›í
(
fù_dev_c⁄
, 
fù_dev_•ec
, &
fù_dev_h™dÀ
);

193 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

195 
io_ªsu…
 = 
	`io_dev_›í
(
memm≠_dev_c⁄
, 
memm≠_dev_•ec
,

196 &
memm≠_dev_h™dÀ
);

197 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

200 ()
io_ªsu…
;

201 
	}
}

206 
	$∂©_gë_image_sour˚
(c⁄° *
image_«me
, 
uöçå_t
 *
dev_h™dÀ
,

207 
uöçå_t
 *
image_•ec
)

209 
ªsu…
 = 
IO_FAIL
;

210 c⁄° 
∂©_io_pﬁicy
 *
pﬁicy
;

212 i‡((
image_«me
 !
NULL
Ë&& (
dev_h™dÀ
 != NULL) &&

213 (
image_•ec
 !
NULL
)) {

214 
pﬁicy
 = 
pﬁicõs
;

215 
pﬁicy
->
image_«me
 !
NULL
) {

216 i‡(
	`°rcmp
(
pﬁicy
->
image_«me
, image_name) == 0) {

217 
ªsu…
 = 
pﬁicy
->
	`check
’ﬁicy->
image_•ec
);

218 i‡(
ªsu…
 =
IO_SUCCESS
) {

219 *
image_•ec
 = 
pﬁicy
->image_spec;

220 *
dev_h™dÀ
 = *(
pﬁicy
->dev_handle);

223 
ªsu…
 = 
	`›í_£miho°ög
(

224 
pﬁicy
->
image_•ec
);

225 i‡(
ªsu…
 =
IO_SUCCESS
) {

226 *
dev_h™dÀ
 = 
sh_dev_h™dÀ
;

227 *
image_•ec
 =

228 
pﬁicy
->
image_•ec
;

232 
pﬁicy
++;

235 
ªsu…
 = 
IO_FAIL
;

237  
ªsu…
;

238 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_pm.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bakîy_lock.h
>

34 
	~<cci400.h
>

35 
	~<scu.h
>

36 
	~<mmio.h
>

37 
	~<∂©f‹m.h
>

38 
	~<c⁄sﬁe.h
>

39 
	~<debug.h
>

40 
	~<∂©f‹m_def.h
>

41 
	~<psci.h
>

42 
	~<powî_åa˚r.h
>

43 
	~<°dio.h
>

44 
	~"drivîs/pwrc/∂©_pwrc.h
"

45 
	~"∂©_def.h
"

46 
	~"∂©_¥iv©e.h
"

47 
	~"Ørch64/∂©_hñ≥rs.h
"

49 
	~"mt_˝uxg±.h
"

51 
	s_ñ3_d‹m™t_d©a
 {

53 
	mmp0_l2e˘Ã_ñ1
;

54 
	mmp0_l2r°dißbÀ
;

56 } 
	gñ3_d‹m™t_d©a
[1] = {{ .
mp0_l2e˘Ã_ñ1
 = 0xDEADDEAD }};

62 
	$mt_affö°_°™dby
(
powî_°©e
)

64 
èrgë_afÊvl
;

67 
èrgë_afÊvl
 = 
	`psci_gë_p°©e_afÊvl
(
powî_°©e
);

73 i‡(
èrgë_afÊvl
 !
MPIDR_AFFLVL0
)

74  
PSCI_E_INVALID_PARAMS
;

80 
	`dsb
();

81 
	`wfi
();

83  
PSCI_E_SUCCESS
;

84 
	}
}

90 
	$mt_affö°_⁄
(
mpidr
,

91 
£c_íåypoöt
,

92 
ns_íåypoöt
,

93 
afÊvl
,

94 
°©e
)

96 
rc
 = 
PSCI_E_SUCCESS
;

97 
löór_id
;

98 
maûbox_t
 *
mt_mboxes
;

104 i‡(
afÊvl
 !
MPIDR_AFFLVL0
)

105 
exô
;

107 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

108 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

109 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

110 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

113 
	`bl31_⁄_íåypoöt
();

114 i‡(
löór_id
 >= 4) {

115 
	`mmio_wrôe_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4), ()
bl31_⁄_íåypoöt
);

116 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4)));

118 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
), ()
bl31_⁄_íåypoöt
);

119 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
)));

122 
exô
:

123  
rc
;

124 
	}
}

138 
	$mt_affö°_off
(
mpidr
,

139 
afÊvl
,

140 
°©e
)

142 
rc
 = 
PSCI_E_SUCCESS
;

143 
gicc_ba£
, 
e˘Ã
;

144 
˝u_£tup
, 
cci_£tup
;

146 
afÊvl
) {

147 
MPIDR_AFFLVL3
:

148 
MPIDR_AFFLVL2
:

150 
MPIDR_AFFLVL1
:

151 i‡(
°©e
 =
PSCI_STATE_OFF
) {

156 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

157 i‡(
cci_£tup
) {

158 
	`cci_dißbÀ_cohîícy
(
mpidr
);

160 
	`dißbÀ_scu
(
mpidr
);

162 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_DOWN
);

166 
MPIDR_AFFLVL0
:

167 i‡(
°©e
 =
PSCI_STATE_OFF
) {

173 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

174 i‡(
˝u_£tup
) {

175 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

176 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

177 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

185 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

186 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

188 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_DOWN
);

193 
	`as£π
(0);

196  
rc
;

197 
	}
}

211 
	$mt_affö°_su•íd
(
mpidr
,

212 
£c_íåypoöt
,

213 
ns_íåypoöt
,

214 
afÊvl
,

215 
°©e
)

217 
rc
 = 
PSCI_E_SUCCESS
;

218 
gicc_ba£
, 
e˘Ã
;

219 
˝u_£tup
, 
cci_£tup
, 
löór_id
;

220 
maûbox_t
 *
mt_mboxes
;

222 
afÊvl
) {

223 
MPIDR_AFFLVL2
:

224 i‡(
°©e
 =
PSCI_STATE_OFF
) {

225 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

228 
p
->
mp0_l2e˘Ã_ñ1
 = 
	`ªad_l2e˘Ã
();

231 
p
->
mp0_l2r°dißbÀ
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

232 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

233 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
);

236 
	`gíîic_timî_backup
();

238 
	`gic_di°_ßve
();

242 
MPIDR_AFFLVL1
:

243 i‡(
°©e
 =
PSCI_STATE_OFF
) {

248 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

249 i‡(
cci_£tup
) {

250 
	`cci_dißbÀ_cohîícy
(
mpidr
);

252 
	`dißbÀ_scu
(
mpidr
);

254 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_SUSPEND
);

258 
MPIDR_AFFLVL0
:

259 i‡(
°©e
 =
PSCI_STATE_OFF
) {

261 
	`mmio_wrôe_32
(
MP0_MISC_CONFIG3
, 
	`mmio_ªad_32
(MP0_MISC_CONFIG3) | (1<<12));

266 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

267 i‡(
˝u_£tup
) {

268 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

269 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

270 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

274 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

275 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

276 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

277 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

285 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

286 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

287 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_SUSPEND
);

292 
	`as£π
(0);

295  
rc
;

296 
	}
}

299 
	$w‹k¨ound_826319
(
mpidr
)

301 
l2a˘Ã
;

304 i‡(
mpidr
 & 
MPIDR_CPU_MASK
)

313 
l2a˘Ã
 = 
	`ªad_l2a˘Ã
();

314 
l2a˘Ã
 = (l2actlr & ~(1<<14)) | (1<<3);

315 
	`wrôe_l2a˘Ã
(
l2a˘Ã
);

318 
	}
}

320 
	#w‹k¨ound_826319
(Ëdÿ{} 0)

	)

324 
	$w‹k¨ound_836870
(
mpidr
)

326 
˝ua˘Ã
;

337 
˝ua˘Ã
 = 
	`ªad_˝ua˘Ã
();

338 
˝ua˘Ã
 = cpuactlr | (1<<24);

339 
	`wrôe_˝ua˘Ã
(
˝ua˘Ã
);

342 
	}
}

344 
	#w‹k¨ound_836870
(Ëdÿ{} 0)

	)

354 
	$mt_affö°_⁄_föish
(
mpidr
,

355 
afÊvl
,

356 
°©e
)

358 
rc
 = 
PSCI_E_SUCCESS
;

359 
löór_id
, 
˝u_£tup
;

360 
maûbox_t
 *
mt_mboxes
;

361 
gicd_ba£
, 
gicc_ba£
, 
e˘Ã
;

363 
afÊvl
) {

365 
MPIDR_AFFLVL2
:

366 i‡(
°©e
 =
PSCI_STATE_OFF
) {

370 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

371 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

376 
MPIDR_AFFLVL1
:

378 i‡(
°©e
 =
PSCI_STATE_OFF
) {

380 
	`w‹k¨ound_826319
(
mpidr
);

381 
	`íabÀ_scu
(
mpidr
);

382 
	`mt_cci_£tup
();

383 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_UP
);

387 
MPIDR_AFFLVL0
:

392 
	`w‹k¨ound_836870
(
mpidr
);

398 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

399 i‡(
˝u_£tup
) {

400 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

401 
e˘Ã
 |
CPUECTLR_SMP_BIT
;

402 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

406 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

407 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

408 
mt_mboxes
[
löór_id
].
vÆue
 = 0;

409 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

412 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

414 
	`gic_˝uif_£tup
(
gicc_ba£
);

420 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

421 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

422 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

423 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

424 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

426 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) |

427 (1 << 
	`CNTNSAR_NS_SHIFT
(1));

428 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

431 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

433 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_UP
);

437 
	`as£π
(0);

442  
rc
;

443 
	}
}

452 
	$mt_affö°_su•íd_föish
(
mpidr
,

453 
afÊvl
,

454 
°©e
)

456 
rc
 = 
PSCI_E_SUCCESS
;

458 
afÊvl
) {

459 
MPIDR_AFFLVL2
:

460 i‡(
°©e
 =
PSCI_STATE_OFF
) {

461 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

463 i‡(
p
->
mp0_l2e˘Ã_ñ1
==0xDEADDEAD)

464 
	`∑nic
();

466 
	`wrôe_l2e˘Ã
(
p
->
mp0_l2e˘Ã_ñ1
);

470 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

471 (
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
)

472 | (
p
->
mp0_l2r°dißbÀ
 & 
L2RSTDISABLE
));

474 
	`gic_£tup
();

475 
	`gic_di°_ª°‹e
();

480 
MPIDR_AFFLVL1
:

481 
MPIDR_AFFLVL0
:

482  
	`mt_affö°_⁄_föish
(
mpidr
, 
afÊvl
, 
°©e
);

485 
	`as£π
(0);

488  
rc
;

489 
	}
}

495 c⁄° 
∂©_pm_›s_t
 
	gmt_∂©_pm_›s
 = {

496 
mt_affö°_°™dby
,

497 
mt_affö°_⁄
,

498 
mt_affö°_off
,

499 
mt_affö°_su•íd
,

500 
mt_affö°_⁄_föish
,

501 
mt_affö°_su•íd_föish
,

508 
	$∂©f‹m_£tup_pm
(c⁄° 
∂©_pm_›s_t
 **
∂©_›s
)

510 *
∂©_›s
 = &
mt_∂©_pm_›s
;

512 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_private.h

31 #i‚de‡
__PLAT_PRIVATE_H__


32 
	#__PLAT_PRIVATE_H__


	)

34 
	~<bl_comm⁄.h
>

35 
	~<∂©f‹m_def.h
>

38 vﬁ©ûê
	smaûbox
 {

39 
vÆue


40 
__©åibuã__
((
__Æig√d__
(
CACHE_WRITEBACK_GRANULE
)));

41 } 
	tmaûbox_t
;

48 
	sbl2_to_bl31_∑øms_mem
 {

49 
bl31_∑øms_t
 
	mbl31_∑øms
;

50 
image_öfo_t
 
	mbl31_image_öfo
;

51 
image_öfo_t
 
	mbl32_image_öfo
;

52 
image_öfo_t
 
	mbl33_image_öfo
;

53 
íåy_poöt_öfo_t
 
	mbl33_ï_öfo
;

54 
íåy_poöt_öfo_t
 
	mbl32_ï_öfo
;

55 
íåy_poöt_öfo_t
 
	mbl31_ï_öfo
;

56 } 
	tbl2_to_bl31_∑øms_mem_t
;

61 
	gmemöfo
;

66 
mt_c⁄figuª_mmu_ñ1
(
tŸÆ_ba£
,

67 
tŸÆ_size
,

72 
mt_c⁄figuª_mmu_ñ3
(
tŸÆ_ba£
,

73 
tŸÆ_size
,

78 
mt_gë_cfgv¨
();

79 
mt_c⁄fig_£tup
();

81 #i‡
RESET_TO_BL31


82 
mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

83 
íåy_poöt_öfo
 *
èrgë_íåy_öfo
);

85 
mt_cci_£tup
();

88 
gic_˝uif_dó˘iv©e
();

89 
gic_˝uif_£tup
();

90 
gic_p˝u_di°if_£tup
();

91 
gic_£tup
();

94 
mt_£tup_t›ﬁogy
();

97 
mt_io_£tup
();

100 
mt_£curôy_£tup
();

101 
uöt32_t
 
gë_devöfo_wôh_ödex
(uint32_t);

103 
mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo
 *
bl32_ï
);

106 
mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo
 *
bl33_ï
);

108 
íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

110 
w‹k¨ound_836870
(
mpidr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_security.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<tzc400.h
>

34 
	~<∂©f‹m.h
>

35 
	~"∂©_def.h
"

36 
	~"∂©_¥iv©e.h
"

39 
	#FILTER_SHIFT
(
fûãr
Ë(1 << fûãr)

	)

47 
	$mt_£curôy_£tup
()

49 
tzc_ö°™˚_t
 
c⁄åﬁÀr
;

60 i‡(!
	`mt_gë_cfgv¨
(
CONFIG_HAS_TZC
))

67 
	`INFO
("Configuring TrustZone Controller\n");

74 
c⁄åﬁÀr
.
ba£
 = 
TZC400_BASE
;

75 
c⁄åﬁÀr
.
aid_width
 = 
MT_AID_WIDTH
;

76 
	`tzc_öô
(&
c⁄åﬁÀr
);

90 
	`tzc_dißbÀ_fûãrs
(&
c⁄åﬁÀr
);

104 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 1,

105 
DRAM1_BASE
, 
DRAM1_END
 - 
DRAM1_SEC_SIZE
,

106 
TZC_REGION_S_NONE
,

107 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

108 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

109 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

110 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

111 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

114 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 3,

115 (
DRAM1_END
 - 
DRAM1_SEC_SIZE
) + 1 , DRAM1_END,

116 
TZC_REGION_S_RDWR
,

120 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 2,

121 
DRAM2_BASE
, 
DRAM2_END
, 
TZC_REGION_S_NONE
,

122 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

123 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

124 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

125 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

126 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

133 
	`tzc_£t_a˘i⁄
(&
c⁄åﬁÀr
, 
TZC_ACTION_ERR
);

136 
	`tzc_íabÀ_fûãrs
(&
c⁄åﬁÀr
);

137 
	}
}

139 
uöt32_t
 
	$gë_devöfo_wôh_ödex
(
uöt32_t
 
i
)

141 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

143 if–
i
 < 
DEVINFO_SIZE
){

144  
ãórg
->
devöfo
[
i
];

148 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_tbase.c

12 
	~<as£π.h
>

13 
	~<debug.h
>

14 
	~<°rög.h
>

15 
	~<tzc400.h
>

16 
	~<∂©f‹m.h
>

17 
	~<mmio.h
>

18 
	~<∂©_def.h
>

19 
	~"∂©_¥iv©e.h
"

21 
	~<¨ch_hñ≥rs.h
>

22 
	~<tba£_¥iv©e.h
>

25 
	#PLAT_TBASE_INPUT_HWIDENTITY
 (0x1)

	)

26 
	#PLAT_TBASE_INPUT_HWKEY
 (0x2)

	)

27 
	#PLAT_TBASE_INPUT_RNG
 (0x3)

	)

29 
	#PLAT_TBASE_INPUT_OK
 ((
uöt32_t
)0)

	)

30 
	#PLAT_TBASE_INPUT_ERROR
 ((
uöt32_t
)-1)

	)

35 
uöt32_t
 
	$∂©_tba£_öput
(
uöt64_t
 
D©aId
,uöt64_t* 
Lígth
,* 
out
)

37 
uöt32_t
 
Sètus
 = 
PLAT_TBASE_INPUT_OK
;

38 
uöt32_t
 
Àngth
 = 0, 
idx
 = 0;

41  
D©aId
 )

43 
PLAT_TBASE_INPUT_HWIDENTITY
:

45 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

47 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
hwuid
)/(uint32_t)); idx++)

49 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
hwuid
[idx];

50 
Àngth
 +(
uöt32_t
);

55 
PLAT_TBASE_INPUT_HWKEY
:

57 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

59 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
HRID
)/(uint32_t)) ; idx++)

61 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
HRID
[idx];

62 
Àngth
 +(
uöt32_t
);

64 *
Lígth
 = 
Àngth
;

67 
PLAT_TBASE_INPUT_RNG
:

69 
uöt32_t
 
vÆue
 = 0;

70 
	`mmio_wrôe_32
(
TRNG_PDN_CLR
, 0x100);

71 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

72 
vÆue
 |
TRNG_CTRL_START
;

73 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

74 0 =(
	`mmio_ªad_32
(
TRNG_CTRL
Ë& 
TRNG_CTRL_RDY
));

75 ((
uöt32_t
*)
out
)[0] = 
	`mmio_ªad_32
(
TRNG_DATA
);

76 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

77 
vÆue
 &~
TRNG_CTRL_START
;

78 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

79 
	`mmio_wrôe_32
(
TRNG_PDN_SET
, 0x100);

80 *
Lígth
 = 4;

85 
Sètus
 = 
PLAT_TBASE_INPUT_ERROR
;

89  
Sètus
;

90 
	}
}

93 
uöt32_t
 
	$∂©_tba£_dump
()

95 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
());

97 
	`¥ötf
–"c‹ê%d i†dum≥d !\n", ()
löór_id
 );

103 
	`´e_wdt_dump
();

107 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_topology.c

31 
	~<as£π.h
>

32 
	~<∂©f‹m_def.h
>

34 
	~<psci.h
>

35 
	~"drivîs/pwrc/∂©_pwrc.h
"

38 
	#AFFINST_INVAL
 0xff

	)

48 
	safföôy_öfo
 {

49 
	msiblög
;

50 
	mchûd
;

51 
	m°©e
;

52 
	md©a
;

53 } 
	tafföôy_öfo_t
;

61 
afföôy_öfo_t
 
	gmt_aff1_t›ﬁogy_m≠
[
PLATFORM_CLUSTER_COUNT
];

62 
afföôy_öfo_t
 
	gmt_aff0_t›ﬁogy_m≠
[
PLATFORM_CORE_COUNT
];

65 
	gt›ﬁogy_£tup_d⁄e
;

78 
	$∂©_gë_aff_cou¡
(
aff_lvl
,

79 
mpidr
)

81 
aff_cou¡
 = 1, 
˘r
;

82 
∑ª¡_aff_id
;

84 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

86 
aff_lvl
) {

93 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF3_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

94 
	`as£π
(
∑ª¡_aff_id
 == 0);

103 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF2_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

104 
	`as£π
(
∑ª¡_aff_id
 == 0);

107 
˘r
 = 0;

108 
mt_aff1_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

109 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[˘r].
siblög
) {

110 
aff_cou¡
++;

116 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

117 
	`as£π
(
∑ª¡_aff_id
 < 
PLATFORM_CLUSTER_COUNT
);

120 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[
∑ª¡_aff_id
].
chûd
;

121 
mt_aff0_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

122 
˘r
 = 
mt_aff0_t›ﬁogy_m≠
[˘r].
siblög
) {

123 
aff_cou¡
++;

128 
	`as£π
(0);

131  
aff_cou¡
;

132 
	}
}

138 
	$∂©_gë_max_afÊvl
()

140  
MPIDR_AFFLVL2
;

141 
	}
}

158 
	$∂©_gë_aff_°©e
(
aff_lvl
,

159 
mpidr
)

161 
aff_°©e
 = 
PSCI_AFF_ABSENT
, 
idx
;

162 
idx
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

164 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

166 
aff_lvl
) {

169 i‡(
	`∂©_gë_max_afÊvl
(Ë>
aff_lvl
)

170 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

175 
aff_°©e
 = 
mt_aff1_t›ﬁogy_m≠
[
idx
].
°©e
;

182 
idx
 = 
mt_aff1_t›ﬁogy_m≠
[idx].
chûd
;

183 
idx
 +(
mpidr
 >> 
MPIDR_AFF0_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

184 
aff_°©e
 = 
mt_aff0_t›ﬁogy_m≠
[
idx
].
°©e
;

187 
	`as£π
(0);

190  
aff_°©e
;

191 
	}
}

198 
	$mt_£tup_t›ﬁogy
()

200 
aff0
, 
aff1
, 
aff_°©e
, 
aff0_off£t
 = 0;

201 
mpidr
;

203 
t›ﬁogy_£tup_d⁄e
 = 0;

205 
aff1
 = 0;áff1 < 
PLATFORM_CLUSTER_COUNT
;áff1++) {

207 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
chûd
 = 
aff0_off£t
;

208 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
siblög
 =áff1 + 1;

210 
aff0
 = 0;áff0 < 
PLATFORM_MAX_CPUS_PER_CLUSTER
;áff0++) {

212 
mpidr
 = 
aff1
 << 
MPIDR_AFF1_SHIFT
;

213 
mpidr
 |
aff0
 << 
MPIDR_AFF0_SHIFT
;

215 i‡(
	`mt_pwrc_ªad_psy§
(
mpidr
Ë!
PSYSR_INVALID
) {

220 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

221 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 =

222 
PSCI_AFF_PRESENT
;

224 
aff_°©e
 = 
PSCI_AFF_ABSENT
;

227 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

228 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 = 
PSCI_AFF_PRESENT
;

230 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
chûd
 = 
AFFINST_INVAL
;

231 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
°©e
 = 
aff_°©e
;

232 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
siblög
 =

233 
aff0_off£t
 + 1;

236 
aff0_off£t
++;

240 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
 - 1].
siblög
 = 
AFFINST_INVAL
;

244 
mt_aff1_t›ﬁogy_m≠
[
aff1
 - 1].
siblög
 = 
AFFINST_INVAL
;

246 
t›ﬁogy_£tup_d⁄e
 = 1;

248 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/platform.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 #O¿
MTK_∂©f‹m
, 
the
 
TSP
 
ˇn
 
execuã
 
eôhî
 
‰om
 
Tru°ed
 
SRAM
 
‹
 Tru°ed 
DRAM
.

25 #Tru°ed 
SRAM
 
is
 
the
 .

26 
	gTSP_RAM_LOCATION
 :
t§am


28 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
t§am
)

29 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZRAM


30 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
tdøm
)

31 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZDRAM


33 
$
(
îr‹
 "Unsupported TSP_RAM_LOCATION value")

34 
ídif


36 #Pro˚s†
TSP_RAM_LOCATION_ID
 
Êag


37 
$
(
evÆ
 
	$$
(
ˇŒ
 
add_deföe
,
TSP_RAM_LOCATION_ID
))

39 
PLAT_INCLUDES
 :-
I∂©
/
mt6755
/
ö˛ude
/ -I∂©/mt6755/ -I∂©/mt6755/
drivîs
/
log
 -I∂©/mt6755/drivîs/
timî
/ -I∂©/mt6755/drivîs/
l2c
/

42 
PLAT_BL_COMMON_SOURCES
 :
drivîs
/
io
/
io_fù
.
c
 \

43 
drivîs
/
io
/
io_memm≠
.
c
 \

44 
drivîs
/
io
/
io_£miho°ög
.
c
 \

45 
lib
/
mmio
.
c
 \

46 
lib
/
Ørch64
/
sy§eg_hñ≥rs
.
S
 \

47 
lib
/
Ørch64
/
xœt_èbÀs
.
c
 \

48 
lib
/
£miho°ög
/£miho°ög.
c
 \

49 
lib
/
£miho°ög
/
Ørch64
/
£miho°ög_ˇŒ
.
S
 \

50 
∂©
/
comm⁄
/
Ørch64
/
∂©_comm⁄
.
c
 \

51 
∂©
/
mt6755
/
∂©_io_°‹age
.
c
 \

52 
∂©
/
comm⁄
/
fiq_smp_ˇŒ
.
c


54 
BL1_SOURCES
 +
drivîs
/
¨m
/
cci400
/cci400.
c
 \

55 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

56 
∂©
/
mt6755
/
bl1_∂©_£tup
.
c
 \

57 
∂©
/
mt6755
/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

58 
∂©
/
mt6755
/
Ørch64
/
∂©_hñ≥rs
.
S


60 
BL2_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

61 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

62 
∂©
/
mt6755
/
bl2_∂©_£tup
.
c
 \

63 
∂©
/
mt6755
/
∂©_£curôy
.
c
 \

64 
∂©
/
mt6755
/
Ørch64
/
∂©f‹m_comm⁄
.
c


66 
BL31_SOURCES
 +
drivîs
/
¨m
/
gic
/
gic_v2
.
c
 \

67 
drivîs
/
¨m
/
gic
/
gic_v3
.
c
 \

68 
drivîs
/
¨m
/
gic
/
Ørch64
/
gic_v3_sy§egs
.
S
 \

69 
drivîs
/
¨m
/
cci400
/cci400.
c
 \

70 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_mp_°ack
.
S
 \

71 
∂©
/
mt6755
/
bl31_∂©_£tup
.
c
 \

72 
∂©
/
mt6755
/
∂©_gic
.
c
 \

73 
∂©
/
mt6755
/
∂©_pm
.
c
 \

74 
∂©
/
mt6755
/
∂©_t›ﬁogy
.
c
 \

75 
∂©
/
mt6755
/
scu
.
c
 \

76 
∂©
/
mt6755
/
powî_åa˚r
.
c
 \

77 
∂©
/
mt6755
/
maûbox
.
c
 \

78 
∂©
/
mt6755
/
Ørch64
/
∂©_hñ≥rs
.
S
 \

79 
∂©
/
mt6755
/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

80 
∂©
/
mt6755
/
drivîs
/
pwrc
/
∂©_pwrc
.
c
 \

81 
∂©
/
mt6755
/
drivîs
/
u¨t
/u¨t.
c
 \

82 
∂©
/
mt6755
/
drivîs
/
timî
/
mt_˝uxg±
.
c
 \

83 
∂©
/
mt6755
/
drivîs
/
l2c
/l2c.
c


85 
BL31_SOURCES
 +
∂©
/
mt6755
/
sù_svc
/
sù_svc_comm⁄
.
c
 \

86 
∂©
/
mt6755
/
sù_svc
/
sù_svc_£tup
.
c
 \

87 
∂©
/
mt6755
/
drivîs
/
log
/log.
c


89 
	`i„q
 (
$
{
RESET_TO_BL31
}, 1)

90 
	gBL31_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

91 
∂©
/
mt6755
/
∂©_£curôy
.
c


92 
ídif


94 
i„q
 (
$
{
SPD
}, 
tba£
)

95 
	gBL31_SOURCES
 +
∂©
/
mt6755
/
∂©_tba£
.
c


96 
ídif


98 #Fœg 
u£d
 
by
 
the
 
MTK_∂©f‹m
 
p‹t
 
to
 
dëîmöe
Åhê
vîsi⁄
 
of
 
ARM
 
GIC
 
¨chôe˘uª


99 #tÿ
u£
 
öãºu±
 
m™agemít
 
ö
 
EL3
.

100 
MT_GIC_ARCH
 := 2

101 
$
(
evÆ
 $(
ˇŒ
 
add_deföe
,
MT_GIC_ARCH
))

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/power_tracer.c

1 
	~<¨ch.h
>

2 
	~<powî_åa˚r.h
>

3 
	~<°dio.h
>

6 
	#åa˚_log
(...Ë
	`¥ötf
("psci: " 
__VA_ARGS__
)

	)

8 
	#åa˚_log
(...)

	)

11 
	$åa˚_powî_Êow
(
mpidr
, 
mode
) {

12 
mode
) {

13 
CPU_UP
:

14 
	`åa˚_log
("core %d:%d ON\n",

15 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

16 (
mpidr
 & 
MPIDR_CPU_MASK
));

18 
CPU_DOWN
:

19 
	`åa˚_log
("core %d:%d OFF\n",

20 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

21 (
mpidr
 & 
MPIDR_CPU_MASK
));

23 
CPU_SUSPEND
:

24 
	`åa˚_log
("core %d:%d SUSPEND\n",

25 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

26 (
mpidr
 & 
MPIDR_CPU_MASK
));

28 
CLUSTER_UP
:

29 
	`åa˚_log
("˛u°î %d ON\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

31 
CLUSTER_DOWN
:

32 
	`åa˚_log
("˛u°î %d OFF\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

34 
CLUSTER_SUSPEND
:

35 
	`åa˚_log
("˛u°î %d SUSPEND\n", (
mpidr
 & 
MPIDR_CPU_MASK
));

38 
	`åa˚_log
("unknownÖower mode\n");

41 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/scu.c

1 
	~<¨ch.h
>

2 
	~<∂©f‹m_def.h
>

3 
	~<mmio.h
>

5 
	$dißbÀ_scu
(
mpidr
) {

6 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

7 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË| 
ACINACTM
);

8 
	}
}

10 
	$íabÀ_scu
(
mpidr
) {

11 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

12 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË& ~
ACINACTM
);

13 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/sip_svc/sip_private.h

38 #i‚de‡
__SIP_PRIVATE_H__


39 
	#__SIP_PRIVATE_H__


	)

41 
	~<¨ch.h
>

42 
	~<bakîy_lock.h
>

48 
uöt64_t
 
sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

49 
uöt64_t
 
x1
,

50 
uöt64_t
 
x2
,

51 
uöt64_t
 
x3
,

52 
uöt64_t
 
x4
,

53 *
cookõ
,

54 *
h™dÀ
,

55 
uöt64_t
 
Êags
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/sip_svc/sip_svc_common.c

38 
	~<¨ch.h
>

39 
	~<¨ch_hñ≥rs.h
>

40 
	~<as£π.h
>

41 
	~<ru¡ime_svc.h
>

42 
	~<debug.h
>

43 
	~<sù_svc.h
>

44 
	~<sù_îr‹.h
>

45 
	~<∂©f‹m.h
>

46 
	~<mmio.h
>

47 
	~"sù_¥iv©e.h
"

48 
	~"l2c.h
"

53 
	skî√l_öfo
 {

54 
uöt64_t
 
	mpc
;

55 
uöt64_t
 
	mr0
;

56 
uöt64_t
 
	mr1
;

59 
kî√l_öfo
 
	gk_öfo
;

61 
	$ßve_kî√l_öfo
(
uöt64_t
 
pc
, uöt64_à
r0
, uöt64_à
r1
)

63 
k_öfo
.
pc
=pc;

64 
k_öfo
.
r0
=r0;

65 
k_öfo
.
r1
=r1;

66 
	}
}

68 
uöt64_t
 
	$gë_kî√l_öfo_pc
()

70  
k_öfo
.
pc
;

71 
	}
}

73 
uöt64_t
 
	$gë_kî√l_öfo_r0
()

75  
k_öfo
.
r0
;

76 
	}
}

78 
uöt64_t
 
	$gë_kî√l_öfo_r1
()

80  
k_öfo
.
r1
;

81 
	}
}

83 
bl31_¥ï¨e_k64_íåy
();

84 
ñ3_exô
();

90 
uöt64_t
 
	gmcusys_wrôe_cou¡
 = 0;

91 
uöt64_t
 
	$sù_mcusys_wrôe
(
ªg_addr
, 
ªg_vÆue
)

93 if((
ªg_addr
 & 0xFFFF0000Ë!(
MCUCFG_BASE
 & 0xFFFF0000))

94  
SIP_SVC_E_INVALID_R™ge
;

97 if(–
MP0_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP0_MISC_CONFIG9
 ) ||

98 –
MP1_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP1_MISC_CONFIG9
 )) {

99  
SIP_SVC_E_PERMISSION_DENY
;

102 
	`mmio_wrôe_32
(
ªg_addr
, 
ªg_vÆue
);

103 
	`dsb
();

105 
mcusys_wrôe_cou¡
++;

107  
SIP_SVC_E_SUCCESS
;

108 
	}
}

113 
uöt64_t
 
	$sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

114 
uöt64_t
 
x1
,

115 
uöt64_t
 
x2
,

116 
uöt64_t
 
x3
,

117 
uöt64_t
 
x4
,

118 *
cookõ
,

119 *
h™dÀ
,

120 
uöt64_t
 
Êags
)

122 
uöt64_t
 
rc
;

123 
uöt32_t
 
ns
;

124 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

127 
ns
 = 
	`is_ˇŒî_n⁄_£cuª
(
Êags
);

133 
smc_fid
) {

134 
MTK_SIP_TBASE_HWUID_AARCH32
:

136 i‡(
ns
)

137 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

138 
	`SMC_RET4
(
h™dÀ
, 
ãórg
->
hwuid
[0],Åeearg->hwuid[1],

139 
ãórg
->
hwuid
[2],Åeearg->hwuid[3]);

142 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH32
:

143 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH64
:

144 
rc
 = 
	`sù_mcusys_wrôe
(
x1
, 
x2
);

146 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH32
:

147 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH64
:

148 
rc
 = 
mcusys_wrôe_cou¡
;

150 
MTK_SIP_KERNEL_TMP_AARCH32
:

151 
	`¥ötf
("save kernel info\n");

152 
	`ßve_kî√l_öfo
(
x1
, 
x2
, 
x3
);

153 
	`¥ötf
("end bl31_prepare_k64_entry...\n");

154 
	`bl31_¥ï¨e_k64_íåy
();

155 
	`¥ötf
("el3_exit\n");

156 
	`SMC_RET0
(
h™dÀ
);

158 
MTK_SIP_KERNEL_L2_SHARING_AARCH32
:

159 
MTK_SIP_KERNEL_L2_SHARING_AARCH64
:

160 
	`¥ötf
("config L2$ size\n");

161 
rc
 = 
	`swôch_L2_size
(
x1
, 
x2
, 
x3
);

162 
	`¥ötf
("config L2$ size done\n");

164 #i‡
DEBUG


165 
MTK_SIP_KERNEL_GIC_DUMP_AARCH32
:

166 
MTK_SIP_KERNEL_GIC_DUMP_AARCH64
:

167 
rc
 = 
	`mt_úq_dump_°©us
(
x1
);

170 
MTK_SIP_KERNEL_WDT_AARCH32
:

171 
MTK_SIP_KERNEL_WDT_AARCH64
:

172 
wdt_kî√l_cb_addr
 = 
x1
;

173 
	`¥ötf
("MTK_SIP_KERNEL_WDT : 0x%∞\n", 
wdt_kî√l_cb_addr
);

174 
	`¥ötf
("teearg->atf_aee_debug_buf_start : 0x%llx \n",

175 
ãórg
->
©f_´e_debug_buf_°¨t
);

176 
rc
 = 
ãórg
->
©f_´e_debug_buf_°¨t
;

179 
rc
 = 
SMC_UNK
;

180 
	`WARN
("Unim∂emíãd SIP CÆl: 0x%x \n", 
smc_fid
);

183 
	`SMC_RET1
(
h™dÀ
, 
rc
);

184 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/sip_svc/sip_svc_setup.c

38 
	~<debug.h
>

39 
	~<ru¡ime_svc.h
>

40 
	~<sù_svc.h
>

41 
	~<°döt.h
>

42 
	~<uuid.h
>

43 
	~"sù_¥iv©e.h
"

46 
DEFINE_SVC_UUID
(
mtk_sù_svc_uid
,

52 
öt32_t
 
	$sù_svc_£tup
()

59 
	}
}

65 
uöt64_t
 
	$sù_svc_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

66 
uöt64_t
 
x1
,

67 
uöt64_t
 
x2
,

68 
uöt64_t
 
x3
,

69 
uöt64_t
 
x4
,

70 *
cookõ
,

71 *
h™dÀ
,

72 
uöt64_t
 
Êags
)

77 i‡(
	`is_sù_fid
(
smc_fid
)) {

78  
	`sù_smc_h™dÀr
(
smc_fid
, 
x1
, 
x2
, 
x3
, 
x4
, 
cookõ
,

79 
h™dÀ
, 
Êags
);

82 
smc_fid
) {

83 
MTK_SIP_SVC_CALL_COUNT
:

88 
	`SMC_RET1
(
h™dÀ
, 
MTK_SIP_SVC_NUM_CALLS
);

90 
MTK_SIP_SVC_UID
:

92 
	`SMC_UUID_RET
(
h™dÀ
, 
mtk_sù_svc_uid
);

94 
MTK_SIP_SVC_VERSION
:

96 
	`SMC_RET2
(
h™dÀ
, 
MTK_SIP_VERSION_MAJOR
, 
MTK_SIP_VERSION_MINOR
);

99 
	`WARN
("Unim∂emíãd SIP Sîvi˚ CÆl: 0x%x \n", 
smc_fid
);

100 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

102 
	}
}

105 
DECLARE_RT_SVC
(

106 
sù_svc
,

108 
OEN_SIP_START
,

109 
OEN_SIP_END
,

110 
SMC_TYPE_FAST
,

111 
sù_svc_£tup
,

112 
sù_svc_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/aarch64/plat_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<bl_comm⁄.h
>

34 
	~<gic_v2.h
>

35 
	~"../∂©_def.h
"

37 .
globl
 
	g∂©f‹m_gë_íåypoöt


38 .
globl
 
	g∂©_£c⁄d¨y_cﬁd_boŸ_£tup


39 .
globl
 
	g∂©f‹m_mem_öô


40 .
globl
 
	g∂©_ªp‹t_ex˚±i⁄


42 .
ma¸o
 
mt_choo£_gicmm≠
 
	g∑øm1
, 
	g∑øm2
, 
	gx_tmp
, 
	gw_tmp
, 
ªs


43 
	gldr
 \
	gx_tmp
, =
VE_SYSREGS_BASE
 + 
V2M_SYS_ID


44 
ldr
 \
w_tmp
, [\
x_tmp
]

45 
	gubfx
 \
	gw_tmp
, \w_tmp, #SYS_ID_BLD_SHIFT, #SYS_ID_BLD_LENGTH

46 
	gcmp
 \
	gw_tmp
, #BLD_GIC_VE_MMAP

47 
	gc£l
 \
	gªs
, \
	g∑øm1
, \
	g∑øm2
, 
	geq


48 .
ídm


61 
func
 
∂©_£c⁄d¨y_cﬁd_boŸ_£tup


70 
mrs
 
	gx0
, 
mpidr_ñ1


71 
ldr
 
	gx1
, =
PWRC_BASE


72 
°r
 
w0
, [
x1
, #PPOFFR_OFF]

78 
ldr
 
	gx0
, =
VE_GICC_BASE


79 
ldr
 
x1
, =
BASE_GICC_BASE


80 
mt_choo£_gicmm≠
 
x0
, 
	gx1
, 
	gx2
, 
	gw2
, 
x1


81 
mov
 
	gw0
, #(
	gIRQ_BYP_DIS_GRP1
 | 
	gFIQ_BYP_DIS_GRP1
)

82 
‹r
 
	gw0
, w0, #(
	gIRQ_BYP_DIS_GRP0
 | 
	gFIQ_BYP_DIS_GRP0
)

83 
°r
 
	gw0
, [
x1
, #GICC_CTLR]

91 
dsb
 
sy


92 
wfi


93 
	gcb_∑nic
:

94 
b
 
cb_∑nic


117 
func
 
∂©f‹m_gë_íåypoöt


118 
mov
 
x9
, 
x30


124 
ldr
 
	gx1
, =
fú°_boŸ


125 
ldr
 
w2
, [
x1
]

126 
cmp
 
	gw2
, #0

127 
beq
 
w¨m_ª£t


128 
°r
 
	gwzr
, [
x1
]

129 
mov
 
	gx0
, #0

130 
b
 
exô


131 
	gw¨m_ª£t
:

139 
ldr
 
x10
, =
MBOX_OFF


140 
bl
 
∂©f‹m_gë_c‹e_pos


141 
l¶
 
x0
, 
	gx0
, #CACHE_WRITEBACK_SHIFT

142 
ldr
 
	gx0
, [
x10
, 
x0
]

143 
cbz
 
	gx0
, 
_∑nic


144 
	gexô
:

145 
ªt
 
x9


146 
_∑nic
: 
b
 _panic

160 
func
 
∂©f‹m_mem_öô


161 
ldr
 
x0
, =
MBOX_OFF


162 
mov
 
w1
, #PLATFORM_CORE_COUNT

163 
	glo›
:

164 
°r
 
xzr
, [
x0
], #CACHE_WRITEBACK_GRANULE

165 
subs
 
	gw1
, w1, #1

166 
	gb
.
gt
 
lo›


167 
ªt


177 
func
 
∂©_ªp‹t_ex˚±i⁄


178 
mrs
 
	gx1
, 
CuºítEl


179 
l§
 
	gx1
, x1, #MODE_EL_SHIFT

180 
l¶
 
	gx1
, x1, #SYS_LED_EL_SHIFT

181 
l¶
 
	gx0
, x0, #SYS_LED_EC_SHIFT

182 
mov
 
	gx2
, #(
	gSECURE
 << 
	gSYS_LED_SS_SHIFT
)

183 
‹r
 
	gx0
, x0, 
x2


184 
‹r
 
	gx0
, x0, 
x1


185 
mov
 
	gx1
, #VE_SYSREGS_BASE

186 
add
 
	gx1
, x1, #V2M_SYS_LED

187 
°r
 
	gw0
, [
x1
]

188 
	gªt


190 .
d©a


191 
	gfú°_boŸ
:

194 .
globl
 
ªad_l2a˘Ã


195 
func
 
ªad_l2a˘Ã


196 
dsb
 
sy


197 
MRS
 
x0
, 
S3_1_C15_C0_0


198 
dsb
 
sy


199 
isb


200 
	gªt


202 .
globl
 
wrôe_l2a˘Ã


203 
func
 
wrôe_l2a˘Ã


204 
dsb
 
sy


205 
MSR
 
	gS3_1_C15_C0_0
, 
x0


206 
isb


207 
dsb
 
sy


208 
	gªt


210 .
globl
 
ªad_l2e˘Ã


211 
func
 
ªad_l2e˘Ã


212 
MRS
 
	gx0
, 
S3_1_C11_C0_3


213 
dsb
 
sy


214 
isb


215 
	gªt


217 .
globl
 
wrôe_l2e˘Ã


218 
func
 
wrôe_l2e˘Ã


219 
dsb
 
sy


220 
MSR
 
	gS3_1_C11_C0_3
, 
x0


221 
isb


222 
dsb
 
sy


223 
	gªt


225 .
globl
 
ªad_˝ua˘Ã


226 
func
 
ªad_˝ua˘Ã


227 
dsb
 
sy


228 
MRS
 
	gx0
, 
S3_1_C15_C2_0


229 
dsb
 
sy


230 
isb


231 
	gªt


233 .
globl
 
wrôe_˝ua˘Ã


234 
func
 
wrôe_˝ua˘Ã


235 
dsb
 
sy


236 
MSR
 
	gS3_1_C15_C2_0
, 
x0


237 
isb


238 
dsb
 
sy


239 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/aarch64/plat_helpers.h

1 #i‚de‡
PLAT_HELPERS_H


2 
	#PLAT_HELPERS_H


	)

4 
ªad_l2a˘Ã
();

5 
ªad_l2e˘Ã
();

7 
wrôe_l2a˘Ã
();

8 
wrôe_l2e˘Ã
();

10 
ªad_˝ua˘Ã
();

11 
wrôe_˝ua˘Ã
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/aarch64/platform_common.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<cci400.h
>

36 
	~<debug.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<xœt_èbÀs.h
>

40 
	~"../∂©_def.h
"

51 
	gmt_c⁄fig
[
CONFIG_LIMIT
];

59 c⁄° 
mm≠_ªgi⁄_t
 
	gmt_mm≠
[] = {

61 {(
TZRAM_BASE
 & 
PAGE_ADDR_MASK
),

62 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
), 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
},

68 { 
MTK_DEVICE_BASE
, 
MTK_DEVICE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

71 {(
MT_DEV_BASE
 & 
PAGE_ADDR_MASK
),
MT_DEV_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

79 { 
MTK_WDT_BASE
, 
MTK_WDT_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

92 
	#DEFINE_CONFIGURE_MMU_EL
(
_ñ
) \

93 
mt_c⁄figuª_mmu_ñ
##
	`_ñ
(
tŸÆ_ba£
, \

94 
tŸÆ_size
, \

95 
ro_°¨t
, \

96 
ro_limô
, \

97 
coh_°¨t
, \

98 
coh_limô
) \

100 
	`mm≠_add_ªgi⁄
(
tŸÆ_ba£
, \

101 
tŸÆ_size
, \

102 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
); \

103 
	`mm≠_add_ªgi⁄
(
ro_°¨t
, 
ro_limô
 -Ño_start, \

104 
MT_MEMORY
 | 
MT_RO
 | 
MT_SECURE
); \

105 
	`mm≠_add_ªgi⁄
(
coh_°¨t
, 
coh_limô
 - coh_start, \

106 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
); \

107 
	`mm≠_add
(
mt_mm≠
); \

108 
	`öô_xœt_èbÀs
(); \

110 
íabÀ_mmu_ñ
##
	`_ñ
(); \

111 }

	)

114 
	$DEFINE_CONFIGURE_MMU_EL
(1)

115 
	$DEFINE_CONFIGURE_MMU_EL
(3)

118 
	$mt_gë_cfgv¨
(
v¨_id
)

120 
	`as£π
(
v¨_id
 < 
CONFIG_LIMIT
);

121  
mt_c⁄fig
[
v¨_id
];

122 
	}
}

131 
	$mt_c⁄fig_£tup
()

133 
ªv
, 
hbi
, 
bld
, 
¨ch
, 
sys_id
, 
midr_≤
;

135 
sys_id
 = 
	`mmio_ªad_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_ID
);

136 
ªv
 = (
sys_id
 >> 
SYS_ID_REV_SHIFT
Ë& 
SYS_ID_REV_MASK
;

137 
hbi
 = (
sys_id
 >> 
SYS_ID_HBI_SHIFT
Ë& 
SYS_ID_HBI_MASK
;

138 
bld
 = (
sys_id
 >> 
SYS_ID_BLD_SHIFT
Ë& 
SYS_ID_BLD_MASK
;

139 
¨ch
 = (
sys_id
 >> 
SYS_ID_ARCH_SHIFT
Ë& 
SYS_ID_ARCH_MASK
;

141 
¨ch
 = 
ARCH_MODEL
;

142 
bld
 = 
BLD_GIC_A53A57_MMAP
;

143 
hbi
 = 
HBI_MT_BASE
;

145 i‡((
ªv
 !
REV_MT
Ë|| (
¨ch
 !
ARCH_MODEL
))

146 
	`∑nic
();

152 
bld
) {

154 
BLD_GIC_VE_MMAP
:

155 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
VE_GICD_BASE
;

156 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
VE_GICC_BASE
;

157 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
VE_GICH_BASE
;

158 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
VE_GICV_BASE
;

161 
BLD_GIC_A53A57_MMAP
:

162 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
BASE_GICD_BASE
;

163 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
BASE_GICC_BASE
;

164 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
BASE_GICH_BASE
;

165 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
BASE_GICV_BASE
;

168 
	`as£π
(0);

175 
hbi
) {

176 
HBI_FOUNDATION
:

177 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

178 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 1;

179 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

180 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 0;

181 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 0;

182 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

184 
HBI_MT_BASE
:

185 
midr_≤
 = (
	`ªad_midr
(Ë>> 
MIDR_PN_SHIFT
Ë& 
MIDR_PN_MASK
;

186 i‡((
midr_≤
 =
MIDR_PN_A57
Ë|| (midr_≤ =
MIDR_PN_A53
))

187 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 1;

189 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

191 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

192 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 2;

193 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 1;

194 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 1;

195 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

198 
	`as£π
(0);

202 
	}
}

204 
	$∂©_gë_ns_image_íåypoöt
()

207  
BL33_START_ADDRESS
;

209 
	}
}

211 
uöt64_t
 
	$∂©_gë_sys˙t_‰eq
()

213 
uöt64_t
 
cou¡î_ba£_‰equícy
;

217 
cou¡î_ba£_‰equícy
 = 13000000;

220 
	`as£π
(
cou¡î_ba£_‰equícy
 != 0);

222  
cou¡î_ba£_‰equícy
;

223 
	}
}

225 
	$mt_cci_£tup
()

227 
cci_£tup
;

234 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

235 i‡(
cci_£tup
)

236 
	`cci_íabÀ_cohîícy
(
	`ªad_mpidr
());

237 
	}
}

243 
	$mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

245 
	`SET_SECURITY_STATE
(
bl32_ï_öfo
->
h
.
©å
, 
SECURE
);

250 
bl32_ï_öfo
->
•§
 = 0;

251 
	}
}

256 
	$mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

258 
ñ_°©us
;

259 
mode
;

260 
rw
, 
ì
;

261 
daif
;

265 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

266 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

268 i‡(
ñ_°©us
)

269 
mode
 = 
MODE_EL2
;

271 
mode
 = 
MODE_EL1
;

306 
rw
 = 0;

308 
rw
 = 1;

310 i‡(0 =
rw
) {

311 
	`¥ötf
("LK is AArch32\n");

312 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

313 
mode
 = 
MODE32_svc
;

314 
ì
 = 0;

319 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

321 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

328 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)
BOOT_ARGUMENT_LOCATION
;

329 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

331 
	`¥ötf
("LK is AArch64\n");

332 
bl33_ï_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

334 
	`SET_SECURITY_STATE
(
bl33_ï_öfo
->
h
.
©å
, 
NON_SECURE
);

335 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/bl1_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<mmio.h
>

36 
	~<∂©f‹m.h
>

37 
	~<∂©f‹m_def.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__COHERENT_RAM_START__
;

46 
__COHERENT_RAM_END__
;

48 
__BL1_RAM_START__
;

49 
__BL1_RAM_END__
;

58 
	#BL1_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

59 
	#BL1_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

61 
	#BL1_RAM_BASE
 ()(&
__BL1_RAM_START__
)

	)

62 
	#BL1_RAM_LIMIT
 ()(&
__BL1_RAM_END__
)

	)

66 
memöfo_t
 
	gbl1_tzøm_œyout
;

68 
memöfo_t
 *
	$bl1_∂©_£c_mem_œyout
()

70  &
bl1_tzøm_œyout
;

71 
	}
}

76 
	$bl1_óæy_∂©f‹m_£tup
()

78 c⁄° 
bl1_øm_ba£
 = 
BL1_RAM_BASE
;

79 c⁄° 
bl1_øm_limô
 = 
BL1_RAM_LIMIT
;

80 c⁄° 
tzøm_limô
 = 
TZRAM_BASE
 + 
TZRAM_SIZE
;

83 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

93 
bl1_tzøm_œyout
.
tŸÆ_ba£
 = 
TZRAM_BASE
;

94 
bl1_tzøm_œyout
.
tŸÆ_size
 = 
TZRAM_SIZE
;

96 i‡(
bl1_øm_limô
 =
tzøm_limô
) {

98 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
TZRAM_BASE
;

99 
bl1_tzøm_œyout
.
‰ì_size
 = 
bl1_øm_ba£
 - 
TZRAM_BASE
;

102 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
bl1_øm_limô
;

103 
bl1_tzøm_œyout
.
‰ì_size
 =

104 
tzøm_limô
 - 
bl1_øm_limô
;

108 
	`mt_c⁄fig_£tup
();

109 
	}
}

116 
	$bl1_∂©f‹m_£tup
()

119 
	`mt_io_£tup
();

120 
	}
}

128 
	$bl1_∂©_¨ch_£tup
()

130 
	`mt_cci_£tup
();

132 
	`mt_c⁄figuª_mmu_ñ3
(
bl1_tzøm_œyout
.
tŸÆ_ba£
,

133 
bl1_tzøm_œyout
.
tŸÆ_size
,

134 
TZROM_BASE
,

135 
TZROM_BASE
 + 
TZROM_SIZE
,

136 
BL1_COHERENT_RAM_BASE
,

137 
BL1_COHERENT_RAM_LIMIT
);

138 
	}
}

147 
	$bl1_∂©_£t_bl2_ï_öfo
(
image_öfo_t
 *
bl2_image
,

148 
íåy_poöt_öfo_t
 *
bl2_ï
)

150 
	`SET_SECURITY_STATE
(
bl2_ï
->
h
.
©å
, 
SECURE
);

151 
bl2_ï
->
•§
 = 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

152 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/bl2_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<∂©f‹m.h
>

36 
	~<∂©f‹m_def.h
>

37 
	~<°rög.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__RO_START__
;

46 
__RO_END__
;

48 
__COHERENT_RAM_START__
;

49 
__COHERENT_RAM_END__
;

57 
	#BL2_RO_BASE
 ()(&
__RO_START__
)

	)

58 
	#BL2_RO_LIMIT
 ()(&
__RO_END__
)

	)

67 
	#BL2_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

68 
	#BL2_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

71 **
bl2_ñ_ch™ge_mem_±r
;

74 
memöfo_t
 
bl2_tzøm_œyout


75 
__©åibuã__
 ((
Æig√d
(
PLATFORM_CACHE_LINE_SIZE
),

76 
£˘i⁄
("tzfw_coherent_mem")));

82 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

83 
íåy_poöt_öfo_t
 *
	gbl31_ï_öfo
;

85 
memöfo_t
 *
	$bl2_∂©_£c_mem_œyout
()

87  &
bl2_tzøm_œyout
;

88 
	}
}

99 
bl31_∑øms_t
 *
	$bl2_∂©_gë_bl31_∑øms
()

101 
bl2_to_bl31_∑øms_mem_t
 *
bl31_∑øms_mem
;

103 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


108 
	`as£π
(
BL32_BASE
 > 
PARAMS_BASE
 + (
bl2_to_bl31_∑øms_mem_t
));

115 
bl31_∑øms_mem
 = (
bl2_to_bl31_∑øms_mem_t
 *)
PARAMS_BASE
;

116 
	`mem£t
((*)
PARAMS_BASE
, 0, (
bl2_to_bl31_∑øms_mem_t
));

119 
bl2_to_bl31_∑øms
 = &
bl31_∑øms_mem
->
bl31_∑øms
;

120 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
, 
PARAM_BL31
, 
VERSION_1
, 0);

123 
bl31_ï_öfo
 = &
bl31_∑øms_mem
->bl31_ep_info;

124 
bl2_to_bl31_∑øms
->
bl31_image_öfo
 = &
bl31_∑øms_mem
->bl31_image_info;

125 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl31_image_öfo
, 
PARAM_IMAGE_BINARY
,

126 
VERSION_1
, 0);

129 i‡(
BL32_BASE
) {

130 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
 =

131 &
bl31_∑øms_mem
->
bl32_ï_öfo
;

132 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_ï_öfo
,

133 
PARAM_EP
, 
VERSION_1
, 0);

134 
bl2_to_bl31_∑øms
->
bl32_image_öfo
 =

135 &
bl31_∑øms_mem
->
bl32_image_öfo
;

136 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_image_öfo
,

137 
PARAM_IMAGE_BINARY
,

138 
VERSION_1
, 0);

142 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 = &
bl31_∑øms_mem
->bl33_ep_info;

143 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_ï_öfo
,

144 
PARAM_EP
, 
VERSION_1
, 0);

145 
bl2_to_bl31_∑øms
->
bl33_image_öfo
 = &
bl31_∑øms_mem
->bl33_image_info;

146 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_image_öfo
, 
PARAM_IMAGE_BINARY
,

147 
VERSION_1
, 0);

149  
bl2_to_bl31_∑øms
;

150 
	}
}

157 
íåy_poöt_öfo
 *
	$bl2_∂©_gë_bl31_ï_öfo
()

159 #i‡
DEBUG


160 
bl31_ï_öfo
->
¨gs
.
¨g1
 = 
MT_BL31_PLAT_PARAM_VAL
;

162  
bl31_ï_öfo
;

163 
	}
}

171 
	$bl2_óæy_∂©f‹m_£tup
(
memöfo_t
 *
mem_œyout
)

174 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

177 
bl2_tzøm_œyout
.
tŸÆ_ba£
 = 
mem_œyout
->total_base;

178 
bl2_tzøm_œyout
.
tŸÆ_size
 = 
mem_œyout
->total_size;

179 
bl2_tzøm_œyout
.
‰ì_ba£
 = 
mem_œyout
->free_base;

180 
bl2_tzøm_œyout
.
‰ì_size
 = 
mem_œyout
->free_size;

181 
bl2_tzøm_œyout
.
©å
 = 
mem_œyout
->attr;

182 
bl2_tzøm_œyout
.
√xt
 = 0;

185 
	`mt_c⁄fig_£tup
();

186 
	}
}

192 
	$bl2_∂©f‹m_£tup
()

200 
	`mt_£curôy_£tup
();

203 
	`mt_io_£tup
();

204 
	}
}

207 
	$bl2_∂©_Êush_bl31_∑øms
()

209 
	`Êush_dˇche_ønge
(()
PARAMS_BASE
, \

210 (
bl2_to_bl31_∑øms_mem_t
));

211 
	}
}

218 
	$bl2_∂©_¨ch_£tup
()

220 
	`mt_c⁄figuª_mmu_ñ1
(
bl2_tzøm_œyout
.
tŸÆ_ba£
,

221 
bl2_tzøm_œyout
.
tŸÆ_size
,

222 
BL2_RO_BASE
,

223 
BL2_RO_LIMIT
,

224 
BL2_COHERENT_RAM_BASE
,

225 
BL2_COHERENT_RAM_LIMIT
);

226 
	}
}

234 
	$bl2_∂©_£t_bl31_ï_öfo
(
image_öfo_t
 *
bl31_image_öfo
,

235 
íåy_poöt_öfo_t
 *
bl31_ï_öfo
)

237 
	`SET_SECURITY_STATE
(
bl31_ï_öfo
->
h
.
©å
, 
SECURE
);

238 
bl31_ï_öfo
->
•§
 = 
	`SPSR_64
(
MODE_EL3
, 
MODE_SP_ELX
,

239 
DISABLE_ALL_EXCEPTIONS
);

240 
	}
}

249 
	$bl2_∂©_£t_bl32_ï_öfo
(
image_öfo_t
 *
bl32_image_öfo
,

250 
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

252 
	`mt_£t_bl32_ï_öfo
(
bl32_ï_öfo
);

253 
	}
}

261 
	$bl2_∂©_£t_bl33_ï_öfo
(
image_öfo_t
 *
image
,

262 
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

264 
	`mt_£t_bl33_ï_öfo
(
bl33_ï_öfo
);

265 
	}
}

271 
	$bl2_∂©_gë_bl32_memöfo
(
memöfo_t
 *
bl32_memöfo
)

276 
bl32_memöfo
->
tŸÆ_ba£
 = 
BL32_BASE
;

277 
bl32_memöfo
->
‰ì_ba£
 = 
BL32_BASE
;

278 
bl32_memöfo
->
tŸÆ_size
 =

279 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

280 
bl32_memöfo
->
‰ì_size
 =

281 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

282 
bl32_memöfo
->
©å
 = 
BOT_LOAD
;

283 
bl32_memöfo
->
√xt
 = 0;

284 
	}
}

290 
	$bl2_∂©_gë_bl33_memöfo
(
memöfo_t
 *
bl33_memöfo
)

292 
bl33_memöfo
->
tŸÆ_ba£
 = 
DRAM_BASE
;

293 
bl33_memöfo
->
tŸÆ_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

294 
bl33_memöfo
->
‰ì_ba£
 = 
DRAM_BASE
;

295 
bl33_memöfo
->
‰ì_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

296 
bl33_memöfo
->
©å
 = 0;

297 
bl33_memöfo
->
©å
 = 0;

298 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/bl31_plat_setup.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<c⁄sﬁe.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°ddef.h
>

40 
	~"∂©_def.h
"

41 
	~"∂©_¥iv©e.h
"

42 
	~<°dio.h
>

43 
	~<°rög.h
>

44 
	~<xœt_èbÀs.h
>

45 
	~"l2c.h
"

46 
	~"mt_˝uxg±.h
"

52 
bl31_⁄_íåypoöt
();

54 
__RO_START__
;

55 
__RO_END__
;

57 
__COHERENT_RAM_START__
;

58 
__COHERENT_RAM_END__
;

66 
	#BL31_RO_BASE
 ()(&
__RO_START__
)

	)

67 
	#BL31_RO_LIMIT
 ()(&
__RO_END__
)

	)

76 
	#BL31_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

77 
	#BL31_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

80 #i‡
RESET_TO_BL31


81 
íåy_poöt_öfo_t
 
	gbl32_íåypoöt_öfo
;

82 
íåy_poöt_öfo_t
 
	gbl33_íåypoöt_öfo
;

88 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

97 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_image_ï_öfo
(
uöt32_t
 
ty≥
)

99 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

101 #i‡
RESET_TO_BL31


103 i‡(
ty≥
 =
NON_SECURE
)

104 
	`mt_gë_íåy_poöt_öfo
(
NON_SECURE
, &
bl33_íåypoöt_öfo
);

106 
	`mt_gë_íåy_poöt_öfo
(
SECURE
, &
bl32_íåypoöt_öfo
);

108 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

109 &
bl33_íåypoöt_öfo
 :

110 &
bl32_íåypoöt_öfo
;

112 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

113 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

114 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

119 i‡(
√xt_image_öfo
->
pc
)

120  
√xt_image_öfo
;

122  
NULL
;

123 
	}
}

126 
uöt64_t
 
gë_kî√l_öfo_pc
();

127 
uöt64_t
 
gë_kî√l_öfo_r0
();

128 
uöt64_t
 
gë_kî√l_öfo_r1
();

130 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_kî√l_ï_öfo
(
uöt32_t
 
ty≥
)

132 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

133 
ñ_°©us
;

134 
mode
;

136 #i‡
RESET_TO_BL31


137 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

138 &
bl33_íåypoöt_öfo
 :

139 &
bl32_íåypoöt_öfo
;

141 
	`mt_gë_íåy_poöt_öfo
(
ty≥
, 
√xt_image_öfo
);

144 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

145 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

146 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

151 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

152 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

154 i‡(
ñ_°©us
)

155 
mode
 = 
MODE_EL2
;

157 
mode
 = 
MODE_EL1
;

160 i‡(0 =
rw
) {

161 
	`¥ötf
("LK is AArch32\n");

162 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

163 
mode
 = 
MODE32_svc
;

164 
ì
 = 0;

169 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

171 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

178 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)&
∂_boŸ_¨gumít
;

179 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

183 
	`¥ötf
("Kernel is 64Bit\n");

184 
√xt_image_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

185 
√xt_image_öfo
->
pc
 = 
	`gë_kî√l_öfo_pc
();

186 
√xt_image_öfo
->
¨gs
.
¨g0
=
	`gë_kî√l_öfo_r0
();

187 
√xt_image_öfo
->
¨gs
.
¨g1
=
	`gë_kî√l_öfo_r1
();

189 
	`¥ötf
("pc=0x%llx,Ñ0=0x%llx,Ñ1=0x%llx\n",

190 
√xt_image_öfo
->
pc
,

191 
√xt_image_öfo
->
¨gs
.
¨g0
,

192 
√xt_image_öfo
->
¨gs
.
¨g1
);

195 
	`SET_SECURITY_STATE
(
√xt_image_öfo
->
h
.
©å
, 
NON_SECURE
);

199 i‡(
√xt_image_öfo
->
pc
)

200  
√xt_image_öfo
;

202  
NULL
;

203 
	}
}

217 
	$bl31_óæy_∂©f‹m_£tup
(
bl31_∑øms_t
 *
‰om_bl2
,

218 *
∂©_∑øms_‰om_bl2
)

220 
n‹mÆ_ba£
;

221 
©f_ba£
;

223 
	`c⁄fig_L2_size
();

224 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

227 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(0), ()
bl31_⁄_íåypoöt
);

229 
n‹mÆ_ba£
 = 0;

233 
©f_ba£
 = 
	`ªad_˙ç˘_ñ0
();

234 
	`©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

238 
	`c⁄sﬁe_öô
(
ãórg
->
©f_log_p‹t
);

240 
	`¥ötf
("LK bootárgument\n\r");

241 
	`¥ötf
("loˇti⁄=0x%x size=0x%x\n\r", 
BOOT_ARGUMENT_LOCATION
, 
BOOT_ARGUMENT_SIZE
);

242 
	`¥ötf
("©f_magic=0x%x\n\r", 
ãórg
->
©f_magic
);

243 
	`¥ötf
("ãe_suµ‹t=0x%x\n\r", 
ãórg
->
ãe_suµ‹t
);

244 
	`¥ötf
("ãe_íåy=0x%x\n\r", 
ãórg
->
ãe_íåy
);

245 
	`¥ötf
("ãe_boŸ_¨g_addr=0x%x\n\r", 
ãórg
->
ãe_boŸ_¨g_addr
);

246 
	`¥ötf
("©f_log_p‹t=0x%x\n\r", 
ãórg
->
©f_log_p‹t
);

247 
	`¥ötf
("©f_log_baudøã=0x%x\n\r", 
ãórg
->
©f_log_baudøã
);

248 
	`¥ötf
("©f_log_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
);

249 
	`¥ötf
("©f_log_buf_size=0x%x\n\r", 
ãórg
->
©f_log_buf_size
);

250 
	`¥ötf
("©f_´e_debug_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_°¨t
);

251 
	`¥ötf
("©f_´e_debug_buf_size=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_size
);

252 
	`¥ötf
("©f_úq_num=%d\n\r", 
ãórg
->
©f_úq_num
);

253 
	`¥ötf
("BL33_START_ADDRESS=0x%x\n\r", 
BL33_START_ADDRESS
);

256 
	`mt_c⁄fig_£tup
();

258 
	`¥ötf
("bl31_setup\n\r");

259 #i‡
RESET_TO_BL31


261 
	`as£π
(
‰om_bl2
 =
NULL
);

262 
	`as£π
(
∂©_∑øms_‰om_bl2
 =
NULL
);

263 
	`¥ötf
("RESET_TO_BL31\n\r");

279 
	`¥ötf
("not RESET_TO_BL31\n");

281 
	`as£π
(
‰om_bl2
 !
NULL
);

282 
	`as£π
(
‰om_bl2
->
h
.
ty≥
 =
PARAM_BL31
);

283 
	`as£π
(
‰om_bl2
->
h
.
vîsi⁄
 >
VERSION_1
);

285 
bl2_to_bl31_∑øms
 = 
‰om_bl2
;

286 
	`as£π
((()
∂©_∑øms_‰om_bl2
Ë=
MT_BL31_PLAT_PARAM_VAL
);

288 
	}
}

294 
	$bl31_∂©f‹m_£tup
()

299 
	`gic_£tup
();

307 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGDATA
, 0);

308 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGCTRL
,

314 
	`mmio_wrôe_32
(
SYS_CNTCTL_BASE
 + 
CNTCR_OFF
, 
	`CNTCR_FCREQ
(0Ë| 
CNTCR_EN
);

317 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

318 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

319 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

320 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

321 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

323 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) | (1 << CNTNSAR_NS_SHIFT(1));

324 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

328 
	`mt_£tup_t›ﬁogy
();

329 
	}
}

335 
	$bl31_∂©_¨ch_£tup
()

337 
mpidr
 = 
	`ªad_mpidr
();

343 
	`w‹k¨ound_836870
(
mpidr
);

348 
	`˛ór_˙tvoff
(
mpidr
);

350 #i‡
RESET_TO_BL31


351 
	`mt_cci_£tup
();

355 
	`mmio_wrôe_32
(
CCI400_BASE
 + 
CCI_SEC_ACCESS_OFFSET
 , 0x1);

358 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

359 if(
ãórg
->
©f_log_buf_size
 !=0 ) {

360 
	`¥ötf
("mm≠át‡buf„∏: 0x%x, 0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
,

361 
ãórg
->
©f_log_buf_size
);

362 
	`mm≠_add_ªgi⁄
((
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
,

363 
MT_DEVICE
 | 
MT_RW
 | 
MT_NS
);

364 
	`¥ötf
("mmapátf buffer (force 2MBáligned): 0x%x, 0x%x\n\r",

365 (
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
);

370 
	`mm≠_add_ªgi⁄
(
TZRAM2_BASE
, ((
TZRAM2_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

371 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
);

375 
	`mt_c⁄figuª_mmu_ñ3
(
TZRAM_BASE
,

376 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

377 
BL31_RO_BASE
,

378 
BL31_RO_LIMIT
,

379 
BL31_COHERENT_RAM_BASE
,

380 
BL31_COHERENT_RAM_LIMIT
);

386 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

387 
	}
}

389 #i‡
RESET_TO_BL31


394 
	$mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

395 
íåy_poöt_öfo_t
 *
èrgë_íåy_öfo
)

397 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

398 i‡(
èrgë_£curôy
 =
NON_SECURE
) {

399 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

400 
PARAM_EP
,

401 
VERSION_1
,

407 
èrgë_íåy_öfo
->
pc
 = 
	`∂©_gë_ns_image_íåypoöt
();

409 
	`mt_£t_bl33_ï_öfo
(
èrgë_íåy_öfo
);

412 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

413 
PARAM_EP
,

414 
VERSION_1
,

417 i‡(
ãórg
->
ãe_suµ‹t
)

419 
èrgë_íåy_öfo
->
pc
 = 
ãórg
->
ãe_íåy
;

420 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

424 i‡(
BL32_BASE
 != 0) {

427 
èrgë_íåy_öfo
->
pc
 = 
BL32_BASE
;

428 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

432 
	}
}

435 
	$íabÀ_ns_ac˚ss_to_˝ue˘Ã
() {

436 
√xt_a˘Ã
;

439 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ2
();

440 
√xt_a˘Ã
 |
ACTLR_CPUECTLR_BIT
;

441 
	`wrôe_a˘Ã_ñ2
(
√xt_a˘Ã
);

443 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ3
();

444 
√xt_a˘Ã
 |
ACTLR_CPUECTLR_BIT
;

445 
	`wrôe_a˘Ã_ñ3
(
√xt_a˘Ã
);

451 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/bl32_plat_setup.c

31 
	~<bl_comm⁄.h
>

32 
	~<c⁄sﬁe.h
>

33 
	~<∂©f‹m.h
>

34 
	~"∂©_def.h
"

35 
	~"∂©_¥iv©e.h
"

41 
__RO_START__
;

42 
__RO_END__
;

44 
__COHERENT_RAM_START__
;

45 
__COHERENT_RAM_END__
;

53 
	#BL32_RO_BASE
 ()(&
__RO_START__
)

	)

54 
	#BL32_RO_LIMIT
 ()(&
__RO_END__
)

	)

63 
	#BL32_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

64 
	#BL32_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

69 
	$bl32_óæy_∂©f‹m_£tup
()

75 
	`c⁄sﬁe_öô
(
PL011_UART1_BASE
);

78 
	`mt_c⁄fig_£tup
();

79 
	}
}

84 
	$bl32_∂©f‹m_£tup
()

87 
	}
}

93 
	$bl32_∂©_¨ch_£tup
()

95 
	`mt_c⁄figuª_mmu_ñ1
(
BL32_RO_BASE
,

96 (
BL32_COHERENT_RAM_LIMIT
 - 
BL32_RO_BASE
),

97 
BL32_RO_BASE
,

98 
BL32_RO_LIMIT
,

99 
BL32_COHERENT_RAM_BASE
,

100 
BL32_COHERENT_RAM_LIMIT
);

101 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/l2c/l2c.c

1 
	~<∂©f‹m_def.h
>

2 
	~<¨ch.h
>

3 
	~<¨ch_hñ≥rs.h
>

4 
	~<mmio.h
>

5 
	~<sù_îr‹.h
>

6 
	~<•ölock.h
>

7 
	~<debug.h
>

8 
	~"∂©_¥iv©e.h
"

9 
	~"l2c.h
"

12 
•ölock_t
 
	gl2_sh¨e_lock
;

14 
	$c⁄fig_L2_size
()

16 
ˇche_cfg0
, 
ˇche_cfg1
;

19 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_512K
 << 
L2C_SIZE_CFG_OFF
);

20 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

21 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

22 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

25 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_512K
 << 
L2C_SIZE_CFG_OFF
);

26 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

27 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

28 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

29 
	}
}

31 
uöt64_t
 
	$swôch_L2_size
(
uöt64_t
 
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
)

33 
ˇche_cfg0
, 
ˇche_cfg1
;

34 
ªt
 = 
SIP_SVC_E_SUCCESS
;

35 
l2c_sh¨e_öfo
 
sh¨e_öfo
;

37 
sh¨e_öfo
.
˛u°î_b‹row
 = (
˛u°î_b‹row_ªtu∫
 >> 16) & 0xFFFF;

38 
sh¨e_öfo
.
˛u°î_ªtu∫
 = 
˛u°î_b‹row_ªtu∫
 & 0xFFFF;

39 
sh¨e_öfo
.
sh¨e_˛u°î_num
 = share_cluster_num;

41 
	`•ö_lock
(&
l2_sh¨e_lock
);

45 
	`dis_i_d_dcsw_›_Æl
(
DCCISW
);

49 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

50 
ˇche_cfg0
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

51 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
);

52 
ˇche_cfg1
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

54 
›ti⁄
) {

55 
BORROW_L2
:

56 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

58 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

59 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

60 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

61 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

64 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

66 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

67 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

68 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

69 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

72 
ˇche_cfg1
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

73 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

74 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

75 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

79 
RETURN_L2
:

80 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

82 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

83 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

84 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

85 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

88 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

90 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

91 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

92 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

93 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

96 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

97 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

98 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

99 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

103 if((
	`gë_devöfo_wôh_ödex
(0)&0xff) == 0xc0)

105 
	`¥ötf
("switch L2$ size 5.1\n");

107 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_256K
 << 
L2C_SIZE_CFG_OFF
);

108 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

109 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

110 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

120 
ªt
 = 
SIP_SVC_E_NOT_SUPPORTED
;

125 
	`íabÀ_ˇche
();

127 
	`¥ötf
("switch L2$ size 7\n");

129 
	`•ö_u∆ock
(&
l2_sh¨e_lock
);

131  
ªt
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/l2c/l2c.h

1 #i‚de‡
_MT_L2C_H_


2 
	#_MT_L2C_H_


	)

4 
	#CONFIGED_256K
 0x1

	)

5 
	#CONFIGED_512K
 0x3

	)

6 
	#L2C_SIZE_CFG_OFF
 8

	)

7 
	#L2C_SHARE_ENABLE
 12

	)

9 
	e›ti⁄s
{

10 
	mBORROW_L2
,

11 
	mRETURN_L2
,

12 
	mBORROW_NONE


15 
	s_l2c_sh¨e_öfo
{

16 
uöt32_t
 
	msh¨e_˛u°î_num
;

17 
uöt32_t
 
	m˛u°î_b‹row
;

18 
uöt32_t
 
	m˛u°î_ªtu∫
;

19 }
	tl2c_sh¨e_öfo
;

21 
c⁄fig_L2_size
();

22 
uöt64_t
 
swôch_L2_size
(uöt64_à
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/log/log.c

38 
	~<log.h
>

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<°döt.h
>

42 
	~<∂©f‹m.h
>

43 
	~<¨ch.h
>

44 
	~<¨ch_hñ≥rs.h
>

45 
	~<mmio.h
>

46 
	~<∂©_def.h
>

48 
	#DEBUG_LOG_SERVICE
 1

	)

49 #i‡
DEBUG_LOG_SERVICE


50 
	#debug_¥öt
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

52 
	#debug_¥öt
(...Ë(()0)

	)

55 
bl31_log_£rvi˚_ªgi°î
((*
lock_gë
)(),

56 (*
log_putc
)(),

57 (*
lock_ªÀa£
)());

59 
	`bl31_log_£rvi˚_ªgi°î2
((*
lock_gë
)(),

60 (*
log_putc
)(),

61 (*
lock_ªÀa£
)());

64 
mt_log_buf_°¨t
 = 0;

65 
mt_log_buf_size
 = 0;

66 
mt_log_buf_íd
 = 0;

67 *
mt_ex˚±i⁄_buf_íd
 = 0;

68 
©f_log_˘æ_t
 *
p_©f_log_˘æ
 = 0;

69 *
±r_©f_¸ash_Êag
 = 0;

70 *
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = 0;

73 
	$mt_log_su•íd_Êush
()

75 if–
mt_log_buf_size
 != 0 )

77 
	`Êush_dˇche_ønge
((
uöt64_t
)
mt_log_buf_°¨t
, (uöt64_t)
mt_log_buf_size
);

79 
	}
}

82 
	$mt_log_lock_acquúe
()

84 
	`•ö_lock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

87 
	}
}

90 
	$mt_log_wrôe
(
c
)

92 *(*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
c
;

94 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
++;

96 if–
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 < 
mt_log_buf_íd
 )

97 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
++;

99 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

102 
	}
}

104 
	$mt_log_wrôe2
(
c
)

106 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

107 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

108 *
±r_ex_buf
 = 
NULL
;

109 *
±r_wrôe_pos
 = 
NULL
;

112 if(
±r_©f_¸ash_Êag
 =
NULL
)

115 
±r_wrôe_pos
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
löór_id
];

116 
±r_ex_buf
 = (*)((
uöçå_t
)*
±r_wrôe_pos
);

119 if((
uöçå_t
)
±r_ex_buf
 <(uöçå_t)
mt_ex˚±i⁄_buf_íd
) {

120 *
±r_ex_buf
 = 
c
;

121 (*
±r_wrôe_pos
)++;

127 
	}
}

130 
	$mt_¸ash_log_dump
(
uöt8_t
 *
¸ash_log_addr
, 
uöt32_t
 
¸ash_log_size
)

133 
uöt64_t
 
ªt
 = 0;

134 
uöt64_t
 
ªad_cou¡
;

135 
uöt64_t
 
off£t
;

136 
uöt64_t
 
pos
;

137 
uöt64_t
 
wrôe_cou¡
 = 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
;

138 
uöt8_t
 *
r_±r
 = 
NULL
;

139 
uöt8_t
 *
w_±r
 = 
NULL
;

140 
uöt8_t
 *
°¨t_±r
 = (uöt8_t*)(
uöçå_t
)(
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
);

142 if(
wrôe_cou¡
 == 0)

145 if(
wrôe_cou¡
 > 
¸ash_log_size
) {

146 
off£t
 = 
¸ash_log_size
-1;

147 
ªad_cou¡
 = 
¸ash_log_size
;

149 
off£t
 = 
wrôe_cou¡
-1;

150 
ªad_cou¡
 = 
wrôe_cou¡
;

153 
pos
 = 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
-1;

154 if(
pos
 < (
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
))

155 
pos
 = 
mt_log_buf_íd
;

156 
r_±r
 = (
uöt8_t
 *)((
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

158 
w_±r
 = 
¸ash_log_addr
 + 
off£t
;

159 
ªad_cou¡
) {

160 *(
w_±r
--Ë*(
r_±r
--);

161 if(
r_±r
 < 
°¨t_±r
)

162 
r_±r
 = (
uöt8_t
*)(
uöçå_t
)
mt_log_buf_íd
;

163 
ªad_cou¡
--;

164 
ªt
++;

167  
ªt
;

168 
	}
}

170 
	$mt_gë_uƒód_log_size
()

172 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =p_©f_log_˘æ->öfo.
©f_wrôe_pos
)

176 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 <Ö_©f_log_˘æ->öfo.
©f_wrôe_pos
)

178  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 -Ö_©f_log_˘æ->öfo.
©f_ªad_pos
);

182  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 +Ö_©f_log_˘æ->öfo.
©f_buf_size
)

183 - 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
;

184 
	}
}

187 
	$mt_log_lock_ªÀa£
()

189 
©f_buf_uƒód_size
 = 
	`mt_gë_uƒód_log_size
();

192 if(
©f_buf_uƒód_size
 >
ATF_LOG_SIGNAL_THRESHOLD_SIZE
)

199 if(
p_©f_log_˘æ
->
öfo
.
©f_ªadî_Æive
)

201 
	`mt_©f_åiggî_úq
();

202 
p_©f_log_˘æ
->
öfo
.
©f_úq_cou¡
++;

205 
p_©f_log_˘æ
->
öfo
.
©f_buf_uƒód_size
 =átf_buf_unread_size;

208 
	`•ö_u∆ock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

211 
	}
}

213 
uöt32_t
 
	$is_powî_⁄_boŸ
()

215 
uöt32_t
 
wdt_°a
, 
wdt_öãrvÆ
;

216 
wdt_°a
 = 
	`mmio_ªad_32
(
MTK_WDT_STATUS
);

217 
wdt_öãrvÆ
 = 
	`mmio_ªad_32
(
MTK_WDT_INTERVAL
);

218 
	`¥ötf
("°a=0x%x i¡=0x%x\r\n", 
wdt_°a
, 
wdt_öãrvÆ
);

222 if(
wdt_öãrvÆ
 & (1<<2))

225 
	}
}

227 
	$mt_log_£t_¸ash_Êag
()

229 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

230 
	}
}

232 
	$mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
)

234 
uöt32_t
 
dump_ªt
=0;

235 
i
;

236 
mt_log_buf_°¨t
 = 
°¨t
;

237 
mt_log_buf_size
 = 
size
;

238 
mt_log_buf_íd
 = 
°¨t
 + 
size
 - 1 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

239 
mt_ex˚±i⁄_buf_íd
 = (*)(
uöçå_t
)(
°¨t
 + 
size
 - 1 - 
´e_buf_size
);

241 
p_©f_log_˘æ
 = (
©f_log_˘æ_t
*)(
uöçå_t
)
°¨t
;

244 
±r_©f_¸ash_Êag
 = &
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
;

245 
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[0];

247 if(
	`is_powî_⁄_boŸ
()) {

248 
	`debug_¥öt
("is_power_on_boot:Årue\n");

249 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

251 
	`debug_¥öt
("is_power_on_boot: false\n");

252 if(
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 =
ATF_CRASH_MAGIC_NO
) {

253 
	`debug_¥öt
("¸ash fœg: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

254 
	`debug_¥öt
("©f_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

255 
	`debug_¥öt
("©f_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

256 
	`debug_¥öt
("dump crashlog\n");

257 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

258 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

259 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

260 
	`debug_¥öt
("©f_¸ash_log_addr: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

261 
dump_ªt
 = 
	`mt_¸ash_log_dump
((
uöt8_t
*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
, 
ATF_CRASH_LAST_LOG_SIZE
);

262 
	`debug_¥öt
("dump_ªt=%d.\n", 
dump_ªt
);

267 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0,

268 
size
-
´e_buf_size
-
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

269 
	`mem£t
((*)(
uöçå_t
)(
°¨t
+(
size
-
´e_buf_size
)), 0x0,áee_buf_size);

271 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

275 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
 = 
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

276 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
 = 
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

277 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

278 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

279 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

280 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
 = 0;

282 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

283 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

284 
	`debug_¥öt
("mt_log_£tu∞-átf_wrôe_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

285 
	`debug_¥öt
("mt_log_£tu∞-átf_ªad_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
);

286 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_lock : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
);

287 
	`debug_¥öt
("mt_log_£tu∞- mt_log_buf_íd : 0x%x\n", 
mt_log_buf_íd
);

289 
	`debug_¥öt
("mt_log_£tu∞- ATF_CRASH_LAST_LOG_SIZE : 0x%x\n", 
ATF_CRASH_LAST_LOG_SIZE
);

290 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE_PER_CPU : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE_PER_CPU
);

291 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE
);

292 
	`debug_¥öt
("mt_log_£tu∞- PLATFORM_CORE_COUNT : 0x%x\n", 
PLATFORM_CORE_COUNT
);

294 
i
=0; i<
PLATFORM_CORE_COUNT
; i++) {

295 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
i
] = (
°¨t
+(
size
-
´e_buf_size
)-
ATF_EXCEPT_BUF_SIZE
)+ i*
ATF_EXCEPT_BUF_SIZE_PER_CPU
;

296 
	`debug_¥öt
("mt_log_£tu∞-átf_ex˚±_wrôe_pos_≥r_˝u[%d]: 0x%x\n", 
i
, 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[i]);

299 if(
dump_ªt
) {

301 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

302 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

303 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
 = 
ATF_CRASH_LAST_LOG_SIZE
 + 
ATF_EXCEPT_BUF_SIZE
;

304 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

307 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_Êag : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

308 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

309 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
);

311 
	`bl31_log_£rvi˚_ªgi°î
(&
mt_log_lock_acquúe
, &
mt_log_wrôe
,

312 &
mt_log_lock_ªÀa£
);

313 
	`bl31_log_£rvi˚_ªgi°î2
(
NULL
, &
mt_log_wrôe2
, NULL);

314 
	}
}

317 
	#MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 120

	)

318 
	#TBASE_TAG
 "TBASE"

	)

319 
	gmt_log_£cuª_os_buf
[
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
+1] = {0};

320 
	gmt_log_£cuª_os_pos
 = 0;

322 
	$mt_log_£cuª_os_¥öt
(
c
)

324 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = 
c
;

327 if–
c
 == '\n' )

329 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
+1] = '\0';

330 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

331 
mt_log_£cuª_os_pos
 = 0;

335 
mt_log_£cuª_os_pos
++;

338 if–
mt_log_£cuª_os_pos
 =
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 )

340 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = '\0';

341 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

342 
mt_log_£cuª_os_pos
 = 0;

344 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/log/log.h

49 #i‚de‡
ATF_LOG_DRV_H


50 
	#ATF_LOG_DRV_H


	)

52 
	~<•ölock.h
>

53 
	~<°döt.h
>

54 
	~<∂©f‹m_def.h
>

56 
	#ATF_LOG_CTRL_BUF_SIZE
 256

	)

57 
	#ATF_LOG_SIGNAL_THRESHOLD_SIZE
 1024

	)

59 
	#ATF_CRASH_MAGIC_NO
 0xdód1abf

	)

75 
	#ATF_CRASH_LAST_LOG_SIZE
 (32*1024)

	)

76 
	#ATF_EXCEPT_BUF_SIZE_PER_CPU
 (4*1024)

	)

77 
	#ATF_EXCEPT_BUF_SIZE
 (
ATF_EXCEPT_BUF_SIZE_PER_CPU
 * 
PLATFORM_CORE_COUNT
)

	)

79 
	u©f_log_˘æ


83 
	m©f_buf_addr
;

84 
	m©f_buf_size
;

85 
	m©f_wrôe_pos
;

86 
	m©f_ªad_pos
;

87 
•ölock_t
 
	m©f_buf_lock
;

88 
	m©f_buf_uƒód_size
;

89 
	m©f_úq_cou¡
;

90 
	m©f_ªadî_Æive
;

91 
uöt64_t
 
	m©f_tŸÆ_wrôe_cou¡
;

92 
uöt64_t
 
	m©f_tŸÆ_ªad_cou¡
;

93 
	m©f_´e_dbg_buf_addr
;

94 
	m©f_´e_dbg_buf_size
;

95 
	m©f_¸ash_log_addr
;

96 
	m©f_¸ash_log_size
;

97 
	m©f_¸ash_Êag
;

98 
	m©f_ex˚±_wrôe_pos_≥r_˝u
[
PLATFORM_CORE_COUNT
];

99 } 
	möfo
;

100 
	md©a
[
ATF_LOG_CTRL_BUF_SIZE
];

101 } 
	t©f_log_˘æ_t
;

103 
mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
);

104 
mt_log_lock_acquúe
();

105 
mt_log_wrôe
(
c
);

106 
mt_log_lock_ªÀa£
();

107 
mt_log_su•íd_Êush
();

108 
mt_log_£cuª_os_¥öt
(
c
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/timer/mt_cpuxgpt.c

37 
	~<°döt.h
>

38 
	~<¨ch_hñ≥rs.h
>

39 
	~"ty≥defs.h
"

40 
	~"∂©f‹m.h
"

41 
	~"mt_˝uxg±.h
"

43 
	#CPUXGPT_BASE
 0x10200000

	)

44 
	#INDEX_BASE
 (
CPUXGPT_BASE
+0x0674)

	)

45 
	#CTL_BASE
 (
CPUXGPT_BASE
+0x0670)

	)

47 
__u64
 
	gn‹mÆ_time_ba£
;

48 
__u64
 
	g©f_time_ba£
;

51 
	$__ªad_˝uxg±
(
ªg_ödex
 )

53 
vÆue
 = 0;

54 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

56 
vÆue
 = 
	`DRV_Reg32
(
CTL_BASE
);

57  
vÆue
;

58 
	}
}

61 
	$__wrôe_˝uxg±
(
ªg_ödex
,
vÆue
 )

64 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

65 
	`DRV_WrôeReg32
(
CTL_BASE
,
vÆue
);

66 
	}
}

68 
	$__˝uxg±_£t_öô_˙t
(
cou¡H
,
cou¡L
)

70 
	`__wrôe_˝uxg±
(
INDEX_CNT_H_INIT
,
cou¡H
);

71 
	`__wrôe_˝uxg±
(
INDEX_CNT_L_INIT
,
cou¡L
);

72 
	}
}

74 
	$gíîic_timî_backup
()

76 
__u64
 
cvÆ
;

78 
cvÆ
 = 
	`ªad_˙ç˘_ñ0
();

79 
	`__˝uxg±_£t_öô_˙t
((
__u32
)(
cvÆ
 >> 32), (__u32)(cval & 0xffffffff));

80 
	}
}

82 
	$©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
)

84 
n‹mÆ_time_ba£
 = 
n‹mÆ_ba£
;

85 
©f_time_ba£
 = 
©f_ba£
;

87 
	}
}

89 
	$©f_sched_˛ock
()

91 
__u64
 
cvÆ
;

93 
cvÆ
 = (((
	`ªad_˙ç˘_ñ0
(Ë- 
©f_time_ba£
)*1000)/13Ë+ 
n‹mÆ_time_ba£
;

94  
cvÆ
;

95 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/timer/mt_cpuxgpt.h

49 #i‚de‡
_MT_CPUXGPT_H_


50 
	#_MT_CPUXGPT_H_


	)

53 
	e˝uxg±_num
 {

54 
	mCPUXGPT0
=0,

55 
	mCPUXGPT1
,

56 
	mCPUXGPT2
,

57 
	mCPUXGPT3
,

58 
	mCPUXGPT4
,

59 
	mCPUXGPT5
,

60 
	mCPUXGPT6
,

61 
	mCPUXGPT7
,

62 
	mCPUXGPTNUMBERS
,

63 }
	tCPUXGPT_NUM
;

65 
	#CPUXGPT0_IRQID
 96

	)

66 
	#CPUXGPT1_IRQID
 97

	)

67 
	#CPUXGPT2_IRQID
 98

	)

68 
	#CPUXGPT3_IRQID
 99

	)

69 
	#CPUXGPT4_IRQID
 100

	)

70 
	#CPUXGPT5_IRQID
 101

	)

71 
	#CPUXGPT6_IRQID
 102

	)

72 
	#CPUXGPT7_IRQID
 103

	)

74 
	#CPUXGPT_IRQID_BASE
 
CPUXGPT0_IRQID


	)

77 
	#INDEX_CTL_REG
 0x000

	)

78 
	#INDEX_STA_REG
 0x004

	)

79 
	#INDEX_CNT_L_INIT
 0x008

	)

80 
	#INDEX_CNT_H_INIT
 0x00C

	)

81 
	#INDEX_IRQ_MASK
 0x030

82 

	)

83 
	#INDEX_CMP_BASE
 0x034

	)

87 
	#EN_CPUXGPT
 0x01

	)

88 
	#EN_AHLT_DEBUG
 0x02

	)

92 
	#CLK_DIV1
 (0x1 << 8)

	)

93 
	#CLK_DIV2
 (0x2 << 8)

	)

94 
	#CLK_DIV4
 (0x4 << 8)

	)

95 
	#CLK_DIV_MASK
 (~(0x7<<8))

	)

97 
	#CPUX_GPT0_ACK
 (1<<0x0)

	)

98 
	#CPUX_GPT1_ACK
 (1<<0x1)

	)

99 
	#CPUX_GPT2_ACK
 (1<<0x2)

	)

100 
	#CPUX_GPT3_ACK
 (1<<0x3)

	)

101 
	#CPUX_GPT4_ACK
 (1<<0x4)

	)

102 
	#CPUX_GPT5_ACK
 (1<<0x5)

	)

103 
	#CPUX_GPT6_ACK
 (1<<0x6)

	)

104 
	#CPUX_GPT7_ACK
 (1<<0x7)

	)

107 
gíîic_timî_backup
();

108 
©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

109 
©f_sched_˛ock
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/timer/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/uart/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/uart/uart.c

37 
	~<°döt.h
>

38 
	~<as£π.h
>

39 
	~<c⁄sﬁe.h
>

40 
	~"ty≥defs.h
"

41 
	~"∂©f‹m.h
"

42 
	~"u¨t.h
"

48 
	#Dñay_Cou¡
 324675

	)

50 
	#UART_BASE
(
u¨t
Ë(u¨t)

	)

52 
	#UART_RBR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

53 
	#UART_THR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

54 
	#UART_IER
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

55 
	#UART_IIR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

56 
	#UART_FCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

57 
	#UART_LCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0xc)

	)

58 
	#UART_MCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

59 
	#UART_LSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

60 
	#UART_MSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

61 
	#UART_SCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

62 
	#UART_DLL
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0)

	)

63 
	#UART_DLH
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

64 
	#UART_EFR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8)

	)

65 
	#UART_XON1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

66 
	#UART_XON2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

67 
	#UART_XOFF1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

68 
	#UART_XOFF2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

69 
	#UART_AUTOBAUD_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x20)

	)

70 
	#UART_HIGHSPEED
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x24)

	)

71 
	#UART_SAMPLE_COUNT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x28)

	)

72 
	#UART_SAMPLE_POINT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x2c)

	)

73 
	#UART_AUTOBAUD_REG
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x30)

	)

74 
	#UART_RATE_FIX_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x34)

	)

75 
	#UART_AUTOBAUD_SAMPLE
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x38)

	)

76 
	#UART_GUARD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x3c)

	)

77 
	#UART_ESCAPE_DAT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x40)

	)

78 
	#UART_ESCAPE_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x44)

	)

79 
	#UART_SLEEP_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x48)

	)

80 
	#UART_VFIFO_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4c)

	)

81 
	#UART_RXTRI_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x50)

	)

85 
	#UART_SET_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(
uöçå_t
)(REG)Ë|(U32)(BS))

	)

86 
	#UART_CLR_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(REG)Ë&~((U32)(BS)))

	)

87 
	#UART_WRITE16
(
VAL
, 
REG
Ë
	`DRV_WrôeReg
(REG,VAL)

	)

88 
	#UART_READ32
(
REG
Ë
	`DRV_Reg32
(REG)

	)

89 
	#UART_WRITE32
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

91 #i‡
CFG_FPGA_PLATFORM


92 vﬁ©ûê
	gg_u¨t
 = 
UART1
;

93 
	#UART_SRC_CLK
 
FPGA_UART_CLOCK


	)

95 vﬁ©ûê
	gg_u¨t
 = 
UART2
;

96 
	#UART_SRC_CLK
 
EVB_UART_CLOCK


	)

99 
	gIsOuçutToUARTFœg
=1;

102 
	$WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
)

104 *(vﬁ©ûê
uöt8_t
*)
addr
 = 
vÆue
;

105 
	}
}

108 
uöt8_t
 
	$READ_REGISTER_UINT8
(
uöçå_t
 
addr
)

110  *(vﬁ©ûê
uöt8_t
*)
addr
;

111 
	}
}

113 
	$WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
)

115 *(vﬁ©ûê
uöt32_t
*)
addr
 = 
vÆue
;

116 
	}
}

118 
uöt32_t
 
	$READ_REGISTER_UINT32
(
uöçå_t
 
addr
)

120  *(vﬁ©ûê
uöt32_t
*)
addr
;

121 
	}
}

123 
	$WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
)

125 *(vﬁ©ûê
uöt16_t
*)
addr
 = 
vÆue
;

126 
	}
}

128 
uöt16_t
 
	$READ_REGISTER_UINT16
(
uöçå_t
 
addr
)

130  *(vﬁ©ûê
uöt16_t
*)
addr
;

131 
	}
}

135 
	$£rül_£tbrg
 (
U32
 
u¨t˛k
, U32 
baudøã
)

137 #i‡(
CFG_FPGA_PLATFORM
)

138 
	#MAX_SAMPLE_COUNT
 256

	)

140 
U16
 
tmp
;

141 
U32
 
divis‹
;

142 
U32
 
ßm∂e_d©a
;

143 
U32
 
ßm∂e_cou¡
;

144 
U32
 
ßm∂e_poöt
;

147 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

160 
	`UART_WRITE32
(0x0003, 
	`UART_HIGHSPEED
(
g_u¨t
));

164 
ßm∂e_d©a
 = (
u¨t˛k
+(
baudøã
/2))/baudrate;

166 
divis‹
 = (
ßm∂e_d©a
+(
MAX_SAMPLE_COUNT
-1))/MAX_SAMPLE_COUNT;

168 
ßm∂e_cou¡
 = 
ßm∂e_d©a
/
divis‹
;

170 
ßm∂e_poöt
 = (
ßm∂e_cou¡
-1)/2;

172 
	`UART_WRITE32
((
ßm∂e_cou¡
-1), 
	`UART_SAMPLE_COUNT
(
g_u¨t
));

174 
	`UART_WRITE32
(
ßm∂e_poöt
, 
	`UART_SAMPLE_POINT
(
g_u¨t
));

176 
tmp
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

177 
	`UART_WRITE32
((
tmp
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

179 
	`UART_WRITE32
((
divis‹
&0xFF), 
	`UART_DLL
(
g_u¨t
));

180 
	`UART_WRITE32
(((
divis‹
>>8)&0xFF), 
	`UART_DLH
(
g_u¨t
));

181 
	`UART_WRITE32
(
tmp
, 
	`UART_LCR
(
g_u¨t
));

184 
byã
;

185 
high•ìd
;

186 
quŸ
, 
divis‹
, 
ªmaödî
;

188 i‡(
baudøã
 <= 115200 ) {

189 
high•ìd
 = 0;

190 
quŸ
 = 16;

192 
high•ìd
 = 2;

193 
quŸ
 = 4;

197 
divis‹
 = 
u¨t˛k
 / (
quŸ
 * 
baudøã
);

198 
ªmaödî
 = 
u¨t˛k
 % (
quŸ
 * 
baudøã
);

200 i‡(
ªmaödî
 >(
quŸ
 / 2Ë* 
baudøã
)

201 
divis‹
 += 1;

203 
	`UART_WRITE16
(
high•ìd
, 
	`UART_HIGHSPEED
(
g_u¨t
));

204 
byã
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

205 
	`UART_WRITE32
((
byã
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

206 
	`UART_WRITE32
((
divis‹
 & 0x00ff), 
	`UART_DLL
(
g_u¨t
));

207 
	`UART_WRITE32
(((
divis‹
 >> 8)&0x00ff), 
	`UART_DLH
(
g_u¨t
));

210 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

212 
	}
}

216 
	$£rül_n⁄block_gëc
()

218  ()
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

219 
	}
}

221 
	$mtk_£rül_£t_cuºít_u¨t
(
MT65XX_UART
 
u¨t_ba£
)

223 
g_u¨t
 = 
u¨t_ba£
;

224 
	}
}

226 
	$mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
)

228 
g_u¨t
 = 
u¨t_p‹t
;

229 #i‡!
CFG_FPGA_PLATFORM


230 #ifde‡
GPIO_UART_UTXD1_PIN


231 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

232 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

235 #ifde‡
GPIO_UART_URXD1_PIN


236 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

237 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

238 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

239 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

242 #ifde‡
GPIO_UART_UTXD2_PIN


243 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD2_PIN
, 
GPIO_MODE_01
);

244 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD2_PIN
, 
GPIO_DIR_OUT
);

247 #ifde‡
GPIO_UART_URXD2_PIN


248 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD2_PIN
, 
GPIO_MODE_01
);

249 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD2_PIN
, 
GPIO_DIR_IN
);

250 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_ENABLE
);

251 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_UP
);

254 #ifde‡
GPIO_UART_UTXD3_PIN


255 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD3_PIN
, 
GPIO_MODE_01
);

256 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD3_PIN
, 
GPIO_DIR_OUT
);

259 #ifde‡
GPIO_UART_URXD3_PIN


260 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD3_PIN
, 
GPIO_MODE_01
);

261 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD3_PIN
, 
GPIO_DIR_IN
);

262 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_ENABLE
);

263 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_UP
);

267 
	#AP_PERI_GLOBALCON_RST0
 (
PERICFG_BASE
+0x0)

	)

268 
	#AP_PERI_GLOBALCON_PDN0
 (
PERICFG_BASE
+0x10)

	)

271 if(0 =
u¨t˛k
){

273 
u¨t˛k
 = 
UART_SRC_CLK
;

276 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
	`deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

278 
	`mtk_£rül_£t_cuºít_u¨t
(
UART2
);

280 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

281 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

282 
	`£rül_£tbrg
(
u¨t˛k
, 
CFG_LOG_BAUDRATE
);

286 #ifde‡
GPIO_UART_UTXD1_PIN


287 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

288 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

291 #ifde‡
GPIO_UART_URXD1_PIN


292 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

293 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

294 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

295 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

305 
	`UART_CLR_BITS
(1 << 22, 
AP_PERI_GLOBALCON_PDN0
);

307 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

308 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

309 
	`£rül_£tbrg
(
u¨t˛k
, 
baudøã
);

310 
	}
}

312 
	$PutUARTByã
 (c⁄° 
c
)

314 !(
	`UART_READ32
 (
	`UART_LSR
(
g_u¨t
)Ë& 
UART_LSR_THRE
))

318 i‡(
c
 == '\n')

320 
	`UART_WRITE32
 ((Ë0xD, 
	`UART_THR
(
g_u¨t
));

322 
	`UART_WRITE32
 ((Ë
c
, 
	`UART_THR
(
g_u¨t
));

323 
	}
}

325 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

326 
	$PutUART1_Byã
(c⁄° 
c
)

328 !(
	`UART_READ32
 (
	`UART_LSR
(
UART2
)Ë& 
UART_LSR_THRE
))

332 i‡(
c
 == '\n')

333 
	`UART_WRITE32
((Ë'\r', 
	`UART_THR
(
UART2
));

335 
	`UART_WRITE32
((Ë
c
, 
	`UART_THR
(
UART2
));

336 
	}
}

339 
	$GëUARTByãs
(
u8
 *
buf
, 
u32
 
size
, u32 
tmo_ms
)

343 
u32
 
LSR
;

344 
tmo_í
 = (
tmo_ms
) ? 1 : 0;

345 
ul⁄g
 
°¨t_time
 = 
	`gë_timî
(0);

347 
size
) {

348 i‡(
tmo_í
 && (
	`gë_timî
(
°¨t_time
Ë> 
tmo_ms
))

352 i‡(!
tmo_í
)

353 
	`∂©f‹m_wdt_kick
();

355 
LSR
 = 
	`UART_READ32
(
	`UART_LSR
(
g_u¨t
));

356 i‡(
LSR
 & 
UART_LSR_DR
) {

357 *
buf
++ = (
u8
)
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

358 
size
--;

362  (0 =
size
) ? 0 : -1;

366 
	}
}

368 
	$c⁄sﬁe_öô
(
ba£_addr
)

375 
	`as£π
(
ba£_addr
);

378 
g_u¨t
 = 
ba£_addr
;

380 
	#CFG_LOG_BAUDRATE
 921600

	)

382 #i‡
CFG_FPGA_PLATFORM


383 
	#UART_SRC_CLK_FRQ
 (12000000)

	)

385 
	#UART_SRC_CLK_FRQ
 (0Ë

	)

390 
	`mtk_u¨t_öô
(
ba£_addr
, 
UART_SRC_CLK_FRQ
, 
CFG_LOG_BAUDRATE
);

393 
	}
}

395 
	$c⁄sﬁe_putc
(
c
)

397 if(
IsOuçutToUARTFœg
){

398 
	`PutUARTByã
 (
c
);

400  
c
;

401 
	}
}

403 
	$c⁄sﬁe_gëc
()

405 
c
 = 0;

406 if(
IsOuçutToUARTFœg
){

407 
	`GëUARTByãs
(&
c
, 1, 10);

409  
c
;

410 
	}
}

411 
	$£t_u¨t_Êag
()

413 
IsOuçutToUARTFœg
=1;

414 
	}
}

415 
	$˛ór_u¨t_Êag
()

417 
IsOuçutToUARTFœg
=0;

418 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/uart/uart.h

49 #i‚de‡
UART_HW_H


50 
	#UART_HW_H


	)

53 
	~"∂©_def.h
"

57 
	#UART_FCR_FIFOE
 (1 << 0)

	)

58 
	#UART_FCR_CLRR
 (1 << 1)

	)

59 
	#UART_FCR_CLRT
 (1 << 2)

	)

60 
	#UART_FCR_DMA1
 (1 << 3)

	)

61 
	#UART_FCR_RXFIFO_1B_TRI
 (0 << 6)

	)

62 
	#UART_FCR_RXFIFO_6B_TRI
 (1 << 6)

	)

63 
	#UART_FCR_RXFIFO_12B_TRI
 (2 << 6)

	)

64 
	#UART_FCR_RXFIFO_RX_TRI
 (3 << 6)

	)

65 
	#UART_FCR_TXFIFO_1B_TRI
 (0 << 4)

	)

66 
	#UART_FCR_TXFIFO_4B_TRI
 (1 << 4)

	)

67 
	#UART_FCR_TXFIFO_8B_TRI
 (2 << 4)

	)

68 
	#UART_FCR_TXFIFO_14B_TRI
 (3 << 4)

	)

70 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

71 
	#UART_FCR_NORMAL
 (
UART_FCR_FIFO_INIT
 | \

72 
UART_FCR_TXFIFO_4B_TRI
| \

73 
UART_FCR_RXFIFO_12B_TRI
)

	)

77 
	#UART_LCR_BREAK
 (1 << 6)

	)

78 
	#UART_LCR_DLAB
 (1 << 7)

	)

80 
	#UART_WLS_5
 (0 << 0)

	)

81 
	#UART_WLS_6
 (1 << 0)

	)

82 
	#UART_WLS_7
 (2 << 0)

	)

83 
	#UART_WLS_8
 (3 << 0)

	)

84 
	#UART_WLS_MASK
 (3 << 0)

	)

86 
	#UART_1_STOP
 (0 << 2)

	)

87 
	#UART_2_STOP
 (1 << 2)

	)

88 
	#UART_1_5_STOP
 (1 << 2Ë

	)

89 
	#UART_STOP_MASK
 (1 << 2)

	)

91 
	#UART_NONE_PARITY
 (0 << 3)

	)

92 
	#UART_ODD_PARITY
 (0x1 << 3)

	)

93 
	#UART_EVEN_PARITY
 (0x3 << 3)

	)

94 
	#UART_MARK_PARITY
 (0x5 << 3)

	)

95 
	#UART_SPACE_PARITY
 (0x7 << 3)

	)

96 
	#UART_PARITY_MASK
 (0x7 << 3)

	)

99 
	#UART_MCR_DTR
 (1 << 0)

	)

100 
	#UART_MCR_RTS
 (1 << 1)

	)

101 
	#UART_MCR_OUT1
 (1 << 2)

	)

102 
	#UART_MCR_OUT2
 (1 << 3)

	)

103 
	#UART_MCR_LOOP
 (1 << 4)

	)

104 
	#UART_MCR_XOFF
 (1 << 7Ë

	)

105 
	#UART_MCR_NORMAL
 (
UART_MCR_DTR
|
UART_MCR_RTS
)

	)

108 
	#UART_LSR_DR
 (1 << 0)

	)

109 
	#UART_LSR_OE
 (1 << 1)

	)

110 
	#UART_LSR_PE
 (1 << 2)

	)

111 
	#UART_LSR_FE
 (1 << 3)

	)

112 
	#UART_LSR_BI
 (1 << 4)

	)

113 
	#UART_LSR_THRE
 (1 << 5)

	)

114 
	#UART_LSR_TEMT
 (1 << 6)

	)

115 
	#UART_LSR_FIFOERR
 (1 << 7)

	)

118 
	#UART_MSR_DCTS
 (1 << 0)

	)

119 
	#UART_MSR_DDSR
 (1 << 1)

	)

120 
	#UART_MSR_TERI
 (1 << 2)

	)

121 
	#UART_MSR_DDCD
 (1 << 3)

	)

122 
	#UART_MSR_CTS
 (1 << 4)

	)

123 
	#UART_MSR_DSR
 (1 << 5)

	)

124 
	#UART_MSR_RI
 (1 << 6)

	)

125 
	#UART_MSR_DCD
 (1 << 7)

	)

128 
	#UART_EFR_EN
 (1 << 4)

	)

129 
	#UART_EFR_AUTO_RTS
 (1 << 6)

	)

130 
	#UART_EFR_AUTO_CTS
 (1 << 7)

	)

131 
	#UART_EFR_SW_CTRL_MASK
 (0x‡<< 0)

	)

133 
	#UART_EFR_NO_SW_CTRL
 (0)

	)

134 
	#UART_EFR_NO_FLOW_CTRL
 (0)

	)

135 
	#UART_EFR_AUTO_RTSCTS
 (
UART_EFR_AUTO_RTS
|
UART_EFR_AUTO_CTS
)

	)

136 
	#UART_EFR_XON1_XOFF1
 (0xaË

	)

137 
	#UART_EFR_XON2_XOFF2
 (0x5Ë

	)

138 
	#UART_EFR_XON12_XOFF12
 (0xfË

	)

141 
	#UART_EFR_XON1_XOFF1_MASK
 (0xa)

	)

142 
	#UART_EFR_XON2_XOFF2_MASK
 (0x5)

	)

145 
	#UART_IIR_NO_INT_PENDING
 (0x01)

	)

146 
	#UART_IIR_RLS
 (0x06Ë

	)

147 
	#UART_IIR_RDA
 (0x04Ë

	)

148 
	#UART_IIR_CTI
 (0x0CË

	)

149 
	#UART_IIR_THRE
 (0x02Ë

	)

151 
	#UART_IIR_MS
 (0x00Ë

	)

152 
	#UART_IIR_SW_FLOW_CTRL
 (0x10Ë

	)

153 
	#UART_IIR_HW_FLOW_CTRL
 (0x20Ë

	)

154 
	#UART_IIR_FIFO_EN
 (0xc0)

	)

155 
	#UART_IIR_INT_MASK
 (0x1f)

	)

158 
	#UART_RATE_FIX
 (1 << 0)

	)

161 
	#UART_FREQ_SEL
 (1 << 1)

	)

163 
	#UART_RATE_FIX_13M
 (1 << 0Ë

	)

164 
	#UART_AUTORATE_FIX_13M
 (1 << 1)

	)

165 
	#UART_FREQ_SEL_13M
 (1 << 2)

	)

166 
	#UART_RATE_FIX_ALL_13M
 (
UART_RATE_FIX_13M
|
UART_AUTORATE_FIX_13M
| \

167 
UART_FREQ_SEL_13M
)

	)

169 
	#UART_RATE_FIX_26M
 (0 << 0Ë

	)

170 
	#UART_AUTORATE_FIX_26M
 (0 << 1)

	)

171 
	#UART_FREQ_SEL_26M
 (0 << 2)

	)

172 
	#UART_RATE_FIX_ALL_26M
 (
UART_RATE_FIX_26M
|
UART_AUTORATE_FIX_26M
| \

173 
UART_FREQ_SEL_26M
)

	)

175 
	#UART_RATE_FIX_32M5
 (0 << 0Ë

	)

176 
	#UART_FREQ_SEL_32M5
 (0 << 1)

	)

177 
	#UART_RATE_FIX_ALL_32M5
 (
UART_RATE_FIX_32M5
|
UART_FREQ_SEL_32M5
)

	)

179 
	#UART_RATE_FIX_16M25
 (0 << 0Ë

	)

180 
	#UART_FREQ_SEL_16M25
 (0 << 1)

	)

181 
	#UART_RATE_FIX_ALL_16M25
 (
UART_RATE_FIX_16M25
|
UART_FREQ_SEL_16M25
)

	)

185 
	#UART_AUTOBADUSAM_13M
 7

	)

186 
	#UART_AUTOBADUSAM_26M
 15

	)

187 
	#UART_AUTOBADUSAM_52M
 31

	)

189 
	#UART_AUTOBAUDSAM_58_5M
 31

	)

192 
	#UART_VFIFO_ON
 (1 << 0)

	)

193 
	#UART_FCR_FIFOE
 (1 << 0)

	)

194 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

199 
	mUART1
 = 
UART0_BASE
,

200 
	mUART2
 = 
UART1_BASE
,

201 
	mUART3
 = 
UART2_BASE
,

202 
	mUART4
 = 
UART3_BASE


203 } 
	tMT65XX_UART
;

205 
	#PLL_ON_UART_CLOCK
 (13500000)

206 
	#PLL_OFF_UART_CLOCK
 (13500000)

207 

	)

209 
	#EVB_UART_CLOCK
 (26000000)

	)

210 
	#FPGA_UART_CLOCK
 (12000000)

	)

212 
mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/include/plat_macros.S

31 
	~<gic_v2.h
>

32 
	~"../∂©_def.h
"

34 .
	g£˘i⁄
 .
	grod©a
.
	ggic_ªg_«me
, "aS"

35 
	ggic_ªgs
: .
asciz
 "gic_iar", "gic_ctlr", ""

38 
	#GIC_REG_SIZE
 (2 * 8)

	)

45 .
ma¸o
 
∂©_¥öt_gic_ªgs


46 
mov
 
	gx0
, #CONFIG_GICC_ADDR

47 
bl
 
mt_gë_cfgv¨


49 
ldr
 
	gw1
, [
x0
, #GICC_IAR]

50 
ldr
 
	gw2
, [
x0
, #GICD_CTLR]

51 
sub
 
	g•
, sp, #GIC_REG_SIZE

52 
°p
 
	gx1
, 
	gx2
, [
•
]

53 
adr
 
	gx0
, 
gic_ªgs


54 
mov
 
	gx1
, 
•


55 
bl
 
¥öt_°rög_vÆue


56 
add
 
	g•
, sp, #GIC_REG_SIZE

57 .
	gídm


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/include/platform_def.h

31 #i‚de‡
__PLATFORM_DEF_H__


32 
	#__PLATFORM_DEF_H__


	)

34 
	~<¨ch.h
>

36 
	#CFG_FPGA_PLATFORM
 0

	)

37 
	#PLAT_USE_EL1_AARCH32


	)

42 
	#PLATFORM_LINKER_FORMAT
 "ñf64-lôéó¨ch64"

	)

43 
	#PLATFORM_LINKER_ARCH
 
Ørch64


	)

50 
	#PLATFORM_STACK_SIZE
 0x800

	)

53 #i‡
DEBUG


54 
	#PCPU_DV_MEM_STACK_SIZE
 0x400

	)

56 
	#PCPU_DV_MEM_STACK_SIZE
 0x300

	)

59 
	#FIRMWARE_WELCOME_STR
 "BoŸög MTKÅru°ed fúmw¨êBL31\n\r"

	)

62 
	#BL2_IMAGE_NAME
 "bl2.bö"

	)

65 
	#BL31_IMAGE_NAME
 "bl31.bö"

	)

68 
	#BL32_IMAGE_NAME
 "bl32.bö"

	)

71 
	#BL33_IMAGE_NAME
 "bl33.bö"

	)

73 
	#PLATFORM_CACHE_LINE_SIZE
 64

	)

74 
	#PLATFORM_CLUSTER_COUNT
 2uŒ

	)

75 
	#PLATFORM_CLUSTER0_CORE_COUNT
 4

	)

76 
	#PLATFORM_CLUSTER1_CORE_COUNT
 4

	)

77 
	#PLATFORM_CORE_COUNT
 (
PLATFORM_CLUSTER1_CORE_COUNT
 + \

78 
PLATFORM_CLUSTER0_CORE_COUNT
)

	)

79 
	#PLATFORM_MAX_CPUS_PER_CLUSTER
 4

	)

80 
	#PRIMARY_CPU
 0x0

	)

81 
	#MAX_IO_DEVICES
 3

	)

82 
	#MAX_IO_HANDLES
 4

	)

87 
	#TZROM_BASE
 0x00000000

	)

88 
	#TZROM_SIZE
 0x04000000

	)

90 
	#TZRAM_BASE
 0x00110000

	)

91 
	#TZRAM_SIZE
 0x1C400

	)

93 
	#TZRAM2_BASE
 0x00100000

	)

94 
	#TZRAM2_SIZE
 0xDC00

	)

97 
	#TZDRAM_BASE
 0x00120000

	)

98 
	#TZDRAM_SIZE
 0x0000C000

	)

105 
	#BL1_RO_BASE
 
TZROM_BASE


	)

106 
	#BL1_RO_LIMIT
 (
TZROM_BASE
 + 
TZROM_SIZE
)

	)

107 
	#BL1_RW_BASE
 
TZRAM_BASE


	)

108 
	#BL1_RW_LIMIT
 
BL31_BASE


	)

113 
	#BL2_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0xc000)

	)

114 
	#BL2_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

119 
	#BL31_BASE
 (
TZRAM_BASE
 + 0x1000)

	)

120 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


121 
	#BL31_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

122 
	#TZRAM2_LIMIT
 (
TZRAM2_BASE
 + 
TZRAM2_SIZE
)

	)

124 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


125 
	#BL31_LIMIT
 
BL2_BASE


	)

134 
	#TSP_IN_TZRAM
 0

	)

135 
	#TSP_IN_TZDRAM
 1

	)

137 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


138 
	#TSP_SEC_MEM_BASE
 
TZRAM_BASE


	)

139 
	#TSP_SEC_MEM_SIZE
 
TZRAM_SIZE


	)

140 
	#BL32_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0x00000)

	)

141 
	#BL32_LIMIT
 
BL2_BASE


	)

142 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


143 
	#TSP_SEC_MEM_BASE
 
TZDRAM_BASE


	)

144 
	#TSP_SEC_MEM_SIZE
 
TZDRAM_SIZE


	)

145 
	#BL32_BASE
 (
TZDRAM_BASE
 + 0x2000)

	)

146 
	#BL32_LIMIT
 (
TZDRAM_BASE
 + (1 << 21))

	)

154 
	#ADDR_SPACE_SIZE
 (1uŒ << 32)

	)

155 
	#MAX_XLAT_TABLES
 4

	)

156 
	#MAX_MMAP_REGIONS
 16

	)

161 
	#IRQ_SEC_PHY_TIMER
 29

	)

163 
	#IO_PHYS
 (0x10000000)

	)

165 
	#INFRACFG_AO_BASE
 (
IO_PHYS
 + 0x1000)

	)

166 
	#MCUCFG_BASE
 (
IO_PHYS
 + 0x00200000)

	)

171 
	#BOOTROM_BOOT_ADDR
 (
INFRACFG_AO_BASE
 + 0x800)

	)

172 
	#BOOTROM_SEC_CTRL
 (
INFRACFG_AO_BASE
 + 0x804)

	)

173 
	#SW_ROM_PD
 (1U << 31)

	)

176 
	#MP0_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MCUCFG_BASE
 + 0x38 + ((˝uË* 8))

	)

177 
	#MP1_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MCUCFG_BASE
 + 0x238 + ((˝uË* 8))

	)

178 
	#MP0_MISC_CONFIG3
 (
MCUCFG_BASE
 + 0x3c)

	)

180 
	#MP0_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0030)

	)

181 
	#MP0_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0054)

	)

182 
	#MP1_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0230)

	)

183 
	#MP1_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0254)

	)

188 
	#MP0_AXI_CONFIG
 (
MCUCFG_BASE
 + 0x002C)

	)

189 
	#MP1_AXI_CONFIG
 (
MCUCFG_BASE
 + 0x022C)

	)

190 
	#ACINACTM
 (1U << 4)

	)

201 
	#CACHE_WRITEBACK_SHIFT
 6

	)

202 
	#CACHE_WRITEBACK_GRANULE
 (1 << 
CACHE_WRITEBACK_SHIFT
)

	)

205 
	#WDT_IRQ_BIT_ID
 (160)

	)

206 
	#FIQ_SMP_CALL_SGI
 13

	)

207 
	#ATF_LOG_IRQ_ID
 281

	)

209 
	#MP0_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0)

	)

210 
	#MP1_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0x200)

	)

211 
	#L2RSTDISABLE
 (1 << 4)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/include/power_tracer.h

1 #i‚de‡
__TRACER_H_


2 
	#__TRACER_H_


	)

4 
	#CPU_UP
 0

	)

5 
	#CPU_DOWN
 1

	)

6 
	#CPU_SUSPEND
 2

	)

7 
	#CLUSTER_UP
 3

	)

8 
	#CLUSTER_DOWN
 4

	)

9 
	#CLUSTER_SUSPEND
 5

	)

11 
åa˚_powî_Êow
(
mpidr
, 
mode
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/include/scu.h

2 #i‚de‡
__SCU_H__


3 
	#__SCU_H__


	)

5 
dißbÀ_scu
(
mpidr
);

6 
íabÀ_scu
(
mpidr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/include/tbase_platform.h

12 #i‚de‡
__TBASE_PLATFORM_H__


13 
	#__TBASE_PLATFORM_H__


	)

15 
	~<bl_comm⁄.h
>

16 
	~<tba£_¥iv©e.h
>

17 
	~<∂©_def.h
>

21 
	#TBASE_PM_ENABLE
 1

	)

23 
	#TBASE_SIP_ROUTE_ENABLE
 0

	)

25 
	#TBASE_OEM_ROUTE_ENABLE
 0

	)

28 
	#TEE_PARAMS
 (((
©f_¨g_t_±r
)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
)->
ãe_boŸ_¨g_addr
)

	)

30 
	#TBASE_NWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamBa£
)

	)

31 
	#TBASE_NWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamSize
)

	)

32 
	#TBASE_SWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
+
TBASE_SWD_IMEM_SIZE
)

	)

33 
	#TBASE_SWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamSize
-
TBASE_SWD_IMEM_SIZE
)

	)

34 
	#TBASE_SWD_IMEM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
)

	)

35 
	#TBASE_SWD_IMEM_SIZE
 (2*1024*1024)

	)

36 
	#TBASE_GIC_DIST_BASE
 (
BASE_GICD_BASE
)

	)

37 
	#TBASE_GIC_CPU_BASE
 (
BASE_GICC_BASE
)

	)

39 
	#TBASE_GIC_VERSION
 (2)

	)

40 
	#TBASE_SPI_COUNT
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
tŸÆ_numbî_•i
)

	)

41 
	#TBASE_SSIQ_NRO
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
ssiq_numbî
)

	)

43 
	#TBASE_MONITOR_FLAGS
 (
TBASE_MONITOR_FLAGS_DEFAULT
)

	)

46 
	#TBASE_MAX_MONITOR_CALL_REGS
 
TBASE_MONITOR_CALL_REGS_MIN


	)

47 
	#TBASE_NWD_REGISTER_COUNT
 
TBASE_NWD_REGISTERS_MIN


	)

51 
	#TBASE_REGISTER_FILE_MMU_FLAGS
 (
	`LOWER_ATTRS
(
ATTR_IWBWA_OWBWA_NTR_INDEX
 | 
ISH
 | 
AP_RW
) |\

52 
	`UPPER_ATTRS
(
XN
) | \

53 
LEVEL3
)

	)

60 #i‚de‡
__ASSEMBLY__


61 
mt_log_£cuª_os_¥öt
(
c
);

63 
	#TBASE_OUTPUT_PUTC
(
c
Ë
	`mt_log_£cuª_os_¥öt
(c)

	)

66 
	#TBASE_EXECUTION_STATUS
(
°©us
)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/mailbox.c

1 
	~"∂©_¥iv©e.h
"

3 
maûbox_t
 
	gmt_mbox
[
PLATFORM_CORE_COUNT
];

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_def.h

31 #i‚de‡
__PLAT_DEF_H__


32 
	#__PLAT_DEF_H__


	)

34 
	~<∂©f‹m_def.h
>

38 
	#FIP_IMAGE_NAME
 "fù.bö"

	)

41 
	#CONFIG_GICD_ADDR
 0

	)

42 
	#CONFIG_GICC_ADDR
 1

	)

43 
	#CONFIG_GICH_ADDR
 2

	)

44 
	#CONFIG_GICV_ADDR
 3

	)

45 
	#CONFIG_MAX_AFF0
 4

	)

46 
	#CONFIG_MAX_AFF1
 5

	)

48 
	#CONFIG_CPU_SETUP
 6

	)

49 
	#CONFIG_BASE_MMAP
 7

	)

51 
	#CONFIG_HAS_CCI
 8

	)

52 
	#CONFIG_HAS_TZC
 9

	)

53 
	#CONFIG_LIMIT
 10

	)

59 
	#FLASH0_BASE
 0x08000000

	)

60 
	#FLASH0_SIZE
 
TZROM_SIZE


	)

83 
	#MTK_DEVICE_BASE
 0x11000000

84 
	#MTK_DEVICE_SIZE
 0x1000000

	)

86 
	#MT_DEV_BASE
 0x10000000

	)

87 
	#MT_DEV_SIZE
 0x400000

	)

89 
	#MT_GIC_BASE
 0x10220000

	)

91 #i‚de‡
__ASSEMBLY__


92 
mt_mbox
[];

94 
	#MBOX_OFF
 
mt_mbox


	)

97 
	#PARAMS_BASE
 
TZDRAM_BASE


	)

99 
	#DRAM1_BASE
 0x41000000uŒ

	)

100 
	#DRAM1_SIZE
 0x1E000000uŒ

	)

101 
	#DRAM1_END
 (
DRAM1_BASE
 + 
DRAM1_SIZE
 - 1)

	)

102 
	#DRAM1_SEC_SIZE
 0x01000000uŒ

	)

104 
	#DRAM_BASE
 
DRAM1_BASE


	)

105 
	#DRAM_SIZE
 
DRAM1_SIZE


	)

107 
	#DRAM2_BASE
 0x880000000uŒ

	)

108 
	#DRAM2_SIZE
 0x780000000uŒ

	)

109 
	#DRAM2_END
 (
DRAM2_BASE
 + 
DRAM2_SIZE
 - 1)

	)

111 
	#PCIE_EXP_BASE
 0x40000000

	)

112 
	#TZRNG_BASE
 0x7„60000

	)

113 
	#TZNVCTR_BASE
 0x7„70000

	)

114 
	#TZROOTKEY_BASE
 0x7„80000

	)

118 
	#VE_SYSREGS_BASE
 0x1c010000

119 
	#V2M_SYS_ID
 0x0

	)

120 
	#V2M_SYS_LED
 0x8

	)

121 
	#V2M_SYS_CFGDATA
 0xa0

	)

122 
	#V2M_SYS_CFGCTRL
 0xa4

	)

126 
	#NS_IMAGE_OFFSET
 0x41E00000

	)

130 
	#MT_BL31_PLAT_PARAM_VAL
 0x0f1e2d3c4b5a6978ULL

	)

142 
	#SYS_LED_SS_SHIFT
 0x0

	)

143 
	#SYS_LED_EL_SHIFT
 0x1

	)

144 
	#SYS_LED_EC_SHIFT
 0x3

	)

146 
	#SYS_LED_SS_MASK
 0x1

	)

147 
	#SYS_LED_EL_MASK
 0x3

	)

148 
	#SYS_LED_EC_MASK
 0x1f

	)

151 
	#SYS_ID_REV_SHIFT
 27

	)

152 
	#SYS_ID_HBI_SHIFT
 16

	)

153 
	#SYS_ID_BLD_SHIFT
 12

	)

154 
	#SYS_ID_ARCH_SHIFT
 8

	)

155 
	#SYS_ID_FPGA_SHIFT
 0

	)

157 
	#SYS_ID_REV_MASK
 0xf

	)

158 
	#SYS_ID_HBI_MASK
 0xfff

	)

159 
	#SYS_ID_BLD_MASK
 0xf

	)

160 
	#SYS_ID_ARCH_MASK
 0xf

	)

161 
	#SYS_ID_FPGA_MASK
 0xff

	)

163 
	#SYS_ID_BLD_LENGTH
 4

	)

165 
	#REV_MT
 0x0

	)

166 
	#HBI_MT_BASE
 0x020

	)

167 
	#HBI_FOUNDATION
 0x010

	)

169 
	#BLD_GIC_VE_MMAP
 0x0

	)

170 
	#BLD_GIC_A53A57_MMAP
 0x1

	)

172 
	#ARCH_MODEL
 0x1

	)

175 
	#PWRC_BASE
 0x1c100000

176 
	#PPOFFR_OFF
 0x0

177 

	)

182 
	#CCI400_BASE
 0x10390000

183 
	#CCI400_SL_IFACE_CLUSTER0
 4

	)

184 
	#CCI400_SL_IFACE_CLUSTER1
 3

	)

185 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

186 
CCI400_SL_IFACE_CLUSTER1
 : \

187 
CCI400_SL_IFACE_CLUSTER0
)

	)

188 
	#CCI_SEC_ACCESS_OFFSET
 (0x8)

	)

196 
	#VE_GICC_BASE
 0x2c002000

199 

	)

201 
	#BASE_GICD_BASE
 (
MT_GIC_BASE
 + 0x1000)

	)

203 
	#BASE_GICC_BASE
 (
MT_GIC_BASE
 + 0x2000)

	)

204 
	#BASE_GICH_BASE
 (
MT_GIC_BASE
 + 0x4000)

	)

205 
	#BASE_GICV_BASE
 (
MT_GIC_BASE
 + 0x6000)

	)

206 
	#INT_POL_CTL0
 0x10200620

	)

208 
	#MT_EDGE_SENSITIVE
 1

	)

209 
	#MT_LEVEL_SENSITIVE
 0

	)

210 
	#MT_POLARITY_LOW
 0

	)

211 
	#MT_POLARITY_HIGH
 1

	)

214 
	#GIC_PRIVATE_SIGNALS
 (32)

	)

215 
	#NR_GIC_SGI
 (16)

	)

216 
	#NR_GIC_PPI
 (16)

	)

217 
	#GIC_PPI_OFFSET
 (27)

	)

218 
	#MT_NR_PPI
 (5)

	)

219 
	#MT_NR_SPI
 (241)

	)

220 
	#NR_MT_IRQ_LINE
 (
GIC_PPI_OFFSET
 + 
MT_NR_PPI
 + 
MT_NR_SPI
)

	)

223 
	#IRQ_SEC_PHY_TIMER
 29

	)

224 
	#IRQ_SEC_SGI_0
 8

	)

225 
	#IRQ_SEC_SGI_1
 9

	)

226 
	#IRQ_SEC_SGI_2
 10

	)

227 
	#IRQ_SEC_SGI_3
 11

	)

228 
	#IRQ_SEC_SGI_4
 12

	)

229 
	#IRQ_SEC_SGI_5
 13

	)

230 
	#IRQ_SEC_SGI_6
 14

	)

231 
	#IRQ_SEC_SGI_7
 15

	)

232 
	#IRQ_SEC_SGI_8
 16

	)

237 
	#PAGE_ADDR_MASK
 (0xFFF00000)

	)

239 
	#UART0_BASE
 (
IO_PHYS
 + 0x01002000)

	)

240 
	#UART1_BASE
 (
IO_PHYS
 + 0x01003000)

	)

241 
	#UART2_BASE
 (
IO_PHYS
 + 0x01004000)

	)

242 
	#UART3_BASE
 (
IO_PHYS
 + 0x01005000)

	)

243 
	#PERICFG_BASE
 (
IO_PHYS
 + 0x3000)

	)

252 
	#MT_AID_WIDTH
 4

	)

255 
	#MT_NSAID_DEFAULT
 0

	)

256 
	#MT_NSAID_PCI
 1

	)

257 
	#MT_NSAID_VIRTIO
 8

	)

258 
	#MT_NSAID_AP
 9

	)

259 
	#MT_NSAID_VIRTIO_OLD
 15

	)

262 
	#MT_NSAID_HDLCD0
 2

	)

263 
	#MT_NSAID_CLCD
 7

	)

268 
	#TRNG_ba£
 (0x1020F000)

269 
	#TRNG_BASE_ADDR
 
TRNG_ba£


	)

270 
	#TRNG_BASE_SIZE
 (0x1000)

	)

271 
	#TRNG_CTRL
 (
TRNG_ba£
+0x0000)

	)

272 
	#TRNG_TIME
 (
TRNG_ba£
+0x0004)

	)

273 
	#TRNG_DATA
 (
TRNG_ba£
+0x0008)

	)

274 
	#TRNG_PDN_ba£
 (0x10001040)

	)

275 
	#TRNG_PDN_BASE_ADDR
 (0x10001000)

	)

276 
	#TRNG_PDN_BASE_SIZE
 (0x1000)

	)

277 
	#TRNG_PDN_SET
 (
TRNG_PDN_ba£
 +0x0000)

	)

278 
	#TRNG_PDN_CLR
 (
TRNG_PDN_ba£
 +0x0004)

	)

279 
	#TRNG_PDN_STATUS
 (
TRNG_PDN_ba£
 +0x0008)

	)

280 
	#TRNG_CTRL_RDY
 0x80000000

	)

281 
	#TRNG_CTRL_START
 0x00000001

	)

286 
	#MTK_WDT_BASE
 (
IO_PHYS
 + 0x7000)

	)

287 
	#MTK_WDT_SIZE
 (0x1000)

	)

288 
	#MTK_WDT_MODE
 (
MTK_WDT_BASE
+0x0000)

	)

289 
	#MTK_WDT_LENGTH
 (
MTK_WDT_BASE
+0x0004)

	)

290 
	#MTK_WDT_RESTART
 (
MTK_WDT_BASE
+0x0008)

	)

291 
	#MTK_WDT_STATUS
 (
MTK_WDT_BASE
+0x000C)

	)

292 
	#MTK_WDT_INTERVAL
 (
MTK_WDT_BASE
+0x0010)

	)

293 
	#MTK_WDT_SWRST
 (
MTK_WDT_BASE
+0x0014)

	)

294 
	#MTK_WDT_SWSYSRST
 (
MTK_WDT_BASE
+0x0018)

	)

295 
	#MTK_WDT_NONRST_REG
 (
MTK_WDT_BASE
+0x0020)

	)

296 
	#MTK_WDT_NONRST_REG2
 (
MTK_WDT_BASE
+0x0024)

	)

297 
	#MTK_WDT_REQ_MODE
 (
MTK_WDT_BASE
+0x0030)

	)

298 
	#MTK_WDT_REQ_IRQ_EN
 (
MTK_WDT_BASE
+0x0034)

	)

299 
	#MTK_WDT_DEBUG_CTL
 (
MTK_WDT_BASE
+0x0040)

	)

302 
	#MTK_WDT_STATUS_HWWDT_RST
 (0x80000000)

	)

303 
	#MTK_WDT_STATUS_SWWDT_RST
 (0x40000000)

	)

304 
	#MTK_WDT_STATUS_IRQWDT_RST
 (0x20000000)

	)

305 
	#MTK_WDT_STATUS_DEBUGWDT_RST
 (0x00080000)

	)

306 
	#MTK_WDT_STATUS_SPMWDT_RST
 (0x0002)

	)

307 
	#MTK_WDT_STATUS_SPM_THERMAL_RST
 (0x0001)

	)

308 
	#MTK_WDT_STATUS_THERMAL_DIRECT_RST
 (1<<18)

	)

309 
	#MTK_WDT_STATUS_SECURITY_RST
 (1<<28)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_gic.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<debug.h
>

35 
	~<gic_v2.h
>

36 
	~<gic_v3.h
>

37 
	~<öãºu±_mgmt.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°döt.h
>

40 
	~"∂©_def.h
"

41 
	~"∂©_¥iv©e.h
"

42 
	~<∂©f‹m_def.h
>

43 
	~<°dio.h
>

45 #i‚de‡
MAX_GIC_NR


46 
	#MAX_GIC_NR
 1

	)

49 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

52 
	sgic_chù_d©a
 {

53 
	mßved_•i_íabÀ
[
DIV_ROUND_UP
(320, 32)];

54 
	mßved_•i_c⁄f
[
DIV_ROUND_UP
(320, 16)];

55 
	mßved_•i_èrgë
[
DIV_ROUND_UP
(320, 4)];

56 
	mßved_•i_group
[
DIV_ROUND_UP
(320, 32)];

66 
gic_chù_d©a
 
	ggic_d©a
[
MAX_GIC_NR
];

69 
	$gic_di°_ßve
()

71 
gic_úqs
;

72 
di°_ba£
;

73 
i
;

75 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

77 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

79 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

80 
gic_d©a
[0].
ßved_•i_c⁄f
[
i
] =

81 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4);

83 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

84 
gic_d©a
[0].
ßved_•i_èrgë
[
i
] =

85 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4);

87 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

88 
gic_d©a
[0].
ßved_•i_íabÀ
[
i
] =

89 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4);

91 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

92 
gic_d©a
[0].
ßved_•i_group
[
i
] =

93 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4);

94 
	}
}

96 
	$gic_di°_ª°‹e
()

98 
gic_úqs
;

99 
di°_ba£
;

100 
˘Ã
;

101 
i
;

103 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

105 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

108 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
di°_ba£
);

109 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

110 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
);

113 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

114 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_c⁄f
[i]);

119 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

120 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_èrgë
[i]);

122 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

123 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_íabÀ
[i]);

125 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

126 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_group
[i]);

128 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

129 
	}
}

181 
	$úq_øi£_so·úq
(
m≠
, 
úq
)

183 
ßâ
;

185 
ßâ
 = 1 << 15;

187 if(
	`∂©_ic_gë_öãºu±_ty≥
(
úq
Ë=
INTR_TYPE_S_EL1
)

189 
ßâ
 = 0;

192 
	`gicd_wrôe_sgú
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), (
m≠
 << 16Ë| 
ßâ
 | 
úq
);

194 
	`dsb
();

195 
	}
}

197 
	$gë_ack_öfo
()

199  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

200 
	}
}

202 
	$ack_sgi
(
ür
)

204 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
ür
);

205 
	}
}

207 
	$mt_©f_åiggî_úq
()

209 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
ATF_LOG_IRQ_ID
);

210 
	}
}

212 
	$mask_wdt_fiq
()

214 
	`gicd_£t_i˚«bÀr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

215 
	}
}

222 
	$mt_©f_åiggî_WDT_FIQ
()

224 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

225 
	}
}

233 
	$gicv3_˝uif_£tup
()

235 
s¸_vÆ
, 
vÆ
;

236 
uöçå_t
 
ba£
;

246 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

247 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

251 
	`∑nic
();

254 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

256 
vÆ
 &~
WAKER_PS
;

257 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

258 
	`dsb
();

261 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

262 
vÆ
 & 
WAKER_CA
) {

263 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

270 
s¸_vÆ
 = 
	`ªad_s¸
();

271 
	`wrôe_s¸
(
s¸_vÆ
 | 
SCR_NS_BIT
);

272 
	`isb
();

283 
vÆ
 = 
	`ªad_icc_§e_ñ3
();

284 
	`wrôe_icc_§e_ñ3
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

286 
vÆ
 = 
	`ªad_icc_§e_ñ2
();

287 
	`wrôe_icc_§e_ñ2
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

289 
	`wrôe_icc_pmr_ñ1
(
GIC_PRI_MASK
);

290 
	`isb
();

293 
	`wrôe_s¸
(
s¸_vÆ
);

294 
	`isb
();

295 
	}
}

301 
	$gicv3_˝uif_dó˘iv©e
()

303 
vÆ
;

304 
uöçå_t
 
ba£
;

313 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

314 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

318 
	`∑nic
();

321 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

322 
vÆ
 |
WAKER_PS
;

323 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

324 
	`dsb
();

327 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

328 (
vÆ
 & 
WAKER_CA
) == 0) {

329 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

331 
	}
}

338 
	$gic_˝uif_£tup
(
gicc_ba£
)

340 
vÆ
;

343 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

351 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

352 
	`gicv3_˝uif_£tup
();

355 
vÆ
 = 
ENABLE_GRP0
 | 
ENABLE_GRP1
 | 
FIQ_EN
 | 
FIQ_BYP_DIS_GRP0
;

356 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
FIQ_BYP_DIS_GRP1
 | 
IRQ_BYP_DIS_GRP1
;

359 
	`gicc_wrôe_pmr
(
gicc_ba£
, 0x1 << 7);

360 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

362 
	}
}

368 
	$gic_˝uif_dó˘iv©e
(
gicc_ba£
)

370 
vÆ
;

373 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

374 
vÆ
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

375 
vÆ
 |
FIQ_BYP_DIS_GRP1
 | 
FIQ_BYP_DIS_GRP0
;

376 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
IRQ_BYP_DIS_GRP1
;

377 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

379 
vÆ
 = 
	`gicc_ªad_iidr
(
gicc_ba£
);

386 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

387 
	`gicv3_˝uif_dó˘iv©e
();

390 
	}
}

396 
	$gic_p˝u_di°if_£tup
(
gicd_ba£
)

398 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 0, ~0);

401 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

402 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
, 
GIC_HIGHEST_SEC_PRIORITY
);

403 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

406 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

407 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

408 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

409 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

410 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

411 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

412 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

413 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

414 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

416 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
, 
GIC_HIGHEST_SEC_PRIORITY
);

417 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
, 
GIC_HIGHEST_SEC_PRIORITY
);

418 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
, 
GIC_HIGHEST_SEC_PRIORITY
);

419 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
, 
GIC_HIGHEST_SEC_PRIORITY
);

420 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
, 
GIC_HIGHEST_SEC_PRIORITY
);

421 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
, 
GIC_HIGHEST_SEC_PRIORITY
);

422 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
, 
GIC_HIGHEST_SEC_PRIORITY
);

423 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
, 
GIC_HIGHEST_SEC_PRIORITY
);

424 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
, 
GIC_HIGHEST_SEC_PRIORITY
);

426 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

427 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

428 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

429 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

430 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

431 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

432 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

433 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

434 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

436 
	}
}

438 
	$mt_úq_£t_pﬁ¨ôy
(
úq
, 
pﬁ¨ôy
)

441 
off£t
, 
ªg_ödex
, 
vÆue
;

450 
off£t
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) & 0x1F;

451 
ªg_ödex
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) >> 5;

453 i‡(
pﬁ¨ôy
 == 0) {

455 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

456 
vÆue
 |(1 << 
off£t
);

457 
	`mmio_wrôe_32
((
INT_POL_CTL0
 + (
ªg_ödex
 * 4)), 
vÆue
);

460 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

461 
vÆue
 &~(0x1 << 
off£t
);

462 
	`mmio_wrôe_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4), 
vÆue
);

464 
	}
}

467 
	$mt_úq_£t_£ns
(
ba£
, 
úq
, 
£ns
)

469 
c⁄fig
;

471 i‡(
£ns
 =
MT_EDGE_SENSITIVE
)

473 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

474 
c⁄fig
 |(0x2 << (
úq
 % 16) * 2);

475 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

479 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

480 
c⁄fig
 &~(0x2 << (
úq
 % 16) * 2);

481 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

483 
	}
}

491 
	$gic_di°if_£tup
(
gicd_ba£
)

493 
˘r
, 
num_öts
, 
˘Ã
;

496 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
gicd_ba£
);

497 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

498 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
);

505 
num_öts
 = 
	`gicd_ªad_ty≥r
(
gicd_ba£
Ë& 
IT_LINES_NO_MASK
;

506 
num_öts
++;

507 
˘r
 = 0; cå < 
num_öts
; ctr++)

510 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 
˘r
 << 
IGROUPR_SHIFT
, ~0);

516 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

517 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
GIC_HIGHEST_SEC_PRIORITY
);

518 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
,

519 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

520 
	`mt_úq_£t_£ns
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
MT_EDGE_SENSITIVE
);

523 
	`mt_úq_£t_pﬁ¨ôy
(
WDT_IRQ_BIT_ID
, 
MT_POLARITY_LOW
);

525 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

530 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

531 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_TZ_WDOG
, 
GIC_HIGHEST_SEC_PRIORITY
);

532 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
IRQ_TZ_WDOG
,

533 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

534 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

537 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

539 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

540 
	}
}

543 
	$gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
)

545 
	`¥ötf
("GICD_CTLR=0x%08x\n", 
	`gicd_ªad_˘Ã
(
gicd_ba£
));

549 
	`¥ötf
("GICC_CTRL=0x%08x\n", 
	`gicc_ªad_˘Ã
(
gicc_ba£
));

550 
	`¥ötf
("GICC_PMR=0x%08x\n", 
	`gicc_ªad_pmr
(
gicc_ba£
));

551 
	}
}

554 
	$gic_£tup
()

556 
gicd_ba£
, 
gicc_ba£
;

558 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

559 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

561 
	`gic_˝uif_£tup
(
gicc_ba£
);

562 
	`gic_di°if_£tup
(
gicd_ba£
);

565 
i
, 
no_£c
;

566 
i
 = 0; i < 0xFF; i++)

568 
no_£c
 = 
	`gicd_gë_igrou¥
(
gicd_ba£
, 
i
);

569 
	`¥ötf
("úq = %d, group=0x%x(%s)\n", 
i
, 
no_£c
,Ço_sec ? "non-sec":"sec");

572 
	`gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
);

576 
	}
}

590 
uöt32_t
 
	$∂©_öãºu±_ty≥_to_löe
(
uöt32_t
 
ty≥
, uöt32_à
£curôy_°©e
)

592 
uöt32_t
 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

594 
	`as£π
(
ty≥
 =
INTR_TYPE_S_EL1
 ||

595 
ty≥
 =
INTR_TYPE_EL3
 ||

596 
ty≥
 =
INTR_TYPE_NS
);

598 
	`as£π
(
£curôy_°©e
 =
NON_SECURE
 || securôy_°©ê=
SECURE
);

605 #i‡
MT_GIC_ARCH
 == 2

606  
	`gicv2_öãºu±_ty≥_to_löe
(
gicc_ba£
, 
ty≥
);

610 
	}
}

612 #i‡
MT_GIC_ARCH
 == 2

618 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_ty≥
()

620 
uöt32_t
 
id
, 
gicc_ba£
;

622 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

623 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

626 i‡(
id
 < 1022)

627  
INTR_TYPE_S_EL1
;

629 i‡(
id
 =
GIC_SPURIOUS_INTERRUPT
)

630  
INTR_TYPE_INVAL
;

632  
INTR_TYPE_NS
;

633 
	}
}

640 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_id
()

642 
uöt32_t
 
id
, 
gicc_ba£
;

644 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

645 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

647 i‡(
id
 < 1022)

648  
id
;

650 i‡(
id
 == 1023)

651  
INTR_ID_UNAVAILABLE
;

657  
	`gicc_ªad_ahµú
(
gicc_ba£
);

658 
	}
}

664 
uöt32_t
 
	$∂©_ic_acknowÀdge_öãºu±
()

666  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

667 
	}
}

673 
	$∂©_ic_íd_of_öãºu±
(
uöt32_t
 
id
)

675 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
id
);

677 
	}
}

684 
uöt32_t
 
	$∂©_ic_gë_öãºu±_ty≥
(
uöt32_t
 
id
)

686 
uöt32_t
 
group
;

688 
group
 = 
	`gicd_gë_igrou¥
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
id
);

691 i‡(
group
 =
GRP0
)

692  
INTR_TYPE_S_EL1
;

694  
INTR_TYPE_NS
;

695 
	}
}

697 
uöt64_t
 
	$mt_úq_dump_°©us
(
uöt32_t
 
úq
)

699 
uöt32_t
 
di°_ba£
;

700 
bô
;

701 
uöt32_t
 
ªsu…
;

702 
uöt64_t
 
rc
 = 0;

704 
	`¥ötf
("[ATF GIC dump] irq = %d\n", 
úq
);

706 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

709 
bô
 = 1 << (
úq
 % 32);

710 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

711 
	`¥ötf
("[ATF GIC dump]É«bÀ = %x\n", 
ªsu…
);

712 
rc
 |
ªsu…
;

715 
bô
 = 1 << (
úq
 % 32);

717 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

718 
	`¥ötf
("[ATF GIC dump] grou∞%x (0x1:úq,0x0:fiq)\n", 
ªsu…
);

719 
rc
 |
ªsu…
 << 1;

722 
bô
 = 0xf‡<< ((
úq
 % 4)*8);

723 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IPRIORITYR
 + 
úq
 / 4 * 4Ë& 
bô
) >> ((irq % 4)*8));

724 
	`¥ötf
("[ATF GIC dump]Öri‹ôy = %x\n", 
ªsu…
);

725 
rc
 |
ªsu…
 << 2;

728 
bô
 = 0x3 << ((
úq
 % 16)*2);

730 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
úq
 / 16 * 4Ë& 
bô
) >> ((irq % 16)*2));

731 
	`¥ötf
("[ATF GIC dump] sísôivôy = %x (edge:0x1,Üevñ:0x0)\n", 
ªsu…
>>1);

732 
rc
 |(
ªsu…
>>1) << 10;

735 
bô
 = 1 << (
úq
 % 32);

736 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISPENDR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

737 
	`¥ötf
("[ATF GIC dump]Öídög sètu†%x\n", 
ªsu…
);

738 
rc
 |
ªsu…
 << 11;

741 
bô
 = 1 << (
úq
 % 32);

742 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISACTIVER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

743 
	`¥ötf
("[ATF GIC dump]á˘ivê°©u†%x\n", 
ªsu…
);

744 
rc
 |
ªsu…
 << 12;

747 
bô
 = 1 << (
úq
 % 32);

749 
ªsu…
 = ((
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
úq
-32Ë/ 32 * 4Ë& 
bô
)?1:0);

750 
	`¥ötf
("[ATF GIC dump]Öﬁ¨ôy = %x (0x0: high, 0x1:low)\n", 
ªsu…
);

751 
rc
 |
ªsu…
 << 13;

753  
rc
;

754 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_io_storage.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<io_drivî.h
>

34 
	~<io_fù.h
>

35 
	~<io_memm≠.h
>

36 
	~<io_°‹age.h
>

37 
	~<io_£miho°ög.h
>

38 
	~<£miho°ög.h
>

39 
	~<°rög.h
>

40 
	~"∂©_def.h
"

43 
io_∂©_d©a_t
 
	gio_d©a
;

44 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gsh_dev_c⁄
;

45 
uöçå_t
 
	gsh_dev_•ec
;

46 
uöçå_t
 
	gsh_öô_∑øms
;

47 
uöçå_t
 
	gsh_dev_h™dÀ
;

48 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gfù_dev_c⁄
;

49 
uöçå_t
 
	gfù_dev_•ec
;

50 
uöçå_t
 
	gfù_dev_h™dÀ
;

51 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gmemm≠_dev_c⁄
;

52 
uöçå_t
 
	gmemm≠_dev_•ec
;

53 
uöçå_t
 
	gmemm≠_öô_∑øms
;

54 
uöçå_t
 
	gmemm≠_dev_h™dÀ
;

56 c⁄° 
io_block_•ec_t
 
	gfù_block_•ec
 = {

57 .
off£t
 = 
FLASH0_BASE
,

58 .
	gÀngth
 = 
FLASH0_SIZE


61 c⁄° 
io_fûe_•ec_t
 
	gbl2_fûe_•ec
 = {

62 .
∑th
 = 
BL2_IMAGE_NAME
,

63 .
	gmode
 = 
FOPEN_MODE_RB


66 c⁄° 
io_fûe_•ec_t
 
	gbl31_fûe_•ec
 = {

67 .
∑th
 = 
BL31_IMAGE_NAME
,

68 .
	gmode
 = 
FOPEN_MODE_RB


71 c⁄° 
io_fûe_•ec_t
 
	gbl32_fûe_•ec
 = {

72 .
∑th
 = 
BL32_IMAGE_NAME
,

73 .
	gmode
 = 
FOPEN_MODE_RB


76 c⁄° 
io_fûe_•ec_t
 
	gbl33_fûe_•ec
 = {

77 .
∑th
 = 
BL33_IMAGE_NAME
,

78 .
	gmode
 = 
FOPEN_MODE_RB


81 
›í_fù
(c⁄° 
uöçå_t
 
•ec
);

82 
›í_memm≠
(c⁄° 
uöçå_t
 
•ec
);

84 
	s∂©_io_pﬁicy
 {

85 *
	mimage_«me
;

86 
uöçå_t
 *
	mdev_h™dÀ
;

87 
uöçå_t
 
	mimage_•ec
;

88 (*
	mcheck
)(c⁄° 
uöçå_t
 
	m•ec
);

91 c⁄° 
∂©_io_pﬁicy
 
	gpﬁicõs
[] = {

93 
FIP_IMAGE_NAME
,

94 &
memm≠_dev_h™dÀ
,

95 (
uöçå_t
)&
fù_block_•ec
,

96 
›í_memm≠


98 
BL2_IMAGE_NAME
,

99 &
fù_dev_h™dÀ
,

100 (
uöçå_t
)&
bl2_fûe_•ec
,

101 
›í_fù


103 
BL31_IMAGE_NAME
,

104 &
fù_dev_h™dÀ
,

105 (
uöçå_t
)&
bl31_fûe_•ec
,

106 
›í_fù


108 
BL32_IMAGE_NAME
,

109 &
fù_dev_h™dÀ
,

110 (
uöçå_t
)&
bl32_fûe_•ec
,

111 
›í_fù


113 
BL33_IMAGE_NAME
,

114 &
fù_dev_h™dÀ
,

115 (
uöçå_t
)&
bl33_fûe_•ec
,

116 
›í_fù


123 
	$›í_fù
(c⁄° 
uöçå_t
 
•ec
)

125 
ªsu…
 = 
IO_FAIL
;

128 
ªsu…
 = 
	`io_dev_öô
(
fù_dev_h™dÀ
, (
uöçå_t
)
FIP_IMAGE_NAME
);

129 i‡(
ªsu…
 =
IO_SUCCESS
) {

130 
	`INFO
("Using FIP\n");

133  
ªsu…
;

134 
	}
}

137 
	$›í_memm≠
(c⁄° 
uöçå_t
 
•ec
)

139 
ªsu…
 = 
IO_FAIL
;

140 
uöçå_t
 
loˇl_image_h™dÀ
;

142 
ªsu…
 = 
	`io_dev_öô
(
memm≠_dev_h™dÀ
, 
memm≠_öô_∑øms
);

143 i‡(
ªsu…
 =
IO_SUCCESS
) {

144 
ªsu…
 = 
	`io_›í
(
memm≠_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

145 i‡(
ªsu…
 =
IO_SUCCESS
) {

147 
	`io_˛o£
(
loˇl_image_h™dÀ
);

150  
ªsu…
;

151 
	}
}

154 
	$›í_£miho°ög
(c⁄° 
uöçå_t
 
•ec
)

156 
ªsu…
 = 
IO_FAIL
;

157 
uöçå_t
 
loˇl_image_h™dÀ
;

160 
ªsu…
 = 
	`io_dev_öô
(
sh_dev_h™dÀ
, 
sh_öô_∑øms
);

161 i‡(
ªsu…
 =
IO_SUCCESS
) {

162 
ªsu…
 = 
	`io_›í
(
sh_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

163 i‡(
ªsu…
 =
IO_SUCCESS
) {

164 
	`INFO
("Using Semi-hosting IO\n");

165 
	`io_˛o£
(
loˇl_image_h™dÀ
);

168  
ªsu…
;

169 
	}
}

171 
	$mt_io_£tup
 ()

173 
io_ªsu…
 = 
IO_FAIL
;

176 
	`io_öô
(&
io_d©a
);

179 
io_ªsu…
 = 
	`ªgi°î_io_dev_sh
(&
sh_dev_c⁄
);

180 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

182 
io_ªsu…
 = 
	`ªgi°î_io_dev_fù
(&
fù_dev_c⁄
);

183 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

185 
io_ªsu…
 = 
	`ªgi°î_io_dev_memm≠
(&
memm≠_dev_c⁄
);

186 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

189 
io_ªsu…
 = 
	`io_dev_›í
(
sh_dev_c⁄
, 
sh_dev_•ec
, &
sh_dev_h™dÀ
);

190 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

192 
io_ªsu…
 = 
	`io_dev_›í
(
fù_dev_c⁄
, 
fù_dev_•ec
, &
fù_dev_h™dÀ
);

193 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

195 
io_ªsu…
 = 
	`io_dev_›í
(
memm≠_dev_c⁄
, 
memm≠_dev_•ec
,

196 &
memm≠_dev_h™dÀ
);

197 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

200 ()
io_ªsu…
;

201 
	}
}

206 
	$∂©_gë_image_sour˚
(c⁄° *
image_«me
, 
uöçå_t
 *
dev_h™dÀ
,

207 
uöçå_t
 *
image_•ec
)

209 
ªsu…
 = 
IO_FAIL
;

210 c⁄° 
∂©_io_pﬁicy
 *
pﬁicy
;

212 i‡((
image_«me
 !
NULL
Ë&& (
dev_h™dÀ
 != NULL) &&

213 (
image_•ec
 !
NULL
)) {

214 
pﬁicy
 = 
pﬁicõs
;

215 
pﬁicy
->
image_«me
 !
NULL
) {

216 i‡(
	`°rcmp
(
pﬁicy
->
image_«me
, image_name) == 0) {

217 
ªsu…
 = 
pﬁicy
->
	`check
’ﬁicy->
image_•ec
);

218 i‡(
ªsu…
 =
IO_SUCCESS
) {

219 *
image_•ec
 = 
pﬁicy
->image_spec;

220 *
dev_h™dÀ
 = *(
pﬁicy
->dev_handle);

223 
ªsu…
 = 
	`›í_£miho°ög
(

224 
pﬁicy
->
image_•ec
);

225 i‡(
ªsu…
 =
IO_SUCCESS
) {

226 *
dev_h™dÀ
 = 
sh_dev_h™dÀ
;

227 *
image_•ec
 =

228 
pﬁicy
->
image_•ec
;

232 
pﬁicy
++;

235 
ªsu…
 = 
IO_FAIL
;

237  
ªsu…
;

238 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_pm.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bakîy_lock.h
>

34 
	~<cci400.h
>

35 
	~<scu.h
>

36 
	~<mmio.h
>

37 
	~<∂©f‹m.h
>

38 
	~<c⁄sﬁe.h
>

39 
	~<debug.h
>

40 
	~<∂©f‹m_def.h
>

41 
	~<psci.h
>

42 
	~<powî_åa˚r.h
>

43 
	~<°dio.h
>

44 
	~"∂©_def.h
"

45 
	~"∂©_¥iv©e.h
"

46 
	~"Ørch64/∂©_hñ≥rs.h
"

48 
	~"mt_˝uxg±.h
"

50 
	s_ñ3_d‹m™t_d©a
 {

52 
	mmp0_l2e˘Ã_ñ1
;

53 
	mmp0_l2r°dißbÀ
;

55 } 
	gñ3_d‹m™t_d©a
[1] = {{ .
mp0_l2e˘Ã_ñ1
 = 0xDEADDEAD }};

61 
	$mt_affö°_°™dby
(
powî_°©e
)

63 
èrgë_afÊvl
;

66 
èrgë_afÊvl
 = 
	`psci_gë_p°©e_afÊvl
(
powî_°©e
);

72 i‡(
èrgë_afÊvl
 !
MPIDR_AFFLVL0
)

73  
PSCI_E_INVALID_PARAMS
;

79 
	`dsb
();

80 
	`wfi
();

82  
PSCI_E_SUCCESS
;

83 
	}
}

89 
	$mt_affö°_⁄
(
mpidr
,

90 
£c_íåypoöt
,

91 
ns_íåypoöt
,

92 
afÊvl
,

93 
°©e
)

95 
rc
 = 
PSCI_E_SUCCESS
;

96 
löór_id
;

97 
maûbox_t
 *
mt_mboxes
;

103 i‡(
afÊvl
 !
MPIDR_AFFLVL0
)

104 
exô
;

106 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

107 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

108 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

109 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

112 
	`bl31_⁄_íåypoöt
();

113 i‡(
löór_id
 >= 4) {

114 
	`mmio_wrôe_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4), ()
bl31_⁄_íåypoöt
);

115 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4)));

117 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
), ()
bl31_⁄_íåypoöt
);

118 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
)));

121 
exô
:

122  
rc
;

123 
	}
}

137 
	$mt_affö°_off
(
mpidr
,

138 
afÊvl
,

139 
°©e
)

141 
rc
 = 
PSCI_E_SUCCESS
;

142 
gicc_ba£
, 
e˘Ã
;

143 
˝u_£tup
, 
cci_£tup
;

145 
afÊvl
) {

146 
MPIDR_AFFLVL3
:

147 
MPIDR_AFFLVL2
:

149 
MPIDR_AFFLVL1
:

150 i‡(
°©e
 =
PSCI_STATE_OFF
) {

155 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

156 i‡(
cci_£tup
) {

157 
	`cci_dißbÀ_cohîícy
(
mpidr
);

159 
	`dißbÀ_scu
(
mpidr
);

161 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_DOWN
);

165 
MPIDR_AFFLVL0
:

166 i‡(
°©e
 =
PSCI_STATE_OFF
) {

172 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

173 i‡(
˝u_£tup
) {

174 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

175 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

176 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

184 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

185 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

187 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_DOWN
);

192 
	`as£π
(0);

195  
rc
;

196 
	}
}

210 
	$mt_affö°_su•íd
(
mpidr
,

211 
£c_íåypoöt
,

212 
ns_íåypoöt
,

213 
afÊvl
,

214 
°©e
)

216 
rc
 = 
PSCI_E_SUCCESS
;

217 
gicc_ba£
, 
e˘Ã
;

218 
˝u_£tup
, 
cci_£tup
, 
löór_id
;

219 
maûbox_t
 *
mt_mboxes
;

221 
afÊvl
) {

222 
MPIDR_AFFLVL2
:

223 i‡(
°©e
 =
PSCI_STATE_OFF
) {

224 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

227 
p
->
mp0_l2e˘Ã_ñ1
 = 
	`ªad_l2e˘Ã
();

230 
p
->
mp0_l2r°dißbÀ
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

231 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

232 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
);

235 
	`gíîic_timî_backup
();

237 
	`gic_di°_ßve
();

241 
MPIDR_AFFLVL1
:

242 i‡(
°©e
 =
PSCI_STATE_OFF
) {

247 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

248 i‡(
cci_£tup
) {

249 
	`cci_dißbÀ_cohîícy
(
mpidr
);

251 
	`dißbÀ_scu
(
mpidr
);

253 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_SUSPEND
);

257 
MPIDR_AFFLVL0
:

258 i‡(
°©e
 =
PSCI_STATE_OFF
) {

260 
	`mmio_wrôe_32
(
MP0_MISC_CONFIG3
, 
	`mmio_ªad_32
(MP0_MISC_CONFIG3) | (1<<12));

265 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

266 i‡(
˝u_£tup
) {

267 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

268 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

269 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

273 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

274 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

275 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

276 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

284 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

285 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

286 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_SUSPEND
);

291 
	`as£π
(0);

294  
rc
;

295 
	}
}

298 
	$w‹k¨ound_826319
(
mpidr
)

300 
l2a˘Ã
;

303 i‡(
mpidr
 & 
MPIDR_CPU_MASK
)

312 
l2a˘Ã
 = 
	`ªad_l2a˘Ã
();

313 
l2a˘Ã
 = (l2actlr & ~(1<<14)) | (1<<3);

314 
	`wrôe_l2a˘Ã
(
l2a˘Ã
);

317 
	}
}

319 
	#w‹k¨ound_826319
(Ëdÿ{} 0)

	)

323 
	$w‹k¨ound_836870
(
mpidr
)

325 
˝ua˘Ã
;

336 
˝ua˘Ã
 = 
	`ªad_˝ua˘Ã
();

337 
˝ua˘Ã
 = cpuactlr | (1<<24);

338 
	`wrôe_˝ua˘Ã
(
˝ua˘Ã
);

341 
	}
}

343 
	#w‹k¨ound_836870
(Ëdÿ{} 0)

	)

346 
	$˛ór_˙tvoff
(
mpidr
)

348 
s¸_vÆ
, 
vÆ
;

353 
vÆ
 = 0;

356 
s¸_vÆ
 = 
	`ªad_s¸
();

357 
	`wrôe_s¸
(
s¸_vÆ
 | 
SCR_NS_BIT
);

359 
	`wrôe_˙tvoff_ñ2
(
vÆ
);

362 
	`wrôe_s¸
(
s¸_vÆ
);

364 
	`¥ötf
("[0x%X] c¡voff_ñ2=0x%x\n",
mpidr
, 
	`ªad_˙tvoff_ñ2
());

365  
vÆ
;

366 
	}
}

375 
	$mt_affö°_⁄_föish
(
mpidr
,

376 
afÊvl
,

377 
°©e
)

379 
rc
 = 
PSCI_E_SUCCESS
;

380 
löór_id
, 
˝u_£tup
;

381 
maûbox_t
 *
mt_mboxes
;

382 
gicd_ba£
, 
gicc_ba£
, 
e˘Ã
;

384 
afÊvl
) {

386 
MPIDR_AFFLVL2
:

387 i‡(
°©e
 =
PSCI_STATE_OFF
) {

391 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

392 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

397 
MPIDR_AFFLVL1
:

399 i‡(
°©e
 =
PSCI_STATE_OFF
) {

401 
	`w‹k¨ound_826319
(
mpidr
);

402 
	`íabÀ_scu
(
mpidr
);

403 
	`mt_cci_£tup
();

404 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_UP
);

408 
MPIDR_AFFLVL0
:

414 
	`w‹k¨ound_836870
(
mpidr
);

418 
	`˛ór_˙tvoff
(
mpidr
);

424 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

425 i‡(
˝u_£tup
) {

426 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

427 
e˘Ã
 |
CPUECTLR_SMP_BIT
;

428 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

432 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

433 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

434 
mt_mboxes
[
löór_id
].
vÆue
 = 0;

435 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

438 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

440 
	`gic_˝uif_£tup
(
gicc_ba£
);

446 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

447 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

448 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

449 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

450 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

452 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) |

453 (1 << 
	`CNTNSAR_NS_SHIFT
(1));

454 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

457 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

459 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_UP
);

463 
	`as£π
(0);

466  
rc
;

467 
	}
}

476 
	$mt_affö°_su•íd_föish
(
mpidr
,

477 
afÊvl
,

478 
°©e
)

480 
rc
 = 
PSCI_E_SUCCESS
;

482 
afÊvl
) {

483 
MPIDR_AFFLVL2
:

484 i‡(
°©e
 =
PSCI_STATE_OFF
) {

485 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

487 i‡(
p
->
mp0_l2e˘Ã_ñ1
==0xDEADDEAD)

488 
	`∑nic
();

490 
	`wrôe_l2e˘Ã
(
p
->
mp0_l2e˘Ã_ñ1
);

494 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

495 (
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
)

496 | (
p
->
mp0_l2r°dißbÀ
 & 
L2RSTDISABLE
));

498 
	`gic_£tup
();

499 
	`gic_di°_ª°‹e
();

504 
MPIDR_AFFLVL1
:

505 
MPIDR_AFFLVL0
:

506  
	`mt_affö°_⁄_föish
(
mpidr
, 
afÊvl
, 
°©e
);

509 
	`as£π
(0);

512  
rc
;

513 
	}
}

519 c⁄° 
∂©_pm_›s_t
 
	gmt_∂©_pm_›s
 = {

520 
mt_affö°_°™dby
,

521 
mt_affö°_⁄
,

522 
mt_affö°_off
,

523 
mt_affö°_su•íd
,

524 
mt_affö°_⁄_föish
,

525 
mt_affö°_su•íd_föish
,

532 
	$∂©f‹m_£tup_pm
(c⁄° 
∂©_pm_›s_t
 **
∂©_›s
)

534 *
∂©_›s
 = &
mt_∂©_pm_›s
;

536 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_private.h

31 #i‚de‡
__PLAT_PRIVATE_H__


32 
	#__PLAT_PRIVATE_H__


	)

34 
	~<bl_comm⁄.h
>

35 
	~<∂©f‹m_def.h
>

38 vﬁ©ûê
	smaûbox
 {

39 
vÆue


40 
__©åibuã__
((
__Æig√d__
(
CACHE_WRITEBACK_GRANULE
)));

41 } 
	tmaûbox_t
;

48 
	sbl2_to_bl31_∑øms_mem
 {

49 
bl31_∑øms_t
 
	mbl31_∑øms
;

50 
image_öfo_t
 
	mbl31_image_öfo
;

51 
image_öfo_t
 
	mbl32_image_öfo
;

52 
image_öfo_t
 
	mbl33_image_öfo
;

53 
íåy_poöt_öfo_t
 
	mbl33_ï_öfo
;

54 
íåy_poöt_öfo_t
 
	mbl32_ï_öfo
;

55 
íåy_poöt_öfo_t
 
	mbl31_ï_öfo
;

56 } 
	tbl2_to_bl31_∑øms_mem_t
;

61 
	gmemöfo
;

66 
mt_c⁄figuª_mmu_ñ1
(
tŸÆ_ba£
,

67 
tŸÆ_size
,

72 
mt_c⁄figuª_mmu_ñ3
(
tŸÆ_ba£
,

73 
tŸÆ_size
,

78 
mt_gë_cfgv¨
();

79 
mt_c⁄fig_£tup
();

81 #i‡
RESET_TO_BL31


82 
mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

83 
íåy_poöt_öfo
 *
èrgë_íåy_öfo
);

85 
mt_cci_£tup
();

88 
gic_˝uif_dó˘iv©e
();

89 
gic_˝uif_£tup
();

90 
gic_p˝u_di°if_£tup
();

91 
gic_£tup
();

94 
mt_£tup_t›ﬁogy
();

97 
mt_io_£tup
();

100 
mt_£curôy_£tup
();

101 
uöt32_t
 
gë_devöfo_wôh_ödex
(uint32_t);

103 
mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo
 *
bl32_ï
);

106 
mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo
 *
bl33_ï
);

108 
íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

110 
w‹k¨ound_836870
(
mpidr
);

111 
˛ór_˙tvoff
(
mpidr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_security.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<tzc400.h
>

34 
	~<∂©f‹m.h
>

35 
	~"∂©_def.h
"

36 
	~"∂©_¥iv©e.h
"

39 
	#FILTER_SHIFT
(
fûãr
Ë(1 << fûãr)

	)

47 
	$mt_£curôy_£tup
()

50 
tzc_ö°™˚_t
 
c⁄åﬁÀr
;

61 i‡(!
	`mt_gë_cfgv¨
(
CONFIG_HAS_TZC
))

68 
	`INFO
("Configuring TrustZone Controller\n");

75 
c⁄åﬁÀr
.
ba£
 = 
TZC400_BASE
;

76 
c⁄åﬁÀr
.
aid_width
 = 
MT_AID_WIDTH
;

77 
	`tzc_öô
(&
c⁄åﬁÀr
);

91 
	`tzc_dißbÀ_fûãrs
(&
c⁄åﬁÀr
);

105 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 1,

106 
DRAM1_BASE
, 
DRAM1_END
 - 
DRAM1_SEC_SIZE
,

107 
TZC_REGION_S_NONE
,

108 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

109 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

110 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

111 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

112 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

115 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 3,

116 (
DRAM1_END
 - 
DRAM1_SEC_SIZE
) + 1 , DRAM1_END,

117 
TZC_REGION_S_RDWR
,

121 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 2,

122 
DRAM2_BASE
, 
DRAM2_END
, 
TZC_REGION_S_NONE
,

123 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

124 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

125 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

126 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

127 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

134 
	`tzc_£t_a˘i⁄
(&
c⁄åﬁÀr
, 
TZC_ACTION_ERR
);

137 
	`tzc_íabÀ_fûãrs
(&
c⁄åﬁÀr
);

139 
	}
}

141 
uöt32_t
 
	$gë_devöfo_wôh_ödex
(
uöt32_t
 
i
)

143 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

145 if–
i
 < 
DEVINFO_SIZE
){

146  
ãórg
->
devöfo
[
i
];

150 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_tbase.c

12 
	~<as£π.h
>

13 
	~<debug.h
>

14 
	~<°rög.h
>

15 
	~<tzc400.h
>

16 
	~<∂©f‹m.h
>

17 
	~<mmio.h
>

18 
	~<∂©_def.h
>

19 
	~"∂©_¥iv©e.h
"

21 
	~<¨ch_hñ≥rs.h
>

22 
	~<tba£_¥iv©e.h
>

25 
	#PLAT_TBASE_INPUT_HWIDENTITY
 (0x1)

	)

26 
	#PLAT_TBASE_INPUT_HWKEY
 (0x2)

	)

27 
	#PLAT_TBASE_INPUT_RNG
 (0x3)

	)

29 
	#PLAT_TBASE_INPUT_OK
 ((
uöt32_t
)0)

	)

30 
	#PLAT_TBASE_INPUT_ERROR
 ((
uöt32_t
)-1)

	)

35 
uöt32_t
 
	$∂©_tba£_öput
(
uöt64_t
 
D©aId
,uöt64_t* 
Lígth
,* 
out
)

37 
uöt32_t
 
Sètus
 = 
PLAT_TBASE_INPUT_OK
;

38 
uöt32_t
 
Àngth
 = 0, 
idx
 = 0;

41  
D©aId
 )

43 
PLAT_TBASE_INPUT_HWIDENTITY
:

45 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

47 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
hwuid
)/(uint32_t)); idx++)

49 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
hwuid
[idx];

50 
Àngth
 +(
uöt32_t
);

55 
PLAT_TBASE_INPUT_HWKEY
:

57 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

59 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
HRID
)/(uint32_t)) ; idx++)

61 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
HRID
[idx];

62 
Àngth
 +(
uöt32_t
);

64 *
Lígth
 = 
Àngth
;

67 
PLAT_TBASE_INPUT_RNG
:

69 
uöt32_t
 
vÆue
 = 0;

70 
	`mmio_wrôe_32
(
TRNG_PDN_CLR
, 0x2000);

71 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

72 
vÆue
 |
TRNG_CTRL_START
;

73 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

74 0 =(
	`mmio_ªad_32
(
TRNG_CTRL
Ë& 
TRNG_CTRL_RDY
));

75 ((
uöt32_t
*)
out
)[0] = 
	`mmio_ªad_32
(
TRNG_DATA
);

76 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

77 
vÆue
 &~
TRNG_CTRL_START
;

78 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

79 
	`mmio_wrôe_32
(
TRNG_PDN_SET
, 0x2000);

80 *
Lígth
 = 4;

85 
Sètus
 = 
PLAT_TBASE_INPUT_ERROR
;

89  
Sètus
;

90 
	}
}

93 
uöt32_t
 
	$∂©_tba£_dump
()

95 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
());

97 
	`¥ötf
–"c‹ê%d i†dum≥d !\n", ()
löór_id
 );

103 
	`´e_wdt_dump
();

107 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_topology.c

31 
	~<as£π.h
>

32 
	~<∂©f‹m_def.h
>

34 
	~<psci.h
>

37 
	#AFFINST_INVAL
 0xff

	)

47 
	safföôy_öfo
 {

48 
	msiblög
;

49 
	mchûd
;

50 
	m°©e
;

51 
	md©a
;

52 } 
	tafföôy_öfo_t
;

60 
afföôy_öfo_t
 
	gmt_aff1_t›ﬁogy_m≠
[
PLATFORM_CLUSTER_COUNT
];

61 
afföôy_öfo_t
 
	gmt_aff0_t›ﬁogy_m≠
[
PLATFORM_CORE_COUNT
];

64 
	gt›ﬁogy_£tup_d⁄e
;

77 
	$∂©_gë_aff_cou¡
(
aff_lvl
,

78 
mpidr
)

80 
aff_cou¡
 = 1, 
˘r
;

81 
∑ª¡_aff_id
;

83 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

85 
aff_lvl
) {

92 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF3_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

93 
	`as£π
(
∑ª¡_aff_id
 == 0);

102 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF2_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

103 
	`as£π
(
∑ª¡_aff_id
 == 0);

106 
˘r
 = 0;

107 
mt_aff1_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

108 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[˘r].
siblög
) {

109 
aff_cou¡
++;

115 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

116 
	`as£π
(
∑ª¡_aff_id
 < 
PLATFORM_CLUSTER_COUNT
);

119 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[
∑ª¡_aff_id
].
chûd
;

120 
mt_aff0_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

121 
˘r
 = 
mt_aff0_t›ﬁogy_m≠
[˘r].
siblög
) {

122 
aff_cou¡
++;

127 
	`as£π
(0);

130  
aff_cou¡
;

131 
	}
}

137 
	$∂©_gë_max_afÊvl
()

139  
MPIDR_AFFLVL2
;

140 
	}
}

157 
	$∂©_gë_aff_°©e
(
aff_lvl
,

158 
mpidr
)

160 
aff_°©e
 = 
PSCI_AFF_ABSENT
, 
idx
;

161 
idx
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

163 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

165 
aff_lvl
) {

168 i‡(
	`∂©_gë_max_afÊvl
(Ë>
aff_lvl
)

169 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

174 
aff_°©e
 = 
mt_aff1_t›ﬁogy_m≠
[
idx
].
°©e
;

181 
idx
 = 
mt_aff1_t›ﬁogy_m≠
[idx].
chûd
;

182 
idx
 +(
mpidr
 >> 
MPIDR_AFF0_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

183 
aff_°©e
 = 
mt_aff0_t›ﬁogy_m≠
[
idx
].
°©e
;

186 
	`as£π
(0);

189  
aff_°©e
;

190 
	}
}

197 
	$mt_£tup_t›ﬁogy
()

199 
aff0
, 
aff1
, 
aff_°©e
, 
aff0_off£t
 = 0;

200 
mpidr
;

202 
t›ﬁogy_£tup_d⁄e
 = 0;

204 
aff1
 = 0;áff1 < 
PLATFORM_CLUSTER_COUNT
;áff1++) {

206 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
chûd
 = 
aff0_off£t
;

207 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
siblög
 =áff1 + 1;

209 
aff0
 = 0;áff0 < 
PLATFORM_MAX_CPUS_PER_CLUSTER
;áff0++) {

211 
mpidr
 = 
aff1
 << 
MPIDR_AFF1_SHIFT
;

212 
mpidr
 |
aff0
 << 
MPIDR_AFF0_SHIFT
;

214 i‡(
	`mt_pwrc_ªad_psy§
(
mpidr
Ë!
PSYSR_INVALID
) {

219 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

220 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 =

221 
PSCI_AFF_PRESENT
;

223 
aff_°©e
 = 
PSCI_AFF_ABSENT
;

226 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

227 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 = 
PSCI_AFF_PRESENT
;

229 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
chûd
 = 
AFFINST_INVAL
;

230 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
°©e
 = 
aff_°©e
;

231 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
siblög
 =

232 
aff0_off£t
 + 1;

235 
aff0_off£t
++;

239 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
 - 1].
siblög
 = 
AFFINST_INVAL
;

243 
mt_aff1_t›ﬁogy_m≠
[
aff1
 - 1].
siblög
 = 
AFFINST_INVAL
;

245 
t›ﬁogy_£tup_d⁄e
 = 1;

247 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/platform.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 #O¿
MTK_∂©f‹m
, 
the
 
TSP
 
ˇn
 
execuã
 
eôhî
 
‰om
 
Tru°ed
 
SRAM
 
‹
 Tru°ed 
DRAM
.

25 #Tru°ed 
SRAM
 
is
 
the
 .

26 
	gTSP_RAM_LOCATION
 :
t§am


28 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
t§am
)

29 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZRAM


30 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
tdøm
)

31 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZDRAM


33 
$
(
îr‹
 "Unsupported TSP_RAM_LOCATION value")

34 
ídif


36 #Pro˚s†
TSP_RAM_LOCATION_ID
 
Êag


37 
$
(
evÆ
 
	$$
(
ˇŒ
 
add_deföe
,
TSP_RAM_LOCATION_ID
))

39 
PLAT_INCLUDES
 :-
I∂©
/
$
{
PLAT
}/ö˛ude/ -I∂©/${PLAT}/ -I∂©/${PLAT}/drivîs/log -I∂©/${PLAT}/drivîs/timî/ -I∂©/${PLAT}/drivîs/l2c/

41 
PLAT_BL_COMMON_SOURCES
 :
drivîs
/
io
/
io_fù
.
c
 \

42 
drivîs
/
io
/
io_memm≠
.
c
 \

43 
drivîs
/
io
/
io_£miho°ög
.
c
 \

44 
lib
/
mmio
.
c
 \

45 
lib
/
Ørch64
/
sy§eg_hñ≥rs
.
S
 \

46 
lib
/
Ørch64
/
xœt_èbÀs
.
c
 \

47 
lib
/
£miho°ög
/£miho°ög.
c
 \

48 
lib
/
£miho°ög
/
Ørch64
/
£miho°ög_ˇŒ
.
S
 \

49 
∂©
/
comm⁄
/
Ørch64
/
∂©_comm⁄
.
c
 \

50 
∂©
/
$
{
PLAT
}/
∂©_io_°‹age
.
c
 \

51 
∂©
/
comm⁄
/
fiq_smp_ˇŒ
.
c


53 
BL1_SOURCES
 +
drivîs
/
¨m
/
cci400
/cci400.
c
 \

54 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

55 
∂©
/
$
{
PLAT
}/
bl1_∂©_£tup
.
c
 \

56 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

57 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©_hñ≥rs
.
S


59 
BL2_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

60 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

61 
∂©
/
$
{
PLAT
}/
bl2_∂©_£tup
.
c
 \

62 
∂©
/
$
{
PLAT
}/
∂©_£curôy
.
c
 \

63 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©f‹m_comm⁄
.
c


65 
BL31_SOURCES
 +
drivîs
/
¨m
/
gic
/
gic_v2
.
c
 \

66 
drivîs
/
¨m
/
gic
/
gic_v3
.
c
 \

67 
drivîs
/
¨m
/
gic
/
Ørch64
/
gic_v3_sy§egs
.
S
 \

68 
drivîs
/
¨m
/
cci400
/cci400.
c
 \

69 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_mp_°ack
.
S
 \

70 
∂©
/
$
{
PLAT
}/
bl31_∂©_£tup
.
c
 \

71 
∂©
/
$
{
PLAT
}/
∂©_gic
.
c
 \

72 
∂©
/
$
{
PLAT
}/
∂©_pm
.
c
 \

73 
∂©
/
$
{
PLAT
}/
∂©_t›ﬁogy
.
c
 \

74 
∂©
/
$
{
PLAT
}/
scu
.
c
 \

75 
∂©
/
$
{
PLAT
}/
powî_åa˚r
.
c
 \

76 
∂©
/
$
{
PLAT
}/
maûbox
.
c
 \

77 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©_hñ≥rs
.
S
 \

78 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

79 
∂©
/
$
{
PLAT
}/
drivîs
/
u¨t
/u¨t.
c
 \

80 
∂©
/
$
{
PLAT
}/
drivîs
/
timî
/
mt_˝uxg±
.
c
 \

81 
∂©
/
$
{
PLAT
}/
drivîs
/
l2c
/l2c.
c


83 
BL31_SOURCES
 +
∂©
/
$
{
PLAT
}/
sù_svc
/
sù_svc_comm⁄
.
c
 \

84 
∂©
/
$
{
PLAT
}/
sù_svc
/
sù_svc_£tup
.
c
 \

85 
∂©
/
$
{
PLAT
}/
drivîs
/
log
/log.
c


87 
i„q
 (
$
{
RESET_TO_BL31
}, 1)

88 
	gBL31_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

89 
∂©
/
$
{
PLAT
}/
∂©_£curôy
.
c


90 
ídif


92 
i„q
 (
$
{
SPD
}, 
tba£
)

93 
	gBL31_SOURCES
 +
∂©
/
$
{
PLAT
}/
∂©_tba£
.
c


94 
ídif


96 #Fœg 
u£d
 
by
 
the
 
MTK_∂©f‹m
 
p‹t
 
to
 
dëîmöe
Åhê
vîsi⁄
 
of
 
ARM
 
GIC
 
¨chôe˘uª


97 #tÿ
u£
 
öãºu±
 
m™agemít
 
ö
 
EL3
.

98 
MT_GIC_ARCH
 := 2

99 
$
(
evÆ
 $(
ˇŒ
 
add_deföe
,
MT_GIC_ARCH
))

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/power_tracer.c

1 
	~<¨ch.h
>

2 
	~<powî_åa˚r.h
>

3 
	~<°dio.h
>

6 
	#åa˚_log
(...Ë
	`¥ötf
("psci: " 
__VA_ARGS__
)

	)

8 
	#åa˚_log
(...)

	)

11 
	$åa˚_powî_Êow
(
mpidr
, 
mode
) {

12 
mode
) {

13 
CPU_UP
:

14 
	`åa˚_log
("core %d:%d ON\n",

15 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

16 (
mpidr
 & 
MPIDR_CPU_MASK
));

18 
CPU_DOWN
:

19 
	`åa˚_log
("core %d:%d OFF\n",

20 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

21 (
mpidr
 & 
MPIDR_CPU_MASK
));

23 
CPU_SUSPEND
:

24 
	`åa˚_log
("core %d:%d SUSPEND\n",

25 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

26 (
mpidr
 & 
MPIDR_CPU_MASK
));

28 
CLUSTER_UP
:

29 
	`åa˚_log
("˛u°î %d ON\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

31 
CLUSTER_DOWN
:

32 
	`åa˚_log
("˛u°î %d OFF\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

34 
CLUSTER_SUSPEND
:

35 
	`åa˚_log
("˛u°î %d SUSPEND\n", (
mpidr
 & 
MPIDR_CPU_MASK
));

38 
	`åa˚_log
("unknownÖower mode\n");

41 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/scu.c

1 
	~<¨ch.h
>

2 
	~<∂©f‹m_def.h
>

3 
	~<mmio.h
>

5 
	$dißbÀ_scu
(
mpidr
) {

6 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

7 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË| 
ACINACTM
);

8 
	}
}

10 
	$íabÀ_scu
(
mpidr
) {

11 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

12 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË& ~
ACINACTM
);

13 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/sip_svc/sip_private.h

38 #i‚de‡
__SIP_PRIVATE_H__


39 
	#__SIP_PRIVATE_H__


	)

41 
	~<¨ch.h
>

42 
	~<bakîy_lock.h
>

48 
uöt64_t
 
sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

49 
uöt64_t
 
x1
,

50 
uöt64_t
 
x2
,

51 
uöt64_t
 
x3
,

52 
uöt64_t
 
x4
,

53 *
cookõ
,

54 *
h™dÀ
,

55 
uöt64_t
 
Êags
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/sip_svc/sip_svc_common.c

38 
	~<¨ch.h
>

39 
	~<¨ch_hñ≥rs.h
>

40 
	~<as£π.h
>

41 
	~<ru¡ime_svc.h
>

42 
	~<debug.h
>

43 
	~<sù_svc.h
>

44 
	~<sù_îr‹.h
>

45 
	~<∂©f‹m.h
>

46 
	~<mmio.h
>

47 
	~"sù_¥iv©e.h
"

52 
	skî√l_öfo
 {

53 
uöt64_t
 
	mpc
;

54 
uöt64_t
 
	mr0
;

55 
uöt64_t
 
	mr1
;

58 
kî√l_öfo
 
	gk_öfo
;

60 
	$ßve_kî√l_öfo
(
uöt64_t
 
pc
, uöt64_à
r0
, uöt64_à
r1
)

62 
k_öfo
.
pc
=pc;

63 
k_öfo
.
r0
=r0;

64 
k_öfo
.
r1
=r1;

65 
	}
}

67 
uöt64_t
 
	$gë_kî√l_öfo_pc
()

69  
k_öfo
.
pc
;

70 
	}
}

72 
uöt64_t
 
	$gë_kî√l_öfo_r0
()

74  
k_öfo
.
r0
;

75 
	}
}

77 
uöt64_t
 
	$gë_kî√l_öfo_r1
()

79  
k_öfo
.
r1
;

80 
	}
}

82 
bl31_¥ï¨e_k64_íåy
();

83 
ñ3_exô
();

89 
uöt64_t
 
	gmcusys_wrôe_cou¡
 = 0;

90 
uöt64_t
 
	$sù_mcusys_wrôe
(
ªg_addr
, 
ªg_vÆue
)

92 if((
ªg_addr
 & 0xFFFF0000Ë!(
MCUCFG_BASE
 & 0xFFFF0000))

93  
SIP_SVC_E_INVALID_R™ge
;

96 if(–
MP0_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP0_MISC_CONFIG9
 ) ||

97 –
MP1_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP1_MISC_CONFIG9
 )) {

98  
SIP_SVC_E_PERMISSION_DENY
;

101 
	`mmio_wrôe_32
(
ªg_addr
, 
ªg_vÆue
);

102 
	`dsb
();

104 
mcusys_wrôe_cou¡
++;

106  
SIP_SVC_E_SUCCESS
;

107 
	}
}

112 
uöt64_t
 
	$sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

113 
uöt64_t
 
x1
,

114 
uöt64_t
 
x2
,

115 
uöt64_t
 
x3
,

116 
uöt64_t
 
x4
,

117 *
cookõ
,

118 *
h™dÀ
,

119 
uöt64_t
 
Êags
)

121 
uöt64_t
 
rc
;

122 
uöt32_t
 
ns
;

123 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

126 
ns
 = 
	`is_ˇŒî_n⁄_£cuª
(
Êags
);

132 
smc_fid
) {

133 
MTK_SIP_TBASE_HWUID_AARCH32
:

135 i‡(
ns
)

136 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

137 
	`SMC_RET4
(
h™dÀ
, 
ãórg
->
hwuid
[0],Åeearg->hwuid[1],

138 
ãórg
->
hwuid
[2],Åeearg->hwuid[3]);

141 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH32
:

142 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH64
:

143 
rc
 = 
	`sù_mcusys_wrôe
(
x1
, 
x2
);

145 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH32
:

146 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH64
:

147 
rc
 = 
mcusys_wrôe_cou¡
;

149 
MTK_SIP_KERNEL_TMP_AARCH32
:

150 
	`¥ötf
("save kernel info\n");

151 
	`ßve_kî√l_öfo
(
x1
, 
x2
, 
x3
);

152 
	`¥ötf
("end bl31_prepare_k64_entry...\n");

153 
	`bl31_¥ï¨e_k64_íåy
();

154 
	`¥ötf
("el3_exit\n");

155 
	`SMC_RET0
(
h™dÀ
);

157 #i‡
DEBUG


158 
MTK_SIP_KERNEL_GIC_DUMP_AARCH32
:

159 
MTK_SIP_KERNEL_GIC_DUMP_AARCH64
:

160 
rc
 = 
	`mt_úq_dump_°©us
(
x1
);

163 
MTK_SIP_KERNEL_WDT_AARCH32
:

164 
MTK_SIP_KERNEL_WDT_AARCH64
:

165 
wdt_kî√l_cb_addr
 = 
x1
;

166 
	`¥ötf
("MTK_SIP_KERNEL_WDT : 0x%∞\n", 
wdt_kî√l_cb_addr
);

167 
	`¥ötf
("teearg->atf_aee_debug_buf_start : 0x%llx \n",

168 
ãórg
->
©f_´e_debug_buf_°¨t
);

169 
rc
 = 
ãórg
->
©f_´e_debug_buf_°¨t
;

172 
rc
 = 
SMC_UNK
;

173 
	`WARN
("Unim∂emíãd SIP CÆl: 0x%x \n", 
smc_fid
);

176 
	`SMC_RET1
(
h™dÀ
, 
rc
);

177 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/sip_svc/sip_svc_setup.c

38 
	~<debug.h
>

39 
	~<ru¡ime_svc.h
>

40 
	~<sù_svc.h
>

41 
	~<°döt.h
>

42 
	~<uuid.h
>

43 
	~"sù_¥iv©e.h
"

46 
DEFINE_SVC_UUID
(
mtk_sù_svc_uid
,

52 
öt32_t
 
	$sù_svc_£tup
()

59 
	}
}

65 
uöt64_t
 
	$sù_svc_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

66 
uöt64_t
 
x1
,

67 
uöt64_t
 
x2
,

68 
uöt64_t
 
x3
,

69 
uöt64_t
 
x4
,

70 *
cookõ
,

71 *
h™dÀ
,

72 
uöt64_t
 
Êags
)

77 i‡(
	`is_sù_fid
(
smc_fid
)) {

78  
	`sù_smc_h™dÀr
(
smc_fid
, 
x1
, 
x2
, 
x3
, 
x4
, 
cookõ
,

79 
h™dÀ
, 
Êags
);

82 
smc_fid
) {

83 
MTK_SIP_SVC_CALL_COUNT
:

88 
	`SMC_RET1
(
h™dÀ
, 
MTK_SIP_SVC_NUM_CALLS
);

90 
MTK_SIP_SVC_UID
:

92 
	`SMC_UUID_RET
(
h™dÀ
, 
mtk_sù_svc_uid
);

94 
MTK_SIP_SVC_VERSION
:

96 
	`SMC_RET2
(
h™dÀ
, 
MTK_SIP_VERSION_MAJOR
, 
MTK_SIP_VERSION_MINOR
);

99 
	`WARN
("Unim∂emíãd SIP Sîvi˚ CÆl: 0x%x \n", 
smc_fid
);

100 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

102 
	}
}

105 
DECLARE_RT_SVC
(

106 
sù_svc
,

108 
OEN_SIP_START
,

109 
OEN_SIP_END
,

110 
SMC_TYPE_FAST
,

111 
sù_svc_£tup
,

112 
sù_svc_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/aarch64/plat_helpers.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<bl_comm⁄.h
>

34 
	~<gic_v2.h
>

35 
	~"../∂©_def.h
"

37 .
globl
 
	g∂©f‹m_gë_íåypoöt


38 .
globl
 
	g∂©_£c⁄d¨y_cﬁd_boŸ_£tup


39 .
globl
 
	g∂©f‹m_mem_öô


40 .
globl
 
	g∂©_ªp‹t_ex˚±i⁄


42 .
ma¸o
 
mt_choo£_gicmm≠
 
	g∑øm1
, 
	g∑øm2
, 
	gx_tmp
, 
	gw_tmp
, 
ªs


43 
	gldr
 \
	gx_tmp
, =
VE_SYSREGS_BASE
 + 
V2M_SYS_ID


44 
ldr
 \
w_tmp
, [\
x_tmp
]

45 
	gubfx
 \
	gw_tmp
, \w_tmp, #SYS_ID_BLD_SHIFT, #SYS_ID_BLD_LENGTH

46 
	gcmp
 \
	gw_tmp
, #BLD_GIC_VE_MMAP

47 
	gc£l
 \
	gªs
, \
	g∑øm1
, \
	g∑øm2
, 
	geq


48 .
ídm


61 
func
 
∂©_£c⁄d¨y_cﬁd_boŸ_£tup


70 
mrs
 
	gx0
, 
mpidr_ñ1


71 
ldr
 
	gx1
, =
PWRC_BASE


72 
°r
 
w0
, [
x1
, #PPOFFR_OFF]

78 
ldr
 
	gx0
, =
VE_GICC_BASE


79 
ldr
 
x1
, =
BASE_GICC_BASE


80 
mt_choo£_gicmm≠
 
x0
, 
	gx1
, 
	gx2
, 
	gw2
, 
x1


81 
mov
 
	gw0
, #(
	gIRQ_BYP_DIS_GRP1
 | 
	gFIQ_BYP_DIS_GRP1
)

82 
‹r
 
	gw0
, w0, #(
	gIRQ_BYP_DIS_GRP0
 | 
	gFIQ_BYP_DIS_GRP0
)

83 
°r
 
	gw0
, [
x1
, #GICC_CTLR]

91 
dsb
 
sy


92 
wfi


93 
	gcb_∑nic
:

94 
b
 
cb_∑nic


117 
func
 
∂©f‹m_gë_íåypoöt


118 
mov
 
x9
, 
x30


124 
ldr
 
	gx1
, =
fú°_boŸ


125 
ldr
 
w2
, [
x1
]

126 
cmp
 
	gw2
, #0

127 
beq
 
w¨m_ª£t


128 
°r
 
	gwzr
, [
x1
]

129 
mov
 
	gx0
, #0

130 
b
 
exô


131 
	gw¨m_ª£t
:

139 
ldr
 
x10
, =
MBOX_OFF


140 
bl
 
∂©f‹m_gë_c‹e_pos


141 
l¶
 
x0
, 
	gx0
, #CACHE_WRITEBACK_SHIFT

142 
ldr
 
	gx0
, [
x10
, 
x0
]

143 
cbz
 
	gx0
, 
_∑nic


144 
	gexô
:

145 
ªt
 
x9


146 
_∑nic
: 
b
 _panic

160 
func
 
∂©f‹m_mem_öô


161 
ldr
 
x0
, =
MBOX_OFF


162 
mov
 
w1
, #PLATFORM_CORE_COUNT

163 
	glo›
:

164 
°r
 
xzr
, [
x0
], #CACHE_WRITEBACK_GRANULE

165 
subs
 
	gw1
, w1, #1

166 
	gb
.
gt
 
lo›


167 
ªt


177 
func
 
∂©_ªp‹t_ex˚±i⁄


178 
mrs
 
	gx1
, 
CuºítEl


179 
l§
 
	gx1
, x1, #MODE_EL_SHIFT

180 
l¶
 
	gx1
, x1, #SYS_LED_EL_SHIFT

181 
l¶
 
	gx0
, x0, #SYS_LED_EC_SHIFT

182 
mov
 
	gx2
, #(
	gSECURE
 << 
	gSYS_LED_SS_SHIFT
)

183 
‹r
 
	gx0
, x0, 
x2


184 
‹r
 
	gx0
, x0, 
x1


185 
mov
 
	gx1
, #VE_SYSREGS_BASE

186 
add
 
	gx1
, x1, #V2M_SYS_LED

187 
°r
 
	gw0
, [
x1
]

188 
	gªt


190 .
d©a


191 
	gfú°_boŸ
:

194 .
globl
 
ªad_l2a˘Ã


195 
func
 
ªad_l2a˘Ã


196 
dsb
 
sy


197 
MRS
 
x0
, 
S3_1_C15_C0_0


198 
dsb
 
sy


199 
isb


200 
	gªt


202 .
globl
 
wrôe_l2a˘Ã


203 
func
 
wrôe_l2a˘Ã


204 
dsb
 
sy


205 
MSR
 
	gS3_1_C15_C0_0
, 
x0


206 
isb


207 
dsb
 
sy


208 
	gªt


210 .
globl
 
ªad_l2e˘Ã


211 
func
 
ªad_l2e˘Ã


212 
MRS
 
	gx0
, 
S3_1_C11_C0_3


213 
dsb
 
sy


214 
isb


215 
	gªt


217 .
globl
 
wrôe_l2e˘Ã


218 
func
 
wrôe_l2e˘Ã


219 
dsb
 
sy


220 
MSR
 
	gS3_1_C11_C0_3
, 
x0


221 
isb


222 
dsb
 
sy


223 
	gªt


225 .
globl
 
ªad_˝ua˘Ã


226 
func
 
ªad_˝ua˘Ã


227 
dsb
 
sy


228 
MRS
 
	gx0
, 
S3_1_C15_C2_0


229 
dsb
 
sy


230 
isb


231 
	gªt


233 .
globl
 
wrôe_˝ua˘Ã


234 
func
 
wrôe_˝ua˘Ã


235 
dsb
 
sy


236 
MSR
 
	gS3_1_C15_C2_0
, 
x0


237 
isb


238 
dsb
 
sy


239 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/aarch64/plat_helpers.h

1 #i‚de‡
PLAT_HELPERS_H


2 
	#PLAT_HELPERS_H


	)

4 
ªad_l2a˘Ã
();

5 
ªad_l2e˘Ã
();

7 
wrôe_l2a˘Ã
();

8 
wrôe_l2e˘Ã
();

10 
ªad_˝ua˘Ã
();

11 
wrôe_˝ua˘Ã
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/aarch64/platform_common.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<cci400.h
>

36 
	~<debug.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<xœt_èbÀs.h
>

40 
	~"../∂©_def.h
"

51 
	gmt_c⁄fig
[
CONFIG_LIMIT
];

59 c⁄° 
mm≠_ªgi⁄_t
 
	gmt_mm≠
[] = {

61 {(
ATF_ARG_BASE
 & 
PAGE_ADDR_MASK
), 
ATF_ARG_SIZE
, 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
},

64 {(
TZRAM_BASE
 & 
PAGE_ADDR_MASK
),

65 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
), 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
},

71 { 
MTK_DEVICE_BASE
, 
MTK_DEVICE_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

74 {(
MT_DEV_BASE
 & 
PAGE_ADDR_MASK
),
MT_DEV_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
},

82 { 
MTK_WDT_BASE
, 
MTK_WDT_SIZE
, 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
 },

95 
	#DEFINE_CONFIGURE_MMU_EL
(
_ñ
) \

96 
mt_c⁄figuª_mmu_ñ
##
	`_ñ
(
tŸÆ_ba£
, \

97 
tŸÆ_size
, \

98 
ro_°¨t
, \

99 
ro_limô
, \

100 
coh_°¨t
, \

101 
coh_limô
) \

103 
	`mm≠_add_ªgi⁄
(
tŸÆ_ba£
, \

104 
tŸÆ_size
, \

105 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
); \

106 
	`mm≠_add_ªgi⁄
(
ro_°¨t
, 
ro_limô
 -Ño_start, \

107 
MT_MEMORY
 | 
MT_RO
 | 
MT_SECURE
); \

108 
	`mm≠_add_ªgi⁄
(
coh_°¨t
, 
coh_limô
 - coh_start, \

109 
MT_DEVICE
 | 
MT_RW
 | 
MT_SECURE
); \

110 
	`mm≠_add
(
mt_mm≠
); \

111 
	`öô_xœt_èbÀs
(); \

113 
íabÀ_mmu_ñ
##
	`_ñ
(); \

114 }

	)

117 
	$DEFINE_CONFIGURE_MMU_EL
(1)

118 
	$DEFINE_CONFIGURE_MMU_EL
(3)

121 
	$mt_gë_cfgv¨
(
v¨_id
)

123 
	`as£π
(
v¨_id
 < 
CONFIG_LIMIT
);

124  
mt_c⁄fig
[
v¨_id
];

125 
	}
}

134 
	$mt_c⁄fig_£tup
()

136 
ªv
, 
hbi
, 
bld
, 
¨ch
, 
sys_id
, 
midr_≤
;

138 
sys_id
 = 
	`mmio_ªad_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_ID
);

139 
ªv
 = (
sys_id
 >> 
SYS_ID_REV_SHIFT
Ë& 
SYS_ID_REV_MASK
;

140 
hbi
 = (
sys_id
 >> 
SYS_ID_HBI_SHIFT
Ë& 
SYS_ID_HBI_MASK
;

141 
bld
 = (
sys_id
 >> 
SYS_ID_BLD_SHIFT
Ë& 
SYS_ID_BLD_MASK
;

142 
¨ch
 = (
sys_id
 >> 
SYS_ID_ARCH_SHIFT
Ë& 
SYS_ID_ARCH_MASK
;

144 
¨ch
 = 
ARCH_MODEL
;

145 
bld
 = 
BLD_GIC_A53A57_MMAP
;

146 
hbi
 = 
HBI_MT_BASE
;

148 i‡((
ªv
 !
REV_MT
Ë|| (
¨ch
 !
ARCH_MODEL
))

149 
	`∑nic
();

155 
bld
) {

157 
BLD_GIC_VE_MMAP
:

158 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
VE_GICD_BASE
;

159 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
VE_GICC_BASE
;

160 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
VE_GICH_BASE
;

161 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
VE_GICV_BASE
;

164 
BLD_GIC_A53A57_MMAP
:

165 
mt_c⁄fig
[
CONFIG_GICD_ADDR
] = 
BASE_GICD_BASE
;

166 
mt_c⁄fig
[
CONFIG_GICC_ADDR
] = 
BASE_GICC_BASE
;

167 
mt_c⁄fig
[
CONFIG_GICH_ADDR
] = 
BASE_GICH_BASE
;

168 
mt_c⁄fig
[
CONFIG_GICV_ADDR
] = 
BASE_GICV_BASE
;

171 
	`as£π
(0);

178 
hbi
) {

179 
HBI_FOUNDATION
:

180 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

181 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 1;

182 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

183 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 0;

184 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 0;

185 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

187 
HBI_MT_BASE
:

188 
midr_≤
 = (
	`ªad_midr
(Ë>> 
MIDR_PN_SHIFT
Ë& 
MIDR_PN_MASK
;

189 i‡((
midr_≤
 =
MIDR_PN_A57
Ë|| (midr_≤ =
MIDR_PN_A53
))

190 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 1;

192 
mt_c⁄fig
[
CONFIG_CPU_SETUP
] = 0;

194 
mt_c⁄fig
[
CONFIG_MAX_AFF0
] = 4;

195 
mt_c⁄fig
[
CONFIG_MAX_AFF1
] = 2;

196 
mt_c⁄fig
[
CONFIG_BASE_MMAP
] = 1;

197 
mt_c⁄fig
[
CONFIG_HAS_CCI
] = 1;

198 
mt_c⁄fig
[
CONFIG_HAS_TZC
] = 0;

201 
	`as£π
(0);

205 
	}
}

207 
	$∂©_gë_ns_image_íåypoöt
()

210  
BL33_START_ADDRESS
;

212 
	}
}

214 
uöt64_t
 
	$∂©_gë_sys˙t_‰eq
()

216 
uöt64_t
 
cou¡î_ba£_‰equícy
;

220 
cou¡î_ba£_‰equícy
 = 13000000;

223 
	`as£π
(
cou¡î_ba£_‰equícy
 != 0);

225  
cou¡î_ba£_‰equícy
;

226 
	}
}

228 
	$mt_cci_£tup
()

230 
cci_£tup
;

237 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

238 i‡(
cci_£tup
)

239 
	`cci_íabÀ_cohîícy
(
	`ªad_mpidr
());

240 
	}
}

246 
	$mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

248 
	`SET_SECURITY_STATE
(
bl32_ï_öfo
->
h
.
©å
, 
SECURE
);

253 
bl32_ï_öfo
->
•§
 = 0;

254 
	}
}

259 
	$mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

261 
ñ_°©us
;

262 
mode
;

263 
rw
, 
ì
;

264 
daif
;

268 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

269 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

271 i‡(
ñ_°©us
)

272 
mode
 = 
MODE_EL2
;

274 
mode
 = 
MODE_EL1
;

309 
rw
 = 0;

311 
rw
 = 1;

313 i‡(0 =
rw
) {

314 
	`¥ötf
("LK is AArch32\n");

315 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

316 
mode
 = 
MODE32_svc
;

317 
ì
 = 0;

322 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

324 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

331 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)
BOOT_ARGUMENT_LOCATION
;

332 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

334 
	`¥ötf
("LK is AArch64\n");

335 
bl33_ï_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

337 
	`SET_SECURITY_STATE
(
bl33_ï_öfo
->
h
.
©å
, 
NON_SECURE
);

338 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/bl1_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<mmio.h
>

36 
	~<∂©f‹m.h
>

37 
	~<∂©f‹m_def.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__COHERENT_RAM_START__
;

46 
__COHERENT_RAM_END__
;

48 
__BL1_RAM_START__
;

49 
__BL1_RAM_END__
;

58 
	#BL1_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

59 
	#BL1_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

61 
	#BL1_RAM_BASE
 ()(&
__BL1_RAM_START__
)

	)

62 
	#BL1_RAM_LIMIT
 ()(&
__BL1_RAM_END__
)

	)

66 
memöfo_t
 
	gbl1_tzøm_œyout
;

68 
memöfo_t
 *
	$bl1_∂©_£c_mem_œyout
()

70  &
bl1_tzøm_œyout
;

71 
	}
}

76 
	$bl1_óæy_∂©f‹m_£tup
()

78 c⁄° 
bl1_øm_ba£
 = 
BL1_RAM_BASE
;

79 c⁄° 
bl1_øm_limô
 = 
BL1_RAM_LIMIT
;

80 c⁄° 
tzøm_limô
 = 
TZRAM_BASE
 + 
TZRAM_SIZE
;

83 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

93 
bl1_tzøm_œyout
.
tŸÆ_ba£
 = 
TZRAM_BASE
;

94 
bl1_tzøm_œyout
.
tŸÆ_size
 = 
TZRAM_SIZE
;

96 i‡(
bl1_øm_limô
 =
tzøm_limô
) {

98 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
TZRAM_BASE
;

99 
bl1_tzøm_œyout
.
‰ì_size
 = 
bl1_øm_ba£
 - 
TZRAM_BASE
;

102 
bl1_tzøm_œyout
.
‰ì_ba£
 = 
bl1_øm_limô
;

103 
bl1_tzøm_œyout
.
‰ì_size
 =

104 
tzøm_limô
 - 
bl1_øm_limô
;

108 
	`mt_c⁄fig_£tup
();

109 
	}
}

116 
	$bl1_∂©f‹m_£tup
()

119 
	`mt_io_£tup
();

120 
	}
}

128 
	$bl1_∂©_¨ch_£tup
()

130 
	`mt_cci_£tup
();

132 
	`mt_c⁄figuª_mmu_ñ3
(
bl1_tzøm_œyout
.
tŸÆ_ba£
,

133 
bl1_tzøm_œyout
.
tŸÆ_size
,

134 
TZROM_BASE
,

135 
TZROM_BASE
 + 
TZROM_SIZE
,

136 
BL1_COHERENT_RAM_BASE
,

137 
BL1_COHERENT_RAM_LIMIT
);

138 
	}
}

147 
	$bl1_∂©_£t_bl2_ï_öfo
(
image_öfo_t
 *
bl2_image
,

148 
íåy_poöt_öfo_t
 *
bl2_ï
)

150 
	`SET_SECURITY_STATE
(
bl2_ï
->
h
.
©å
, 
SECURE
);

151 
bl2_ï
->
•§
 = 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

152 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/bl2_plat_setup.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄sﬁe.h
>

35 
	~<∂©f‹m.h
>

36 
	~<∂©f‹m_def.h
>

37 
	~<°rög.h
>

38 
	~"∂©_def.h
"

39 
	~"∂©_¥iv©e.h
"

45 
__RO_START__
;

46 
__RO_END__
;

48 
__COHERENT_RAM_START__
;

49 
__COHERENT_RAM_END__
;

57 
	#BL2_RO_BASE
 ()(&
__RO_START__
)

	)

58 
	#BL2_RO_LIMIT
 ()(&
__RO_END__
)

	)

67 
	#BL2_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

68 
	#BL2_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

71 **
bl2_ñ_ch™ge_mem_±r
;

74 
memöfo_t
 
bl2_tzøm_œyout


75 
__©åibuã__
 ((
Æig√d
(
PLATFORM_CACHE_LINE_SIZE
),

76 
£˘i⁄
("tzfw_coherent_mem")));

82 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

83 
íåy_poöt_öfo_t
 *
	gbl31_ï_öfo
;

85 
memöfo_t
 *
	$bl2_∂©_£c_mem_œyout
()

87  &
bl2_tzøm_œyout
;

88 
	}
}

99 
bl31_∑øms_t
 *
	$bl2_∂©_gë_bl31_∑øms
()

101 
bl2_to_bl31_∑øms_mem_t
 *
bl31_∑øms_mem
;

103 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


108 
	`as£π
(
BL32_BASE
 > 
PARAMS_BASE
 + (
bl2_to_bl31_∑øms_mem_t
));

115 
bl31_∑øms_mem
 = (
bl2_to_bl31_∑øms_mem_t
 *)
PARAMS_BASE
;

116 
	`mem£t
((*)
PARAMS_BASE
, 0, (
bl2_to_bl31_∑øms_mem_t
));

119 
bl2_to_bl31_∑øms
 = &
bl31_∑øms_mem
->
bl31_∑øms
;

120 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
, 
PARAM_BL31
, 
VERSION_1
, 0);

123 
bl31_ï_öfo
 = &
bl31_∑øms_mem
->bl31_ep_info;

124 
bl2_to_bl31_∑øms
->
bl31_image_öfo
 = &
bl31_∑øms_mem
->bl31_image_info;

125 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl31_image_öfo
, 
PARAM_IMAGE_BINARY
,

126 
VERSION_1
, 0);

129 i‡(
BL32_BASE
) {

130 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
 =

131 &
bl31_∑øms_mem
->
bl32_ï_öfo
;

132 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_ï_öfo
,

133 
PARAM_EP
, 
VERSION_1
, 0);

134 
bl2_to_bl31_∑øms
->
bl32_image_öfo
 =

135 &
bl31_∑øms_mem
->
bl32_image_öfo
;

136 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl32_image_öfo
,

137 
PARAM_IMAGE_BINARY
,

138 
VERSION_1
, 0);

142 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 = &
bl31_∑øms_mem
->bl33_ep_info;

143 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_ï_öfo
,

144 
PARAM_EP
, 
VERSION_1
, 0);

145 
bl2_to_bl31_∑øms
->
bl33_image_öfo
 = &
bl31_∑øms_mem
->bl33_image_info;

146 
	`SET_PARAM_HEAD
(
bl2_to_bl31_∑øms
->
bl33_image_öfo
, 
PARAM_IMAGE_BINARY
,

147 
VERSION_1
, 0);

149  
bl2_to_bl31_∑øms
;

150 
	}
}

157 
íåy_poöt_öfo
 *
	$bl2_∂©_gë_bl31_ï_öfo
()

159 #i‡
DEBUG


160 
bl31_ï_öfo
->
¨gs
.
¨g1
 = 
MT_BL31_PLAT_PARAM_VAL
;

162  
bl31_ï_öfo
;

163 
	}
}

171 
	$bl2_óæy_∂©f‹m_£tup
(
memöfo_t
 *
mem_œyout
)

174 
	`c⁄sﬁe_öô
(
PL011_UART0_BASE
);

177 
bl2_tzøm_œyout
.
tŸÆ_ba£
 = 
mem_œyout
->total_base;

178 
bl2_tzøm_œyout
.
tŸÆ_size
 = 
mem_œyout
->total_size;

179 
bl2_tzøm_œyout
.
‰ì_ba£
 = 
mem_œyout
->free_base;

180 
bl2_tzøm_œyout
.
‰ì_size
 = 
mem_œyout
->free_size;

181 
bl2_tzøm_œyout
.
©å
 = 
mem_œyout
->attr;

182 
bl2_tzøm_œyout
.
√xt
 = 0;

185 
	`mt_c⁄fig_£tup
();

186 
	}
}

192 
	$bl2_∂©f‹m_£tup
()

200 
	`mt_£curôy_£tup
();

203 
	`mt_io_£tup
();

204 
	}
}

207 
	$bl2_∂©_Êush_bl31_∑øms
()

209 
	`Êush_dˇche_ønge
(()
PARAMS_BASE
, \

210 (
bl2_to_bl31_∑øms_mem_t
));

211 
	}
}

218 
	$bl2_∂©_¨ch_£tup
()

220 
	`mt_c⁄figuª_mmu_ñ1
(
bl2_tzøm_œyout
.
tŸÆ_ba£
,

221 
bl2_tzøm_œyout
.
tŸÆ_size
,

222 
BL2_RO_BASE
,

223 
BL2_RO_LIMIT
,

224 
BL2_COHERENT_RAM_BASE
,

225 
BL2_COHERENT_RAM_LIMIT
);

226 
	}
}

234 
	$bl2_∂©_£t_bl31_ï_öfo
(
image_öfo_t
 *
bl31_image_öfo
,

235 
íåy_poöt_öfo_t
 *
bl31_ï_öfo
)

237 
	`SET_SECURITY_STATE
(
bl31_ï_öfo
->
h
.
©å
, 
SECURE
);

238 
bl31_ï_öfo
->
•§
 = 
	`SPSR_64
(
MODE_EL3
, 
MODE_SP_ELX
,

239 
DISABLE_ALL_EXCEPTIONS
);

240 
	}
}

249 
	$bl2_∂©_£t_bl32_ï_öfo
(
image_öfo_t
 *
bl32_image_öfo
,

250 
íåy_poöt_öfo_t
 *
bl32_ï_öfo
)

252 
	`mt_£t_bl32_ï_öfo
(
bl32_ï_öfo
);

253 
	}
}

261 
	$bl2_∂©_£t_bl33_ï_öfo
(
image_öfo_t
 *
image
,

262 
íåy_poöt_öfo_t
 *
bl33_ï_öfo
)

264 
	`mt_£t_bl33_ï_öfo
(
bl33_ï_öfo
);

265 
	}
}

271 
	$bl2_∂©_gë_bl32_memöfo
(
memöfo_t
 *
bl32_memöfo
)

276 
bl32_memöfo
->
tŸÆ_ba£
 = 
BL32_BASE
;

277 
bl32_memöfo
->
‰ì_ba£
 = 
BL32_BASE
;

278 
bl32_memöfo
->
tŸÆ_size
 =

279 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

280 
bl32_memöfo
->
‰ì_size
 =

281 (
TSP_SEC_MEM_BASE
 + 
TSP_SEC_MEM_SIZE
Ë- 
BL32_BASE
;

282 
bl32_memöfo
->
©å
 = 
BOT_LOAD
;

283 
bl32_memöfo
->
√xt
 = 0;

284 
	}
}

290 
	$bl2_∂©_gë_bl33_memöfo
(
memöfo_t
 *
bl33_memöfo
)

292 
bl33_memöfo
->
tŸÆ_ba£
 = 
DRAM_BASE
;

293 
bl33_memöfo
->
tŸÆ_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

294 
bl33_memöfo
->
‰ì_ba£
 = 
DRAM_BASE
;

295 
bl33_memöfo
->
‰ì_size
 = 
DRAM_SIZE
 - 
DRAM1_SEC_SIZE
;

296 
bl33_memöfo
->
©å
 = 0;

297 
bl33_memöfo
->
©å
 = 0;

298 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/bl31_plat_setup.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<c⁄sﬁe.h
>

37 
	~<mmio.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°ddef.h
>

40 
	~"∂©_def.h
"

41 
	~"∂©_¥iv©e.h
"

42 
	~<°dio.h
>

43 
	~<°rög.h
>

44 
	~<xœt_èbÀs.h
>

45 
	~"l2c.h
"

46 
	~"mt_˝uxg±.h
"

52 
bl31_⁄_íåypoöt
();

54 
__RO_START__
;

55 
__RO_END__
;

57 
__COHERENT_RAM_START__
;

58 
__COHERENT_RAM_END__
;

66 
	#BL31_RO_BASE
 ()(&
__RO_START__
)

	)

67 
	#BL31_RO_LIMIT
 ()(&
__RO_END__
)

	)

76 
	#BL31_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

77 
	#BL31_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

80 #i‡
RESET_TO_BL31


81 
íåy_poöt_öfo_t
 
	gbl32_íåypoöt_öfo
;

82 
íåy_poöt_öfo_t
 
	gbl33_íåypoöt_öfo
;

88 
bl31_∑øms_t
 *
	gbl2_to_bl31_∑øms
;

97 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_image_ï_öfo
(
uöt32_t
 
ty≥
)

99 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

101 #i‡
RESET_TO_BL31


103 i‡(
ty≥
 =
NON_SECURE
)

104 
	`mt_gë_íåy_poöt_öfo
(
NON_SECURE
, &
bl33_íåypoöt_öfo
);

106 
	`mt_gë_íåy_poöt_öfo
(
SECURE
, &
bl32_íåypoöt_öfo
);

108 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

109 &
bl33_íåypoöt_öfo
 :

110 &
bl32_íåypoöt_öfo
;

112 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

113 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

114 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

119 i‡(
√xt_image_öfo
->
pc
)

120  
√xt_image_öfo
;

122  
NULL
;

123 
	}
}

126 
uöt64_t
 
gë_kî√l_öfo_pc
();

127 
uöt64_t
 
gë_kî√l_öfo_r0
();

128 
uöt64_t
 
gë_kî√l_öfo_r1
();

130 
íåy_poöt_öfo_t
 *
	$bl31_∂©_gë_√xt_kî√l_ï_öfo
(
uöt32_t
 
ty≥
)

132 
íåy_poöt_öfo_t
 *
√xt_image_öfo
;

133 
ñ_°©us
;

134 
mode
;

136 #i‡
RESET_TO_BL31


137 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

138 &
bl33_íåypoöt_öfo
 :

139 &
bl32_íåypoöt_öfo
;

141 
	`mt_gë_íåy_poöt_öfo
(
ty≥
, 
√xt_image_öfo
);

144 
√xt_image_öfo
 = (
ty≥
 =
NON_SECURE
) ?

145 
bl2_to_bl31_∑øms
->
bl33_ï_öfo
 :

146 
bl2_to_bl31_∑øms
->
bl32_ï_öfo
;

151 
ñ_°©us
 = 
	`ªad_id_Ø64p‰0_ñ1
(Ë>> 
ID_AA64PFR0_EL2_SHIFT
;

152 
ñ_°©us
 &
ID_AA64PFR0_ELX_MASK
;

154 i‡(
ñ_°©us
)

155 
mode
 = 
MODE_EL2
;

157 
mode
 = 
MODE_EL1
;

160 i‡(0 =
rw
) {

161 
	`¥ötf
("LK is AArch32\n");

162 
	`¥ötf
("LK sèπ_addr=x0x%x\n", 
bl33_ï_öfo
->
pc
);

163 
mode
 = 
MODE32_svc
;

164 
ì
 = 0;

169 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

171 
bl33_ï_öfo
->
•§
 = 
	`SPSR_MODE32
(
mode
, 0, 
ì
, 
daif
);

178 
bl33_ï_öfo
->
¨gs
.
¨g4
=()(
uöçå_t
)&
∂_boŸ_¨gumít
;

179 
bl33_ï_öfo
->
¨gs
.
¨g5
=()(
uöçå_t
)
BOOT_ARGUMENT_SIZE
;

183 
	`¥ötf
("Kernel is 64Bit\n");

184 
√xt_image_öfo
->
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

185 
√xt_image_öfo
->
pc
 = 
	`gë_kî√l_öfo_pc
();

186 
√xt_image_öfo
->
¨gs
.
¨g0
=
	`gë_kî√l_öfo_r0
();

187 
√xt_image_öfo
->
¨gs
.
¨g1
=
	`gë_kî√l_öfo_r1
();

189 
	`¥ötf
("pc=0x%llx,Ñ0=0x%llx,Ñ1=0x%llx\n",

190 
√xt_image_öfo
->
pc
,

191 
√xt_image_öfo
->
¨gs
.
¨g0
,

192 
√xt_image_öfo
->
¨gs
.
¨g1
);

195 
	`SET_SECURITY_STATE
(
√xt_image_öfo
->
h
.
©å
, 
NON_SECURE
);

199 i‡(
√xt_image_öfo
->
pc
)

200  
√xt_image_öfo
;

202  
NULL
;

203 
	}
}

217 
°¨t_dev≠c
();

218 
	$bl31_óæy_∂©f‹m_£tup
(
bl31_∑øms_t
 *
‰om_bl2
,

219 *
∂©_∑øms_‰om_bl2
)

221 
n‹mÆ_ba£
;

222 
©f_ba£
;

224 
	`c⁄fig_L2_size
();

226 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

229 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(0), ()
bl31_⁄_íåypoöt
);

231 
n‹mÆ_ba£
 = 0;

235 
©f_ba£
 = 
	`ªad_˙ç˘_ñ0
();

236 
	`©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

240 
	`c⁄sﬁe_öô
(
ãórg
->
©f_log_p‹t
);

241 
	`¥ötf
("LK boŸárgumíàloˇti⁄=0x%x\n\r", 
BOOT_ARGUMENT_LOCATION
);

242 
	`¥ötf
("KL boŸárgumíàsize=0x%x\n\r", 
BOOT_ARGUMENT_SIZE
);

243 
	`¥ötf
("©f_magic=0x%x\n\r", 
ãórg
->
©f_magic
);

244 
	`¥ötf
("ãe_suµ‹t=0x%x\n\r", 
ãórg
->
ãe_suµ‹t
);

245 
	`¥ötf
("ãe_íåy=0x%x\n\r", 
ãórg
->
ãe_íåy
);

246 
	`¥ötf
("ãe_boŸ_¨g_addr=0x%x\n\r", 
ãórg
->
ãe_boŸ_¨g_addr
);

247 
	`¥ötf
("©f_log_p‹t=0x%x\n\r", 
ãórg
->
©f_log_p‹t
);

248 
	`¥ötf
("©f_log_baudøã=0x%x\n\r", 
ãórg
->
©f_log_baudøã
);

249 
	`¥ötf
("©f_log_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
);

250 
	`¥ötf
("©f_log_buf_size=0x%x\n\r", 
ãórg
->
©f_log_buf_size
);

251 
	`¥ötf
("©f_´e_debug_buf_°¨t=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_°¨t
);

252 
	`¥ötf
("©f_´e_debug_buf_size=0x%x\n\r", 
ãórg
->
©f_´e_debug_buf_size
);

253 
	`¥ötf
("©f_úq_num=%d\n\r", 
ãórg
->
©f_úq_num
);

254 
	`¥ötf
("BL33_START_ADDRESS=0x%x\n\r", 
BL33_START_ADDRESS
);

257 
	`mt_c⁄fig_£tup
();

259 
	`¥ötf
("bl31_setup\n\r");

260 #i‡
RESET_TO_BL31


262 
	`as£π
(
‰om_bl2
 =
NULL
);

263 
	`as£π
(
∂©_∑øms_‰om_bl2
 =
NULL
);

264 
	`¥ötf
("RESET_TO_BL31\n\r");

280 
	`¥ötf
("not RESET_TO_BL31\n");

282 
	`as£π
(
‰om_bl2
 !
NULL
);

283 
	`as£π
(
‰om_bl2
->
h
.
ty≥
 =
PARAM_BL31
);

284 
	`as£π
(
‰om_bl2
->
h
.
vîsi⁄
 >
VERSION_1
);

286 
bl2_to_bl31_∑øms
 = 
‰om_bl2
;

287 
	`as£π
((()
∂©_∑øms_‰om_bl2
Ë=
MT_BL31_PLAT_PARAM_VAL
);

290 if(! (
ãórg
->
ãe_suµ‹t
))

291 
	`°¨t_dev≠c
();

292 
	}
}

298 
	$bl31_∂©f‹m_£tup
()

303 
	`gic_£tup
();

311 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGDATA
, 0);

312 
	`mmio_wrôe_32
(
VE_SYSREGS_BASE
 + 
V2M_SYS_CFGCTRL
,

318 
	`mmio_wrôe_32
(
SYS_CNTCTL_BASE
 + 
CNTCR_OFF
, 
	`CNTCR_FCREQ
(0Ë| 
CNTCR_EN
);

321 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

322 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

323 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

324 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

325 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

327 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) | (1 << CNTNSAR_NS_SHIFT(1));

328 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

332 
	`mt_£tup_t›ﬁogy
();

333 
	}
}

339 
	$bl31_∂©_¨ch_£tup
()

341 #i‡
RESET_TO_BL31


342 
	`mt_cci_£tup
();

346 
	`mmio_wrôe_32
(
CCI400_BASE
 + 
CCI_SEC_ACCESS_OFFSET
 , 0x1);

348 
	`¥ötf
("###@@@ MP0_MISC_CONFIG3:0x%08x @@@###\n", 
	`mmio_ªad_32
(
MP0_MISC_CONFIG3
));

349 
	`mmio_wrôe_32
(
MP0_MISC_CONFIG3
, 
	`mmio_ªad_32
(MP0_MISC_CONFIG3) | 0x0000E000);

350 
	`¥ötf
("###@@@ MP0_MISC_CONFIG3:0x%08x @@@###\n", 
	`mmio_ªad_32
(
MP0_MISC_CONFIG3
));

353 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

354 if(
ãórg
->
©f_log_buf_size
 !=0 ) {

355 
	`¥ötf
("mm≠át‡buf„∏: 0x%x, 0x%x\n\r", 
ãórg
->
©f_log_buf_°¨t
,

356 
ãórg
->
©f_log_buf_size
);

357 
	`mm≠_add_ªgi⁄
((
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
,

358 
MT_DEVICE
 | 
MT_RW
 | 
MT_NS
);

359 
	`¥ötf
("mmapátf buffer (force 2MBáligned): 0x%x, 0x%x\n\r",

360 (
ãórg
->
©f_log_buf_°¨t
 & ~(
PAGE_SIZE_2MB_MASK
)), 
PAGE_SIZE_2MB
);

365 
	`mm≠_add_ªgi⁄
(
TZRAM2_BASE
, ((
TZRAM2_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

366 
MT_MEMORY
 | 
MT_RW
 | 
MT_SECURE
);

370 
	`mt_c⁄figuª_mmu_ñ3
(
TZRAM_BASE
,

371 ((
TZRAM_SIZE
 & ~(
PAGE_SIZE_MASK
)Ë+ 
PAGE_SIZE
),

372 
BL31_RO_BASE
,

373 
BL31_RO_LIMIT
,

374 
BL31_COHERENT_RAM_BASE
,

375 
BL31_COHERENT_RAM_LIMIT
);

381 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

382 
	}
}

384 #i‡
RESET_TO_BL31


389 
	$mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

390 
íåy_poöt_öfo_t
 *
èrgë_íåy_öfo
)

392 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

393 i‡(
èrgë_£curôy
 =
NON_SECURE
) {

394 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

395 
PARAM_EP
,

396 
VERSION_1
,

402 
èrgë_íåy_öfo
->
pc
 = 
	`∂©_gë_ns_image_íåypoöt
();

404 
	`mt_£t_bl33_ï_öfo
(
èrgë_íåy_öfo
);

407 
	`SET_PARAM_HEAD
(
èrgë_íåy_öfo
,

408 
PARAM_EP
,

409 
VERSION_1
,

412 i‡(
ãórg
->
ãe_suµ‹t
)

414 
èrgë_íåy_öfo
->
pc
 = 
ãórg
->
ãe_íåy
;

415 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

419 i‡(
BL32_BASE
 != 0) {

422 
èrgë_íåy_öfo
->
pc
 = 
BL32_BASE
;

423 
	`mt_£t_bl32_ï_öfo
(
èrgë_íåy_öfo
);

427 
	}
}

430 
	$íabÀ_ns_ac˚ss_to_˝ue˘Ã
() {

431 
√xt_a˘Ã
;

434 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ2
();

435 
√xt_a˘Ã
 |
ACTLR_CPUECTLR_BIT
;

436 
	`wrôe_a˘Ã_ñ2
(
√xt_a˘Ã
);

438 
√xt_a˘Ã
 = 
	`ªad_a˘Ã_ñ3
();

439 
√xt_a˘Ã
 |
ACTLR_CPUECTLR_BIT
;

440 
	`wrôe_a˘Ã_ñ3
(
√xt_a˘Ã
);

446 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/bl32_plat_setup.c

31 
	~<bl_comm⁄.h
>

32 
	~<c⁄sﬁe.h
>

33 
	~<∂©f‹m.h
>

34 
	~"∂©_def.h
"

35 
	~"∂©_¥iv©e.h
"

41 
__RO_START__
;

42 
__RO_END__
;

44 
__COHERENT_RAM_START__
;

45 
__COHERENT_RAM_END__
;

53 
	#BL32_RO_BASE
 ()(&
__RO_START__
)

	)

54 
	#BL32_RO_LIMIT
 ()(&
__RO_END__
)

	)

63 
	#BL32_COHERENT_RAM_BASE
 ()(&
__COHERENT_RAM_START__
)

	)

64 
	#BL32_COHERENT_RAM_LIMIT
 ()(&
__COHERENT_RAM_END__
)

	)

69 
	$bl32_óæy_∂©f‹m_£tup
()

75 
	`c⁄sﬁe_öô
(
PL011_UART1_BASE
);

78 
	`mt_c⁄fig_£tup
();

79 
	}
}

84 
	$bl32_∂©f‹m_£tup
()

87 
	}
}

93 
	$bl32_∂©_¨ch_£tup
()

95 
	`mt_c⁄figuª_mmu_ñ1
(
BL32_RO_BASE
,

96 (
BL32_COHERENT_RAM_LIMIT
 - 
BL32_RO_BASE
),

97 
BL32_RO_BASE
,

98 
BL32_RO_LIMIT
,

99 
BL32_COHERENT_RAM_BASE
,

100 
BL32_COHERENT_RAM_LIMIT
);

101 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/devapc/devapc.c

1 
	~<°dio.h
>

2 
	~"∂©f‹m.h
"

3 
	~"dev≠c.h
"

5 
DEVICE_INFO
 
	gD_APC0_Devi˚s
[] = {

6 {"INFRA_AO_INFRASYS_CONFIG_REGS", 
E_L0
, E_L0 , E_L0, E_L0},

7 {"INFRA_AO_PMIC_WRAP_CONTROL_REG", 
E_L0
, E_L0 , E_L0, E_L0},

8 {"INFRA_AO_PERISYS_CONFIG_REGS", 
E_L0
, E_L0 , E_L0, E_L0},

9 {"INFRA_AO_KPAD_CONTROL_REG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

10 {"INFRA_AO_GPT", 
E_L0
, 
E_L3
 , E_L0, E_L0},

11 {"INFRA_AO_APMCU_EINT_CONTROLLER", 
E_L0
, 
E_L3
 , E_L0, E_L0},

12 {"INFRA_AO_TOP_LEVEL_SLP_MANAGER", 
E_L0
, E_L0 , E_L0, E_L0},

13 {"INFRA_AO_DEVICE_APC_AO", 
E_L0
, 
E_L3
 , E_L0, E_L0},

14 {"INFRA_AO_SEJ", 
E_L0
, 
E_L3
 , E_L0, E_L0},

15 {"INFRA_AO_RSVD", 
E_L0
, 
E_L3
 , E_L0, E_L0},

17 {"INFRA_AO_CLDMA_AO_TOP_AP", 
E_L0
, E_L0 , E_L0, E_L0},

18 {"INFRA_AO_CLDMA_AO_TOP_MD", 
E_L0
, E_L0 , E_L0, E_L0},

19 {"INFRASYS_MCUSYS_CONFIG_REG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

20 {"INFRASYS_CONTROL_REG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

21 {"INFRASYS_BOOTROM/SRAM", 
E_L0
, 
E_L3
 , E_L0, E_L0},

22 {"INFRASYS_EMI_BUS_INTERFACE", 
E_L0
, E_L0 , E_L0, E_L0},

23 {"INFRASYS_SYSTEM_CIRQ", 
E_L0
, 
E_L3
 , E_L0, E_L0},

24 {"INFRASYS_MM_IOMMU_CONFIGURATION", 
E_L0
, 
E_L3
 , E_L0, E_L0},

25 {"INFRASYS_EFUSEC", 
E_L0
, E_L0 , E_L0, E_L0},

26 {"INFRASYS_DEVICE_APC_MONITOR", 
E_L0
, 
E_L3
 , E_L0, E_L0},

28 {"INFRASYS_MCU_BIU_CONFIGURATION", 
E_L0
, 
E_L3
 , E_L0, E_L0},

29 {"INFRASYS_AP_MIXED_CONTROL_REG", 
E_L0
, E_L0 , E_L0, E_L0},

30 {"INFRASYS_CA7_AP_CCIF", 
E_L0
, E_L0 , E_L0, E_L0},

31 {"INFRASYS_CA7_MD_CCIF", 
E_L0
, E_L0 , E_L0, E_L0},

32 {"RSVD", 
E_L0
, 
E_L3
 , E_L0, E_L0},

33 {"INFRASYS_GPIO1_CONTROLLER", 
E_L0
, 
E_L3
 , E_L0, E_L0},

34 {"INFRASYS_MBIST_CONTROL_REG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

35 {"INFRASYS_TRNG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

36 {"INFRA_AO_TOP_LEVEL_CLOCK_GENERATOR", 
E_L0
, E_L0 , E_L0, E_L0},

37 {"INFRASYS_GPIO1_CONTROLLER", 
E_L0
, E_L0 , E_L0, E_L0},

39 {"INFRA_AO_TOP_LEVEL_REST_GENERATOR", 
E_L0
, 
E_L3
 , E_L0, E_L0},

40 {"INFRASYS_DDRPHY", 
E_L0
, 
E_L3
 , E_L0, E_L0},

41 {"INFRASYS_DRAM_CONTROLLER", 
E_L0
, 
E_L3
 , E_L0, E_L0},

42 {"INFRASYS_MIPI_RX_ANA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

43 {"INFRASYS_GCPU", 
E_L0
, 
E_L3
 , E_L0, E_L0},

44 {"INFRASYS_GCE", 
E_L0
, 
E_L3
 , E_L0, E_L0},

45 {"INFRASYS_CCIF_AP_1", 
E_L0
, E_L0 , E_L0, E_L0},

46 {"INFRASYS_CCIF_MD_1", 
E_L0
, E_L0 , E_L0, E_L0},

47 {"INFRASYS_CLDMA_PDN_AP", 
E_L0
, E_L0 , E_L0, E_L0},

48 {"INFRASYS_CLDMA_PDN_MD", 
E_L0
, E_L0 , E_L0, E_L0},

51 {"INFRASYS_MD2MD_CCIF0", 
E_L0
, E_L0 , E_L0, E_L0},

52 {"INFRASYS_MD2MD_CCIF1", 
E_L0
, E_L0 , E_L0, E_L0},

53 {"INFRASYS_MDSYSINTF", 
E_L0
, 
E_L3
 , E_L0, E_L0},

54 {"DEGBUGSYS", 
E_L0
, E_L0 , E_L0, E_L0},

55 {"DMA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

56 {"AUXADC", 
E_L0
, 
E_L3
 , E_L0, E_L0},

57 {"UART0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

58 {"UART1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

59 {"UART2", 
E_L0
, 
E_L3
 , E_L0, E_L0},

60 {"UART3", 
E_L0
, 
E_L3
 , E_L0, E_L0},

62 {"PWM", 
E_L0
, E_L0 , E_L0, E_L0},

63 {"I2C0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

64 {"I2C1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

65 {"I2C2", 
E_L0
, 
E_L3
 , E_L0, E_L0},

66 {"SPI0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

67 {"PTP_THERMAL_CTL", 
E_L0
, E_L0 , E_L0, E_L0},

68 {"BTIF", 
E_L0
, 
E_L3
 , E_L0, E_L0},

69 {"UART4", 
E_L0
, 
E_L3
 , E_L0, E_L0},

70 {"DISP_PWM", 
E_L0
, 
E_L3
 , E_L0, E_L0},

71 {"I2C3", 
E_L0
, 
E_L3
 , E_L0, E_L0},

73 {"IRDA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

74 {"IR_TX", 
E_L0
, 
E_L3
 , E_L0, E_L0},

75 {"USB2.0", 
E_L0
, E_L0 , E_L0, E_L0},

76 {"USB2.0 SIF", 
E_L0
, E_L0 , E_L0, E_L0},

77 {"AUDIO", 
E_L0
, E_L0 , E_L0, E_L0},

78 {"MSDC0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

79 {"MSDC1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

80 {"MSDC2", 
E_L0
, 
E_L3
 , E_L0, E_L0},

81 {"USB3.0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

82 {"WCN_AHB_SLAVE", 
E_L0
, E_L0 , E_L0, E_L0},

84 {"MD2_PERIPHERALS", 
E_L0
, 
E_L3
 , E_L0, E_L0},

85 {"MD3_PERIPHERALS", 
E_L0
, 
E_L3
 , E_L0, E_L0},

86 {"G3D_CONFIG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

87 {"MALI", 
E_L0
, 
E_L3
 , E_L0, E_L0},

88 {"MMSYS_CONFIG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

89 {"MDP_RDMA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

90 {"MDP_RSZ0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

91 {"MDP_RSZ1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

92 {"MDP_WDMA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

93 {"MDP_WROT", 
E_L0
, 
E_L3
 , E_L0, E_L0},

95 {"MDP_TDSHP", 
E_L0
, 
E_L3
 , E_L0, E_L0},

96 {"DISP_OVL", 
E_L0
, 
E_L3
 , E_L0, E_L0},

97 {"DISP_RDMA0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

98 {"DISP_RDMA1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

99 {"DISP_WDMA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

100 {"DISP_COLOR", 
E_L0
, 
E_L3
 , E_L0, E_L0},

101 {"DISP_CCORR", 
E_L0
, 
E_L3
 , E_L0, E_L0},

102 {"DISP_AAL", 
E_L0
, 
E_L3
 , E_L0, E_L0},

103 {"DISP_GAMMA", 
E_L0
, 
E_L3
 , E_L0, E_L0},

104 {"DISP_DITHER", 
E_L0
, 
E_L3
 , E_L0, E_L0},

106 {"Re£rved", 
E_L0
, 
E_L3
 , E_L0, E_L0},

107 {"DSI", 
E_L0
, 
E_L3
 , E_L0, E_L0},

108 {"DPI", 
E_L0
, 
E_L3
 , E_L0, E_L0},

109 {"Re£rved", 
E_L0
, 
E_L3
 , E_L0, E_L0},

110 {"MM_MUTEX", 
E_L0
, 
E_L3
 , E_L0, E_L0},

111 {"SMI_LARB0", 
E_L0
, 
E_L3
 , E_L0, E_L0},

112 {"SMI_COMMON", 
E_L0
, 
E_L3
 , E_L0, E_L0},

113 {"MIPI_TX_CONFIG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

114 {"IMGSYS_CONFIG", 
E_L0
, 
E_L3
 , E_L0, E_L0},

115 {"IMGSYS_SMI_LARB2", 
E_L0
, 
E_L3
 , E_L0, E_L0},

117 {"IMGSYS_CAM1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

118 {"IMGSYS_CAM2", 
E_L0
, 
E_L3
 , E_L0, E_L0},

119 {"IMGSYS_CAM3", 
E_L0
, 
E_L3
 , E_L0, E_L0},

120 {"IMGSYS_CAM4", 
E_L0
, 
E_L3
 , E_L0, E_L0},

121 {"IMGSYS_SENINF", 
E_L0
, 
E_L3
 , E_L0, E_L0},

122 {"IMGSYS_CAMSV", 
E_L0
, 
E_L3
 , E_L0, E_L0},

123 {"IMGSYS_FDVT", 
E_L0
, 
E_L3
 , E_L0, E_L0},

124 {"IMGSYS_CAM5", 
E_L0
, 
E_L3
 , E_L0, E_L0},

125 {"IMGSYS_CAM6", 
E_L0
, 
E_L3
 , E_L0, E_L0},

126 {"IMGSYS_CAM7", 
E_L0
, 
E_L3
 , E_L0, E_L0},

128 {"VDECSYS_GLOBAL_CONFIGURATION", 
E_L0
, 
E_L3
 , E_L0, E_L0},

129 {"SMI_LARB1", 
E_L0
, 
E_L3
 , E_L0, E_L0},

130 {"VDEC_FULL_TOP", 
E_L0
, 
E_L3
 , E_L0, E_L0},

131 {"VENC_GLOBAL_CON", 
E_L0
, 
E_L3
 , E_L0, E_L0},

132 {"SMI_LARB3", 
E_L0
, 
E_L3
 , E_L0, E_L0},

133 {"VENC", 
E_L0
, 
E_L3
 , E_L0, E_L0},

134 {"JPEG_ENC", 
E_L0
, 
E_L3
 , E_L0, E_L0},

135 {"JPEG_DEC", 
E_L0
, 
E_L3
 , E_L0, E_L0},

138 
	$unmask_moduÀ_úq
(
moduÀ
)

141 
≠c_ödex
 = 0;

142 
≠c_bô_ödex
 = 0;

144 
≠c_ödex
 = 
moduÀ
 / (
MOD_NO_IN_1_DEVAPC
*2);

145 
≠c_bô_ödex
 = 
moduÀ
 % (
MOD_NO_IN_1_DEVAPC
*2);

147 
≠c_ödex
){

149 *
DEVAPC_D0_VIO_MASK_0
 &~(0x1 << 
≠c_bô_ödex
);

152 *
DEVAPC_D0_VIO_MASK_1
 &~(0x1 << 
≠c_bô_ödex
);

155 *
DEVAPC_D0_VIO_MASK_2
 &~(0x1 << 
≠c_bô_ödex
);

158 *
DEVAPC_D0_VIO_MASK_3
 &~(0x1 << 
≠c_bô_ödex
);

161 *
DEVAPC_D0_VIO_MASK_4
 &~(0x1 << 
≠c_bô_ödex
);

165 
	`¥ötf
("UnMask_Module_IRQ : The setting isÉrror,Ölease check if domain master setting is correct orÇot !\n");

168 
	}
}

171 
	$˛ór_vio_°©us
(
moduÀ
)

174 
≠c_ödex
 = 0;

175 
≠c_bô_ödex
 = 0;

177 
≠c_ödex
 = 
moduÀ
 / (
MOD_NO_IN_1_DEVAPC
*2);

178 
≠c_bô_ödex
 = 
moduÀ
 % (
MOD_NO_IN_1_DEVAPC
*2);

181 
≠c_ödex
){

183 *
DEVAPC_D0_VIO_STA_0
 = (0x1 << 
≠c_bô_ödex
);

186 *
DEVAPC_D0_VIO_STA_1
 = (0x1 << 
≠c_bô_ödex
);

189 *
DEVAPC_D0_VIO_STA_2
 = (0x1 << 
≠c_bô_ödex
);

192 *
DEVAPC_D0_VIO_STA_3
 = (0x1 << 
≠c_bô_ödex
);

195 *
DEVAPC_D0_VIO_STA_4
 = (0x1 << 
≠c_bô_ödex
);

200 
	}
}

202 
	$£t_ma°î_å™ß˘i⁄
(
ma°î_ödex
 ,
å™ß˘i⁄_ty≥
)

204 vﬁ©ûê* 
ba£
 = 0;

205 
£t_bô
 = 0;

208 
ba£
 = (*Ë((
size_t
)
DEVAPC_MAS_SEC
 );

210 if(
ma°î_ödex
 > 31)

213 if(
å™ß˘i⁄_ty≥
 == 0){

214 
£t_bô
 = ~(1 << 
ma°î_ödex
);

215 
	`wrôñ
(
	`ªadl
(
ba£
Ë& 
£t_bô
, base);

217 if(
å™ß˘i⁄_ty≥
 == 1){

218 
£t_bô
 = 1 << 
ma°î_ödex
;

219 
	`wrôñ
(
	`ªadl
(
ba£
Ë| 
£t_bô
, base);

225 
	}
}

227 
	$£t_moduÀ_≠c
(
moduÀ
, 
E_MASK_DOM
 
domaö_num
 , 
APC_ATTR
 
≥rmissi⁄_c⁄åﬁ
)

229 vﬁ©ûê* 
ba£
 = 0;

231 
˛r_bô
 = 0x3 << ((
moduÀ
 % 
MOD_NO_IN_1_DEVAPC
) * 2);

232 
£t_bô
 = 
≥rmissi⁄_c⁄åﬁ
 << ((
moduÀ
 % 
MOD_NO_IN_1_DEVAPC
) * 2);

234 
	`˛ór_vio_°©us
(
moduÀ
);

235 
	`unmask_moduÀ_úq
(
moduÀ
);

237 if(
domaö_num
 =
E_DOMAIN_0
)

240 
ba£
 = (*Ë((
size_t
)
DEVAPC_D0_APC_0
 + (
moduÀ
/16) *4);

242 if(
domaö_num
 =
E_DOMAIN_1
)

244 
ba£
 = (*Ë((
size_t
)
DEVAPC_D1_APC_0
 + (
moduÀ
/16) *4);

246 if(
domaö_num
 =
E_DOMAIN_2
)

248 
ba£
 = (*Ë((
size_t
)
DEVAPC_D2_APC_0
 + (
moduÀ
/16) *4);

250 if(
domaö_num
 =
E_DOMAIN_3
)

252 
ba£
 = (*Ë((
size_t
)
DEVAPC_D3_APC_0
 + (
moduÀ
/16) *4);

254 
	`wrôñ
(
	`ªadl
(
ba£
Ë& ~
˛r_bô
, base);

255 
	`wrôñ
(
	`ªadl
(
ba£
Ë| 
£t_bô
, base);

256 
	}
}

258 
	$°¨t_dev≠c
()

261 
moduÀ_ödex
 = 0;

264 
	`wrôñ
(0x80000000, 
DEVAPC_VIO_DBG0
);

266 
	`wrôñ
(
	`ªadl
(
DEVAPC_APC_CON
) & (0xFFFFFFFF ^ (1<<2)), DEVAPC_APC_CON);

268 
	`wrôñ
(
	`ªadl
(
DEVAPC_PD_APC_CON
) & (0xFFFFFFFF ^ (1<<2)), DEVAPC_PD_APC_CON);

272 
moduÀ_ödex
 = 0; moduÀ_ödex<((
D_APC0_Devi˚s
)/(
DEVICE_INFO
)); module_index++)

274 
	`£t_moduÀ_≠c
(
moduÀ_ödex
, 
E_DOMAIN_0
 , 
D_APC0_Devi˚s
[moduÀ_ödex].
d0_≥rmissi⁄
);

275 
	`£t_moduÀ_≠c
(
moduÀ_ödex
, 
E_DOMAIN_1
 , 
D_APC0_Devi˚s
[moduÀ_ödex].
d1_≥rmissi⁄
);

279 
	`wrôñ
(
	`ªadl
(
DEVAPC_APC_CON
) | (0x1), DEVAPC_APC_CON);

282 
	`wrôñ
(
	`ªadl
(
INFRA_PDN_SEC_CON
 ) | (
SEJ_CG_PROTECT_BIT
), INFRA_PDN_SEC_CON );

283 
	`wrôñ
(
	`ªadl
(
INFRA_PDN_SEC_CON
 ) | (
TRNG_CG_PROTECT_BIT
), INFRA_PDN_SEC_CON );

285 
	`¥ötf
("[DAPC] Init Done\n");

289 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/devapc/devapc.h

1 #i‚de‡
_ATF_DAPC_H__


2 
	#_ATF_DAPC_H__


	)

10 
	mE_L0
=0,

11 
	mE_L1
,

12 
	mE_L2
,

13 
	mE_L3
,

14 
	mE_MAX_APC_ATTR
,

15 
	mE_APC_ATTR_RESERVRD
 = 0x7FFFFFFF

16 }
	tAPC_ATTR
;

21 
	mE_DOMAIN_0
 = 0,

22 
	mE_DOMAIN_1
 ,

23 
	mE_DOMAIN_2
 ,

24 
	mE_DOMAIN_3
 ,

25 
	mE_MAX
,

26 
	mE_MASK_DOM_RESERVRD
 = 0x7FFFFFFF

27 }
	tE_MASK_DOM
;

31 c⁄° *
	mdevi˚_«me
;

32 
APC_ATTR
 
	md0_≥rmissi⁄
;

33 
APC_ATTR
 
	md1_≥rmissi⁄
;

34 
APC_ATTR
 
	md2_≥rmissi⁄
;

35 
APC_ATTR
 
	md3_≥rmissi⁄
;

36 } 
	tDEVICE_INFO
;

43 
	#READ_REGISTER_UINT32
(
ªg
) \

44 (*(vﬁ©ûê* c⁄°)(
uöçå_t
)(
ªg
))

	)

46 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

47 (*(vﬁ©ûê* c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

49 
	#wrôñ
(
VAL
,
REG
Ë
	`WRITE_REGISTER_UINT32
(REG,VAL)

	)

50 
	#ªadl
(
REG
Ë
	`READ_REGISTER_UINT32
(REG)

	)

57 
	#DEVAPC_AO_BASE
 0x10007000

	)

58 
	#DEVAPC_PD_BASE
 0x10207000

	)

59 
	#INFRACFG_AO_ba£
 0x10000000

	)

61 
	#DEVAPC_D0_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0000))

	)

62 
	#DEVAPC_D0_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0004))

	)

63 
	#DEVAPC_D0_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0008))

	)

64 
	#DEVAPC_D0_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x000C))

	)

65 
	#DEVAPC_D0_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0010))

	)

66 
	#DEVAPC_D0_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0014))

	)

67 
	#DEVAPC_D0_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0018))

	)

68 
	#DEVAPC_D0_APC_7
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x001C))

	)

70 
	#DEVAPC_D1_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0100))

	)

71 
	#DEVAPC_D1_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0104))

	)

72 
	#DEVAPC_D1_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0108))

	)

73 
	#DEVAPC_D1_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x010C))

	)

74 
	#DEVAPC_D1_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0110))

	)

75 
	#DEVAPC_D1_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0114))

	)

76 
	#DEVAPC_D1_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0118))

	)

77 
	#DEVAPC_D1_APC_7
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x011C))

	)

79 
	#DEVAPC_D2_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0200))

	)

80 
	#DEVAPC_D2_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0204))

	)

81 
	#DEVAPC_D2_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0208))

	)

82 
	#DEVAPC_D2_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x020C))

	)

83 
	#DEVAPC_D2_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0210))

	)

84 
	#DEVAPC_D2_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0214))

	)

85 
	#DEVAPC_D2_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0218))

	)

86 
	#DEVAPC_D2_APC_7
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x021C))

	)

88 
	#DEVAPC_D3_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0300))

	)

89 
	#DEVAPC_D3_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0304))

	)

90 
	#DEVAPC_D3_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0308))

	)

91 
	#DEVAPC_D3_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x030C))

	)

92 
	#DEVAPC_D3_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0310))

	)

93 
	#DEVAPC_D3_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0314))

	)

94 
	#DEVAPC_D3_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0318))

	)

95 
	#DEVAPC_D3_APC_7
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x031C))

	)

97 
	#DEVAPC_D4_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0400))

	)

98 
	#DEVAPC_D4_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0404))

	)

99 
	#DEVAPC_D4_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0408))

	)

100 
	#DEVAPC_D4_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x040C))

	)

101 
	#DEVAPC_D4_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0410))

	)

102 
	#DEVAPC_D4_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0414))

	)

103 
	#DEVAPC_D4_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0418))

	)

106 
	#DEVAPC_D5_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0500))

	)

107 
	#DEVAPC_D5_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0504))

	)

108 
	#DEVAPC_D5_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0508))

	)

109 
	#DEVAPC_D5_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x050C))

	)

110 
	#DEVAPC_D5_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0510))

	)

111 
	#DEVAPC_D5_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0514))

	)

112 
	#DEVAPC_D5_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0518))

	)

115 
	#DEVAPC_D6_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0600))

	)

116 
	#DEVAPC_D6_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0604))

	)

117 
	#DEVAPC_D6_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0608))

	)

118 
	#DEVAPC_D6_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x060C))

	)

119 
	#DEVAPC_D6_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0610))

	)

120 
	#DEVAPC_D6_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0614))

	)

121 
	#DEVAPC_D6_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0618))

	)

124 
	#DEVAPC_D7_APC_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0700))

	)

125 
	#DEVAPC_D7_APC_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0704))

	)

126 
	#DEVAPC_D7_APC_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0708))

	)

127 
	#DEVAPC_D7_APC_3
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x070C))

	)

128 
	#DEVAPC_D7_APC_4
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0710))

	)

129 
	#DEVAPC_D7_APC_5
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0714))

	)

130 
	#DEVAPC_D7_APC_6
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0718))

	)

133 
	#DEVAPC_MAS_DOM_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0A00))

	)

134 
	#DEVAPC_MAS_DOM_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0A04))

	)

135 
	#DEVAPC_MAS_SEC
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0B00))

	)

137 
	#DEVAPC_APC_CON
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0F00))

	)

138 
	#DEVAPC_APC_LOCK_0
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0F04))

	)

139 
	#DEVAPC_APC_LOCK_1
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0F08))

	)

140 
	#DEVAPC_APC_LOCK_2
 ((vﬁ©ûê*)(
DEVAPC_AO_BASE
+0x0F0C))

	)

144 
	#DEVAPC_PD_APC_CON
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0F00))

	)

145 
	#DEVAPC_D0_VIO_MASK_0
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0000))

	)

146 
	#DEVAPC_D0_VIO_MASK_1
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0004))

	)

147 
	#DEVAPC_D0_VIO_MASK_2
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0008))

	)

148 
	#DEVAPC_D0_VIO_MASK_3
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x000C))

	)

149 
	#DEVAPC_D0_VIO_MASK_4
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0010))

	)

150 
	#DEVAPC_D0_VIO_STA_0
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0400))

	)

151 
	#DEVAPC_D0_VIO_STA_1
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0404))

	)

152 
	#DEVAPC_D0_VIO_STA_2
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0408))

	)

153 
	#DEVAPC_D0_VIO_STA_3
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x040C))

	)

154 
	#DEVAPC_D0_VIO_STA_4
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0410))

	)

156 
	#DEVAPC_VIO_DBG0
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0900))

	)

157 
	#DEVAPC_VIO_DBG1
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0904))

	)

158 
	#DEVAPC_DEC_ERR_CON
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0F80))

	)

159 
	#DEVAPC_DEC_ERR_ADDR
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0F84))

	)

160 
	#DEVAPC_DEC_ERR_ID
 ((vﬁ©ûê*)(
DEVAPC_PD_BASE
+0x0F88))

	)

162 
	#INFRA_AO_SEC_CON
 ((vﬁ©ûê*)–
INFRACFG_AO_ba£
+0x0F00))

	)

163 
	#INFRA_RST_SEC_CON
 ((vﬁ©ûê*)–
INFRACFG_AO_ba£
+0x0F04))

	)

164 
	#INFRA_PDN_SEC_CON
 ((vﬁ©ûê*)–
INFRACFG_AO_ba£
+0x0F08))

	)

171 
	#SEJ_CG_PROTECT_BIT
 ((0x1Ë<< 19Ë

	)

172 
	#TRNG_CG_PROTECT_BIT
 ((0x1Ë<< 2Ë

	)

175 
	#DOMAIN_AP
 0

	)

176 
	#DOMAIN_MD1
 1

	)

177 
	#DOMAIN_MD2
 2

	)

178 
	#DOMAIN_MM
 3

	)

180 
	#MOD_NO_IN_1_DEVAPC
 16

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/l2c/l2c.c

1 
	~<∂©f‹m_def.h
>

2 
	~<¨ch.h
>

3 
	~<¨ch_hñ≥rs.h
>

4 
	~<mmio.h
>

5 
	~<sù_îr‹.h
>

6 
	~<•ölock.h
>

7 
	~<debug.h
>

8 
	~"∂©_¥iv©e.h
"

9 
	~"l2c.h
"

12 
•ölock_t
 
	gl2_sh¨e_lock
;

14 
	$c⁄fig_L2_size
()

16 
ˇche_cfg0
;

19 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& (0xF << 
L2C_SIZE_CFG_OFF
);

20 
ˇche_cfg0
 = (ˇche_cfg0 << 1Ë| (0x1 << 
L2C_SIZE_CFG_OFF
);

21 
ˇche_cfg0
 = (
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0xF << 
L2C_SIZE_CFG_OFF
)) | cache_cfg0;

22 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

23 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

24 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

27 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_512K
 << 
L2C_SIZE_CFG_OFF
);

28 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

29 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

30 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

32 
	}
}

34 
uöt64_t
 
	$swôch_L2_size
(
uöt64_t
 
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
)

36 
ˇche_cfg0
, 
ˇche_cfg1
;

37 
ªt
 = 
SIP_SVC_E_SUCCESS
;

38 
l2c_sh¨e_öfo
 
sh¨e_öfo
;

40 
sh¨e_öfo
.
˛u°î_b‹row
 = (
˛u°î_b‹row_ªtu∫
 >> 16) & 0xFFFF;

41 
sh¨e_öfo
.
˛u°î_ªtu∫
 = 
˛u°î_b‹row_ªtu∫
 & 0xFFFF;

42 
sh¨e_öfo
.
sh¨e_˛u°î_num
 = share_cluster_num;

44 
	`•ö_lock
(&
l2_sh¨e_lock
);

48 
	`dis_i_d_dcsw_›_Æl
(
DCCISW
);

52 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

53 
ˇche_cfg0
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

54 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
);

55 
ˇche_cfg1
 &~(0x‡<< 
L2C_SIZE_CFG_OFF
);

57 
›ti⁄
) {

58 
BORROW_L2
:

59 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

61 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

62 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

63 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

64 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

67 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

69 
ˇche_cfg0
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

70 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

71 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

72 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

75 
ˇche_cfg1
 |(
sh¨e_öfo
.
˛u°î_b‹row
 << 
L2C_SIZE_CFG_OFF
);

76 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

77 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (0x1 << 
L2C_SHARE_ENABLE
);

78 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

82 
RETURN_L2
:

83 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 1)

85 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

86 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

87 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

88 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

91 if(
sh¨e_öfo
.
sh¨e_˛u°î_num
 == 2)

93 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

94 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

95 
ˇche_cfg0
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

96 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
, 
ˇche_cfg0
);

99 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
sh¨e_öfo
.
˛u°î_ªtu∫
 << 
L2C_SIZE_CFG_OFF
);

100 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

101 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

102 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

106 if((
	`gë_devöfo_wôh_ödex
(0)&0xff) == 0xc0)

108 
	`¥ötf
("switch L2$ size 5.1\n");

110 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë| (
CONFIGED_256K
 << 
L2C_SIZE_CFG_OFF
);

111 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

112 
ˇche_cfg1
 = 
	`mmio_ªad_32
(
MP1_CA7L_CACHE_CONFIG
Ë& ~(0x1 << 
L2C_SHARE_ENABLE
);

113 
	`mmio_wrôe_32
(
MP1_CA7L_CACHE_CONFIG
, 
ˇche_cfg1
);

123 
ªt
 = 
SIP_SVC_E_NOT_SUPPORTED
;

128 
	`íabÀ_ˇche
();

130 
	`¥ötf
("switch L2$ size 7\n");

132 
	`•ö_u∆ock
(&
l2_sh¨e_lock
);

134  
ªt
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/l2c/l2c.h

1 #i‚de‡
_MT_L2C_H_


2 
	#_MT_L2C_H_


	)

4 
	#CONFIGED_256K
 0x1

	)

5 
	#CONFIGED_512K
 0x3

	)

6 
	#L2C_SIZE_CFG_OFF
 8

	)

7 
	#L2C_SHARE_ENABLE
 12

	)

9 
	e›ti⁄s
{

10 
	mBORROW_L2
,

11 
	mRETURN_L2
,

12 
	mBORROW_NONE


15 
	s_l2c_sh¨e_öfo
{

16 
uöt32_t
 
	msh¨e_˛u°î_num
;

17 
uöt32_t
 
	m˛u°î_b‹row
;

18 
uöt32_t
 
	m˛u°î_ªtu∫
;

19 }
	tl2c_sh¨e_öfo
;

21 
c⁄fig_L2_size
();

22 
uöt64_t
 
swôch_L2_size
(uöt64_à
›ti⁄
, uöt64_à
sh¨e_˛u°î_num
, uöt64_à
˛u°î_b‹row_ªtu∫
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/log/log.c

38 
	~<log.h
>

39 
	~<°dio.h
>

40 
	~<°rög.h
>

41 
	~<°döt.h
>

42 
	~<∂©f‹m.h
>

43 
	~<¨ch.h
>

44 
	~<¨ch_hñ≥rs.h
>

45 
	~<mmio.h
>

46 
	~<∂©_def.h
>

48 
	#DEBUG_LOG_SERVICE
 1

	)

49 #i‡
DEBUG_LOG_SERVICE


50 
	#debug_¥öt
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

52 
	#debug_¥öt
(...Ë(()0)

	)

55 
bl31_log_£rvi˚_ªgi°î
((*
lock_gë
)(),

56 (*
log_putc
)(),

57 (*
lock_ªÀa£
)());

59 
	`bl31_log_£rvi˚_ªgi°î2
((*
lock_gë
)(),

60 (*
log_putc
)(),

61 (*
lock_ªÀa£
)());

64 
mt_log_buf_°¨t
 = 0;

65 
mt_log_buf_size
 = 0;

66 
mt_log_buf_íd
 = 0;

67 *
mt_ex˚±i⁄_buf_íd
 = 0;

68 
©f_log_˘æ_t
 *
p_©f_log_˘æ
 = 0;

69 *
±r_©f_¸ash_Êag
 = 0;

70 *
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = 0;

73 
	$mt_log_su•íd_Êush
()

75 if–
mt_log_buf_size
 != 0 )

77 
	`Êush_dˇche_ønge
((
uöt64_t
)
mt_log_buf_°¨t
, (uöt64_t)
mt_log_buf_size
);

79 
	}
}

82 
	$mt_log_lock_acquúe
()

84 
	`•ö_lock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

87 
	}
}

90 
	$mt_log_wrôe
(
c
)

92 *(*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
c
;

94 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
++;

96 if–
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 < 
mt_log_buf_íd
 )

97 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
++;

99 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 = 
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

102 
	}
}

104 
	$mt_log_wrôe2
(
c
)

106 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

107 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

108 *
±r_ex_buf
 = 
NULL
;

109 *
±r_wrôe_pos
 = 
NULL
;

112 if(
±r_©f_¸ash_Êag
 =
NULL
)

115 
±r_wrôe_pos
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
löór_id
];

116 
±r_ex_buf
 = (*)((
uöçå_t
)*
±r_wrôe_pos
);

119 if((
uöçå_t
)
±r_ex_buf
 <(uöçå_t)
mt_ex˚±i⁄_buf_íd
) {

120 *
±r_ex_buf
 = 
c
;

121 (*
±r_wrôe_pos
)++;

127 
	}
}

130 
	$mt_¸ash_log_dump
(
uöt8_t
 *
¸ash_log_addr
, 
uöt32_t
 
¸ash_log_size
)

133 
uöt64_t
 
ªt
 = 0;

134 
uöt64_t
 
ªad_cou¡
;

135 
uöt64_t
 
off£t
;

136 
uöt64_t
 
pos
;

137 
uöt64_t
 
wrôe_cou¡
 = 
p_©f_log_˘æ
->
öfo
.
©f_tŸÆ_wrôe_cou¡
;

138 
uöt8_t
 *
r_±r
 = 
NULL
;

139 
uöt8_t
 *
w_±r
 = 
NULL
;

140 
uöt8_t
 *
°¨t_±r
 = (uöt8_t*)(
uöçå_t
)(
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
);

142 if(
wrôe_cou¡
 == 0)

145 if(
wrôe_cou¡
 > 
¸ash_log_size
) {

146 
off£t
 = 
¸ash_log_size
-1;

147 
ªad_cou¡
 = 
¸ash_log_size
;

149 
off£t
 = 
wrôe_cou¡
-1;

150 
ªad_cou¡
 = 
wrôe_cou¡
;

153 
pos
 = 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
-1;

154 if(
pos
 < (
mt_log_buf_°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
))

155 
pos
 = 
mt_log_buf_íd
;

156 
r_±r
 = (
uöt8_t
 *)((
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

158 
w_±r
 = 
¸ash_log_addr
 + 
off£t
;

159 
ªad_cou¡
) {

160 *(
w_±r
--Ë*(
r_±r
--);

161 if(
r_±r
 < 
°¨t_±r
)

162 
r_±r
 = (
uöt8_t
*)(
uöçå_t
)
mt_log_buf_íd
;

163 
ªad_cou¡
--;

164 
ªt
++;

167  
ªt
;

168 
	}
}

170 
	$mt_gë_uƒód_log_size
()

172 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =p_©f_log_˘æ->öfo.
©f_wrôe_pos
)

176 if(
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 <Ö_©f_log_˘æ->öfo.
©f_wrôe_pos
)

178  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 -Ö_©f_log_˘æ->öfo.
©f_ªad_pos
);

182  (
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 +Ö_©f_log_˘æ->öfo.
©f_buf_size
)

183 - 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
;

184 
	}
}

187 
	$mt_log_lock_ªÀa£
()

189 
©f_buf_uƒód_size
 = 
	`mt_gë_uƒód_log_size
();

192 if(
©f_buf_uƒód_size
 >
ATF_LOG_SIGNAL_THRESHOLD_SIZE
)

199 if(
p_©f_log_˘æ
->
öfo
.
©f_ªadî_Æive
)

201 
	`mt_©f_åiggî_úq
();

202 
p_©f_log_˘æ
->
öfo
.
©f_úq_cou¡
++;

205 
p_©f_log_˘æ
->
öfo
.
©f_buf_uƒód_size
 =átf_buf_unread_size;

208 
	`•ö_u∆ock
(&(
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
));

211 
	}
}

213 
uöt32_t
 
	$is_powî_⁄_boŸ
()

215 
uöt32_t
 
wdt_°a
, 
wdt_öãrvÆ
;

216 
wdt_°a
 = 
	`mmio_ªad_32
(
MTK_WDT_STATUS
);

217 
wdt_öãrvÆ
 = 
	`mmio_ªad_32
(
MTK_WDT_INTERVAL
);

218 
	`¥ötf
("°a=0x%x i¡=0x%x\r\n", 
wdt_°a
, 
wdt_öãrvÆ
);

222 if(
wdt_öãrvÆ
 & (1<<2))

225 
	}
}

227 
	$mt_log_£t_¸ash_Êag
()

229 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

230 
	}
}

232 
	$mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
)

234 
uöt32_t
 
dump_ªt
=0;

235 
i
;

236 
mt_log_buf_°¨t
 = 
°¨t
;

237 
mt_log_buf_size
 = 
size
;

238 
mt_log_buf_íd
 = 
°¨t
 + 
size
 - 1 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

239 
mt_ex˚±i⁄_buf_íd
 = (*)(
uöçå_t
)(
°¨t
 + 
size
 - 1 - 
´e_buf_size
);

241 
p_©f_log_˘æ
 = (
©f_log_˘æ_t
*)(
uöçå_t
)
°¨t
;

244 
±r_©f_¸ash_Êag
 = &
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
;

245 
±r_©f_ex˚±_wrôe_pos_≥r_˝u
 = &
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[0];

247 if(
	`is_powî_⁄_boŸ
()) {

248 
	`debug_¥öt
("is_power_on_boot:Årue\n");

249 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

251 
	`debug_¥öt
("is_power_on_boot: false\n");

252 if(
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 =
ATF_CRASH_MAGIC_NO
) {

253 
	`debug_¥öt
("¸ash fœg: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

254 
	`debug_¥öt
("©f_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

255 
	`debug_¥öt
("©f_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

256 
	`debug_¥öt
("dump crashlog\n");

257 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

258 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

259 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

260 
	`debug_¥öt
("©f_¸ash_log_addr: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

261 
dump_ªt
 = 
	`mt_¸ash_log_dump
((
uöt8_t
*)(
uöçå_t
)
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
, 
ATF_CRASH_LAST_LOG_SIZE
);

262 
	`debug_¥öt
("dump_ªt=%d.\n", 
dump_ªt
);

267 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0,

268 
size
-
´e_buf_size
-
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

269 
	`mem£t
((*)(
uöçå_t
)(
°¨t
+(
size
-
´e_buf_size
)), 0x0,áee_buf_size);

271 
	`mem£t
((*)(
uöçå_t
)
°¨t
, 0x0, 
size
);

275 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
 = 
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
;

276 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
 = 
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 -

277 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
;

278 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

279 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
 =Ö_©f_log_˘æ->öfo.
©f_buf_addr
;

280 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
 = 0;

282 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_addr
);

283 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_size
);

284 
	`debug_¥öt
("mt_log_£tu∞-átf_wrôe_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_wrôe_pos
);

285 
	`debug_¥öt
("mt_log_£tu∞-átf_ªad_po†: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_ªad_pos
);

286 
	`debug_¥öt
("mt_log_£tu∞-átf_buf_lock : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_buf_lock
.
lock
);

287 
	`debug_¥öt
("mt_log_£tu∞- mt_log_buf_íd : 0x%x\n", 
mt_log_buf_íd
);

289 
	`debug_¥öt
("mt_log_£tu∞- ATF_CRASH_LAST_LOG_SIZE : 0x%x\n", 
ATF_CRASH_LAST_LOG_SIZE
);

290 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE_PER_CPU : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE_PER_CPU
);

291 
	`debug_¥öt
("mt_log_£tu∞- ATF_EXCEPT_BUF_SIZE : 0x%x\n", 
ATF_EXCEPT_BUF_SIZE
);

292 
	`debug_¥öt
("mt_log_£tu∞- PLATFORM_CORE_COUNT : 0x%x\n", 
PLATFORM_CORE_COUNT
);

294 
i
=0; i<
PLATFORM_CORE_COUNT
; i++) {

295 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[
i
] = (
°¨t
+(
size
-
´e_buf_size
)-
ATF_EXCEPT_BUF_SIZE
)+ i*
ATF_EXCEPT_BUF_SIZE_PER_CPU
;

296 
	`debug_¥öt
("mt_log_£tu∞-átf_ex˚±_wrôe_pos_≥r_˝u[%d]: 0x%x\n", 
i
, 
p_©f_log_˘æ
->
öfo
.
©f_ex˚±_wrôe_pos_≥r_˝u
[i]);

299 if(
dump_ªt
) {

301 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
 = (
°¨t
 + 
ATF_LOG_CTRL_BUF_SIZE
) +

302 (
size
 - 
ATF_LOG_CTRL_BUF_SIZE
 - 
´e_buf_size
 - 
ATF_CRASH_LAST_LOG_SIZE
 - 
ATF_EXCEPT_BUF_SIZE
);

303 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
 = 
ATF_CRASH_LAST_LOG_SIZE
 + 
ATF_EXCEPT_BUF_SIZE
;

304 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
 = 
ATF_CRASH_MAGIC_NO
;

307 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_Êag : 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_Êag
);

308 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_add∏: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_addr
);

309 
	`debug_¥öt
("mt_log_£tu∞-átf_¸ash_log_sizê: 0x%x\n", 
p_©f_log_˘æ
->
öfo
.
©f_¸ash_log_size
);

311 
	`bl31_log_£rvi˚_ªgi°î
(&
mt_log_lock_acquúe
, &
mt_log_wrôe
,

312 &
mt_log_lock_ªÀa£
);

313 
	`bl31_log_£rvi˚_ªgi°î2
(
NULL
, &
mt_log_wrôe2
, NULL);

314 
	}
}

317 
	#MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 120

	)

318 
	#TBASE_TAG
 "TBASE"

	)

319 
	gmt_log_£cuª_os_buf
[
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
+1] = {0};

320 
	gmt_log_£cuª_os_pos
 = 0;

322 
	$mt_log_£cuª_os_¥öt
(
c
)

324 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = 
c
;

327 if–
c
 == '\n' )

329 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
+1] = '\0';

330 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

331 
mt_log_£cuª_os_pos
 = 0;

335 
mt_log_£cuª_os_pos
++;

338 if–
mt_log_£cuª_os_pos
 =
MT_LOG_SECURE_OS_BUFFER_MAX_LENGTH
 )

340 
mt_log_£cuª_os_buf
[
mt_log_£cuª_os_pos
] = '\0';

341 
	`¥ötf
("[%s]%s", 
TBASE_TAG
, 
mt_log_£cuª_os_buf
);

342 
mt_log_£cuª_os_pos
 = 0;

344 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/log/log.h

49 #i‚de‡
ATF_LOG_DRV_H


50 
	#ATF_LOG_DRV_H


	)

52 
	~<•ölock.h
>

53 
	~<°döt.h
>

54 
	~<∂©f‹m_def.h
>

56 
	#ATF_LOG_CTRL_BUF_SIZE
 256

	)

57 
	#ATF_LOG_SIGNAL_THRESHOLD_SIZE
 1024

	)

59 
	#ATF_CRASH_MAGIC_NO
 0xdód1abf

	)

75 
	#ATF_CRASH_LAST_LOG_SIZE
 (32*1024)

	)

76 
	#ATF_EXCEPT_BUF_SIZE_PER_CPU
 (4*1024)

	)

77 
	#ATF_EXCEPT_BUF_SIZE
 (
ATF_EXCEPT_BUF_SIZE_PER_CPU
 * 
PLATFORM_CORE_COUNT
)

	)

79 
	u©f_log_˘æ


83 
	m©f_buf_addr
;

84 
	m©f_buf_size
;

85 
	m©f_wrôe_pos
;

86 
	m©f_ªad_pos
;

87 
•ölock_t
 
	m©f_buf_lock
;

88 
	m©f_buf_uƒód_size
;

89 
	m©f_úq_cou¡
;

90 
	m©f_ªadî_Æive
;

91 
uöt64_t
 
	m©f_tŸÆ_wrôe_cou¡
;

92 
uöt64_t
 
	m©f_tŸÆ_ªad_cou¡
;

93 
	m©f_´e_dbg_buf_addr
;

94 
	m©f_´e_dbg_buf_size
;

95 
	m©f_¸ash_log_addr
;

96 
	m©f_¸ash_log_size
;

97 
	m©f_¸ash_Êag
;

98 
	m©f_ex˚±_wrôe_pos_≥r_˝u
[
PLATFORM_CORE_COUNT
];

99 } 
	möfo
;

100 
	md©a
[
ATF_LOG_CTRL_BUF_SIZE
];

101 } 
	t©f_log_˘æ_t
;

103 
mt_log_£tup
(
°¨t
, 
size
, 
´e_buf_size
);

104 
mt_log_lock_acquúe
();

105 
mt_log_wrôe
(
c
);

106 
mt_log_lock_ªÀa£
();

107 
mt_log_su•íd_Êush
();

108 
mt_log_£cuª_os_¥öt
(
c
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/timer/mt_cpuxgpt.c

37 
	~<°döt.h
>

38 
	~<¨ch_hñ≥rs.h
>

39 
	~"ty≥defs.h
"

40 
	~"∂©f‹m.h
"

41 
	~"mt_˝uxg±.h
"

43 
	#CPUXGPT_BASE
 0x10200000

	)

44 
	#INDEX_BASE
 (
CPUXGPT_BASE
+0x0674)

	)

45 
	#CTL_BASE
 (
CPUXGPT_BASE
+0x0670)

	)

47 
__u64
 
	gn‹mÆ_time_ba£
;

48 
__u64
 
	g©f_time_ba£
;

51 
	$__ªad_˝uxg±
(
ªg_ödex
 )

53 
vÆue
 = 0;

54 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

56 
vÆue
 = 
	`DRV_Reg32
(
CTL_BASE
);

57  
vÆue
;

58 
	}
}

61 
	$__wrôe_˝uxg±
(
ªg_ödex
,
vÆue
 )

64 
	`DRV_WrôeReg32
(
INDEX_BASE
,
ªg_ödex
);

65 
	`DRV_WrôeReg32
(
CTL_BASE
,
vÆue
);

66 
	}
}

68 
	$__˝uxg±_£t_öô_˙t
(
cou¡H
,
cou¡L
)

70 
	`__wrôe_˝uxg±
(
INDEX_CNT_H_INIT
,
cou¡H
);

71 
	`__wrôe_˝uxg±
(
INDEX_CNT_L_INIT
,
cou¡L
);

72 
	}
}

74 
	$gíîic_timî_backup
()

76 
__u64
 
cvÆ
;

78 
cvÆ
 = 
	`ªad_˙ç˘_ñ0
();

79 
	`__˝uxg±_£t_öô_˙t
((
__u32
)(
cvÆ
 >> 32), (__u32)(cval & 0xffffffff));

80 
	}
}

82 
	$©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
)

84 
n‹mÆ_time_ba£
 = 
n‹mÆ_ba£
;

85 
©f_time_ba£
 = 
©f_ba£
;

87 
	}
}

89 
	$©f_sched_˛ock
()

91 
__u64
 
cvÆ
;

93 
cvÆ
 = (((
	`ªad_˙ç˘_ñ0
(Ë- 
©f_time_ba£
)*1000)/13Ë+ 
n‹mÆ_time_ba£
;

94  
cvÆ
;

95 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/timer/mt_cpuxgpt.h

49 #i‚de‡
_MT_CPUXGPT_H_


50 
	#_MT_CPUXGPT_H_


	)

53 
	e˝uxg±_num
 {

54 
	mCPUXGPT0
=0,

55 
	mCPUXGPT1
,

56 
	mCPUXGPT2
,

57 
	mCPUXGPT3
,

58 
	mCPUXGPT4
,

59 
	mCPUXGPT5
,

60 
	mCPUXGPT6
,

61 
	mCPUXGPT7
,

62 
	mCPUXGPTNUMBERS
,

63 }
	tCPUXGPT_NUM
;

65 
	#CPUXGPT0_IRQID
 96

	)

66 
	#CPUXGPT1_IRQID
 97

	)

67 
	#CPUXGPT2_IRQID
 98

	)

68 
	#CPUXGPT3_IRQID
 99

	)

69 
	#CPUXGPT4_IRQID
 100

	)

70 
	#CPUXGPT5_IRQID
 101

	)

71 
	#CPUXGPT6_IRQID
 102

	)

72 
	#CPUXGPT7_IRQID
 103

	)

74 
	#CPUXGPT_IRQID_BASE
 
CPUXGPT0_IRQID


	)

77 
	#INDEX_CTL_REG
 0x000

	)

78 
	#INDEX_STA_REG
 0x004

	)

79 
	#INDEX_CNT_L_INIT
 0x008

	)

80 
	#INDEX_CNT_H_INIT
 0x00C

	)

81 
	#INDEX_IRQ_MASK
 0x030

82 

	)

83 
	#INDEX_CMP_BASE
 0x034

	)

87 
	#EN_CPUXGPT
 0x01

	)

88 
	#EN_AHLT_DEBUG
 0x02

	)

92 
	#CLK_DIV1
 (0x1 << 8)

	)

93 
	#CLK_DIV2
 (0x2 << 8)

	)

94 
	#CLK_DIV4
 (0x4 << 8)

	)

95 
	#CLK_DIV_MASK
 (~(0x7<<8))

	)

97 
	#CPUX_GPT0_ACK
 (1<<0x0)

	)

98 
	#CPUX_GPT1_ACK
 (1<<0x1)

	)

99 
	#CPUX_GPT2_ACK
 (1<<0x2)

	)

100 
	#CPUX_GPT3_ACK
 (1<<0x3)

	)

101 
	#CPUX_GPT4_ACK
 (1<<0x4)

	)

102 
	#CPUX_GPT5_ACK
 (1<<0x5)

	)

103 
	#CPUX_GPT6_ACK
 (1<<0x6)

	)

104 
	#CPUX_GPT7_ACK
 (1<<0x7)

	)

107 
gíîic_timî_backup
();

108 
©f_sched_˛ock_öô
(
n‹mÆ_ba£
, 
©f_ba£
);

109 
©f_sched_˛ock
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/timer/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/uart/typedefs.h

38 #i‚de‡
_TYPEDEFS_H_


39 
	#_TYPEDEFS_H_


	)

42 
	~<°döt.h
>

46 
	tul⁄g
;

47 
	tuch¨
;

48 
	tuöt
;

49 sig√d 
	töt8
;

50 sig√d 
	töt16
;

51 sig√d 
	töt32
;

52 sig√d 
	tötx
;

53 
	tuöt8
;

54 
	tuöt16
;

55 
	tuöt32
;

56 
	tuötx
;

60 vﬁ©ûê*
	tP_kÆ_uöt8
;

61 vﬁ©ûê*
	tP_kÆ_uöt16
;

62 vﬁ©ûê*
	tP_kÆ_uöt32
;

64 
	tLONG
;

65 
	tUBYTE
;

66 
	tSHORT
;

68 sig√d 
	tkÆ_öt8
;

69 sig√d 
	tkÆ_öt16
;

70 sig√d 
	tkÆ_öt32
;

71 
	tkÆ_öt64
;

72 
	tkÆ_uöt8
;

73 
	tkÆ_uöt16
;

74 
	tkÆ_uöt32
;

75 
	tkÆ_uöt64
;

76 
	tkÆ_ch¨
;

78 *
	tUINT32P
;

79 vﬁ©ûê*
	tUINT16P
;

80 vﬁ©ûê*
	tUINT8P
;

81 *
	tU8P
;

83 vﬁ©ûê*
	tP_U8
;

84 vﬁ©ûêsig√d *
	tP_S8
;

85 vﬁ©ûê*
	tP_U16
;

86 vﬁ©ûêsig√d *
	tP_S16
;

87 vﬁ©ûê*
	tP_U32
;

88 vﬁ©ûêsig√d *
	tP_S32
;

89 *
	tP_U64
;

90 sig√d *
	tP_S64
;

92 
	tU8
;

93 sig√d 
	tS8
;

94 
	tU16
;

95 sig√d 
	tS16
;

96 
	tU32
;

97 sig√d 
	tS32
;

98 
	tU64
;

99 sig√d 
	tS64
;

100 
	tboﬁ
;

104 
	tUINT8
;

105 
	tUINT16
;

106 
	tUINT32
;

107 
	tUSHORT
;

108 sig√d 
	tINT8
;

109 sig√d 
	tINT16
;

110 sig√d 
	tINT32
;

111 sig√d 
	tDWORD
;

112 
	tVOID
;

113 
	tBYTE
;

114 
	tFLOAT
;

116 *
	tLPCSTR
;

117 *
	tLPWSTR
;

121 
	t__s8
;

122 
	t__u8
;

123 
	t__s16
;

124 
	t__u16
;

125 
	t__s32
;

126 
	t__u32
;

127 
	t__s64
;

128 
	t__u64
;

129 sig√d 
	ts8
;

130 
	tu8
;

131 sig√d 
	ts16
;

132 
	tu16
;

133 sig√d 
	ts32
;

134 
	tu32
;

135 sig√d 
	ts64
;

136 
	tu64
;

137 
	#BITS_PER_LONG
 32

	)

139 
u32
 
	tdma_addr_t
;

143 
	#FALSE
 0

	)

144 
	#TRUE
 1

	)

147 
	#IMPORT
 
EXTERN


	)

148 #i‚de‡
__˝lu•lus


149 
	#EXTERN
 

	)

151 
	#EXTERN
 "C"

	)

153 
	#LOCAL
 

	)

154 
	#GLOBAL


	)

155 
	#EXPORT
 
GLOBAL


	)

158 
	#EQ
 ==

	)

159 
	#NEQ
 !=

	)

160 
	#AND
 &&

	)

161 
	#OR
 ||

	)

162 
	#XOR
(
A
,
B
Ë((!(AË
	`AND
 (B)Ë
	`OR
 ((AË
AND
 !(B)))

	)

164 #i‚de‡
FALSE


165 
	#FALSE
 0

	)

168 #i‚de‡
TRUE


169 
	#TRUE
 1

	)

172 #i‚de‡
NULL


173 
	#NULL
 0

	)

176 
	eboﬁón


177 { 
Ál£
, 
åue
 };

179 { 
	mRX
, 
	mTX
, 
	mNONE
 };

182 #i‚de‡
BOOL


183 
	tBOOL
;

188 
	mKAL_FALSE
 = 0,

189 
	mKAL_TRUE
 = 1,

190 } 
	tkÆ_boﬁ
;

195 
	#MAXIMUM
(
A
,
B
Ë(((A)>(B))?(A):(B))

	)

196 
	#MINIMUM
(
A
,
B
Ë(((A)<(B))?(A):(B))

	)

200 
WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
);

201 
uöt8_t
 
READ_REGISTER_UINT8
(
uöçå_t
 
addr
);

203 
WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
);

204 
uöt16_t
 
READ_REGISTER_UINT16
(
uöçå_t
 
addr
);

206 
WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
);

207 
uöt32_t
 
READ_REGISTER_UINT32
(
uöçå_t
 
addr
);

210 
	#READ_REGISTER_UINT32
(
ªg
) \

211 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

213 
	#WRITE_REGISTER_UINT32
(
ªg
, 
vÆ
) \

214 (*(vﬁ©ûê
UINT32
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

216 
	#READ_REGISTER_UINT16
(
ªg
) \

217 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

219 
	#WRITE_REGISTER_UINT16
(
ªg
, 
vÆ
) \

220 (*(vﬁ©ûê
UINT16
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

222 
	#READ_REGISTER_UINT8
(
ªg
) \

223 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
))

	)

225 
	#WRITE_REGISTER_UINT8
(
ªg
, 
vÆ
) \

226 (*(vﬁ©ûê
UINT8
 * c⁄°)(
uöçå_t
)(
ªg
)Ë(
vÆ
)

	)

229 
	#INREG8
(
x
Ë
	`READ_REGISTER_UINT8
((
UINT8
*)(x))

	)

230 
	#OUTREG8
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT8
((
UINT8
*)(x), (UINT8)(y))

	)

231 
	#SETREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)|(y))

	)

232 
	#CLRREG8
(
x
, 
y
Ë
	`OUTREG8
(x, 
	`INREG8
(x)&~(y))

	)

233 
	#MASKREG8
(
x
, 
y
, 
z
Ë
	`OUTREG8
(x, (
	`INREG8
(x)&~(y))|(z))

	)

235 
	#INREG16
(
x
Ë
	`READ_REGISTER_UINT16
((x))

	)

236 
	#OUTREG16
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT16
((x),(
UINT16
)(y))

	)

237 
	#SETREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)|(y))

	)

238 
	#CLRREG16
(
x
, 
y
Ë
	`OUTREG16
(x, 
	`INREG16
(x)&~(y))

	)

239 
	#MASKREG16
(
x
, 
y
, 
z
Ë
	`OUTREG16
(x, (
	`INREG16
(x)&~(y))|(z))

	)

241 
	#INREG32
(
x
Ë
	`READ_REGISTER_UINT32
((x))

	)

242 
	#OUTREG32
(
x
, 
y
Ë
	`WRITE_REGISTER_UINT32
((x), (
UINT32
)(y))

	)

243 
	#SETREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)|(y))

	)

244 
	#CLRREG32
(
x
, 
y
Ë
	`OUTREG32
(x, 
	`INREG32
(x)&~(y))

	)

245 
	#MASKREG32
(
x
, 
y
, 
z
Ë
	`OUTREG32
(x, (
	`INREG32
(x)&~(y))|(z))

	)

248 
	#DRV_Reg8
(
addr
Ë
	`INREG8
◊ddr)

	)

249 
	#DRV_WrôeReg8
(
addr
, 
d©a
Ë
	`OUTREG8
◊ddr, d©a)

	)

250 
	#DRV_SëReg8
(
addr
, 
d©a
Ë
	`SETREG8
◊ddr, d©a)

	)

251 
	#DRV_CÃReg8
(
addr
, 
d©a
Ë
	`CLRREG8
◊ddr, d©a)

	)

253 
	#DRV_Reg16
(
addr
Ë
	`INREG16
◊ddr)

	)

254 
	#DRV_WrôeReg16
(
addr
, 
d©a
Ë
	`OUTREG16
◊ddr, d©a)

	)

255 
	#DRV_SëReg16
(
addr
, 
d©a
Ë
	`SETREG16
◊ddr, d©a)

	)

256 
	#DRV_CÃReg16
(
addr
, 
d©a
Ë
	`CLRREG16
◊ddr, d©a)

	)

258 
	#DRV_Reg32
(
addr
Ë
	`INREG32
◊ddr)

	)

259 
	#DRV_WrôeReg32
(
addr
, 
d©a
Ë
	`OUTREG32
◊ddr, d©a)

	)

260 
	#DRV_SëReg32
(
addr
, 
d©a
Ë
	`SETREG32
◊ddr, d©a)

	)

261 
	#DRV_CÃReg32
(
addr
, 
d©a
Ë
	`CLRREG32
◊ddr, d©a)

	)

264 
	#DRV_Reg
(
addr
Ë
	`DRV_Reg16
◊ddr)

	)

265 
	#DRV_WrôeReg
(
addr
, 
d©a
Ë
	`DRV_WrôeReg16
◊ddr, d©a)

	)

266 
	#DRV_SëReg
(
addr
, 
d©a
Ë
	`DRV_SëReg16
◊ddr, d©a)

	)

267 
	#DRV_CÃReg
(
addr
, 
d©a
Ë
	`DRV_CÃReg16
◊ddr, d©a)

	)

269 
	#__øw_ªadb
(
REG
Ë
	`DRV_Reg8
(REG)

	)

270 
	#__øw_ªadw
(
REG
Ë
	`DRV_Reg16
(REG)

	)

271 
	#__øw_ªadl
(
REG
Ë
	`DRV_Reg32
(REG)

	)

272 
	#__øw_wrôeb
(
VAL
, 
REG
Ë
	`DRV_WrôeReg8
(REG,VAL)

	)

273 
	#__øw_wrôew
(
VAL
, 
REG
Ë
	`DRV_WrôeReg16
(REG,VAL)

	)

274 
	#__øw_wrôñ
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

276 
	#dsb
() \

277 
__asm__
 
	`__vﬁ©ûe__
("m¸Ö15, 0, %0, c7, c10, 4" : : "r" (0Ë: "mem‹y")

	)

279 
∂©f‹m_as£π
(*
fûe
, 
löe
, *
ex¥
);

281 
	#ASSERT
(
ex¥
) \

282 do{ if(!(
ex¥
)){
	`∂©f‹m_as£π
(
__FILE__
, 
__LINE__
, #ex¥);} }0)

	)

285 
	#COMPILE_ASSERT
(
c⁄dôi⁄
Ë(()([1 - 2*!!!(c⁄dôi⁄)]))

	)

287 
	#¥ötf
 
¥öt


	)

288 
	#BUG_ON
(
ex¥
Ë
	`ASSERT
(!”x¥))

	)

293 * 
	tva_li°
;

294 
	#_INTSIZEOF
(
n
Ë–(“Ë+ (Ë- 1Ë& ~((Ë- 1Ë)

	)

295 
	#va_°¨t
(
≠
,
v
Ë–≠ = (
va_li°
)&v + 
	`_INTSIZEOF
(vË)

	)

296 
	#va_¨g
(
≠
,
t
Ë–*— *)(◊∞+
	`_INTSIZEOF
—)Ë- _INTSIZEOF—)Ë)

	)

297 
	#va_íd
(
≠
Ë–≠ = (
va_li°
)0 )

	)

299 
	~<°d¨g.h
>

302 
	#READ_REG
(
REG
Ë
	`__øw_ªadl
(REG)

	)

303 
	#WRITE_REG
(
VAL
, 
REG
Ë
	`__øw_wrôñ
(VAL, REG)

	)

305 #i‚de‡
mö


306 
	#mö
(
x
, 
y
Ë(x < y ? x : y)

	)

308 #i‚de‡
max


309 
	#max
(
x
, 
y
Ë(x > y ? x : y)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/uart/uart.c

37 
	~<°döt.h
>

38 
	~<as£π.h
>

39 
	~<c⁄sﬁe.h
>

40 
	~"ty≥defs.h
"

41 
	~"∂©f‹m.h
"

42 
	~"u¨t.h
"

48 
	#Dñay_Cou¡
 324675

	)

50 
	#UART_BASE
(
u¨t
Ë(u¨t)

	)

52 
	#UART_RBR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

53 
	#UART_THR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0Ë

	)

54 
	#UART_IER
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

55 
	#UART_IIR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

56 
	#UART_FCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8Ë

	)

57 
	#UART_LCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0xc)

	)

58 
	#UART_MCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

59 
	#UART_LSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

60 
	#UART_MSR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

61 
	#UART_SCR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

62 
	#UART_DLL
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x0)

	)

63 
	#UART_DLH
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4)

	)

64 
	#UART_EFR
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x8)

	)

65 
	#UART_XON1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x10)

	)

66 
	#UART_XON2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x14)

	)

67 
	#UART_XOFF1
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x18)

	)

68 
	#UART_XOFF2
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x1c)

	)

69 
	#UART_AUTOBAUD_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x20)

	)

70 
	#UART_HIGHSPEED
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x24)

	)

71 
	#UART_SAMPLE_COUNT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x28)

	)

72 
	#UART_SAMPLE_POINT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x2c)

	)

73 
	#UART_AUTOBAUD_REG
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x30)

	)

74 
	#UART_RATE_FIX_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x34)

	)

75 
	#UART_AUTOBAUD_SAMPLE
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x38)

	)

76 
	#UART_GUARD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x3c)

	)

77 
	#UART_ESCAPE_DAT
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x40)

	)

78 
	#UART_ESCAPE_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x44)

	)

79 
	#UART_SLEEP_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x48)

	)

80 
	#UART_VFIFO_EN
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x4c)

	)

81 
	#UART_RXTRI_AD
(
u¨t
Ë(
	`UART_BASE
(u¨t)+0x50)

	)

85 
	#UART_SET_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(
uöçå_t
)(REG)Ë|(U32)(BS))

	)

86 
	#UART_CLR_BITS
(
BS
,
REG
Ë((*(vﬁ©ûê
U32
*)(REG)Ë&~((U32)(BS)))

	)

87 
	#UART_WRITE16
(
VAL
, 
REG
Ë
	`DRV_WrôeReg
(REG,VAL)

	)

88 
	#UART_READ32
(
REG
Ë
	`DRV_Reg32
(REG)

	)

89 
	#UART_WRITE32
(
VAL
, 
REG
Ë
	`DRV_WrôeReg32
(REG,VAL)

	)

91 #i‡
CFG_FPGA_PLATFORM


92 vﬁ©ûê
	gg_u¨t
 = 
UART1
;

93 
	#UART_SRC_CLK
 
FPGA_UART_CLOCK


	)

95 vﬁ©ûê
	gg_u¨t
 = 
UART2
;

96 
	#UART_SRC_CLK
 
EVB_UART_CLOCK


	)

99 
	gIsOuçutToUARTFœg
=1;

102 
	$WRITE_REGISTER_UINT8
(
uöçå_t
 
addr
, 
uöt8_t
 
vÆue
)

104 *(vﬁ©ûê
uöt8_t
*)
addr
 = 
vÆue
;

105 
	}
}

108 
uöt8_t
 
	$READ_REGISTER_UINT8
(
uöçå_t
 
addr
)

110  *(vﬁ©ûê
uöt8_t
*)
addr
;

111 
	}
}

113 
	$WRITE_REGISTER_UINT32
(
uöçå_t
 
addr
, 
uöt32_t
 
vÆue
)

115 *(vﬁ©ûê
uöt32_t
*)
addr
 = 
vÆue
;

116 
	}
}

118 
uöt32_t
 
	$READ_REGISTER_UINT32
(
uöçå_t
 
addr
)

120  *(vﬁ©ûê
uöt32_t
*)
addr
;

121 
	}
}

123 
	$WRITE_REGISTER_UINT16
(
uöçå_t
 
addr
, 
uöt16_t
 
vÆue
)

125 *(vﬁ©ûê
uöt16_t
*)
addr
 = 
vÆue
;

126 
	}
}

128 
uöt16_t
 
	$READ_REGISTER_UINT16
(
uöçå_t
 
addr
)

130  *(vﬁ©ûê
uöt16_t
*)
addr
;

131 
	}
}

135 
	$£rül_£tbrg
 (
U32
 
u¨t˛k
, U32 
baudøã
)

137 #i‡(
CFG_FPGA_PLATFORM
)

138 
	#MAX_SAMPLE_COUNT
 256

	)

140 
U16
 
tmp
;

141 
U32
 
divis‹
;

142 
U32
 
ßm∂e_d©a
;

143 
U32
 
ßm∂e_cou¡
;

144 
U32
 
ßm∂e_poöt
;

147 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

160 
	`UART_WRITE32
(0x0003, 
	`UART_HIGHSPEED
(
g_u¨t
));

164 
ßm∂e_d©a
 = (
u¨t˛k
+(
baudøã
/2))/baudrate;

166 
divis‹
 = (
ßm∂e_d©a
+(
MAX_SAMPLE_COUNT
-1))/MAX_SAMPLE_COUNT;

168 
ßm∂e_cou¡
 = 
ßm∂e_d©a
/
divis‹
;

170 
ßm∂e_poöt
 = (
ßm∂e_cou¡
-1)/2;

172 
	`UART_WRITE32
((
ßm∂e_cou¡
-1), 
	`UART_SAMPLE_COUNT
(
g_u¨t
));

174 
	`UART_WRITE32
(
ßm∂e_poöt
, 
	`UART_SAMPLE_POINT
(
g_u¨t
));

176 
tmp
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

177 
	`UART_WRITE32
((
tmp
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

179 
	`UART_WRITE32
((
divis‹
&0xFF), 
	`UART_DLL
(
g_u¨t
));

180 
	`UART_WRITE32
(((
divis‹
>>8)&0xFF), 
	`UART_DLH
(
g_u¨t
));

181 
	`UART_WRITE32
(
tmp
, 
	`UART_LCR
(
g_u¨t
));

184 
byã
;

185 
high•ìd
;

186 
quŸ
, 
divis‹
, 
ªmaödî
;

188 i‡(
baudøã
 <= 115200 ) {

189 
high•ìd
 = 0;

190 
quŸ
 = 16;

192 
high•ìd
 = 2;

193 
quŸ
 = 4;

197 
divis‹
 = 
u¨t˛k
 / (
quŸ
 * 
baudøã
);

198 
ªmaödî
 = 
u¨t˛k
 % (
quŸ
 * 
baudøã
);

200 i‡(
ªmaödî
 >(
quŸ
 / 2Ë* 
baudøã
)

201 
divis‹
 += 1;

203 
	`UART_WRITE16
(
high•ìd
, 
	`UART_HIGHSPEED
(
g_u¨t
));

204 
byã
 = 
	`UART_READ32
(
	`UART_LCR
(
g_u¨t
));

205 
	`UART_WRITE32
((
byã
 | 
UART_LCR_DLAB
), 
	`UART_LCR
(
g_u¨t
));

206 
	`UART_WRITE32
((
divis‹
 & 0x00ff), 
	`UART_DLL
(
g_u¨t
));

207 
	`UART_WRITE32
(((
divis‹
 >> 8)&0x00ff), 
	`UART_DLH
(
g_u¨t
));

210 
	`UART_WRITE32
(0x0003, 
	`UART_LCR
(
g_u¨t
));

212 
	}
}

216 
	$£rül_n⁄block_gëc
()

218  ()
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

219 
	}
}

221 
	$mtk_£rül_£t_cuºít_u¨t
(
MT65XX_UART
 
u¨t_ba£
)

223 
g_u¨t
 = 
u¨t_ba£
;

224 
	}
}

226 
	$mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
)

228 
g_u¨t
 = 
u¨t_p‹t
;

229 #i‡!
CFG_FPGA_PLATFORM


230 #ifde‡
GPIO_UART_UTXD1_PIN


231 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

232 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

235 #ifde‡
GPIO_UART_URXD1_PIN


236 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

237 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

238 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

239 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

242 #ifde‡
GPIO_UART_UTXD2_PIN


243 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD2_PIN
, 
GPIO_MODE_01
);

244 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD2_PIN
, 
GPIO_DIR_OUT
);

247 #ifde‡
GPIO_UART_URXD2_PIN


248 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD2_PIN
, 
GPIO_MODE_01
);

249 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD2_PIN
, 
GPIO_DIR_IN
);

250 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_ENABLE
);

251 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD2_PIN
, 
GPIO_PULL_UP
);

254 #ifde‡
GPIO_UART_UTXD3_PIN


255 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD3_PIN
, 
GPIO_MODE_01
);

256 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD3_PIN
, 
GPIO_DIR_OUT
);

259 #ifde‡
GPIO_UART_URXD3_PIN


260 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD3_PIN
, 
GPIO_MODE_01
);

261 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD3_PIN
, 
GPIO_DIR_IN
);

262 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_ENABLE
);

263 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD3_PIN
, 
GPIO_PULL_UP
);

267 
	#AP_PERI_GLOBALCON_RST0
 (
PERICFG_BASE
+0x0)

	)

268 
	#AP_PERI_GLOBALCON_PDN0
 (
PERICFG_BASE
+0x10)

	)

271 if(0 =
u¨t˛k
){

273 
u¨t˛k
 = 
UART_SRC_CLK
;

276 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
	`deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

278 
	`mtk_£rül_£t_cuºít_u¨t
(
UART2
);

280 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

281 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

282 
	`£rül_£tbrg
(
u¨t˛k
, 
CFG_LOG_BAUDRATE
);

286 #ifde‡
GPIO_UART_UTXD1_PIN


287 
	`mt_£t_gpio_mode
(
GPIO_UART_UTXD1_PIN
, 
GPIO_MODE_01
);

288 
	`mt_£t_gpio_dú
(
GPIO_UART_UTXD1_PIN
, 
GPIO_DIR_OUT
);

291 #ifde‡
GPIO_UART_URXD1_PIN


292 
	`mt_£t_gpio_mode
(
GPIO_UART_URXD1_PIN
, 
GPIO_MODE_01
);

293 
	`mt_£t_gpio_dú
(
GPIO_UART_URXD1_PIN
, 
GPIO_DIR_IN
);

294 
	`mt_£t_gpio_puŒ_íabÀ
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_ENABLE
);

295 
	`mt_£t_gpio_puŒ_£À˘
(
GPIO_UART_URXD1_PIN
, 
GPIO_PULL_UP
);

305 
	`UART_CLR_BITS
(1 << 22, 
AP_PERI_GLOBALCON_PDN0
);

307 
	`UART_SET_BITS
(
UART_FCR_FIFO_INIT
, 
	`UART_FCR
(
g_u¨t
));

308 
	`UART_WRITE16
(
UART_NONE_PARITY
 | 
UART_WLS_8
 | 
UART_1_STOP
, 
	`UART_LCR
(
g_u¨t
));

309 
	`£rül_£tbrg
(
u¨t˛k
, 
baudøã
);

310 
	}
}

312 
	$PutUARTByã
 (c⁄° 
c
)

314 !(
	`UART_READ32
 (
	`UART_LSR
(
g_u¨t
)Ë& 
UART_LSR_THRE
))

318 i‡(
c
 == '\n')

320 
	`UART_WRITE32
 ((Ë0xD, 
	`UART_THR
(
g_u¨t
));

322 
	`UART_WRITE32
 ((Ë
c
, 
	`UART_THR
(
g_u¨t
));

323 
	}
}

325 #i‡(
CFG_OUTPUT_PL_LOG_TO_UART1
 && !(
deföed
(
HW_INIT_ONLY
Ë|| deföed(
SLT
Ë|| deföed(
DUMMY_AP
Ë|| deföed(
TINY
)))

326 
	$PutUART1_Byã
(c⁄° 
c
)

328 !(
	`UART_READ32
 (
	`UART_LSR
(
UART2
)Ë& 
UART_LSR_THRE
))

332 i‡(
c
 == '\n')

333 
	`UART_WRITE32
((Ë'\r', 
	`UART_THR
(
UART2
));

335 
	`UART_WRITE32
((Ë
c
, 
	`UART_THR
(
UART2
));

336 
	}
}

339 
	$GëUARTByãs
(
u8
 *
buf
, 
u32
 
size
, u32 
tmo_ms
)

343 
u32
 
LSR
;

344 
tmo_í
 = (
tmo_ms
) ? 1 : 0;

345 
ul⁄g
 
°¨t_time
 = 
	`gë_timî
(0);

347 
size
) {

348 i‡(
tmo_í
 && (
	`gë_timî
(
°¨t_time
Ë> 
tmo_ms
))

352 i‡(!
tmo_í
)

353 
	`∂©f‹m_wdt_kick
();

355 
LSR
 = 
	`UART_READ32
(
	`UART_LSR
(
g_u¨t
));

356 i‡(
LSR
 & 
UART_LSR_DR
) {

357 *
buf
++ = (
u8
)
	`UART_READ32
(
	`UART_RBR
(
g_u¨t
));

358 
size
--;

362  (0 =
size
) ? 0 : -1;

366 
	}
}

368 
	$c⁄sﬁe_öô
(
ba£_addr
)

375 
	`as£π
(
ba£_addr
);

378 
g_u¨t
 = 
ba£_addr
;

380 
	#CFG_LOG_BAUDRATE
 921600

	)

382 #i‡
CFG_FPGA_PLATFORM


383 
	#UART_SRC_CLK_FRQ
 (12000000)

	)

385 
	#UART_SRC_CLK_FRQ
 (0Ë

	)

390 
	`mtk_u¨t_öô
(
ba£_addr
, 
UART_SRC_CLK_FRQ
, 
CFG_LOG_BAUDRATE
);

393 
	}
}

395 
	$c⁄sﬁe_putc
(
c
)

397 if(
IsOuçutToUARTFœg
){

398 
	`PutUARTByã
 (
c
);

400  
c
;

401 
	}
}

403 
	$c⁄sﬁe_gëc
()

405 
c
 = 0;

406 if(
IsOuçutToUARTFœg
){

407 
	`GëUARTByãs
(&
c
, 1, 10);

409  
c
;

410 
	}
}

411 
	$£t_u¨t_Êag
()

413 
IsOuçutToUARTFœg
=1;

414 
	}
}

415 
	$˛ór_u¨t_Êag
()

417 
IsOuçutToUARTFœg
=0;

418 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/uart/uart.h

49 #i‚de‡
UART_HW_H


50 
	#UART_HW_H


	)

53 
	~"∂©_def.h
"

57 
	#UART_FCR_FIFOE
 (1 << 0)

	)

58 
	#UART_FCR_CLRR
 (1 << 1)

	)

59 
	#UART_FCR_CLRT
 (1 << 2)

	)

60 
	#UART_FCR_DMA1
 (1 << 3)

	)

61 
	#UART_FCR_RXFIFO_1B_TRI
 (0 << 6)

	)

62 
	#UART_FCR_RXFIFO_6B_TRI
 (1 << 6)

	)

63 
	#UART_FCR_RXFIFO_12B_TRI
 (2 << 6)

	)

64 
	#UART_FCR_RXFIFO_RX_TRI
 (3 << 6)

	)

65 
	#UART_FCR_TXFIFO_1B_TRI
 (0 << 4)

	)

66 
	#UART_FCR_TXFIFO_4B_TRI
 (1 << 4)

	)

67 
	#UART_FCR_TXFIFO_8B_TRI
 (2 << 4)

	)

68 
	#UART_FCR_TXFIFO_14B_TRI
 (3 << 4)

	)

70 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

71 
	#UART_FCR_NORMAL
 (
UART_FCR_FIFO_INIT
 | \

72 
UART_FCR_TXFIFO_4B_TRI
| \

73 
UART_FCR_RXFIFO_12B_TRI
)

	)

77 
	#UART_LCR_BREAK
 (1 << 6)

	)

78 
	#UART_LCR_DLAB
 (1 << 7)

	)

80 
	#UART_WLS_5
 (0 << 0)

	)

81 
	#UART_WLS_6
 (1 << 0)

	)

82 
	#UART_WLS_7
 (2 << 0)

	)

83 
	#UART_WLS_8
 (3 << 0)

	)

84 
	#UART_WLS_MASK
 (3 << 0)

	)

86 
	#UART_1_STOP
 (0 << 2)

	)

87 
	#UART_2_STOP
 (1 << 2)

	)

88 
	#UART_1_5_STOP
 (1 << 2Ë

	)

89 
	#UART_STOP_MASK
 (1 << 2)

	)

91 
	#UART_NONE_PARITY
 (0 << 3)

	)

92 
	#UART_ODD_PARITY
 (0x1 << 3)

	)

93 
	#UART_EVEN_PARITY
 (0x3 << 3)

	)

94 
	#UART_MARK_PARITY
 (0x5 << 3)

	)

95 
	#UART_SPACE_PARITY
 (0x7 << 3)

	)

96 
	#UART_PARITY_MASK
 (0x7 << 3)

	)

99 
	#UART_MCR_DTR
 (1 << 0)

	)

100 
	#UART_MCR_RTS
 (1 << 1)

	)

101 
	#UART_MCR_OUT1
 (1 << 2)

	)

102 
	#UART_MCR_OUT2
 (1 << 3)

	)

103 
	#UART_MCR_LOOP
 (1 << 4)

	)

104 
	#UART_MCR_XOFF
 (1 << 7Ë

	)

105 
	#UART_MCR_NORMAL
 (
UART_MCR_DTR
|
UART_MCR_RTS
)

	)

108 
	#UART_LSR_DR
 (1 << 0)

	)

109 
	#UART_LSR_OE
 (1 << 1)

	)

110 
	#UART_LSR_PE
 (1 << 2)

	)

111 
	#UART_LSR_FE
 (1 << 3)

	)

112 
	#UART_LSR_BI
 (1 << 4)

	)

113 
	#UART_LSR_THRE
 (1 << 5)

	)

114 
	#UART_LSR_TEMT
 (1 << 6)

	)

115 
	#UART_LSR_FIFOERR
 (1 << 7)

	)

118 
	#UART_MSR_DCTS
 (1 << 0)

	)

119 
	#UART_MSR_DDSR
 (1 << 1)

	)

120 
	#UART_MSR_TERI
 (1 << 2)

	)

121 
	#UART_MSR_DDCD
 (1 << 3)

	)

122 
	#UART_MSR_CTS
 (1 << 4)

	)

123 
	#UART_MSR_DSR
 (1 << 5)

	)

124 
	#UART_MSR_RI
 (1 << 6)

	)

125 
	#UART_MSR_DCD
 (1 << 7)

	)

128 
	#UART_EFR_EN
 (1 << 4)

	)

129 
	#UART_EFR_AUTO_RTS
 (1 << 6)

	)

130 
	#UART_EFR_AUTO_CTS
 (1 << 7)

	)

131 
	#UART_EFR_SW_CTRL_MASK
 (0x‡<< 0)

	)

133 
	#UART_EFR_NO_SW_CTRL
 (0)

	)

134 
	#UART_EFR_NO_FLOW_CTRL
 (0)

	)

135 
	#UART_EFR_AUTO_RTSCTS
 (
UART_EFR_AUTO_RTS
|
UART_EFR_AUTO_CTS
)

	)

136 
	#UART_EFR_XON1_XOFF1
 (0xaË

	)

137 
	#UART_EFR_XON2_XOFF2
 (0x5Ë

	)

138 
	#UART_EFR_XON12_XOFF12
 (0xfË

	)

141 
	#UART_EFR_XON1_XOFF1_MASK
 (0xa)

	)

142 
	#UART_EFR_XON2_XOFF2_MASK
 (0x5)

	)

145 
	#UART_IIR_NO_INT_PENDING
 (0x01)

	)

146 
	#UART_IIR_RLS
 (0x06Ë

	)

147 
	#UART_IIR_RDA
 (0x04Ë

	)

148 
	#UART_IIR_CTI
 (0x0CË

	)

149 
	#UART_IIR_THRE
 (0x02Ë

	)

151 
	#UART_IIR_MS
 (0x00Ë

	)

152 
	#UART_IIR_SW_FLOW_CTRL
 (0x10Ë

	)

153 
	#UART_IIR_HW_FLOW_CTRL
 (0x20Ë

	)

154 
	#UART_IIR_FIFO_EN
 (0xc0)

	)

155 
	#UART_IIR_INT_MASK
 (0x1f)

	)

158 
	#UART_RATE_FIX
 (1 << 0)

	)

161 
	#UART_FREQ_SEL
 (1 << 1)

	)

163 
	#UART_RATE_FIX_13M
 (1 << 0Ë

	)

164 
	#UART_AUTORATE_FIX_13M
 (1 << 1)

	)

165 
	#UART_FREQ_SEL_13M
 (1 << 2)

	)

166 
	#UART_RATE_FIX_ALL_13M
 (
UART_RATE_FIX_13M
|
UART_AUTORATE_FIX_13M
| \

167 
UART_FREQ_SEL_13M
)

	)

169 
	#UART_RATE_FIX_26M
 (0 << 0Ë

	)

170 
	#UART_AUTORATE_FIX_26M
 (0 << 1)

	)

171 
	#UART_FREQ_SEL_26M
 (0 << 2)

	)

172 
	#UART_RATE_FIX_ALL_26M
 (
UART_RATE_FIX_26M
|
UART_AUTORATE_FIX_26M
| \

173 
UART_FREQ_SEL_26M
)

	)

175 
	#UART_RATE_FIX_32M5
 (0 << 0Ë

	)

176 
	#UART_FREQ_SEL_32M5
 (0 << 1)

	)

177 
	#UART_RATE_FIX_ALL_32M5
 (
UART_RATE_FIX_32M5
|
UART_FREQ_SEL_32M5
)

	)

179 
	#UART_RATE_FIX_16M25
 (0 << 0Ë

	)

180 
	#UART_FREQ_SEL_16M25
 (0 << 1)

	)

181 
	#UART_RATE_FIX_ALL_16M25
 (
UART_RATE_FIX_16M25
|
UART_FREQ_SEL_16M25
)

	)

185 
	#UART_AUTOBADUSAM_13M
 7

	)

186 
	#UART_AUTOBADUSAM_26M
 15

	)

187 
	#UART_AUTOBADUSAM_52M
 31

	)

189 
	#UART_AUTOBAUDSAM_58_5M
 31

	)

192 
	#UART_VFIFO_ON
 (1 << 0)

	)

193 
	#UART_FCR_FIFOE
 (1 << 0)

	)

194 
	#UART_FCR_FIFO_INIT
 (
UART_FCR_FIFOE
|
UART_FCR_CLRR
|
UART_FCR_CLRT
)

	)

199 
	mUART1
 = 
UART0_BASE
,

200 
	mUART2
 = 
UART1_BASE
,

201 
	mUART3
 = 
UART2_BASE
,

202 
	mUART4
 = 
UART3_BASE


203 } 
	tMT65XX_UART
;

205 
	#PLL_ON_UART_CLOCK
 (13500000)

206 
	#PLL_OFF_UART_CLOCK
 (13500000)

207 

	)

209 
	#EVB_UART_CLOCK
 (26000000)

	)

210 
	#FPGA_UART_CLOCK
 (12000000)

	)

212 
mtk_u¨t_öô
 (
U32
 
u¨t_p‹t
, U32 
u¨t˛k
, U32 
baudøã
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/include/plat_macros.S

31 
	~<gic_v2.h
>

32 
	~"../∂©_def.h
"

34 .
	g£˘i⁄
 .
	grod©a
.
	ggic_ªg_«me
, "aS"

35 
	ggic_ªgs
: .
asciz
 "gic_iar", "gic_ctlr", ""

38 
	#GIC_REG_SIZE
 (2 * 8)

	)

45 .
ma¸o
 
∂©_¥öt_gic_ªgs


46 
mov
 
	gx0
, #CONFIG_GICC_ADDR

47 
bl
 
mt_gë_cfgv¨


49 
ldr
 
	gw1
, [
x0
, #GICC_IAR]

50 
ldr
 
	gw2
, [
x0
, #GICD_CTLR]

51 
sub
 
	g•
, sp, #GIC_REG_SIZE

52 
°p
 
	gx1
, 
	gx2
, [
•
]

53 
adr
 
	gx0
, 
gic_ªgs


54 
mov
 
	gx1
, 
•


55 
bl
 
¥öt_°rög_vÆue


56 
add
 
	g•
, sp, #GIC_REG_SIZE

57 .
	gídm


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/include/platform_def.h

31 #i‚de‡
__PLATFORM_DEF_H__


32 
	#__PLATFORM_DEF_H__


	)

34 
	~<¨ch.h
>

36 
	#CFG_FPGA_PLATFORM
 0

	)

37 
	#PLAT_USE_EL1_AARCH32


	)

42 
	#PLATFORM_LINKER_FORMAT
 "ñf64-lôéó¨ch64"

	)

43 
	#PLATFORM_LINKER_ARCH
 
Ørch64


	)

50 
	#PLATFORM_STACK_SIZE
 0x800

	)

53 #i‡
DEBUG


54 
	#PCPU_DV_MEM_STACK_SIZE
 0x400

	)

56 
	#PCPU_DV_MEM_STACK_SIZE
 0x300

	)

59 
	#FIRMWARE_WELCOME_STR
 "BoŸög MTKÅru°ed fúmw¨êBL31\n\r"

	)

62 
	#BL2_IMAGE_NAME
 "bl2.bö"

	)

65 
	#BL31_IMAGE_NAME
 "bl31.bö"

	)

68 
	#BL32_IMAGE_NAME
 "bl32.bö"

	)

71 
	#BL33_IMAGE_NAME
 "bl33.bö"

	)

73 
	#PLATFORM_CACHE_LINE_SIZE
 64

	)

74 
	#PLATFORM_CLUSTER_COUNT
 2uŒ

	)

75 
	#PLATFORM_CLUSTER0_CORE_COUNT
 4

	)

76 
	#PLATFORM_CLUSTER1_CORE_COUNT
 4

	)

77 
	#PLATFORM_CORE_COUNT
 (
PLATFORM_CLUSTER1_CORE_COUNT
 + \

78 
PLATFORM_CLUSTER0_CORE_COUNT
)

	)

79 
	#PLATFORM_MAX_CPUS_PER_CLUSTER
 4

	)

80 
	#PRIMARY_CPU
 0x0

	)

81 
	#MAX_IO_DEVICES
 3

	)

82 
	#MAX_IO_HANDLES
 4

	)

87 
	#TZROM_BASE
 0x00000000

	)

88 
	#TZROM_SIZE
 0x04000000

	)

92 
	#ATF_ARG_BASE
 (0x00100000)

	)

93 
	#ATF_ARG_SIZE
 (0x10000)

	)

96 
	#TZRAM_BASE
 (0x48000000)

	)

97 
	#TZRAM_SIZE
 0x20000

	)

99 
	#TZRAM2_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

100 
	#TZRAM2_SIZE
 0x10000

	)

103 
	#TZDRAM_BASE
 0x40020000

	)

104 
	#TZDRAM_SIZE
 0x0000C000

	)

111 
	#BL1_RO_BASE
 
TZROM_BASE


	)

112 
	#BL1_RO_LIMIT
 (
TZROM_BASE
 + 
TZROM_SIZE
)

	)

113 
	#BL1_RW_BASE
 
TZRAM_BASE


	)

114 
	#BL1_RW_LIMIT
 
BL31_BASE


	)

119 
	#BL2_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0xc000)

	)

120 
	#BL2_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

125 
	#BL31_BASE
 (
TZRAM_BASE
 + 0x1000)

	)

126 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


127 
	#BL31_LIMIT
 (
TZRAM_BASE
 + 
TZRAM_SIZE
)

	)

128 
	#TZRAM2_LIMIT
 (
TZRAM2_BASE
 + 
TZRAM2_SIZE
)

	)

130 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


131 
	#BL31_LIMIT
 
BL2_BASE


	)

140 
	#TSP_IN_TZRAM
 0

	)

141 
	#TSP_IN_TZDRAM
 1

	)

143 #i‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZRAM


144 
	#TSP_SEC_MEM_BASE
 
TZRAM_BASE


	)

145 
	#TSP_SEC_MEM_SIZE
 
TZRAM_SIZE


	)

146 
	#BL32_BASE
 (
TZRAM_BASE
 + 
TZRAM_SIZE
 - 0x00000)

	)

147 
	#BL32_LIMIT
 
BL2_BASE


	)

148 #ñi‡
TSP_RAM_LOCATION_ID
 =
TSP_IN_TZDRAM


149 
	#TSP_SEC_MEM_BASE
 
TZDRAM_BASE


	)

150 
	#TSP_SEC_MEM_SIZE
 
TZDRAM_SIZE


	)

151 
	#BL32_BASE
 (
TZDRAM_BASE
 + 0x2000)

	)

152 
	#BL32_LIMIT
 (
TZDRAM_BASE
 + (1 << 21))

	)

160 
	#ADDR_SPACE_SIZE
 (1uŒ << 32)

	)

161 
	#MAX_XLAT_TABLES
 8

	)

162 
	#MAX_MMAP_REGIONS
 16

	)

167 
	#IRQ_SEC_PHY_TIMER
 29

	)

169 
	#IO_PHYS
 (0x10000000)

	)

171 
	#INFRACFG_AO_BASE
 (
IO_PHYS
 + 0x0000)

	)

172 
	#MCUCFG_BASE
 (
IO_PHYS
 + 0x00200000)

	)

177 
	#BOOTROM_BOOT_ADDR
 (
INFRACFG_AO_BASE
 + 0x800)

	)

178 
	#BOOTROM_SEC_CTRL
 (
INFRACFG_AO_BASE
 + 0x804)

	)

179 
	#SW_ROM_PD
 (1U << 31)

	)

182 
	#MP0_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MCUCFG_BASE
 + 0x38 + ((˝uË* 8))

	)

183 
	#MP1_MISC_CONFIG_BOOT_ADDR
(
˝u
Ë(
MCUCFG_BASE
 + 0x238 + ((˝uË* 8))

	)

184 
	#MP0_MISC_CONFIG3
 (
MCUCFG_BASE
 + 0x3c)

	)

186 
	#MP0_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0030)

	)

187 
	#MP0_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0054)

	)

188 
	#MP1_MISC_CONFIG0
 (
MCUCFG_BASE
 + 0x0230)

	)

189 
	#MP1_MISC_CONFIG9
 (
MCUCFG_BASE
 + 0x0254)

	)

194 
	#MP0_AXI_CONFIG
 (
MCUCFG_BASE
 + 0x002C)

	)

195 
	#MP1_AXI_CONFIG
 (
MCUCFG_BASE
 + 0x022C)

	)

196 
	#ACINACTM
 (1U << 4)

	)

207 
	#CACHE_WRITEBACK_SHIFT
 6

	)

208 
	#CACHE_WRITEBACK_GRANULE
 (1 << 
CACHE_WRITEBACK_SHIFT
)

	)

211 
	#WDT_IRQ_BIT_ID
 (160)

	)

212 
	#FIQ_SMP_CALL_SGI
 13

	)

213 
	#ATF_LOG_IRQ_ID
 281

	)

215 
	#MP0_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0)

	)

216 
	#MP1_CA7L_CACHE_CONFIG
 (
MCUCFG_BASE
 + 0x200)

	)

217 
	#L2RSTDISABLE
 (1 << 4)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/include/power_tracer.h

1 #i‚de‡
__TRACER_H_


2 
	#__TRACER_H_


	)

4 
	#CPU_UP
 0

	)

5 
	#CPU_DOWN
 1

	)

6 
	#CPU_SUSPEND
 2

	)

7 
	#CLUSTER_UP
 3

	)

8 
	#CLUSTER_DOWN
 4

	)

9 
	#CLUSTER_SUSPEND
 5

	)

11 
åa˚_powî_Êow
(
mpidr
, 
mode
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/include/scu.h

2 #i‚de‡
__SCU_H__


3 
	#__SCU_H__


	)

5 
dißbÀ_scu
(
mpidr
);

6 
íabÀ_scu
(
mpidr
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/include/tbase_platform.h

12 #i‚de‡
__TBASE_PLATFORM_H__


13 
	#__TBASE_PLATFORM_H__


	)

15 
	~<bl_comm⁄.h
>

16 
	~<tba£_¥iv©e.h
>

17 
	~<∂©_def.h
>

21 
	#TBASE_PM_ENABLE
 1

	)

23 
	#TBASE_SIP_ROUTE_ENABLE
 0

	)

25 
	#TBASE_OEM_ROUTE_ENABLE
 0

	)

28 
	#TEE_PARAMS
 (((
©f_¨g_t_±r
)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
)->
ãe_boŸ_¨g_addr
)

	)

30 
	#TBASE_NWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamBa£
)

	)

31 
	#TBASE_NWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
dRamSize
)

	)

32 
	#TBASE_SWD_DRAM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
+
TBASE_SWD_IMEM_SIZE
)

	)

33 
	#TBASE_SWD_DRAM_SIZE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamSize
-
TBASE_SWD_IMEM_SIZE
)

	)

34 
	#TBASE_SWD_IMEM_BASE
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
£cDRamBa£
)

	)

35 
	#TBASE_SWD_IMEM_SIZE
 (2*1024*1024)

	)

36 
	#TBASE_GIC_DIST_BASE
 (
BASE_GICD_BASE
)

	)

37 
	#TBASE_GIC_CPU_BASE
 (
BASE_GICC_BASE
)

	)

39 
	#TBASE_GIC_VERSION
 (2)

	)

40 
	#TBASE_SPI_COUNT
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
tŸÆ_numbî_•i
)

	)

41 
	#TBASE_SSIQ_NRO
 (((
boŸCfg_t
*)(
uöçå_t
)
TEE_PARAMS
)->
ssiq_numbî
)

	)

43 
	#TBASE_MONITOR_FLAGS
 (
TBASE_MONITOR_FLAGS_DEFAULT
)

	)

46 
	#TBASE_MAX_MONITOR_CALL_REGS
 
TBASE_MONITOR_CALL_REGS_MIN


	)

47 
	#TBASE_NWD_REGISTER_COUNT
 
TBASE_NWD_REGISTERS_MIN


	)

51 
	#TBASE_REGISTER_FILE_MMU_FLAGS
 (
	`LOWER_ATTRS
(
ATTR_IWBWA_OWBWA_NTR_INDEX
 | 
ISH
 | 
AP_RW
) |\

52 
	`UPPER_ATTRS
(
XN
) | \

53 
LEVEL3
)

	)

60 #i‚de‡
__ASSEMBLY__


61 
mt_log_£cuª_os_¥öt
(
c
);

63 
	#TBASE_OUTPUT_PUTC
(
c
Ë
	`mt_log_£cuª_os_¥öt
(c)

	)

66 
	#TBASE_EXECUTION_STATUS
(
°©us
)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/mailbox.c

1 
	~"∂©_¥iv©e.h
"

3 
maûbox_t
 
	gmt_mbox
[
PLATFORM_CORE_COUNT
];

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_def.h

31 #i‚de‡
__PLAT_DEF_H__


32 
	#__PLAT_DEF_H__


	)

34 
	~<∂©f‹m_def.h
>

38 
	#FIP_IMAGE_NAME
 "fù.bö"

	)

41 
	#CONFIG_GICD_ADDR
 0

	)

42 
	#CONFIG_GICC_ADDR
 1

	)

43 
	#CONFIG_GICH_ADDR
 2

	)

44 
	#CONFIG_GICV_ADDR
 3

	)

45 
	#CONFIG_MAX_AFF0
 4

	)

46 
	#CONFIG_MAX_AFF1
 5

	)

48 
	#CONFIG_CPU_SETUP
 6

	)

49 
	#CONFIG_BASE_MMAP
 7

	)

51 
	#CONFIG_HAS_CCI
 8

	)

52 
	#CONFIG_HAS_TZC
 9

	)

53 
	#CONFIG_LIMIT
 10

	)

59 
	#FLASH0_BASE
 0x08000000

	)

60 
	#FLASH0_SIZE
 
TZROM_SIZE


	)

83 
	#MTK_DEVICE_BASE
 0x11000000

84 
	#MTK_DEVICE_SIZE
 0x1000000

	)

86 
	#MT_DEV_BASE
 0x10000000

	)

87 
	#MT_DEV_SIZE
 0x400000

	)

89 
	#MT_GIC_BASE
 0x10220000

	)

91 #i‚de‡
__ASSEMBLY__


92 
mt_mbox
[];

94 
	#MBOX_OFF
 
mt_mbox


	)

97 
	#PARAMS_BASE
 
TZDRAM_BASE


	)

99 
	#DRAM1_BASE
 0x41000000uŒ

	)

100 
	#DRAM1_SIZE
 0x1E000000uŒ

	)

101 
	#DRAM1_END
 (
DRAM1_BASE
 + 
DRAM1_SIZE
 - 1)

	)

102 
	#DRAM1_SEC_SIZE
 0x01000000uŒ

	)

104 
	#DRAM_BASE
 
DRAM1_BASE


	)

105 
	#DRAM_SIZE
 
DRAM1_SIZE


	)

107 
	#DRAM2_BASE
 0x880000000uŒ

	)

108 
	#DRAM2_SIZE
 0x780000000uŒ

	)

109 
	#DRAM2_END
 (
DRAM2_BASE
 + 
DRAM2_SIZE
 - 1)

	)

111 
	#PCIE_EXP_BASE
 0x40000000

	)

112 
	#TZRNG_BASE
 0x7„60000

	)

113 
	#TZNVCTR_BASE
 0x7„70000

	)

114 
	#TZROOTKEY_BASE
 0x7„80000

	)

118 
	#VE_SYSREGS_BASE
 0x1c010000

119 
	#V2M_SYS_ID
 0x0

	)

120 
	#V2M_SYS_LED
 0x8

	)

121 
	#V2M_SYS_CFGDATA
 0xa0

	)

122 
	#V2M_SYS_CFGCTRL
 0xa4

	)

126 
	#NS_IMAGE_OFFSET
 0x41E00000

	)

130 
	#MT_BL31_PLAT_PARAM_VAL
 0x0f1e2d3c4b5a6978ULL

	)

142 
	#SYS_LED_SS_SHIFT
 0x0

	)

143 
	#SYS_LED_EL_SHIFT
 0x1

	)

144 
	#SYS_LED_EC_SHIFT
 0x3

	)

146 
	#SYS_LED_SS_MASK
 0x1

	)

147 
	#SYS_LED_EL_MASK
 0x3

	)

148 
	#SYS_LED_EC_MASK
 0x1f

	)

151 
	#SYS_ID_REV_SHIFT
 27

	)

152 
	#SYS_ID_HBI_SHIFT
 16

	)

153 
	#SYS_ID_BLD_SHIFT
 12

	)

154 
	#SYS_ID_ARCH_SHIFT
 8

	)

155 
	#SYS_ID_FPGA_SHIFT
 0

	)

157 
	#SYS_ID_REV_MASK
 0xf

	)

158 
	#SYS_ID_HBI_MASK
 0xfff

	)

159 
	#SYS_ID_BLD_MASK
 0xf

	)

160 
	#SYS_ID_ARCH_MASK
 0xf

	)

161 
	#SYS_ID_FPGA_MASK
 0xff

	)

163 
	#SYS_ID_BLD_LENGTH
 4

	)

165 
	#REV_MT
 0x0

	)

166 
	#HBI_MT_BASE
 0x020

	)

167 
	#HBI_FOUNDATION
 0x010

	)

169 
	#BLD_GIC_VE_MMAP
 0x0

	)

170 
	#BLD_GIC_A53A57_MMAP
 0x1

	)

172 
	#ARCH_MODEL
 0x1

	)

175 
	#PWRC_BASE
 0x1c100000

176 
	#PPOFFR_OFF
 0x0

177 

	)

182 
	#CCI400_BASE
 0x10390000

183 
	#CCI400_SL_IFACE_CLUSTER0
 4

	)

184 
	#CCI400_SL_IFACE_CLUSTER1
 3

	)

185 
	#CCI400_SL_IFACE_INDEX
(
mpidr
Ë(mpid∏& 
MPIDR_CLUSTER_MASK
 ? \

186 
CCI400_SL_IFACE_CLUSTER1
 : \

187 
CCI400_SL_IFACE_CLUSTER0
)

	)

188 
	#CCI_SEC_ACCESS_OFFSET
 (0x8)

	)

196 
	#VE_GICC_BASE
 0x2c002000

199 

	)

201 
	#BASE_GICD_BASE
 (
MT_GIC_BASE
 + 0x1000)

	)

203 
	#BASE_GICC_BASE
 (
MT_GIC_BASE
 + 0x2000)

	)

204 
	#BASE_GICH_BASE
 (
MT_GIC_BASE
 + 0x4000)

	)

205 
	#BASE_GICV_BASE
 (
MT_GIC_BASE
 + 0x6000)

	)

206 
	#INT_POL_CTL0
 0x10200620

	)

208 
	#MT_EDGE_SENSITIVE
 1

	)

209 
	#MT_LEVEL_SENSITIVE
 0

	)

210 
	#MT_POLARITY_LOW
 0

	)

211 
	#MT_POLARITY_HIGH
 1

	)

214 
	#GIC_PRIVATE_SIGNALS
 (32)

	)

215 
	#NR_GIC_SGI
 (16)

	)

216 
	#NR_GIC_PPI
 (16)

	)

217 
	#GIC_PPI_OFFSET
 (27)

	)

218 
	#MT_NR_PPI
 (5)

	)

219 
	#MT_NR_SPI
 (241)

	)

220 
	#NR_MT_IRQ_LINE
 (
GIC_PPI_OFFSET
 + 
MT_NR_PPI
 + 
MT_NR_SPI
)

	)

223 
	#IRQ_SEC_PHY_TIMER
 29

	)

224 
	#IRQ_SEC_SGI_0
 8

	)

225 
	#IRQ_SEC_SGI_1
 9

	)

226 
	#IRQ_SEC_SGI_2
 10

	)

227 
	#IRQ_SEC_SGI_3
 11

	)

228 
	#IRQ_SEC_SGI_4
 12

	)

229 
	#IRQ_SEC_SGI_5
 13

	)

230 
	#IRQ_SEC_SGI_6
 14

	)

231 
	#IRQ_SEC_SGI_7
 15

	)

232 
	#IRQ_SEC_SGI_8
 16

	)

237 
	#PAGE_ADDR_MASK
 (0xFFF00000)

	)

239 
	#UART0_BASE
 (
IO_PHYS
 + 0x01002000)

	)

240 
	#UART1_BASE
 (
IO_PHYS
 + 0x01003000)

	)

241 
	#UART2_BASE
 (
IO_PHYS
 + 0x01004000)

	)

242 
	#UART3_BASE
 (
IO_PHYS
 + 0x01005000)

	)

243 
	#PERICFG_BASE
 (
IO_PHYS
 + 0x2000)

	)

252 
	#MT_AID_WIDTH
 4

	)

255 
	#MT_NSAID_DEFAULT
 0

	)

256 
	#MT_NSAID_PCI
 1

	)

257 
	#MT_NSAID_VIRTIO
 8

	)

258 
	#MT_NSAID_AP
 9

	)

259 
	#MT_NSAID_VIRTIO_OLD
 15

	)

262 
	#MT_NSAID_HDLCD0
 2

	)

263 
	#MT_NSAID_CLCD
 7

	)

268 
	#TRNG_ba£
 (0x1020F000)

269 
	#TRNG_BASE_ADDR
 
TRNG_ba£


	)

270 
	#TRNG_BASE_SIZE
 (0x1000)

	)

271 
	#TRNG_CTRL
 (
TRNG_ba£
+0x0000)

	)

272 
	#TRNG_TIME
 (
TRNG_ba£
+0x0004)

	)

273 
	#TRNG_DATA
 (
TRNG_ba£
+0x0008)

	)

274 
	#TRNG_PDN_ba£
 (0x10000040)

	)

275 
	#TRNG_PDN_BASE_ADDR
 (0x10000000)

	)

276 
	#TRNG_PDN_BASE_SIZE
 (0x1000)

	)

277 
	#TRNG_PDN_SET
 (
TRNG_PDN_ba£
 +0x0000)

	)

278 
	#TRNG_PDN_CLR
 (
TRNG_PDN_ba£
 +0x0004)

	)

279 
	#TRNG_PDN_STATUS
 (
TRNG_PDN_ba£
 +0x0008)

	)

280 
	#TRNG_CTRL_RDY
 0x80000000

	)

281 
	#TRNG_CTRL_START
 0x00000001

	)

286 
	#MTK_WDT_BASE
 (
IO_PHYS
 + 0x00212000)

	)

287 
	#MTK_WDT_SIZE
 (0x1000)

	)

288 
	#MTK_WDT_MODE
 (
MTK_WDT_BASE
+0x0000)

	)

289 
	#MTK_WDT_LENGTH
 (
MTK_WDT_BASE
+0x0004)

	)

290 
	#MTK_WDT_RESTART
 (
MTK_WDT_BASE
+0x0008)

	)

291 
	#MTK_WDT_STATUS
 (
MTK_WDT_BASE
+0x000C)

	)

292 
	#MTK_WDT_INTERVAL
 (
MTK_WDT_BASE
+0x0010)

	)

293 
	#MTK_WDT_SWRST
 (
MTK_WDT_BASE
+0x0014)

	)

294 
	#MTK_WDT_SWSYSRST
 (
MTK_WDT_BASE
+0x0018)

	)

295 
	#MTK_WDT_NONRST_REG
 (
MTK_WDT_BASE
+0x0020)

	)

296 
	#MTK_WDT_NONRST_REG2
 (
MTK_WDT_BASE
+0x0024)

	)

297 
	#MTK_WDT_REQ_MODE
 (
MTK_WDT_BASE
+0x0030)

	)

298 
	#MTK_WDT_REQ_IRQ_EN
 (
MTK_WDT_BASE
+0x0034)

	)

299 
	#MTK_WDT_DEBUG_CTL
 (
MTK_WDT_BASE
+0x0040)

	)

302 
	#MTK_WDT_STATUS_HWWDT_RST
 (0x80000000)

	)

303 
	#MTK_WDT_STATUS_SWWDT_RST
 (0x40000000)

	)

304 
	#MTK_WDT_STATUS_IRQWDT_RST
 (0x20000000)

	)

305 
	#MTK_WDT_STATUS_DEBUGWDT_RST
 (0x00080000)

	)

306 
	#MTK_WDT_STATUS_SPMWDT_RST
 (0x0002)

	)

307 
	#MTK_WDT_STATUS_SPM_THERMAL_RST
 (0x0001)

	)

308 
	#MTK_WDT_STATUS_THERMAL_DIRECT_RST
 (1<<18)

	)

309 
	#MTK_WDT_STATUS_SECURITY_RST
 (1<<28)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_gic.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<debug.h
>

35 
	~<gic_v2.h
>

36 
	~<gic_v3.h
>

37 
	~<öãºu±_mgmt.h
>

38 
	~<∂©f‹m.h
>

39 
	~<°döt.h
>

40 
	~"∂©_def.h
"

41 
	~"∂©_¥iv©e.h
"

42 
	~<∂©f‹m_def.h
>

43 
	~<°dio.h
>

45 #i‚de‡
MAX_GIC_NR


46 
	#MAX_GIC_NR
 1

	)

49 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

52 
	sgic_chù_d©a
 {

53 
	mßved_•i_íabÀ
[
DIV_ROUND_UP
(320, 32)];

54 
	mßved_•i_c⁄f
[
DIV_ROUND_UP
(320, 16)];

55 
	mßved_•i_èrgë
[
DIV_ROUND_UP
(320, 4)];

56 
	mßved_•i_group
[
DIV_ROUND_UP
(320, 32)];

66 
gic_chù_d©a
 
	ggic_d©a
[
MAX_GIC_NR
];

69 
	$gic_di°_ßve
()

71 
gic_úqs
;

72 
di°_ba£
;

73 
i
;

75 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

77 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

79 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

80 
gic_d©a
[0].
ßved_•i_c⁄f
[
i
] =

81 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4);

83 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

84 
gic_d©a
[0].
ßved_•i_èrgë
[
i
] =

85 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4);

87 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

88 
gic_d©a
[0].
ßved_•i_íabÀ
[
i
] =

89 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4);

91 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

92 
gic_d©a
[0].
ßved_•i_group
[
i
] =

93 
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4);

94 
	}
}

96 
	$gic_di°_ª°‹e
()

98 
gic_úqs
;

99 
di°_ba£
;

100 
˘Ã
;

101 
i
;

103 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

105 
gic_úqs
 = 32 * ((
	`gicd_ªad_ty≥r
(
di°_ba£
Ë& 
IT_LINES_NO_MASK
) + 1);

108 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
di°_ba£
);

109 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

110 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
);

113 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 16); i++)

114 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_c⁄f
[i]);

119 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 4); i++)

120 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ITARGETSR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_èrgë
[i]);

122 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

123 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_íabÀ
[i]);

125 
i
 = 0; i < 
	`DIV_ROUND_UP
(
gic_úqs
, 32); i++)

126 
	`mmio_wrôe_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
i
 * 4, 
gic_d©a
[0].
ßved_•i_group
[i]);

128 
	`gicd_wrôe_˘Ã
(
di°_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

129 
	}
}

181 
	$úq_øi£_so·úq
(
m≠
, 
úq
)

183 
ßâ
;

185 
ßâ
 = 1 << 15;

187 if(
	`∂©_ic_gë_öãºu±_ty≥
(
úq
Ë=
INTR_TYPE_S_EL1
)

189 
ßâ
 = 0;

192 
	`gicd_wrôe_sgú
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), (
m≠
 << 16Ë| 
ßâ
 | 
úq
);

194 
	`dsb
();

195 
	}
}

197 
	$gë_ack_öfo
()

199  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

200 
	}
}

202 
	$ack_sgi
(
ür
)

204 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
ür
);

205 
	}
}

207 
	$mt_©f_åiggî_úq
()

209 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
ATF_LOG_IRQ_ID
);

210 
	}
}

212 
	$mask_wdt_fiq
()

214 
	`gicd_£t_i˚«bÀr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

215 
	}
}

222 
	$mt_©f_åiggî_WDT_FIQ
()

224 
	`gicd_£t_i•ídr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
WDT_IRQ_BIT_ID
);

225 
	}
}

233 
	$gicv3_˝uif_£tup
()

235 
s¸_vÆ
, 
vÆ
;

236 
uöçå_t
 
ba£
;

246 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

247 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

251 
	`∑nic
();

254 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

256 
vÆ
 &~
WAKER_PS
;

257 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

258 
	`dsb
();

261 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

262 
vÆ
 & 
WAKER_CA
) {

263 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

270 
s¸_vÆ
 = 
	`ªad_s¸
();

271 
	`wrôe_s¸
(
s¸_vÆ
 | 
SCR_NS_BIT
);

272 
	`isb
();

283 
vÆ
 = 
	`ªad_icc_§e_ñ3
();

284 
	`wrôe_icc_§e_ñ3
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

286 
vÆ
 = 
	`ªad_icc_§e_ñ2
();

287 
	`wrôe_icc_§e_ñ2
(
vÆ
 | 
ICC_SRE_EN
 | 
ICC_SRE_SRE
);

289 
	`wrôe_icc_pmr_ñ1
(
GIC_PRI_MASK
);

290 
	`isb
();

293 
	`wrôe_s¸
(
s¸_vÆ
);

294 
	`isb
();

295 
	}
}

301 
	$gicv3_˝uif_dó˘iv©e
()

303 
vÆ
;

304 
uöçå_t
 
ba£
;

313 
ba£
 = 
	`gicv3_gë_rdi°
(
BASE_GICR_BASE
, 
	`ªad_mpidr
());

314 i‡(
ba£
 =(
uöçå_t
)
NULL
) {

318 
	`∑nic
();

321 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

322 
vÆ
 |
WAKER_PS
;

323 
	`gi¸_wrôe_wakî
(
ba£
, 
vÆ
);

324 
	`dsb
();

327 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

328 (
vÆ
 & 
WAKER_CA
) == 0) {

329 
vÆ
 = 
	`gi¸_ªad_wakî
(
ba£
);

331 
	}
}

338 
	$gic_˝uif_£tup
(
gicc_ba£
)

340 
vÆ
;

343 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

351 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

352 
	`gicv3_˝uif_£tup
();

355 
vÆ
 = 
ENABLE_GRP0
 | 
ENABLE_GRP1
 | 
FIQ_EN
 | 
FIQ_BYP_DIS_GRP0
;

356 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
FIQ_BYP_DIS_GRP1
 | 
IRQ_BYP_DIS_GRP1
;

359 
	`gicc_wrôe_pmr
(
gicc_ba£
, 0x1 << 7);

360 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

362 
	}
}

368 
	$gic_˝uif_dó˘iv©e
(
gicc_ba£
)

370 
vÆ
;

373 
vÆ
 = 
	`gicc_ªad_˘Ã
(
gicc_ba£
);

374 
vÆ
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

375 
vÆ
 |
FIQ_BYP_DIS_GRP1
 | 
FIQ_BYP_DIS_GRP0
;

376 
vÆ
 |
IRQ_BYP_DIS_GRP0
 | 
IRQ_BYP_DIS_GRP1
;

377 
	`gicc_wrôe_˘Ã
(
gicc_ba£
, 
vÆ
);

379 
vÆ
 = 
	`gicc_ªad_iidr
(
gicc_ba£
);

386 i‡(((
vÆ
 >> 
GICC_IIDR_ARCH_SHIFT
Ë& 
GICC_IIDR_ARCH_MASK
) >= 3) {

387 
	`gicv3_˝uif_dó˘iv©e
();

390 
	}
}

396 
	$gic_p˝u_di°if_£tup
(
gicd_ba£
)

398 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 0, ~0);

401 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

402 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
, 
GIC_HIGHEST_SEC_PRIORITY
);

403 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
FIQ_SMP_CALL_SGI
);

406 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

407 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

408 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

409 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

410 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

411 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

412 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

413 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

414 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

416 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
, 
GIC_HIGHEST_SEC_PRIORITY
);

417 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
, 
GIC_HIGHEST_SEC_PRIORITY
);

418 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
, 
GIC_HIGHEST_SEC_PRIORITY
);

419 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
, 
GIC_HIGHEST_SEC_PRIORITY
);

420 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
, 
GIC_HIGHEST_SEC_PRIORITY
);

421 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
, 
GIC_HIGHEST_SEC_PRIORITY
);

422 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
, 
GIC_HIGHEST_SEC_PRIORITY
);

423 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
, 
GIC_HIGHEST_SEC_PRIORITY
);

424 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
, 
GIC_HIGHEST_SEC_PRIORITY
);

426 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_PHY_TIMER
);

427 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_0
);

428 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_1
);

429 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_2
);

430 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_3
);

431 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_4
);

432 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_5
);

433 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_6
);

434 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_SEC_SGI_7
);

436 
	}
}

438 
	$mt_úq_£t_pﬁ¨ôy
(
úq
, 
pﬁ¨ôy
)

441 
off£t
, 
ªg_ödex
, 
vÆue
;

450 
off£t
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) & 0x1F;

451 
ªg_ödex
 = (
úq
 - 
GIC_PRIVATE_SIGNALS
) >> 5;

453 i‡(
pﬁ¨ôy
 == 0) {

455 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

456 
vÆue
 |(1 << 
off£t
);

457 
	`mmio_wrôe_32
((
INT_POL_CTL0
 + (
ªg_ödex
 * 4)), 
vÆue
);

460 
vÆue
 = 
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4));

461 
vÆue
 &~(0x1 << 
off£t
);

462 
	`mmio_wrôe_32
(
INT_POL_CTL0
 + (
ªg_ödex
 * 4), 
vÆue
);

464 
	}
}

467 
	$mt_úq_£t_£ns
(
ba£
, 
úq
, 
£ns
)

469 
c⁄fig
;

471 i‡(
£ns
 =
MT_EDGE_SENSITIVE
)

473 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

474 
c⁄fig
 |(0x2 << (
úq
 % 16) * 2);

475 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

479 
c⁄fig
 = 
	`mmio_ªad_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16) * 4);

480 
c⁄fig
 &~(0x2 << (
úq
 % 16) * 2);

481 
	`mmio_wrôe_32
(
ba£
 + 
GICD_ICFGR
 + (
úq
 / 16Ë* 4, 
c⁄fig
);

483 
	}
}

491 
	$gic_di°if_£tup
(
gicd_ba£
)

493 
˘r
, 
num_öts
, 
˘Ã
;

496 
˘Ã
 = 
	`gicd_ªad_˘Ã
(
gicd_ba£
);

497 
˘Ã
 &~(
ENABLE_GRP0
 | 
ENABLE_GRP1
);

498 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
);

505 
num_öts
 = 
	`gicd_ªad_ty≥r
(
gicd_ba£
Ë& 
IT_LINES_NO_MASK
;

506 
num_öts
++;

507 
˘r
 = 0; cå < 
num_öts
; ctr++)

510 
	`gicd_wrôe_igrou¥
(
gicd_ba£
, 
˘r
 << 
IGROUPR_SHIFT
, ~0);

516 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

517 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
GIC_HIGHEST_SEC_PRIORITY
);

518 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
,

519 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

520 
	`mt_úq_£t_£ns
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
, 
MT_EDGE_SENSITIVE
);

523 
	`mt_úq_£t_pﬁ¨ôy
(
WDT_IRQ_BIT_ID
, 
MT_POLARITY_LOW
);

525 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
WDT_IRQ_BIT_ID
);

530 
	`gicd_˛r_igrou¥
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

531 
	`gicd_£t_ùri‹ôyr
(
gicd_ba£
, 
IRQ_TZ_WDOG
, 
GIC_HIGHEST_SEC_PRIORITY
);

532 
	`gicd_£t_ô¨gë§
(
gicd_ba£
, 
IRQ_TZ_WDOG
,

533 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
()));

534 
	`gicd_£t_i£«bÀr
(
gicd_ba£
, 
IRQ_TZ_WDOG
);

537 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

539 
	`gicd_wrôe_˘Ã
(
gicd_ba£
, 
˘Ã
 | 
ENABLE_GRP0
 | 
ENABLE_GRP1
);

540 
	}
}

543 
	$gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
)

545 
	`¥ötf
("GICD_CTLR=0x%08x\n", 
	`gicd_ªad_˘Ã
(
gicd_ba£
));

549 
	`¥ötf
("GICC_CTRL=0x%08x\n", 
	`gicc_ªad_˘Ã
(
gicc_ba£
));

550 
	`¥ötf
("GICC_PMR=0x%08x\n", 
	`gicc_ªad_pmr
(
gicc_ba£
));

551 
	}
}

554 
	$gic_£tup
()

556 
gicd_ba£
, 
gicc_ba£
;

558 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

559 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

561 
	`gic_˝uif_£tup
(
gicc_ba£
);

562 
	`gic_di°if_£tup
(
gicd_ba£
);

565 
i
, 
no_£c
;

566 
i
 = 0; i < 0xFF; i++)

568 
no_£c
 = 
	`gicd_gë_igrou¥
(
gicd_ba£
, 
i
);

569 
	`¥ötf
("úq = %d, group=0x%x(%s)\n", 
i
, 
no_£c
,Ço_sec ? "non-sec":"sec");

572 
	`gic_¥öt_Æl_£âög
(
gicd_ba£
, 
gicc_ba£
);

576 
	}
}

590 
uöt32_t
 
	$∂©_öãºu±_ty≥_to_löe
(
uöt32_t
 
ty≥
, uöt32_à
£curôy_°©e
)

592 
uöt32_t
 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

594 
	`as£π
(
ty≥
 =
INTR_TYPE_S_EL1
 ||

595 
ty≥
 =
INTR_TYPE_EL3
 ||

596 
ty≥
 =
INTR_TYPE_NS
);

598 
	`as£π
(
£curôy_°©e
 =
NON_SECURE
 || securôy_°©ê=
SECURE
);

605 #i‡
MT_GIC_ARCH
 == 2

606  
	`gicv2_öãºu±_ty≥_to_löe
(
gicc_ba£
, 
ty≥
);

610 
	}
}

612 #i‡
MT_GIC_ARCH
 == 2

618 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_ty≥
()

620 
uöt32_t
 
id
, 
gicc_ba£
;

622 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

623 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

626 i‡(
id
 < 1022)

627  
INTR_TYPE_S_EL1
;

629 i‡(
id
 =
GIC_SPURIOUS_INTERRUPT
)

630  
INTR_TYPE_INVAL
;

632  
INTR_TYPE_NS
;

633 
	}
}

640 
uöt32_t
 
	$∂©_ic_gë_≥ndög_öãºu±_id
()

642 
uöt32_t
 
id
, 
gicc_ba£
;

644 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

645 
id
 = 
	`gicc_ªad_hµú
(
gicc_ba£
) & 0x3FF;

647 i‡(
id
 < 1022)

648  
id
;

650 i‡(
id
 == 1023)

651  
INTR_ID_UNAVAILABLE
;

657  
	`gicc_ªad_ahµú
(
gicc_ba£
);

658 
	}
}

664 
uöt32_t
 
	$∂©_ic_acknowÀdge_öãºu±
()

666  
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

667 
	}
}

673 
	$∂©_ic_íd_of_öãºu±
(
uöt32_t
 
id
)

675 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
id
);

677 
	}
}

684 
uöt32_t
 
	$∂©_ic_gë_öãºu±_ty≥
(
uöt32_t
 
id
)

686 
uöt32_t
 
group
;

688 
group
 = 
	`gicd_gë_igrou¥
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
id
);

691 i‡(
group
 =
GRP0
)

692  
INTR_TYPE_S_EL1
;

694  
INTR_TYPE_NS
;

695 
	}
}

697 
uöt64_t
 
	$mt_úq_dump_°©us
(
uöt32_t
 
úq
)

699 
uöt32_t
 
di°_ba£
;

700 
bô
;

701 
uöt32_t
 
ªsu…
;

702 
uöt64_t
 
rc
 = 0;

704 
	`¥ötf
("[ATF GIC dump] irq = %d\n", 
úq
);

706 
di°_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

709 
bô
 = 1 << (
úq
 % 32);

710 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISENABLER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

711 
	`¥ötf
("[ATF GIC dump]É«bÀ = %x\n", 
ªsu…
);

712 
rc
 |
ªsu…
;

715 
bô
 = 1 << (
úq
 % 32);

717 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IGROUPR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

718 
	`¥ötf
("[ATF GIC dump] grou∞%x (0x1:úq,0x0:fiq)\n", 
ªsu…
);

719 
rc
 |
ªsu…
 << 1;

722 
bô
 = 0xf‡<< ((
úq
 % 4)*8);

723 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_IPRIORITYR
 + 
úq
 / 4 * 4Ë& 
bô
) >> ((irq % 4)*8));

724 
	`¥ötf
("[ATF GIC dump]Öri‹ôy = %x\n", 
ªsu…
);

725 
rc
 |
ªsu…
 << 2;

728 
bô
 = 0x3 << ((
úq
 % 16)*2);

730 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ICFGR
 + 
úq
 / 16 * 4Ë& 
bô
) >> ((irq % 16)*2));

731 
	`¥ötf
("[ATF GIC dump] sísôivôy = %x (edge:0x1,Üevñ:0x0)\n", 
ªsu…
>>1);

732 
rc
 |(
ªsu…
>>1) << 10;

735 
bô
 = 1 << (
úq
 % 32);

736 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISPENDR
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

737 
	`¥ötf
("[ATF GIC dump]Öídög sètu†%x\n", 
ªsu…
);

738 
rc
 |
ªsu…
 << 11;

741 
bô
 = 1 << (
úq
 % 32);

742 
ªsu…
 = ((
	`mmio_ªad_32
(
di°_ba£
 + 
GICD_ISACTIVER
 + 
úq
 / 32 * 4Ë& 
bô
)?1:0);

743 
	`¥ötf
("[ATF GIC dump]á˘ivê°©u†%x\n", 
ªsu…
);

744 
rc
 |
ªsu…
 << 12;

747 
bô
 = 1 << (
úq
 % 32);

749 
ªsu…
 = ((
	`mmio_ªad_32
(
INT_POL_CTL0
 + (
úq
-32Ë/ 32 * 4Ë& 
bô
)?1:0);

750 
	`¥ötf
("[ATF GIC dump]Öﬁ¨ôy = %x (0x0: high, 0x1:low)\n", 
ªsu…
);

751 
rc
 |
ªsu…
 << 13;

753  
rc
;

754 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_io_storage.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<io_drivî.h
>

34 
	~<io_fù.h
>

35 
	~<io_memm≠.h
>

36 
	~<io_°‹age.h
>

37 
	~<io_£miho°ög.h
>

38 
	~<£miho°ög.h
>

39 
	~<°rög.h
>

40 
	~"∂©_def.h
"

43 
io_∂©_d©a_t
 
	gio_d©a
;

44 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gsh_dev_c⁄
;

45 
uöçå_t
 
	gsh_dev_•ec
;

46 
uöçå_t
 
	gsh_öô_∑øms
;

47 
uöçå_t
 
	gsh_dev_h™dÀ
;

48 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gfù_dev_c⁄
;

49 
uöçå_t
 
	gfù_dev_•ec
;

50 
uöçå_t
 
	gfù_dev_h™dÀ
;

51 c⁄° 
io_dev_c⁄√˘‹_t
 *
	gmemm≠_dev_c⁄
;

52 
uöçå_t
 
	gmemm≠_dev_•ec
;

53 
uöçå_t
 
	gmemm≠_öô_∑øms
;

54 
uöçå_t
 
	gmemm≠_dev_h™dÀ
;

56 c⁄° 
io_block_•ec_t
 
	gfù_block_•ec
 = {

57 .
off£t
 = 
FLASH0_BASE
,

58 .
	gÀngth
 = 
FLASH0_SIZE


61 c⁄° 
io_fûe_•ec_t
 
	gbl2_fûe_•ec
 = {

62 .
∑th
 = 
BL2_IMAGE_NAME
,

63 .
	gmode
 = 
FOPEN_MODE_RB


66 c⁄° 
io_fûe_•ec_t
 
	gbl31_fûe_•ec
 = {

67 .
∑th
 = 
BL31_IMAGE_NAME
,

68 .
	gmode
 = 
FOPEN_MODE_RB


71 c⁄° 
io_fûe_•ec_t
 
	gbl32_fûe_•ec
 = {

72 .
∑th
 = 
BL32_IMAGE_NAME
,

73 .
	gmode
 = 
FOPEN_MODE_RB


76 c⁄° 
io_fûe_•ec_t
 
	gbl33_fûe_•ec
 = {

77 .
∑th
 = 
BL33_IMAGE_NAME
,

78 .
	gmode
 = 
FOPEN_MODE_RB


81 
›í_fù
(c⁄° 
uöçå_t
 
•ec
);

82 
›í_memm≠
(c⁄° 
uöçå_t
 
•ec
);

84 
	s∂©_io_pﬁicy
 {

85 *
	mimage_«me
;

86 
uöçå_t
 *
	mdev_h™dÀ
;

87 
uöçå_t
 
	mimage_•ec
;

88 (*
	mcheck
)(c⁄° 
uöçå_t
 
	m•ec
);

91 c⁄° 
∂©_io_pﬁicy
 
	gpﬁicõs
[] = {

93 
FIP_IMAGE_NAME
,

94 &
memm≠_dev_h™dÀ
,

95 (
uöçå_t
)&
fù_block_•ec
,

96 
›í_memm≠


98 
BL2_IMAGE_NAME
,

99 &
fù_dev_h™dÀ
,

100 (
uöçå_t
)&
bl2_fûe_•ec
,

101 
›í_fù


103 
BL31_IMAGE_NAME
,

104 &
fù_dev_h™dÀ
,

105 (
uöçå_t
)&
bl31_fûe_•ec
,

106 
›í_fù


108 
BL32_IMAGE_NAME
,

109 &
fù_dev_h™dÀ
,

110 (
uöçå_t
)&
bl32_fûe_•ec
,

111 
›í_fù


113 
BL33_IMAGE_NAME
,

114 &
fù_dev_h™dÀ
,

115 (
uöçå_t
)&
bl33_fûe_•ec
,

116 
›í_fù


123 
	$›í_fù
(c⁄° 
uöçå_t
 
•ec
)

125 
ªsu…
 = 
IO_FAIL
;

128 
ªsu…
 = 
	`io_dev_öô
(
fù_dev_h™dÀ
, (
uöçå_t
)
FIP_IMAGE_NAME
);

129 i‡(
ªsu…
 =
IO_SUCCESS
) {

130 
	`INFO
("Using FIP\n");

133  
ªsu…
;

134 
	}
}

137 
	$›í_memm≠
(c⁄° 
uöçå_t
 
•ec
)

139 
ªsu…
 = 
IO_FAIL
;

140 
uöçå_t
 
loˇl_image_h™dÀ
;

142 
ªsu…
 = 
	`io_dev_öô
(
memm≠_dev_h™dÀ
, 
memm≠_öô_∑øms
);

143 i‡(
ªsu…
 =
IO_SUCCESS
) {

144 
ªsu…
 = 
	`io_›í
(
memm≠_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

145 i‡(
ªsu…
 =
IO_SUCCESS
) {

147 
	`io_˛o£
(
loˇl_image_h™dÀ
);

150  
ªsu…
;

151 
	}
}

154 
	$›í_£miho°ög
(c⁄° 
uöçå_t
 
•ec
)

156 
ªsu…
 = 
IO_FAIL
;

157 
uöçå_t
 
loˇl_image_h™dÀ
;

160 
ªsu…
 = 
	`io_dev_öô
(
sh_dev_h™dÀ
, 
sh_öô_∑øms
);

161 i‡(
ªsu…
 =
IO_SUCCESS
) {

162 
ªsu…
 = 
	`io_›í
(
sh_dev_h™dÀ
, 
•ec
, &
loˇl_image_h™dÀ
);

163 i‡(
ªsu…
 =
IO_SUCCESS
) {

164 
	`INFO
("Using Semi-hosting IO\n");

165 
	`io_˛o£
(
loˇl_image_h™dÀ
);

168  
ªsu…
;

169 
	}
}

171 
	$mt_io_£tup
 ()

173 
io_ªsu…
 = 
IO_FAIL
;

176 
	`io_öô
(&
io_d©a
);

179 
io_ªsu…
 = 
	`ªgi°î_io_dev_sh
(&
sh_dev_c⁄
);

180 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

182 
io_ªsu…
 = 
	`ªgi°î_io_dev_fù
(&
fù_dev_c⁄
);

183 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

185 
io_ªsu…
 = 
	`ªgi°î_io_dev_memm≠
(&
memm≠_dev_c⁄
);

186 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

189 
io_ªsu…
 = 
	`io_dev_›í
(
sh_dev_c⁄
, 
sh_dev_•ec
, &
sh_dev_h™dÀ
);

190 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

192 
io_ªsu…
 = 
	`io_dev_›í
(
fù_dev_c⁄
, 
fù_dev_•ec
, &
fù_dev_h™dÀ
);

193 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

195 
io_ªsu…
 = 
	`io_dev_›í
(
memm≠_dev_c⁄
, 
memm≠_dev_•ec
,

196 &
memm≠_dev_h™dÀ
);

197 
	`as£π
(
io_ªsu…
 =
IO_SUCCESS
);

200 ()
io_ªsu…
;

201 
	}
}

206 
	$∂©_gë_image_sour˚
(c⁄° *
image_«me
, 
uöçå_t
 *
dev_h™dÀ
,

207 
uöçå_t
 *
image_•ec
)

209 
ªsu…
 = 
IO_FAIL
;

210 c⁄° 
∂©_io_pﬁicy
 *
pﬁicy
;

212 i‡((
image_«me
 !
NULL
Ë&& (
dev_h™dÀ
 != NULL) &&

213 (
image_•ec
 !
NULL
)) {

214 
pﬁicy
 = 
pﬁicõs
;

215 
pﬁicy
->
image_«me
 !
NULL
) {

216 i‡(
	`°rcmp
(
pﬁicy
->
image_«me
, image_name) == 0) {

217 
ªsu…
 = 
pﬁicy
->
	`check
’ﬁicy->
image_•ec
);

218 i‡(
ªsu…
 =
IO_SUCCESS
) {

219 *
image_•ec
 = 
pﬁicy
->image_spec;

220 *
dev_h™dÀ
 = *(
pﬁicy
->dev_handle);

223 
ªsu…
 = 
	`›í_£miho°ög
(

224 
pﬁicy
->
image_•ec
);

225 i‡(
ªsu…
 =
IO_SUCCESS
) {

226 *
dev_h™dÀ
 = 
sh_dev_h™dÀ
;

227 *
image_•ec
 =

228 
pﬁicy
->
image_•ec
;

232 
pﬁicy
++;

235 
ªsu…
 = 
IO_FAIL
;

237  
ªsu…
;

238 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_pm.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bakîy_lock.h
>

34 
	~<cci400.h
>

35 
	~<scu.h
>

36 
	~<mmio.h
>

37 
	~<∂©f‹m.h
>

38 
	~<c⁄sﬁe.h
>

39 
	~<debug.h
>

40 
	~<∂©f‹m_def.h
>

41 
	~<psci.h
>

42 
	~<powî_åa˚r.h
>

43 
	~<°dio.h
>

44 
	~"∂©_def.h
"

45 
	~"∂©_¥iv©e.h
"

46 
	~"Ørch64/∂©_hñ≥rs.h
"

48 
	~"mt_˝uxg±.h
"

50 
	s_ñ3_d‹m™t_d©a
 {

51 
	mmp0_l2a˘Ã_ñ1
;

52 
	mmp0_l2e˘Ã_ñ1
;

53 
	mmp0_l2r°dißbÀ
;

54 
	m°‹age
[32];

55 } 
	gñ3_d‹m™t_d©a
[1];

61 
	$mt_affö°_°™dby
(
powî_°©e
)

63 
èrgë_afÊvl
;

66 
èrgë_afÊvl
 = 
	`psci_gë_p°©e_afÊvl
(
powî_°©e
);

72 i‡(
èrgë_afÊvl
 !
MPIDR_AFFLVL0
)

73  
PSCI_E_INVALID_PARAMS
;

79 
	`dsb
();

80 
	`wfi
();

82  
PSCI_E_SUCCESS
;

83 
	}
}

89 
	$mt_affö°_⁄
(
mpidr
,

90 
£c_íåypoöt
,

91 
ns_íåypoöt
,

92 
afÊvl
,

93 
°©e
)

95 
rc
 = 
PSCI_E_SUCCESS
;

96 
löór_id
;

97 
maûbox_t
 *
mt_mboxes
;

103 i‡(
afÊvl
 !
MPIDR_AFFLVL0
)

104 
exô
;

106 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

107 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

108 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

109 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

112 
	`bl31_⁄_íåypoöt
();

113 i‡(
löór_id
 >= 4) {

114 
	`mmio_wrôe_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4), ()
bl31_⁄_íåypoöt
);

115 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP1_MISC_CONFIG_BOOT_ADDR
(
löór_id
-4)));

118 
	`mmio_wrôe_32
(
MP0_MISC_CONFIG3
, 
	`mmio_ªad_32
(MP0_MISC_CONFIG3) | 0x0000E000);

119 
	`mmio_wrôe_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
), ()
bl31_⁄_íåypoöt
);

120 
	`¥ötf
("mt_⁄,É¡ry %x\n", 
	`mmio_ªad_32
(
	`MP0_MISC_CONFIG_BOOT_ADDR
(
löór_id
)));

123 
exô
:

124  
rc
;

125 
	}
}

139 
	$mt_affö°_off
(
mpidr
,

140 
afÊvl
,

141 
°©e
)

143 
rc
 = 
PSCI_E_SUCCESS
;

144 
gicc_ba£
, 
e˘Ã
;

145 
˝u_£tup
, 
cci_£tup
;

147 
afÊvl
) {

148 
MPIDR_AFFLVL3
:

149 
MPIDR_AFFLVL2
:

151 
MPIDR_AFFLVL1
:

152 i‡(
°©e
 =
PSCI_STATE_OFF
) {

157 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

158 i‡(
cci_£tup
) {

159 
	`cci_dißbÀ_cohîícy
(
mpidr
);

161 
	`dißbÀ_scu
(
mpidr
);

163 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_DOWN
);

167 
MPIDR_AFFLVL0
:

168 i‡(
°©e
 =
PSCI_STATE_OFF
) {

174 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

175 i‡(
˝u_£tup
) {

176 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

177 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

178 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

186 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

187 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

189 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_DOWN
);

194 
	`as£π
(0);

197  
rc
;

198 
	}
}

212 
	$mt_affö°_su•íd
(
mpidr
,

213 
£c_íåypoöt
,

214 
ns_íåypoöt
,

215 
afÊvl
,

216 
°©e
)

218 
rc
 = 
PSCI_E_SUCCESS
;

219 
gicc_ba£
, 
e˘Ã
;

220 
˝u_£tup
, 
cci_£tup
, 
löór_id
;

221 
maûbox_t
 *
mt_mboxes
;

223 
afÊvl
) {

224 
MPIDR_AFFLVL2
:

225 i‡(
°©e
 =
PSCI_STATE_OFF
) {

226 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

228 
p
->
mp0_l2a˘Ã_ñ1
 = 
	`ªad_l2a˘Ã
();

229 
p
->
mp0_l2e˘Ã_ñ1
 = 
	`ªad_l2e˘Ã
();

232 
p
->
mp0_l2r°dißbÀ
 = 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
);

233 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

234 
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
);

237 
	`gíîic_timî_backup
();

239 
	`gic_di°_ßve
();

243 
MPIDR_AFFLVL1
:

244 i‡(
°©e
 =
PSCI_STATE_OFF
) {

249 
cci_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_HAS_CCI
);

250 i‡(
cci_£tup
) {

251 
	`cci_dißbÀ_cohîícy
(
mpidr
);

253 
	`dißbÀ_scu
(
mpidr
);

255 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_SUSPEND
);

259 
MPIDR_AFFLVL0
:

260 i‡(
°©e
 =
PSCI_STATE_OFF
) {

262 
	`mmio_wrôe_32
(
MP0_MISC_CONFIG3
, 
	`mmio_ªad_32
(MP0_MISC_CONFIG3) | (1<<12));

267 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

268 i‡(
˝u_£tup
) {

269 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

270 
e˘Ã
 &~
CPUECTLR_SMP_BIT
;

271 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

275 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

276 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

277 
mt_mboxes
[
löór_id
].
vÆue
 = 
£c_íåypoöt
;

278 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

286 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

287 
	`gic_˝uif_dó˘iv©e
(
gicc_ba£
);

288 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_SUSPEND
);

293 
	`as£π
(0);

296  
rc
;

297 
	}
}

300 
	$w‹k¨ound_826319
(
mpidr
)

302 
l2a˘Ã
;

305 i‡(
mpidr
 & 
MPIDR_CPU_MASK
)

314 
l2a˘Ã
 = 
	`ªad_l2a˘Ã
();

315 
l2a˘Ã
 = (l2actlr & ~(1<<14)) | (1<<3);

316 
	`wrôe_l2a˘Ã
(
l2a˘Ã
);

319 
	}
}

321 
	#w‹k¨ound_826319
(Ëdÿ{} 0)

	)

325 
	$w‹k¨ound_836870
(
mpidr
)

327 
˝ua˘Ã
;

338 
˝ua˘Ã
 = 
	`ªad_˝ua˘Ã
();

339 
˝ua˘Ã
 = cpuactlr | (1<<24);

340 
	`wrôe_˝ua˘Ã
(
˝ua˘Ã
);

343 
	}
}

345 
	#w‹k¨ound_836870
(Ëdÿ{} 0)

	)

355 
	$mt_affö°_⁄_föish
(
mpidr
,

356 
afÊvl
,

357 
°©e
)

359 
rc
 = 
PSCI_E_SUCCESS
;

360 
löór_id
, 
˝u_£tup
;

361 
maûbox_t
 *
mt_mboxes
;

362 
gicd_ba£
, 
gicc_ba£
, 
e˘Ã
;

364 
afÊvl
) {

366 
MPIDR_AFFLVL2
:

367 i‡(
°©e
 =
PSCI_STATE_OFF
) {

371 
gicd_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
);

372 
	`gic_p˝u_di°if_£tup
(
gicd_ba£
);

377 
MPIDR_AFFLVL1
:

379 i‡(
°©e
 =
PSCI_STATE_OFF
) {

380 
	`íabÀ_scu
(
mpidr
);

381 
	`mt_cci_£tup
();

382 
	`åa˚_powî_Êow
(
mpidr
, 
CLUSTER_UP
);

386 
MPIDR_AFFLVL0
:

391 
	`w‹k¨ound_836870
(
mpidr
);

397 
˝u_£tup
 = 
	`mt_gë_cfgv¨
(
CONFIG_CPU_SETUP
);

398 i‡(
˝u_£tup
) {

399 
e˘Ã
 = 
	`ªad_˝ue˘Ã
();

400 
e˘Ã
 |
CPUECTLR_SMP_BIT
;

401 
	`wrôe_˝ue˘Ã
(
e˘Ã
);

405 
mt_mboxes
 = (
maûbox_t
 *Ë(
MBOX_OFF
);

406 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

407 
mt_mboxes
[
löór_id
].
vÆue
 = 0;

408 
	`Êush_dˇche_ønge
((Ë&
mt_mboxes
[
löór_id
],

411 
gicc_ba£
 = 
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
);

413 
	`gic_˝uif_£tup
(
gicc_ba£
);

419 
ªg_vÆ
 = (1 << 
CNTACR_RPCT_SHIFT
Ë| (1 << 
CNTACR_RVCT_SHIFT
);

420 
ªg_vÆ
 |(1 << 
CNTACR_RFRQ_SHIFT
Ë| (1 << 
CNTACR_RVOFF_SHIFT
);

421 
ªg_vÆ
 |(1 << 
CNTACR_RWVT_SHIFT
Ë| (1 << 
CNTACR_RWPT_SHIFT
);

422 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(0), 
ªg_vÆ
);

423 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
	`CNTACR_BASE
(1), 
ªg_vÆ
);

425 
ªg_vÆ
 = (1 << 
	`CNTNSAR_NS_SHIFT
(0)) |

426 (1 << 
	`CNTNSAR_NS_SHIFT
(1));

427 
	`mmio_wrôe_32
(
SYS_TIMCTL_BASE
 + 
CNTNSAR
, 
ªg_vÆ
);

430 
	`íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

432 
	`åa˚_powî_Êow
(
mpidr
, 
CPU_UP
);

436 
	`as£π
(0);

439  
rc
;

440 
	}
}

449 
	$mt_affö°_su•íd_föish
(
mpidr
,

450 
afÊvl
,

451 
°©e
)

453 
rc
 = 
PSCI_E_SUCCESS
;

455 
afÊvl
) {

456 
MPIDR_AFFLVL2
:

457 i‡(
°©e
 =
PSCI_STATE_OFF
) {

458 
_ñ3_d‹m™t_d©a
 *
p
 = &
ñ3_d‹m™t_d©a
[0];

460 i‡(
p
->
mp0_l2a˘Ã_ñ1
 =0 &&Ö->
mp0_l2e˘Ã_ñ1
==0)

461 
	`∑nic
();

462 
	`wrôe_l2a˘Ã
(
p
->
mp0_l2a˘Ã_ñ1
);

463 
	`wrôe_l2e˘Ã
(
p
->
mp0_l2e˘Ã_ñ1
);

466 
	`mmio_wrôe_32
(
MP0_CA7L_CACHE_CONFIG
,

467 (
	`mmio_ªad_32
(
MP0_CA7L_CACHE_CONFIG
Ë& ~
L2RSTDISABLE
)

468 | (
p
->
mp0_l2r°dißbÀ
 & 
L2RSTDISABLE
));

470 
	`gic_£tup
();

471 
	`gic_di°_ª°‹e
();

476 
MPIDR_AFFLVL1
:

477 
MPIDR_AFFLVL0
:

478  
	`mt_affö°_⁄_föish
(
mpidr
, 
afÊvl
, 
°©e
);

481 
	`as£π
(0);

484  
rc
;

485 
	}
}

491 c⁄° 
∂©_pm_›s_t
 
	gmt_∂©_pm_›s
 = {

492 
mt_affö°_°™dby
,

493 
mt_affö°_⁄
,

494 
mt_affö°_off
,

495 
mt_affö°_su•íd
,

496 
mt_affö°_⁄_föish
,

497 
mt_affö°_su•íd_föish
,

504 
	$∂©f‹m_£tup_pm
(c⁄° 
∂©_pm_›s_t
 **
∂©_›s
)

506 *
∂©_›s
 = &
mt_∂©_pm_›s
;

508 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_private.h

31 #i‚de‡
__PLAT_PRIVATE_H__


32 
	#__PLAT_PRIVATE_H__


	)

34 
	~<bl_comm⁄.h
>

35 
	~<∂©f‹m_def.h
>

38 vﬁ©ûê
	smaûbox
 {

39 
vÆue


40 
__©åibuã__
((
__Æig√d__
(
CACHE_WRITEBACK_GRANULE
)));

41 } 
	tmaûbox_t
;

48 
	sbl2_to_bl31_∑øms_mem
 {

49 
bl31_∑øms_t
 
	mbl31_∑øms
;

50 
image_öfo_t
 
	mbl31_image_öfo
;

51 
image_öfo_t
 
	mbl32_image_öfo
;

52 
image_öfo_t
 
	mbl33_image_öfo
;

53 
íåy_poöt_öfo_t
 
	mbl33_ï_öfo
;

54 
íåy_poöt_öfo_t
 
	mbl32_ï_öfo
;

55 
íåy_poöt_öfo_t
 
	mbl31_ï_öfo
;

56 } 
	tbl2_to_bl31_∑øms_mem_t
;

61 
	gmemöfo
;

66 
mt_c⁄figuª_mmu_ñ1
(
tŸÆ_ba£
,

67 
tŸÆ_size
,

72 
mt_c⁄figuª_mmu_ñ3
(
tŸÆ_ba£
,

73 
tŸÆ_size
,

78 
mt_gë_cfgv¨
();

79 
mt_c⁄fig_£tup
();

81 #i‡
RESET_TO_BL31


82 
mt_gë_íåy_poöt_öfo
(
èrgë_£curôy
,

83 
íåy_poöt_öfo
 *
èrgë_íåy_öfo
);

85 
mt_cci_£tup
();

88 
gic_˝uif_dó˘iv©e
();

89 
gic_˝uif_£tup
();

90 
gic_p˝u_di°if_£tup
();

91 
gic_£tup
();

94 
mt_£tup_t›ﬁogy
();

97 
mt_io_£tup
();

100 
mt_£curôy_£tup
();

101 
uöt32_t
 
gë_devöfo_wôh_ödex
(uint32_t);

103 
mt_£t_bl32_ï_öfo
(
íåy_poöt_öfo
 *
bl32_ï
);

106 
mt_£t_bl33_ï_öfo
(
íåy_poöt_öfo
 *
bl33_ï
);

108 
íabÀ_ns_ac˚ss_to_˝ue˘Ã
();

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_security.c

31 
	~<as£π.h
>

32 
	~<debug.h
>

33 
	~<tzc400.h
>

34 
	~<∂©f‹m.h
>

35 
	~"∂©_def.h
"

36 
	~"∂©_¥iv©e.h
"

39 
	#FILTER_SHIFT
(
fûãr
Ë(1 << fûãr)

	)

47 
	$mt_£curôy_£tup
()

50 
tzc_ö°™˚_t
 
c⁄åﬁÀr
;

61 i‡(!
	`mt_gë_cfgv¨
(
CONFIG_HAS_TZC
))

68 
	`INFO
("Configuring TrustZone Controller\n");

75 
c⁄åﬁÀr
.
ba£
 = 
TZC400_BASE
;

76 
c⁄åﬁÀr
.
aid_width
 = 
MT_AID_WIDTH
;

77 
	`tzc_öô
(&
c⁄åﬁÀr
);

91 
	`tzc_dißbÀ_fûãrs
(&
c⁄åﬁÀr
);

105 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 1,

106 
DRAM1_BASE
, 
DRAM1_END
 - 
DRAM1_SEC_SIZE
,

107 
TZC_REGION_S_NONE
,

108 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

109 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

110 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

111 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

112 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

115 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 3,

116 (
DRAM1_END
 - 
DRAM1_SEC_SIZE
) + 1 , DRAM1_END,

117 
TZC_REGION_S_RDWR
,

121 
	`tzc_c⁄figuª_ªgi⁄
(&
c⁄åﬁÀr
, 
	`FILTER_SHIFT
(0), 2,

122 
DRAM2_BASE
, 
DRAM2_END
, 
TZC_REGION_S_NONE
,

123 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_DEFAULT
) |

124 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_PCI
) |

125 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_AP
) |

126 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO
) |

127 
	`TZC_REGION_ACCESS_RDWR
(
MT_NSAID_VIRTIO_OLD
));

134 
	`tzc_£t_a˘i⁄
(&
c⁄åﬁÀr
, 
TZC_ACTION_ERR
);

137 
	`tzc_íabÀ_fûãrs
(&
c⁄åﬁÀr
);

139 
	}
}

141 
uöt32_t
 
	$gë_devöfo_wôh_ödex
(
uöt32_t
 
i
)

143 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

145 if–
i
 < 
DEVINFO_SIZE
){

146  
ãórg
->
devöfo
[
i
];

150 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_tbase.c

12 
	~<as£π.h
>

13 
	~<debug.h
>

14 
	~<°rög.h
>

15 
	~<tzc400.h
>

16 
	~<∂©f‹m.h
>

17 
	~<mmio.h
>

18 
	~<∂©_def.h
>

19 
	~"∂©_¥iv©e.h
"

21 
	~<¨ch_hñ≥rs.h
>

22 
	~<tba£_¥iv©e.h
>

25 
	#PLAT_TBASE_INPUT_HWIDENTITY
 (0x1)

	)

26 
	#PLAT_TBASE_INPUT_HWKEY
 (0x2)

	)

27 
	#PLAT_TBASE_INPUT_RNG
 (0x3)

	)

29 
	#PLAT_TBASE_INPUT_OK
 ((
uöt32_t
)0)

	)

30 
	#PLAT_TBASE_INPUT_ERROR
 ((
uöt32_t
)-1)

	)

35 
uöt32_t
 
	$∂©_tba£_öput
(
uöt64_t
 
D©aId
,uöt64_t* 
Lígth
,* 
out
)

37 
uöt32_t
 
Sètus
 = 
PLAT_TBASE_INPUT_OK
;

38 
uöt32_t
 
Àngth
 = 0, 
idx
 = 0;

41  
D©aId
 )

43 
PLAT_TBASE_INPUT_HWIDENTITY
:

45 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

47 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
hwuid
)/(uint32_t)); idx++)

49 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
hwuid
[idx];

50 
Àngth
 +(
uöt32_t
);

55 
PLAT_TBASE_INPUT_HWKEY
:

57 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

59 
idx
=0; idx<(*
Lígth
/(
uöt32_t
)Ë&& idx<((
ãórg
->
HRID
)/(uint32_t)) ; idx++)

61 ((
uöt32_t
*)
out
)[
idx
] = 
ãórg
->
HRID
[idx];

62 
Àngth
 +(
uöt32_t
);

64 *
Lígth
 = 
Àngth
;

67 
PLAT_TBASE_INPUT_RNG
:

69 
uöt32_t
 
vÆue
 = 0;

70 
	`mmio_wrôe_32
(
TRNG_PDN_CLR
, 0x4);

71 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

72 
vÆue
 |
TRNG_CTRL_START
;

73 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

74 0 =(
	`mmio_ªad_32
(
TRNG_CTRL
Ë& 
TRNG_CTRL_RDY
));

75 ((
uöt32_t
*)
out
)[0] = 
	`mmio_ªad_32
(
TRNG_DATA
);

76 
vÆue
 = 
	`mmio_ªad_32
(
TRNG_CTRL
);

77 
vÆue
 &~
TRNG_CTRL_START
;

78 
	`mmio_wrôe_32
(
TRNG_CTRL
, 
vÆue
);

79 
	`mmio_wrôe_32
(
TRNG_PDN_SET
, 0x4);

80 *
Lígth
 = 4;

85 
Sètus
 = 
PLAT_TBASE_INPUT_ERROR
;

89  
Sètus
;

90 
	}
}

93 
uöt32_t
 
	$∂©_tba£_dump
()

95 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
());

97 
	`¥ötf
–"c‹ê%d i†dum≥d !\n", ()
löór_id
 );

103 
	`´e_wdt_dump
();

107 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_topology.c

31 
	~<as£π.h
>

32 
	~<∂©f‹m_def.h
>

34 
	~<psci.h
>

37 
	#AFFINST_INVAL
 0xff

	)

47 
	safföôy_öfo
 {

48 
	msiblög
;

49 
	mchûd
;

50 
	m°©e
;

51 
	md©a
;

52 } 
	tafföôy_öfo_t
;

60 
afföôy_öfo_t
 
	gmt_aff1_t›ﬁogy_m≠
[
PLATFORM_CLUSTER_COUNT
];

61 
afföôy_öfo_t
 
	gmt_aff0_t›ﬁogy_m≠
[
PLATFORM_CORE_COUNT
];

64 
	gt›ﬁogy_£tup_d⁄e
;

77 
	$∂©_gë_aff_cou¡
(
aff_lvl
,

78 
mpidr
)

80 
aff_cou¡
 = 1, 
˘r
;

81 
∑ª¡_aff_id
;

83 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

85 
aff_lvl
) {

92 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF3_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

93 
	`as£π
(
∑ª¡_aff_id
 == 0);

102 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF2_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

103 
	`as£π
(
∑ª¡_aff_id
 == 0);

106 
˘r
 = 0;

107 
mt_aff1_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

108 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[˘r].
siblög
) {

109 
aff_cou¡
++;

115 
∑ª¡_aff_id
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

116 
	`as£π
(
∑ª¡_aff_id
 < 
PLATFORM_CLUSTER_COUNT
);

119 
˘r
 = 
mt_aff1_t›ﬁogy_m≠
[
∑ª¡_aff_id
].
chûd
;

120 
mt_aff0_t›ﬁogy_m≠
[
˘r
].
siblög
 !
AFFINST_INVAL
;

121 
˘r
 = 
mt_aff0_t›ﬁogy_m≠
[˘r].
siblög
) {

122 
aff_cou¡
++;

127 
	`as£π
(0);

130  
aff_cou¡
;

131 
	}
}

137 
	$∂©_gë_max_afÊvl
()

139  
MPIDR_AFFLVL2
;

140 
	}
}

157 
	$∂©_gë_aff_°©e
(
aff_lvl
,

158 
mpidr
)

160 
aff_°©e
 = 
PSCI_AFF_ABSENT
, 
idx
;

161 
idx
 = (
mpidr
 >> 
MPIDR_AFF1_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

163 
	`as£π
(
t›ﬁogy_£tup_d⁄e
 == 1);

165 
aff_lvl
) {

168 i‡(
	`∂©_gë_max_afÊvl
(Ë>
aff_lvl
)

169 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

174 
aff_°©e
 = 
mt_aff1_t›ﬁogy_m≠
[
idx
].
°©e
;

181 
idx
 = 
mt_aff1_t›ﬁogy_m≠
[idx].
chûd
;

182 
idx
 +(
mpidr
 >> 
MPIDR_AFF0_SHIFT
Ë& 
MPIDR_AFFLVL_MASK
;

183 
aff_°©e
 = 
mt_aff0_t›ﬁogy_m≠
[
idx
].
°©e
;

186 
	`as£π
(0);

189  
aff_°©e
;

190 
	}
}

197 
	$mt_£tup_t›ﬁogy
()

199 
aff0
, 
aff1
, 
aff_°©e
, 
aff0_off£t
 = 0;

200 
mpidr
;

202 
t›ﬁogy_£tup_d⁄e
 = 0;

204 
aff1
 = 0;áff1 < 
PLATFORM_CLUSTER_COUNT
;áff1++) {

206 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
chûd
 = 
aff0_off£t
;

207 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
siblög
 =áff1 + 1;

209 
aff0
 = 0;áff0 < 
PLATFORM_MAX_CPUS_PER_CLUSTER
;áff0++) {

211 
mpidr
 = 
aff1
 << 
MPIDR_AFF1_SHIFT
;

212 
mpidr
 |
aff0
 << 
MPIDR_AFF0_SHIFT
;

214 i‡(
	`mt_pwrc_ªad_psy§
(
mpidr
Ë!
PSYSR_INVALID
) {

219 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

220 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 =

221 
PSCI_AFF_PRESENT
;

223 
aff_°©e
 = 
PSCI_AFF_ABSENT
;

226 
aff_°©e
 = 
PSCI_AFF_PRESENT
;

227 
mt_aff1_t›ﬁogy_m≠
[
aff1
].
°©e
 = 
PSCI_AFF_PRESENT
;

229 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
chûd
 = 
AFFINST_INVAL
;

230 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
°©e
 = 
aff_°©e
;

231 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
].
siblög
 =

232 
aff0_off£t
 + 1;

235 
aff0_off£t
++;

239 
mt_aff0_t›ﬁogy_m≠
[
aff0_off£t
 - 1].
siblög
 = 
AFFINST_INVAL
;

243 
mt_aff1_t›ﬁogy_m≠
[
aff1
 - 1].
siblög
 = 
AFFINST_INVAL
;

245 
t›ﬁogy_£tup_d⁄e
 = 1;

247 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/platform.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 #O¿
MTK_∂©f‹m
, 
the
 
TSP
 
ˇn
 
execuã
 
eôhî
 
‰om
 
Tru°ed
 
SRAM
 
‹
 Tru°ed 
DRAM
.

25 #Tru°ed 
SRAM
 
is
 
the
 .

26 
	gTSP_RAM_LOCATION
 :
t§am


28 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
t§am
)

29 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZRAM


30 
i„q
 (
$
{
TSP_RAM_LOCATION
}, 
tdøm
)

31 
	gTSP_RAM_LOCATION_ID
 :
TSP_IN_TZDRAM


33 
$
(
îr‹
 "Unsupported TSP_RAM_LOCATION value")

34 
ídif


36 #Pro˚s†
TSP_RAM_LOCATION_ID
 
Êag


37 
$
(
evÆ
 
	$$
(
ˇŒ
 
add_deföe
,
TSP_RAM_LOCATION_ID
))

39 
PLAT_INCLUDES
 :-
I∂©
/
$
{
PLAT
}/ö˛ude/ -I∂©/${PLAT}/ -I∂©/${PLAT}/drivîs/log -I∂©/${PLAT}/drivîs/timî/ -I∂©/${PLAT}/drivîs/dev≠c/ -I∂©/${PLAT}/drivîs/l2c/

41 
PLAT_BL_COMMON_SOURCES
 :
drivîs
/
io
/
io_fù
.
c
 \

42 
drivîs
/
io
/
io_memm≠
.
c
 \

43 
drivîs
/
io
/
io_£miho°ög
.
c
 \

44 
lib
/
mmio
.
c
 \

45 
lib
/
Ørch64
/
sy§eg_hñ≥rs
.
S
 \

46 
lib
/
Ørch64
/
xœt_èbÀs
.
c
 \

47 
lib
/
£miho°ög
/£miho°ög.
c
 \

48 
lib
/
£miho°ög
/
Ørch64
/
£miho°ög_ˇŒ
.
S
 \

49 
∂©
/
comm⁄
/
Ørch64
/
∂©_comm⁄
.
c
 \

50 
∂©
/
$
{
PLAT
}/
∂©_io_°‹age
.
c
 \

51 
∂©
/
comm⁄
/
fiq_smp_ˇŒ
.
c


53 
BL1_SOURCES
 +
drivîs
/
¨m
/
cci400
/cci400.
c
 \

54 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

55 
∂©
/
$
{
PLAT
}/
bl1_∂©_£tup
.
c
 \

56 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

57 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©_hñ≥rs
.
S


59 
BL2_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

60 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_up_°ack
.
S
 \

61 
∂©
/
$
{
PLAT
}/
bl2_∂©_£tup
.
c
 \

62 
∂©
/
$
{
PLAT
}/
∂©_£curôy
.
c
 \

63 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©f‹m_comm⁄
.
c


65 
BL31_SOURCES
 +
drivîs
/
¨m
/
gic
/
gic_v2
.
c
 \

66 
drivîs
/
¨m
/
gic
/
gic_v3
.
c
 \

67 
drivîs
/
¨m
/
gic
/
Ørch64
/
gic_v3_sy§egs
.
S
 \

68 
drivîs
/
¨m
/
cci400
/cci400.
c
 \

69 
∂©
/
comm⁄
/
Ørch64
/
∂©f‹m_mp_°ack
.
S
 \

70 
∂©
/
$
{
PLAT
}/
bl31_∂©_£tup
.
c
 \

71 
∂©
/
$
{
PLAT
}/
∂©_gic
.
c
 \

72 
∂©
/
$
{
PLAT
}/
∂©_pm
.
c
 \

73 
∂©
/
$
{
PLAT
}/
∂©_t›ﬁogy
.
c
 \

74 
∂©
/
$
{
PLAT
}/
scu
.
c
 \

75 
∂©
/
$
{
PLAT
}/
powî_åa˚r
.
c
 \

76 
∂©
/
$
{
PLAT
}/
maûbox
.
c
 \

77 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©_hñ≥rs
.
S
 \

78 
∂©
/
$
{
PLAT
}/
Ørch64
/
∂©f‹m_comm⁄
.
c
 \

79 
∂©
/
$
{
PLAT
}/
drivîs
/
u¨t
/u¨t.
c
 \

80 
∂©
/
$
{
PLAT
}/
drivîs
/
timî
/
mt_˝uxg±
.
c
 \

81 
∂©
/
$
{
PLAT
}/
drivîs
/
dev≠c
/dev≠c.
c
 \

82 
∂©
/
$
{
PLAT
}/
drivîs
/
l2c
/l2c.
c


84 
BL31_SOURCES
 +
∂©
/
$
{
PLAT
}/
sù_svc
/
sù_svc_comm⁄
.
c
 \

85 
∂©
/
$
{
PLAT
}/
sù_svc
/
sù_svc_£tup
.
c
 \

86 
∂©
/
$
{
PLAT
}/
drivîs
/
log
/log.
c


88 
i„q
 (
$
{
RESET_TO_BL31
}, 1)

89 
	gBL31_SOURCES
 +
drivîs
/
¨m
/
tzc400
/tzc400.
c
 \

90 
∂©
/
$
{
PLAT
}/
∂©_£curôy
.
c


91 
ídif


93 
i„q
 (
$
{
SPD
}, 
tba£
)

94 
	gBL31_SOURCES
 +
∂©
/
$
{
PLAT
}/
∂©_tba£
.
c


95 
ídif


97 #Fœg 
u£d
 
by
 
the
 
MTK_∂©f‹m
 
p‹t
 
to
 
dëîmöe
Åhê
vîsi⁄
 
of
 
ARM
 
GIC
 
¨chôe˘uª


98 #tÿ
u£
 
öãºu±
 
m™agemít
 
ö
 
EL3
.

99 
MT_GIC_ARCH
 := 2

100 
$
(
evÆ
 $(
ˇŒ
 
add_deföe
,
MT_GIC_ARCH
))

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/power_tracer.c

1 
	~<¨ch.h
>

2 
	~<powî_åa˚r.h
>

3 
	~<°dio.h
>

6 
	#åa˚_log
(...Ë
	`¥ötf
("psci: " 
__VA_ARGS__
)

	)

8 
	#åa˚_log
(...)

	)

11 
	$åa˚_powî_Êow
(
mpidr
, 
mode
) {

12 
mode
) {

13 
CPU_UP
:

14 
	`åa˚_log
("core %d:%d ON\n",

15 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

16 (
mpidr
 & 
MPIDR_CPU_MASK
));

18 
CPU_DOWN
:

19 
	`åa˚_log
("core %d:%d OFF\n",

20 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

21 (
mpidr
 & 
MPIDR_CPU_MASK
));

23 
CPU_SUSPEND
:

24 
	`åa˚_log
("core %d:%d SUSPEND\n",

25 (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
,

26 (
mpidr
 & 
MPIDR_CPU_MASK
));

28 
CLUSTER_UP
:

29 
	`åa˚_log
("˛u°î %d ON\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

31 
CLUSTER_DOWN
:

32 
	`åa˚_log
("˛u°î %d OFF\n", (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë>> 
MPIDR_AFFINITY_BITS
);

34 
CLUSTER_SUSPEND
:

35 
	`åa˚_log
("˛u°î %d SUSPEND\n", (
mpidr
 & 
MPIDR_CPU_MASK
));

38 
	`åa˚_log
("unknownÖower mode\n");

41 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/scu.c

1 
	~<¨ch.h
>

2 
	~<∂©f‹m_def.h
>

3 
	~<mmio.h
>

5 
	$dißbÀ_scu
(
mpidr
) {

6 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

7 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË| 
ACINACTM
);

8 
	}
}

10 
	$íabÀ_scu
(
mpidr
) {

11 
uöt32_t
 
axi_c⁄fig
 = (
mpidr
 & 
MPIDR_CLUSTER_MASK
Ë? 
MP1_AXI_CONFIG
 : 
MP0_AXI_CONFIG
;

12 
	`mmio_wrôe_32
(
axi_c⁄fig
, 
	`mmio_ªad_32
◊xi_c⁄figË& ~
ACINACTM
);

13 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/sip_svc/sip_private.h

38 #i‚de‡
__SIP_PRIVATE_H__


39 
	#__SIP_PRIVATE_H__


	)

41 
	~<¨ch.h
>

42 
	~<bakîy_lock.h
>

48 
uöt64_t
 
sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

49 
uöt64_t
 
x1
,

50 
uöt64_t
 
x2
,

51 
uöt64_t
 
x3
,

52 
uöt64_t
 
x4
,

53 *
cookõ
,

54 *
h™dÀ
,

55 
uöt64_t
 
Êags
);

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/sip_svc/sip_svc_common.c

38 
	~<¨ch.h
>

39 
	~<¨ch_hñ≥rs.h
>

40 
	~<as£π.h
>

41 
	~<ru¡ime_svc.h
>

42 
	~<debug.h
>

43 
	~<sù_svc.h
>

44 
	~<sù_îr‹.h
>

45 
	~<∂©f‹m.h
>

46 
	~<mmio.h
>

47 
	~"sù_¥iv©e.h
"

52 
	skî√l_öfo
 {

53 
uöt64_t
 
	mpc
;

54 
uöt64_t
 
	mr0
;

55 
uöt64_t
 
	mr1
;

58 
kî√l_öfo
 
	gk_öfo
;

60 
	$ßve_kî√l_öfo
(
uöt64_t
 
pc
, uöt64_à
r0
, uöt64_à
r1
)

62 
k_öfo
.
pc
=pc;

63 
k_öfo
.
r0
=r0;

64 
k_öfo
.
r1
=r1;

65 
	}
}

67 
uöt64_t
 
	$gë_kî√l_öfo_pc
()

69  
k_öfo
.
pc
;

70 
	}
}

72 
uöt64_t
 
	$gë_kî√l_öfo_r0
()

74  
k_öfo
.
r0
;

75 
	}
}

77 
uöt64_t
 
	$gë_kî√l_öfo_r1
()

79  
k_öfo
.
r1
;

80 
	}
}

82 
bl31_¥ï¨e_k64_íåy
();

83 
ñ3_exô
();

89 
uöt64_t
 
	gmcusys_wrôe_cou¡
 = 0;

90 
uöt64_t
 
	$sù_mcusys_wrôe
(
ªg_addr
, 
ªg_vÆue
)

92 if((
ªg_addr
 & 0xFFFF0000Ë!(
MCUCFG_BASE
 & 0xFFFF0000))

93  
SIP_SVC_E_INVALID_R™ge
;

96 if(–
MP0_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP0_MISC_CONFIG9
 ) ||

97 –
MP1_MISC_CONFIG0
 <
ªg_addr
 &&Ñeg_add∏<
MP1_MISC_CONFIG9
 )) {

98  
SIP_SVC_E_PERMISSION_DENY
;

101 
	`mmio_wrôe_32
(
ªg_addr
, 
ªg_vÆue
);

102 
	`dsb
();

104 
mcusys_wrôe_cou¡
++;

106  
SIP_SVC_E_SUCCESS
;

107 
	}
}

112 
uöt64_t
 
	$sù_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

113 
uöt64_t
 
x1
,

114 
uöt64_t
 
x2
,

115 
uöt64_t
 
x3
,

116 
uöt64_t
 
x4
,

117 *
cookõ
,

118 *
h™dÀ
,

119 
uöt64_t
 
Êags
)

121 
uöt64_t
 
rc
;

122 
uöt32_t
 
ns
;

123 
©f_¨g_t_±r
 
ãórg
 = (©f_¨g_t_±r)(
uöçå_t
)
TEE_BOOT_INFO_ADDR
;

126 
ns
 = 
	`is_ˇŒî_n⁄_£cuª
(
Êags
);

132 
smc_fid
) {

133 
MTK_SIP_TBASE_HWUID_AARCH32
:

135 i‡(
ns
)

136 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

137 
	`SMC_RET4
(
h™dÀ
, 
ãórg
->
hwuid
[0],Åeearg->hwuid[1],

138 
ãórg
->
hwuid
[2],Åeearg->hwuid[3]);

141 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH32
:

142 
MTK_SIP_KERNEL_MCUSYS_WRITE_AARCH64
:

143 
rc
 = 
	`sù_mcusys_wrôe
(
x1
, 
x2
);

145 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH32
:

146 
MTK_SIP_KERNEL_MCUSYS_ACCESS_COUNT_AARCH64
:

147 
rc
 = 
mcusys_wrôe_cou¡
;

149 
MTK_SIP_KERNEL_TMP_AARCH32
:

150 
	`¥ötf
("save kernel info\n");

151 
	`ßve_kî√l_öfo
(
x1
, 
x2
, 
x3
);

152 
	`¥ötf
("end bl31_prepare_k64_entry...\n");

153 
	`bl31_¥ï¨e_k64_íåy
();

154 
	`¥ötf
("el3_exit\n");

155 
	`SMC_RET0
(
h™dÀ
);

157 #i‡
DEBUG


158 
MTK_SIP_KERNEL_GIC_DUMP_AARCH32
:

159 
MTK_SIP_KERNEL_GIC_DUMP_AARCH64
:

160 
rc
 = 
	`mt_úq_dump_°©us
(
x1
);

163 
MTK_SIP_KERNEL_WDT_AARCH32
:

164 
MTK_SIP_KERNEL_WDT_AARCH64
:

165 
wdt_kî√l_cb_addr
 = 
x1
;

166 
	`¥ötf
("MTK_SIP_KERNEL_WDT : 0x%∞\n", 
wdt_kî√l_cb_addr
);

167 
	`¥ötf
("teearg->atf_aee_debug_buf_start : 0x%llx \n",

168 
ãórg
->
©f_´e_debug_buf_°¨t
);

169 
rc
 = 
ãórg
->
©f_´e_debug_buf_°¨t
;

172 
rc
 = 
SMC_UNK
;

173 
	`WARN
("Unim∂emíãd SIP CÆl: 0x%x \n", 
smc_fid
);

176 
	`SMC_RET1
(
h™dÀ
, 
rc
);

177 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/sip_svc/sip_svc_setup.c

38 
	~<debug.h
>

39 
	~<ru¡ime_svc.h
>

40 
	~<sù_svc.h
>

41 
	~<°döt.h
>

42 
	~<uuid.h
>

43 
	~"sù_¥iv©e.h
"

46 
DEFINE_SVC_UUID
(
mtk_sù_svc_uid
,

52 
öt32_t
 
	$sù_svc_£tup
()

59 
	}
}

65 
uöt64_t
 
	$sù_svc_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

66 
uöt64_t
 
x1
,

67 
uöt64_t
 
x2
,

68 
uöt64_t
 
x3
,

69 
uöt64_t
 
x4
,

70 *
cookõ
,

71 *
h™dÀ
,

72 
uöt64_t
 
Êags
)

77 i‡(
	`is_sù_fid
(
smc_fid
)) {

78  
	`sù_smc_h™dÀr
(
smc_fid
, 
x1
, 
x2
, 
x3
, 
x4
, 
cookõ
,

79 
h™dÀ
, 
Êags
);

82 
smc_fid
) {

83 
MTK_SIP_SVC_CALL_COUNT
:

88 
	`SMC_RET1
(
h™dÀ
, 
MTK_SIP_SVC_NUM_CALLS
);

90 
MTK_SIP_SVC_UID
:

92 
	`SMC_UUID_RET
(
h™dÀ
, 
mtk_sù_svc_uid
);

94 
MTK_SIP_SVC_VERSION
:

96 
	`SMC_RET2
(
h™dÀ
, 
MTK_SIP_VERSION_MAJOR
, 
MTK_SIP_VERSION_MINOR
);

99 
	`WARN
("Unim∂emíãd SIP Sîvi˚ CÆl: 0x%x \n", 
smc_fid
);

100 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

102 
	}
}

105 
DECLARE_RT_SVC
(

106 
sù_svc
,

108 
OEN_SIP_START
,

109 
OEN_SIP_END
,

110 
SMC_TYPE_FAST
,

111 
sù_svc_£tup
,

112 
sù_svc_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/fiqd/fiqd.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 
	gTSPD_DIR
 :
£rvi˚s
/
•d
/
fiqd


26 
SPD_SOURCES
 :
£rvi˚s
/
•d
/
fiqd
/
fiqd_maö
.
c
 \

27 
£rvi˚s
/
•d
/
fiqd
/
fiqd_comm⁄
.
c


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/fiqd/fiqd_common.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄ãxt_mgmt.h
>

35 
	~<°rög.h
>

36 
	~"fiqd_¥iv©e.h
"

43 
öt32_t
 
	$fiqd_öô_£cuª_c⁄ãxt
(
uöt64_t
 
íåypoöt
,

44 
uöt32_t
 
rw
,

45 
uöt64_t
 
mpidr
,

46 
fiq_c⁄ãxt_t
 *
fiq_˘x
)

48 
uöt32_t
 
s¸
, 
s˘Ã
;

49 
ñ1_sys_ªgs_t
 *
ñ1_°©e
;

50 
uöt32_t
 
•§
;

53 
	`as£π
(
fiq_˘x
);

59 
	`as£π
(
rw
 =
TSP_AARCH64
);

65 
	`mem£t
(
fiq_˘x
, 0, (*fiq_ctx));

71 
s¸
 = 
	`ªad_s¸
();

72 
s¸
 &~
SCR_NS_BIT
;

73 
s¸
 &~
SCR_RW_BIT
;

74 
s¸
 |
SCR_ST_BIT
;

75 i‡(
rw
 =
TSP_AARCH64
)

76 
s¸
 |
SCR_RW_BIT
;

79 
ñ1_°©e
 = 
	`gë_sy§egs_˘x
(&
fiq_˘x
->
˝u_˘x
);

85 
s˘Ã
 = 
	`ªad_s˘Ã_ñ3
();

86 
s˘Ã
 &
SCTLR_EE_BIT
;

87 
s˘Ã
 |
SCTLR_EL1_RES1
;

88 
	`wrôe_˘x_ªg
(
ñ1_°©e
, 
CTX_SCTLR_EL1
, 
s˘Ã
);

91 
	`£t_t•_p°©e
(
fiq_˘x
->
°©e
, 
TSP_PSTATE_OFF
);

98 
	`˛r_°d_smc_a˘ive_Êag
(
fiq_˘x
->
°©e
);

101 
fiq_˘x
->
mpidr
 = mpidr;

103 
	`cm_£t_c⁄ãxt
(
mpidr
, &
fiq_˘x
->
˝u_˘x
, 
SECURE
);

104 
•§
 = 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

105 
	`cm_£t_ñ3_îë_c⁄ãxt
(
SECURE
, 
íåypoöt
, 
•§
, 
s¸
);

108 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/fiqd/fiqd_main.c

41 
	~<¨ch_hñ≥rs.h
>

42 
	~<as£π.h
>

43 
	~<bl_comm⁄.h
>

44 
	~<bl31.h
>

45 
	~<c⁄ãxt_mgmt.h
>

46 
	~<debug.h
>

47 
	~<î∫o.h
>

48 
	~<∂©f‹m.h
>

49 
	~<ru¡ime_svc.h
>

50 
	~<°ddef.h
>

51 
	~<t•.h
>

52 
	~<uuid.h
>

53 
	~"fiqd_¥iv©e.h
"

54 
	~<∂©f‹m_def.h
>

55 
	~<fiq_smp_ˇŒ.h
>

60 
fiq_c⁄ãxt_t
 
	gfiqd_•_c⁄ãxt
[
FIQD_CORE_COUNT
];

64 
DEFINE_SVC_UUID
(
fiq_uuid
,

68 
öt32_t
 
fiqd_öô
(, );

76 
uöt64_t
 
	$fiqd_£l1_öãºu±_h™dÀr
(
uöt32_t
 
id
,

77 
uöt32_t
 
Êags
,

78 *
h™dÀ
,

79 *
cookõ
)

82 
ür
;

88 
	`as£π
(
	`gë_öãºu±_§c_ss
(
Êags
Ë=
NON_SECURE
);

90 #i‡
IMF_READ_INTERRUPT_ID


92 
	`as£π
(
	`∂©_ic_gë_öãºu±_ty≥
(
id
Ë=
INTR_TYPE_S_EL1
);

100 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

102 
ür
 = 
	`gë_ack_öfo
();

103 
	`ack_sgi
(
ür
);

106 if(
id
 =
WDT_IRQ_BIT_ID
)

109 
	`fiq_smp_ˇŒ_fun˘i⁄
(0xFE, 
´e_wdt_dump
, 0, 0);

110 
	`´e_wdt_dump
();

113 if(
id
 =
FIQ_SMP_CALL_SGI
)

115 
	`fiq_icc_i§
();

118 
	`SMC_RET0
(
h™dÀ
);

122 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

123 
fiq_˘x
 = &
fiqd_•_c⁄ãxt
[
löór_id
];

124 
	`as£π
(&
fiq_˘x
->
˝u_˘x
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

136 i‡(
	`gë_°d_smc_a˘ive_Êag
(
fiq_˘x
->
°©e
)) {

137 
fiq_˘x
->
ßved_•§_ñ3
 = 
	`SMC_GET_EL3
(&fiq_˘x->
˝u_˘x
,

138 
CTX_SPSR_EL3
);

139 
fiq_˘x
->
ßved_ñr_ñ3
 = 
	`SMC_GET_EL3
(&fiq_˘x->
˝u_˘x
,

140 
CTX_ELR_EL3
);

143 
	`SMC_SET_EL3
(&
fiq_˘x
->
˝u_˘x
,

144 
CTX_SPSR_EL3
,

145 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
));

146 
	`SMC_SET_EL3
(&
fiq_˘x
->
˝u_˘x
,

147 
CTX_ELR_EL3
,

148 (
uöt64_t
Ë&
fiq_ve˘‹s
->
fiq_íåy
);

149 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
SECURE
);

150 
	`cm_£t_√xt_îë_c⁄ãxt
(
SECURE
);

159 
	`SMC_RET2
(&
fiq_˘x
->
˝u_˘x
, 
TSP_HANDLE_FIQ_AND_RETURN
, 
	`ªad_ñr_ñ3
());

161 
	`SMC_RET0
(
h™dÀ
);

163 
	}
}

170 
öt32_t
 
	$fiqd_£tup
()

172 
íåy_poöt_öfo_t
 *
image_öfo
;

173 
öt32_t
 
rc
;

174 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

175 
uöt32_t
 
löór_id
;

177 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

184 
image_öfo
 = 
	`bl31_∂©_gë_√xt_image_ï_öfo
(
SECURE
);

185 
	`as£π
(
image_öfo
);

192 i‡(!
image_öfo
->
pc
)

200 
rc
 = 
	`fiqd_öô_£cuª_c⁄ãxt
(
image_öfo
->
pc
,

201 
TSP_AARCH64
,

202 
mpidr
,

203 &
fiqd_•_c⁄ãxt
[
löór_id
]);

204 
	`as£π
(
rc
 == 0);

210 
	`bl31_ªgi°î_bl32_öô
(&
fiqd_öô
);

212  
rc
;

213 
	}
}

224 
öt32_t
 
	$fiqd_öô
(
boŸ_íåy
, 
boŸ_¨gs
)

226 
uöt32_t
 
Êags
;

227 
uöt64_t
 
rc
;

233 
Êags
 = 0;

234 
	`£t_öãºu±_rm_Êag
(
Êags
, 
NON_SECURE
);

235 
rc
 = 
	`ªgi°î_öãºu±_ty≥_h™dÀr
(
INTR_TYPE_S_EL1
,

236 
fiqd_£l1_öãºu±_h™dÀr
,

237 
Êags
);

238 i‡(
rc
)

239 
	`∑nic
();

241  
rc
;

242 
	}
}

253 
uöt64_t
 
	$fiqd_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

254 
uöt64_t
 
x1
,

255 
uöt64_t
 
x2
,

256 
uöt64_t
 
x3
,

257 
uöt64_t
 
x4
,

258 *
cookõ
,

259 *
h™dÀ
,

260 
uöt64_t
 
Êags
)

263 
smc_fid
) {

268 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

269 
	}
}

272 
DECLARE_RT_SVC
(

273 
fiqd_Á°
,

275 
OEN_TOS_START
,

276 
OEN_TOS_END
,

277 
SMC_TYPE_FAST
,

278 
fiqd_£tup
,

279 
fiqd_smc_h™dÀr


283 
DECLARE_RT_SVC
(

284 
fiqd_°d
,

286 
OEN_TOS_START
,

287 
OEN_TOS_END
,

288 
SMC_TYPE_STD
,

289 
NULL
,

290 
fiqd_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/fiqd/fiqd_private.h

31 #i‚de‡
__FIQD_PRIVATE_H__


32 
	#__FIQD_PRIVATE_H__


	)

34 
	~<¨ch.h
>

35 
	~<c⁄ãxt.h
>

36 
	~<öãºu±_mgmt.h
>

37 
	~<∂©f‹m_def.h
>

38 
	~<psci.h
>

44 
	#TSP_PSTATE_OFF
 0

	)

45 
	#TSP_PSTATE_ON
 1

	)

46 
	#TSP_PSTATE_SUSPEND
 2

	)

47 
	#TSP_PSTATE_SHIFT
 0

	)

48 
	#TSP_PSTATE_MASK
 0x3

	)

49 
	#gë_t•_p°©e
(
°©e
Ë((°©ê>> 
TSP_PSTATE_SHIFT
Ë& 
TSP_PSTATE_MASK
)

	)

50 
	#˛r_t•_p°©e
(
°©e
Ë(°©ê&~(
TSP_PSTATE_MASK
 \

51 << 
TSP_PSTATE_SHIFT
))

	)

52 
	#£t_t•_p°©e
(
°
, 
p°
) do { \

53 
	`˛r_t•_p°©e
(
°
); \

54 
°
 |(
p°
 & 
TSP_PSTATE_MASK
) << \

55 
TSP_PSTATE_SHIFT
; \

56 } 0);

	)

68 
	#STD_SMC_ACTIVE_FLAG_SHIFT
 2

	)

69 
	#STD_SMC_ACTIVE_FLAG_MASK
 1

	)

70 
	#gë_°d_smc_a˘ive_Êag
(
°©e
Ë((°©ê>> 
STD_SMC_ACTIVE_FLAG_SHIFT
) \

71 & 
STD_SMC_ACTIVE_FLAG_MASK
)

	)

72 
	#£t_°d_smc_a˘ive_Êag
(
°©e
) (state |= \

73 1 << 
STD_SMC_ACTIVE_FLAG_SHIFT
)

	)

74 
	#˛r_°d_smc_a˘ive_Êag
(
°©e
) (state &= \

75 ~(
STD_SMC_ACTIVE_FLAG_MASK
 \

76 << 
STD_SMC_ACTIVE_FLAG_SHIFT
))

	)

81 
	#TSP_AARCH32
 
MODE_RW_32


	)

82 
	#TSP_AARCH64
 
MODE_RW_64


	)

90 
	#FIQD_CORE_COUNT
 
PLATFORM_CORE_COUNT


	)

92 #i‚de‡
__ASSEMBLY__


94 
	~<ˇs£π.h
>

95 
	~<°döt.h
>

101 
	#FIQD_NUM_ARGS
 0x2

	)

105 
DEFINE_REG_STRUCT
(
c_π_ªgs
, 
FIQD_C_RT_CTX_ENTRIES
);

112 
CASSERT
(
FIQD_C_RT_CTX_SIZE
 =(
c_π_ªgs_t
), \

113 
as£π_•d_c_π_ªgs_size_mism©ch
);

130 
	sfiq_c⁄ãxt
 {

131 
uöt64_t
 
	mßved_ñr_ñ3
;

132 
uöt32_t
 
	mßved_•§_ñ3
;

133 
uöt32_t
 
	m°©e
;

134 
uöt64_t
 
	mmpidr
;

135 
uöt64_t
 
	mc_π_˘x
;

136 
˝u_c⁄ãxt_t
 
	m˝u_˘x
;

137 
uöt64_t
 
	mßved_fiq_¨gs
[
FIQD_NUM_ARGS
];

138 } 
	tfiq_c⁄ãxt_t
;

143 
öt32_t
 
fiqd_öô_£cuª_c⁄ãxt
(
uöt64_t
 
íåypoöt
,

144 
uöt32_t
 
rw
,

145 
uöt64_t
 
mpidr
,

146 
fiq_c⁄ãxt_t
 *
fiq_˘x
);

147 
fiq_c⁄ãxt_t
 
fiqd_•_c⁄ãxt
[
FIQD_CORE_COUNT
];

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee.mk

2 
	gMTEE_DIR
 :
£rvi˚s
/
•d
/
mãe


3 
SPD_INCLUDES
 :-
Iö˛ude
/
bl32
/
∑ylﬂds
 \

4 -
I$
{
MTEE_DIR
}/
ö˛ude
 \

5 -
I$
{
MTEE_DIR
}

7 
SPD_SOURCES
 :
mãe_comm⁄
.
c
 \

8 
mãe_hñ≥rs
.
S
 \

9 
mãe_maö
.
c
 \

10 
mãe_pm
.
c


12 
v∑th
 %.
c
 
$
{
MTEE_DIR
}

13 
v∑th
 %.
S
 
$
{
MTEE_DIR
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee_common.c

38 
	~<°dio.h
>

39 
	~<î∫o.h
>

40 
	~<°rög.h
>

41 
	~<as£π.h
>

42 
	~<¨ch_hñ≥rs.h
>

43 
	~<∂©f‹m.h
>

44 
	~<bl_comm⁄.h
>

45 
	~<ru¡ime_svc.h
>

46 
	~<c⁄ãxt_mgmt.h
>

47 
	~<bl31.h
>

48 
	~<mãe_¥iv©e.h
>

55 
öt32_t
 
	$mãe_öô_£cuª_c⁄ãxt
(
uöt64_t
 
íåypoöt
,

56 
uöt32_t
 
rw
,

57 
uöt64_t
 
mpidr
,

58 
mãe_c⁄ãxt_t
 *
mãe_˘x
)

60 
uöt32_t
 
s¸
, 
s˘Ã
;

61 
ñ1_sys_ªgs_t
 *
ñ1_°©e
;

62 
uöt32_t
 
•§
;

65 
	`as£π
(
mãe_˘x
);

71 
	`mem£t
(
mãe_˘x
, 0, (*mtee_ctx));

77 
s¸
 = 
	`ªad_s¸
();

78 
s¸
 &~
SCR_NS_BIT
;

79 
s¸
 &~
SCR_RW_BIT
;

80 
s¸
 |
SCR_ST_BIT
;

81 i‡(
rw
 =
MTEE_AARCH64
)

82 
s¸
 |
SCR_RW_BIT
;

85 
ñ1_°©e
 = 
	`gë_sy§egs_˘x
(&
mãe_˘x
->
˝u_˘x
);

91 
s˘Ã
 = 
	`ªad_s˘Ã_ñ3
();

92 
s˘Ã
 &
SCTLR_EE_BIT
;

93 
s˘Ã
 |
SCTLR_EL1_RES1
;

94 i‡(
rw
 =
MTEE_AARCH32
)

95 
s˘Ã
 &= ~(1<<28);

96 
	`wrôe_˘x_ªg
(
ñ1_°©e
, 
CTX_SCTLR_EL1
, 
s˘Ã
);

99 
	`£t_mãe_p°©e
(
mãe_˘x
->
°©e
, 
MTEE_PSTATE_OFF
);

106 
	`˛r_°d_smc_a˘ive_Êag
(
mãe_˘x
->
°©e
);

109 
mãe_˘x
->
mpidr
 = mpidr;

111 
	`cm_£t_c⁄ãxt
(
mpidr
, &
mãe_˘x
->
˝u_˘x
, 
SECURE
);

113 i‡(
rw
 =
MTEE_AARCH64
)

114 
•§
 = 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

116 
•§
 = 
	`SPSR_MODE32
(
MODE32_svc
, 
SPSR_T_ARM
, 
SPSR_E_LITTLE
, 
DISABLE_ALL_EXCEPTIONS
);

118 
	`cm_£t_ñ3_îë_c⁄ãxt
(
SECURE
, 
íåypoöt
, 
•§
, 
s¸
);

121 
	}
}

131 
uöt64_t
 
	$mãe_synchr⁄ous_•_íåy
(
mãe_c⁄ãxt_t
 *
mãe_˘x
)

133 
uöt64_t
 
rc
;

135 
	`as£π
(
mãe_˘x
->
c_π_˘x
 == 0);

138 
	`as£π
(
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
SECURE
Ë=&
mãe_˘x
->
˝u_˘x
);

139 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
SECURE
);

140 
	`cm_£t_√xt_îë_c⁄ãxt
(
SECURE
);

142 
rc
 = 
	`mãe_íãr_•
(&
mãe_˘x
->
c_π_˘x
);

143 #i‡
DEBUG


144 
mãe_˘x
->
c_π_˘x
 = 0;

147  
rc
;

148 
	}
}

159 
	$mãe_synchr⁄ous_•_exô
(
mãe_c⁄ãxt_t
 *
mãe_˘x
, 
uöt64_t
 
ªt
)

162 
	`as£π
(
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
SECURE
Ë=&
mãe_˘x
->
˝u_˘x
);

163 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
SECURE
);

165 
	`as£π
(
mãe_˘x
->
c_π_˘x
 != 0);

166 
	`mãe_exô_•
(
mãe_˘x
->
c_π_˘x
, 
ªt
);

169 
	`as£π
(0);

170 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee_helpers.S

31 
	~<asm_ma¸os.S
>

32 
	~"mãe_¥iv©e.h
"

34 .
globÆ
 
mãe_íãr_•


45 
func
 
mãe_íãr_•


47 
mov
 
	gx3
, 
•


48 
°r
 
	gx3
, [
x0
, #0]

49 
sub
 
	g•
, sp, #TSPD_C_RT_CTX_SIZE

52 
°p
 
	gx19
, 
	gx20
, [
•
, #TSPD_C_RT_CTX_X19]

53 
°p
 
	gx21
, 
	gx22
, [
•
, #TSPD_C_RT_CTX_X21]

54 
°p
 
	gx23
, 
	gx24
, [
•
, #TSPD_C_RT_CTX_X23]

55 
°p
 
	gx25
, 
	gx26
, [
•
, #TSPD_C_RT_CTX_X25]

56 
°p
 
	gx27
, 
	gx28
, [
•
, #TSPD_C_RT_CTX_X27]

57 
°p
 
	gx29
, 
	gx30
, [
•
, #TSPD_C_RT_CTX_X29]

66 
b
 
	gñ3_exô


79 .
globÆ
 
mãe_exô_•


80 
func
 
mãe_exô_•


82 
mov
 
	g•
, 
x0


85 
ldp
 
	gx19
, 
	gx20
, [
x0
, #(
TSPD_C_RT_CTX_X19
 - 
TSPD_C_RT_CTX_SIZE
)]

86 
ldp
 
	gx21
, 
	gx22
, [
x0
, #(
TSPD_C_RT_CTX_X21
 - 
TSPD_C_RT_CTX_SIZE
)]

87 
ldp
 
	gx23
, 
	gx24
, [
x0
, #(
TSPD_C_RT_CTX_X23
 - 
TSPD_C_RT_CTX_SIZE
)]

88 
ldp
 
	gx25
, 
	gx26
, [
x0
, #(
TSPD_C_RT_CTX_X25
 - 
TSPD_C_RT_CTX_SIZE
)]

89 
ldp
 
	gx27
, 
	gx28
, [
x0
, #(
TSPD_C_RT_CTX_X27
 - 
TSPD_C_RT_CTX_SIZE
)]

90 
ldp
 
	gx29
, 
	gx30
, [
x0
, #(
TSPD_C_RT_CTX_X29
 - 
TSPD_C_RT_CTX_SIZE
)]

100 
mov
 
	gx0
, 
x1


101 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee_main.c

41 
	~<¨ch_hñ≥rs.h
>

42 
	~<as£π.h
>

43 
	~<bl_comm⁄.h
>

44 
	~<bl31.h
>

45 
	~<c⁄ãxt_mgmt.h
>

46 
	~<debug.h
>

47 
	~<î∫o.h
>

48 
	~<∂©f‹m.h
>

49 
	~<ru¡ime_svc.h
>

50 
	~<°ddef.h
>

51 
	~<mãe.h
>

52 
	~<uuid.h
>

53 
	~"mãe_¥iv©e.h
"

54 
	~<∂©f‹m_def.h
>

55 
	~<fiq_smp_ˇŒ.h
>

61 
mãe_ve˘‹s_t
 *
	gmãe_ve˘‹s
;

63 
	smãe_∑øm_s


65 *
	m•_ñ1
;

66 *
	m∑øm
;

67 
uöt32_t
 
	m∑ømTy≥
;

68 
uöt32_t
 
	mns_•§_ñ3
;

69 } 
	tmãe_∑øm_t
;

73 
mãe_c⁄ãxt_t
 
	gmãe_•_c⁄ãxt
[
MTEE_CORE_COUNT
];

74 
mãe_∑øm_t
 
	gmãe_∑øm
[
MTEE_CORE_COUNT
];

77 
öt32_t
 
mãe_öô
(, );

80 
	$ã°_´e_fun˘i⁄
()

82 
mpidr
 = 
	`ªad_mpidr
();

84 
	`¥ötf
("CPU_%d CÆ»sm∞fun˘i⁄ i¿ATF suc˚ss!\n", 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
));

85 
	}
}

87 
	$ã°_´e_h™dÀr
()

89 
m≠
 = 0xE;

90 
	`fiq_smp_ˇŒ_fun˘i⁄
(
m≠
, 
ã°_´e_fun˘i⁄
, 0, 1);

91 
	}
}

98 
uöt64_t
 
	$mãe_£l1_öãºu±_h™dÀr
(
uöt32_t
 
id
,

99 
uöt32_t
 
Êags
,

100 *
h™dÀ
,

101 *
cookõ
)

103 
uöt32_t
 
löór_id
;

104 
uöt64_t
 
mpidr
;

105 
mãe_c⁄ãxt_t
 *
mãe_˘x
;

106 
˝u_c⁄ãxt_t
 *
ns_˝u_c⁄ãxt
;

110 
	`as£π
(
	`gë_öãºu±_§c_ss
(
Êags
Ë=
NON_SECURE
);

112 #i‡
IMF_READ_INTERRUPT_ID


114 
	`as£π
(
	`∂©_ic_gë_öãºu±_ty≥
(
id
Ë=
INTR_TYPE_S_EL1
);

118 
mpidr
 = 
	`ªad_mpidr
();

119 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
));

122 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

124 if(
id
 =
WDT_IRQ_BIT_ID
)

127 
	`ã°_´e_h™dÀr
();

128 
ns_˝u_c⁄ãxt
 = 
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

129 
	`as£π
(
ns_˝u_c⁄ãxt
);

132 
	`SMC_SET_EL3
(
ns_˝u_c⁄ãxt
,

133 
CTX_ELR_EL3
,

135 
	`SMC_RET0
(
h™dÀ
);

138 if(
id
 =
FIQ_SMP_CALL_SGI
)

140 
	`fiq_icc_i§
();

141 
	`SMC_RET0
(
h™dÀ
);

145 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

146 
mãe_˘x
 = &
mãe_•_c⁄ãxt
[
löór_id
];

147 
	`as£π
(&
mãe_˘x
->
˝u_˘x
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

159 i‡(
	`gë_°d_smc_a˘ive_Êag
(
mãe_˘x
->
°©e
)) {

160 
mãe_˘x
->
ßved_•§_ñ3
 = 
	`SMC_GET_EL3
(&mãe_˘x->
˝u_˘x
,

161 
CTX_SPSR_EL3
);

162 
mãe_˘x
->
ßved_ñr_ñ3
 = 
	`SMC_GET_EL3
(&mãe_˘x->
˝u_˘x
,

163 
CTX_ELR_EL3
);

166 
	`SMC_SET_EL3
(&
mãe_˘x
->
˝u_˘x
,

167 
CTX_SPSR_EL3
,

168 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
));

169 
	`SMC_SET_EL3
(&
mãe_˘x
->
˝u_˘x
,

170 
CTX_ELR_EL3
,

171 (
uöt64_t
Ë&
mãe_ve˘‹s
->
fiq_íåy
);

172 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
SECURE
);

173 
	`cm_£t_√xt_îë_c⁄ãxt
(
SECURE
);

182 
	`SMC_RET2
(&
mãe_˘x
->
˝u_˘x
, 
MTEE_HANDLE_FIQ_AND_RETURN
, 
	`ªad_ñr_ñ3
());

183 
	}
}

190 
öt32_t
 
	$mãe_£tup
()

192 
íåy_poöt_öfo_t
 *
image_öfo
;

193 
öt32_t
 
rc
;

194 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

195 
uöt32_t
 
löór_id
;

197 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

204 
image_öfo
 = 
	`bl31_∂©_gë_√xt_image_ï_öfo
(
SECURE
);

205 
	`as£π
(
image_öfo
);

212 i‡(!
image_öfo
->
pc
)

220 
rc
 = 
	`mãe_öô_£cuª_c⁄ãxt
(
image_öfo
->
pc
,

221 #ifde‡
MTEE32


222 
MTEE_AARCH32
,

224 
MTEE_AARCH64
,

226 
mpidr
,

227 &
mãe_•_c⁄ãxt
[
löór_id
]);

228 
	`as£π
(
rc
 == 0);

234 
	`bl31_ªgi°î_bl32_öô
(&
mãe_öô
);

236  
rc
;

237 
	}
}

248 
öt32_t
 
	$mãe_öô
(
boŸ_íåy
, 
boŸ_¨gs
)

250 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

251 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
), 
Êags
;

252 
uöt64_t
 
rc
;

253 
mãe_c⁄ãxt_t
 *
mãe_˘x
 = &
mãe_•_c⁄ãxt
[
löór_id
];

255 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

260 
rc
 = 
	`mãe_synchr⁄ous_•_íåy
(
mãe_˘x
);

261 
	`as£π
(
rc
 != 0);

262 i‡(
rc
) {

263 
	`£t_mãe_p°©e
(
mãe_˘x
->
°©e
, 
MTEE_PSTATE_ON
);

269 
	`psci_ªgi°î_•d_pm_hook
(&
mãe_pm
);

275 
Êags
 = 0;

276 
	`£t_öãºu±_rm_Êag
(
Êags
, 
NON_SECURE
);

277 
rc
 = 
	`ªgi°î_öãºu±_ty≥_h™dÀr
(
INTR_TYPE_S_EL1
,

278 
mãe_£l1_öãºu±_h™dÀr
,

279 
Êags
);

280 i‡(
rc
)

281 
	`∑nic
();

283 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

284  
rc
;

285 
	}
}

296 
uöt64_t
 
	$mãe_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

297 
uöt64_t
 
x1
,

298 
uöt64_t
 
x2
,

299 
uöt64_t
 
x3
,

300 
uöt64_t
 
x4
,

301 *
cookõ
,

302 *
h™dÀ
,

303 
uöt64_t
 
Êags
)

305 
˝u_c⁄ãxt_t
 *
ns_˝u_c⁄ãxt
;

306 
mpidr
 = 
	`ªad_mpidr
();

307 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
), 
ns
;

308 
mãe_c⁄ãxt_t
 *
mãe_˘x
 = &
mãe_•_c⁄ãxt
[
löór_id
];

311 
ns
 = 
	`is_ˇŒî_n⁄_£cuª
(
Êags
);

313 
smc_fid
) {

320 
MTEE_HANDLED_S_EL1_FIQ
:

321 i‡(
ns
)

322 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

324 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

330 i‡(
	`gë_°d_smc_a˘ive_Êag
(
mãe_˘x
->
°©e
)) {

331 
	`SMC_SET_EL3
(&
mãe_˘x
->
˝u_˘x
,

332 
CTX_SPSR_EL3
,

333 
mãe_˘x
->
ßved_•§_ñ3
);

334 
	`SMC_SET_EL3
(&
mãe_˘x
->
˝u_˘x
,

335 
CTX_ELR_EL3
,

336 
mãe_˘x
->
ßved_ñr_ñ3
);

340 
ns_˝u_c⁄ãxt
 = 
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

341 
	`as£π
(
ns_˝u_c⁄ãxt
);

348 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

349 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

351 
	`SMC_RET0
((
uöt64_t
Ë
ns_˝u_c⁄ãxt
);

359 
MTEE_EL3_FIQ
:

360 i‡(
ns
)

361 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

363 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

366 
	`as£π
(
	`gë_°d_smc_a˘ive_Êag
(
mãe_˘x
->
°©e
));

369 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
SECURE
);

372 
ns_˝u_c⁄ãxt
 = 
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

373 
	`as£π
(
ns_˝u_c⁄ãxt
);

376 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

377 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

379 
	`SMC_RET1
(
ns_˝u_c⁄ãxt
, 
MTEE_EL3_FIQ
);

386 
MTEE_ENTRY_DONE
:

387 i‡(
ns
)

388 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

394 
	`as£π
(
mãe_ve˘‹s
 =
NULL
);

395 
mãe_ve˘‹s
 = (
mãe_ve˘‹s_t
 *Ë
x1
;

396 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
SECURE
);

404 
	`mãe_synchr⁄ous_•_exô
(
mãe_˘x
, 
x1
);

414 
MTEE_ON_DONE
:

415 
MTEE_RESUME_DONE
:

425 
MTEE_OFF_DONE
:

426 
MTEE_SUSPEND_DONE
:

427 i‡(
ns
)

428 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

436 
	`mãe_synchr⁄ous_•_exô
(
mãe_˘x
, 
x1
);

443 
	`MTEE_STD_FID
(
MTEE_SERVICE
):

444 
	`MTEE_FAST_FID
(
MTEE_SERVICE
):

445 
	`MTEE32_STD_FID
(
MTEE_SERVICE
):

446 
	`MTEE32_FAST_FID
(
MTEE_SERVICE
):

447 
	`MTEE_STD_FID
(
MTEE_EARLY_SERVICE
):

448 
	`MTEE_FAST_FID
(
MTEE_EARLY_SERVICE
):

449 
	`MTEE32_STD_FID
(
MTEE_EARLY_SERVICE
):

450 
	`MTEE32_FAST_FID
(
MTEE_EARLY_SERVICE
):

452 i‡(
ns
) {

453 
˝u_c⁄ãxt_t
 *
ns_˘x
 = (˝u_c⁄ãxt_t*)
h™dÀ
;

460 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
));

461 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

475 
	`as£π
(&
mãe_˘x
->
˝u_˘x
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

481 i‡(
smc_fid
 =
	`MTEE32_STD_FID
(
MTEE_EARLY_SERVICE
) ||

482 
smc_fid
 =
	`MTEE32_FAST_FID
(
MTEE_EARLY_SERVICE
) )

484 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
)

485 &
mãe_ve˘‹s
->
óæy_smc_íåy
);

487 i‡(
	`GET_SMC_TYPE
(
smc_fid
Ë=
SMC_TYPE_FAST
) {

488 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
)

489 &
mãe_ve˘‹s
->
Á°_smc_íåy
);

491 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
)

492 &
mãe_ve˘‹s
->
°d_smc_íåy
);

495 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
SECURE
);

496 
	`cm_£t_√xt_îë_c⁄ãxt
(
SECURE
);

498 
mãe_∑øm
[
löór_id
].
∑ømTy≥
 = (
uöt32_t
)
x3
;

499 
mãe_∑øm
[
löór_id
].
∑øm
 = (*)

500 
	`ªad_˘x_ªg
(
	`gë_g¥egs_˘x
(
ns_˘x
), 
CTX_GPREG_X4
);

501 
mãe_∑øm
[
löór_id
].
•_ñ1
 = (*)

502 
	`ªad_˘x_ªg
(
	`gë_sy§egs_˘x
(
ns_˘x
), 
CTX_SP_EL1
);

503 
mãe_∑øm
[
löór_id
].
ns_•§_ñ3
 = (
uöt32_t
)

504 
	`ªad_˘x_ªg
(
	`gë_ñ3°©e_˘x
(
ns_˘x
), 
CTX_SPSR_EL3
);

506 
	`SMC_RET4
(&
mãe_˘x
->
˝u_˘x
, 
x1
, 
x2
,

507 (
uöt64_t
)&
mãe_∑øm
[
löór_id
],

508 
	`ªad_˘x_ªg
(
	`gë_g¥egs_˘x
(
ns_˘x
), 
CTX_GPREG_X5
));

516 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

517 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
SECURE
);

520 
ns_˝u_c⁄ãxt
 = 
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

521 
	`as£π
(
ns_˝u_c⁄ãxt
);

524 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

525 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

527 i‡(
smc_fid
 =
	`MTEE32_STD_FID
(
MTEE_SERVICE
) ||

528 
smc_fid
 =
	`MTEE32_FAST_FID
(
MTEE_SERVICE
) )

530 
x1
 &= 0xffffffff;

531 
x2
 &= 0xffffffff;

532 
x3
 &= 0xffffffff;

534 
	`SMC_RET4
(
ns_˝u_c⁄ãxt
, 
smc_fid
, 
x1
, 
x2
, 
x3
);

539 
TOS_CALL_COUNT
:

544 
	`SMC_RET1
(
h™dÀ
, 
MTEE_NUM_FID
);

546 
TOS_CALL_VERSION
:

548 
	`SMC_RET2
(
h™dÀ
, 
MTEE_VERSION_MAJOR
, 
MTEE_VERSION_MINOR
);

554 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

555 
	}
}

558 
DECLARE_RT_SVC
(

559 
mãe_Á°
,

561 
OEN_TOS_START
,

562 
OEN_TOS_END
,

563 
SMC_TYPE_FAST
,

564 
mãe_£tup
,

565 
mãe_smc_h™dÀr


569 
DECLARE_RT_SVC
(

570 
mãe_°d
,

572 
OEN_TOS_START
,

573 
OEN_TOS_END
,

574 
SMC_TYPE_STD
,

575 
NULL
,

576 
mãe_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee_pm.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄ãxt_mgmt.h
>

35 
	~<debug.h
>

36 
	~<∂©f‹m.h
>

37 
	~<mãe.h
>

38 
	~"mãe_¥iv©e.h
"

44 
	$mãe_˝u_⁄_h™dÀr
(
uöt64_t
 
èrgë_˝u
)

46 
	}
}

52 
öt32_t
 
	$mãe_˝u_off_h™dÀr
(
uöt64_t
 
cookõ
)

54 
öt32_t
 
rc
 = 0;

55 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

56 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

57 
mãe_c⁄ãxt_t
 *
mãe_˘x
 = &
mãe_•_c⁄ãxt
[
löór_id
];

59 
	`as£π
(
mãe_ve˘‹s
);

60 
	`as£π
(
	`gë_mãe_p°©e
(
mãe_˘x
->
°©e
Ë=
MTEE_PSTATE_ON
);

63 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
Ë&
mãe_ve˘‹s
->
˝u_off_íåy
);

64 
rc
 = 
	`mãe_synchr⁄ous_•_íåy
(
mãe_˘x
);

70 i‡(
rc
 != 0)

71 
	`∑nic
();

77 
	`£t_mãe_p°©e
(
mãe_˘x
->
°©e
, 
MTEE_PSTATE_OFF
);

80 
	}
}

86 
	$mãe_˝u_su•íd_h™dÀr
(
uöt64_t
 
powî_°©e
)

88 
öt32_t
 
rc
 = 0;

89 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

90 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

91 
mãe_c⁄ãxt_t
 *
mãe_˘x
 = &
mãe_•_c⁄ãxt
[
löór_id
];

93 
	`as£π
(
mãe_ve˘‹s
);

94 
	`as£π
(
	`gë_mãe_p°©e
(
mãe_˘x
->
°©e
Ë=
MTEE_PSTATE_ON
);

97 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(&
mãe_˘x
->
˝u_˘x
),

98 
CTX_GPREG_X0
,

99 
powî_°©e
);

100 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
Ë&
mãe_ve˘‹s
->
˝u_su•íd_íåy
);

101 
rc
 = 
	`mãe_synchr⁄ous_•_íåy
(
mãe_˘x
);

107 i‡(
rc
 != 0)

108 
	`∑nic
();

111 
	`£t_mãe_p°©e
(
mãe_˘x
->
°©e
, 
MTEE_PSTATE_SUSPEND
);

112 #ifde‡
MTEE32


114 
	`wrôe_s¸
(
	`ªad_s¸
()|
SCR_RW_BIT
);

116 
	}
}

124 
	$mãe_˝u_⁄_föish_h™dÀr
(
uöt64_t
 
cookõ
)

126 
öt32_t
 
rc
 = 0;

127 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

128 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

129 
uöt64_t
 
sy§eg
;

130 
mãe_c⁄ãxt_t
 *
mãe_˘x
 = &
mãe_•_c⁄ãxt
[
löór_id
];

132 
	`as£π
(
mãe_ve˘‹s
);

133 
	`as£π
(
	`gë_mãe_p°©e
(
mãe_˘x
->
°©e
Ë=
MTEE_PSTATE_OFF
);

135 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

138 
	`mãe_öô_£cuª_c⁄ãxt
((
uöt64_t
Ë&
mãe_ve˘‹s
->
˝u_⁄_íåy
,

139 #ifde‡
MTEE32


140 
MTEE_AARCH32
,

142 
MTEE_AARCH64
,

144 
mpidr
,

145 
mãe_˘x
);

147 
sy§eg
 = 
	`ªad_˘x_ªg
(
	`gë_sy§egs_˘x
(&
mãe_•_c⁄ãxt
[0].
˝u_˘x
), 
CTX_TTBR0_EL1
);

148 
	`wrôe_˘x_ªg
(
	`gë_sy§egs_˘x
(&
mãe_˘x
->
˝u_˘x
), 
CTX_TTBR0_EL1
, 
sy§eg
);

150 #i‚de‡
MTEE32


151 
sy§eg
 = 
	`ªad_˘x_ªg
(
	`gë_sy§egs_˘x
(&
mãe_•_c⁄ãxt
[0].
˝u_˘x
), 
CTX_TCR_EL1
);

152 
	`wrôe_˘x_ªg
(
	`gë_sy§egs_˘x
(&
mãe_˘x
->
˝u_˘x
), 
CTX_TCR_EL1
, 
sy§eg
);

154 
sy§eg
 = 
	`ªad_˘x_ªg
(
	`gë_sy§egs_˘x
(&
mãe_•_c⁄ãxt
[0].
˝u_˘x
), 
CTX_MAIR_EL1
);

155 
	`wrôe_˘x_ªg
(
	`gë_sy§egs_˘x
(&
mãe_˘x
->
˝u_˘x
), 
CTX_MAIR_EL1
, 
sy§eg
);

158 #ifde‡
MTEE32


159 
sy§eg
 = 
	`ªad_˘x_ªg
(
	`gë_sy§egs_˘x
(&
mãe_•_c⁄ãxt
[0].
˝u_˘x
), 
CTX_DACR32_EL2
);

160 
	`wrôe_˘x_ªg
(
	`gë_sy§egs_˘x
(&
mãe_˘x
->
˝u_˘x
), 
CTX_DACR32_EL2
, 
sy§eg
);

163 
	`dcsw_›_Æl
(
DCISW
);

164 
	`__asm__
("ic ialluis\n"

168 
sy§eg
 = 
	`ªad_˘x_ªg
(
	`gë_sy§egs_˘x
(&
mãe_˘x
->
˝u_˘x
), 
CTX_SCTLR_EL1
);

169 
sy§eg
 |(
SCTLR_M_BIT
 | 
SCTLR_C_BIT
 | 
SCTLR_I_BIT
);

170 
	`wrôe_˘x_ªg
(
	`gë_sy§egs_˘x
(&
mãe_˘x
->
˝u_˘x
), 
CTX_SCTLR_EL1
, 
sy§eg
);

173 
rc
 = 
	`mãe_synchr⁄ous_•_íåy
(
mãe_˘x
);

179 i‡(
rc
 != 0)

180 
	`∑nic
();

183 
	`£t_mãe_p°©e
(
mãe_˘x
->
°©e
, 
MTEE_PSTATE_ON
);

184 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

185 
	}
}

192 
	$mãe_˝u_su•íd_föish_h™dÀr
(
uöt64_t
 
su•íd_Àvñ
)

194 
öt32_t
 
rc
 = 0;

195 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

196 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

197 
mãe_c⁄ãxt_t
 *
mãe_˘x
 = &
mãe_•_c⁄ãxt
[
löór_id
];

199 
	`as£π
(
mãe_ve˘‹s
);

200 
	`as£π
(
	`gë_mãe_p°©e
(
mãe_˘x
->
°©e
Ë=
MTEE_PSTATE_SUSPEND
);

203 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(&
mãe_˘x
->
˝u_˘x
),

204 
CTX_GPREG_X0
,

205 
su•íd_Àvñ
);

206 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
Ë&
mãe_ve˘‹s
->
˝u_ªsume_íåy
);

207 
rc
 = 
	`mãe_synchr⁄ous_•_íåy
(
mãe_˘x
);

213 i‡(
rc
 != 0)

214 
	`∑nic
();

217 
	`£t_mãe_p°©e
(
mãe_˘x
->
°©e
, 
MTEE_PSTATE_ON
);

218 
	}
}

224 
öt32_t
 
	$mãe_˝u_migøã_öfo
(
uöt64_t
 *
ªsidít_˝u
)

226  
MTEE_MIGRATE_INFO
;

227 
	}
}

233 c⁄° 
•d_pm_›s_t
 
	gmãe_pm
 = {

234 
mãe_˝u_⁄_h™dÀr
,

235 
mãe_˝u_off_h™dÀr
,

236 
mãe_˝u_su•íd_h™dÀr
,

237 
mãe_˝u_⁄_föish_h™dÀr
,

238 
mãe_˝u_su•íd_föish_h™dÀr
,

239 
NULL
,

240 
mãe_˝u_migøã_öfo


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee_private.h

3 #i‚de‡
__MTEE_PRIVATE_H__


4 
	#__MTEE_PRIVATE_H__


	)

6 
	~<c⁄ãxt.h
>

7 
	~<¨ch.h
>

8 
	~<psci.h
>

9 
	~<öãºu±_mgmt.h
>

10 
	~<∂©f‹m_def.h
>

12 
	~<mãe.h
>

18 
	#MTEE_PSTATE_OFF
 0

	)

19 
	#MTEE_PSTATE_ON
 1

	)

20 
	#MTEE_PSTATE_SUSPEND
 2

	)

21 
	#MTEE_PSTATE_SHIFT
 0

	)

22 
	#MTEE_PSTATE_MASK
 0x3

	)

23 
	#gë_mãe_p°©e
(
°©e
Ë((°©ê>> 
MTEE_PSTATE_SHIFT
Ë& 
MTEE_PSTATE_MASK
)

	)

24 
	#˛r_mãe_p°©e
(
°©e
Ë(°©ê&~(
MTEE_PSTATE_MASK
 \

25 << 
MTEE_PSTATE_SHIFT
))

	)

26 
	#£t_mãe_p°©e
(
°
, 
p°
) do { \

27 
	`˛r_mãe_p°©e
(
°
); \

28 
°
 |(
p°
 & 
MTEE_PSTATE_MASK
) << \

29 
MTEE_PSTATE_SHIFT
; \

30 } 0);

	)

41 
	#STD_SMC_ACTIVE_FLAG_SHIFT
 2

	)

42 
	#STD_SMC_ACTIVE_FLAG_MASK
 1

	)

43 
	#gë_°d_smc_a˘ive_Êag
(
°©e
Ë((°©ê>> 
STD_SMC_ACTIVE_FLAG_SHIFT
) \

44 & 
STD_SMC_ACTIVE_FLAG_MASK
)

	)

45 
	#£t_°d_smc_a˘ive_Êag
(
°©e
) (state |= \

46 1 << 
STD_SMC_ACTIVE_FLAG_SHIFT
)

	)

47 
	#˛r_°d_smc_a˘ive_Êag
(
°©e
) (state &= \

48 ~(
STD_SMC_ACTIVE_FLAG_MASK
 \

49 << 
STD_SMC_ACTIVE_FLAG_SHIFT
))

	)

54 
	#MTEE_AARCH32
 
MODE_RW_32


	)

55 
	#MTEE_AARCH64
 
MODE_RW_64


	)

60 
	#MTEE_TYPE_UP
 
PSCI_TOS_NOT_UP_MIG_CAP


	)

61 
	#MTEE_TYPE_UPM
 
PSCI_TOS_UP_MIG_CAP


	)

62 
	#MTEE_TYPE_MP
 
PSCI_TOS_NOT_PRESENT_MP


	)

68 
	#MTEE_MIGRATE_INFO
 
MTEE_TYPE_MP


	)

75 
	#MTEE_CORE_COUNT
 
PLATFORM_CORE_COUNT


	)

81 
	#TSPD_C_RT_CTX_X19
 0x0

	)

82 
	#TSPD_C_RT_CTX_X20
 0x8

	)

83 
	#TSPD_C_RT_CTX_X21
 0x10

	)

84 
	#TSPD_C_RT_CTX_X22
 0x18

	)

85 
	#TSPD_C_RT_CTX_X23
 0x20

	)

86 
	#TSPD_C_RT_CTX_X24
 0x28

	)

87 
	#TSPD_C_RT_CTX_X25
 0x30

	)

88 
	#TSPD_C_RT_CTX_X26
 0x38

	)

89 
	#TSPD_C_RT_CTX_X27
 0x40

	)

90 
	#TSPD_C_RT_CTX_X28
 0x48

	)

91 
	#TSPD_C_RT_CTX_X29
 0x50

	)

92 
	#TSPD_C_RT_CTX_X30
 0x58

	)

93 
	#TSPD_C_RT_CTX_SIZE
 0x60

	)

94 
	#TSPD_C_RT_CTX_ENTRIES
 (
TSPD_C_RT_CTX_SIZE
 >> 
DWORD_SHIFT
)

	)

100 
	#MTEE_NUM_ARGS
 0x2

	)

102 #i‚de‡
__ASSEMBLY__


105 
DEFINE_REG_STRUCT
(
c_π_ªgs
, 
TSPD_C_RT_CTX_ENTRIES
);

112 
CASSERT
(
TSPD_C_RT_CTX_SIZE
 =(
c_π_ªgs_t
), \

113 
as£π_•d_c_π_ªgs_size_mism©ch
);

125 
	smãe_c⁄ãxt
 {

126 
uöt64_t
 
	mßved_ñr_ñ3
;

127 
uöt32_t
 
	mßved_•§_ñ3
;

128 
uöt32_t
 
	m°©e
;

129 
uöt64_t
 
	mmpidr
;

130 
uöt64_t
 
	mc_π_˘x
;

131 
˝u_c⁄ãxt_t
 
	m˝u_˘x
;

132 } 
	tmãe_c⁄ãxt_t
;

134 
mãe_c⁄ãxt_t
 
mãe_•_c⁄ãxt
[
MTEE_CORE_COUNT
];

137 
	#MTEE_SMC_NWD
 0

	)

138 
	#MTEE_SMC_MONITOR
 2

	)

141 
	#ENTRY_OFFSET_FASTCALL
 0x2C

	)

142 
	#ENTRY_OFFSET_FIQ
 0x28

	)

143 
	#ENTRY_OFFSET_SMC
 0x24

	)

150 
	#MTEE_SMC_FASTCALL_RETURN
 (0xB2000001)

	)

152 
	#MTEE_SMC_FASTCALL_CONFIG_OK
 (0xB2000002)

	)

153 
	#MTEE_SMC_FASTCALL_CONFIG_VECTOR
 1

	)

154 
	#MTEE_SMC_FASTCALL_CONFIG_DEBUG
 2

	)

156 
	#MTEE_SMC_FASTCALL_OUTPUT
 (0xB2000003)

	)

157 
	#MTEE_SMC_FASTCALL_OUTPUT_PUTC
 1

	)

159 
	#MTEE_SMC_FASTCALL_STATUS
 (0xB2000004)

	)

160 
	#MTEE_SMC_FASTCALL_STATUS_EXECUTION
 1

	)

161 
	#MTEE_STATUS_NORMAL_BIT
 0x01

	)

162 
	#MTEE_STATUS_FASTCALL_OK_BIT
 0x02

	)

163 
	#MTEE_STATUS_SMC_OK_BIT
 0x04

	)

165 
	#MTEE_STATUS_UNINIT
 0x00

	)

166 
	#MTEE_STATUS_NORMAL
 (
MTEE_STATUS_NORMAL_BIT
|
MTEE_STATUS_FASTCALL_OK_BIT
|
MTEE_STATUS_SMC_OK_BIT
)

	)

168 
	#MTEE_SMC_FASTCALL_INPUT
 (0xB2000005)

	)

169 
	#MTEE_INPUT_HWIDENTITY
 0x01

	)

170 
	#MTEE_INPUT_HWKEY
 0x02

	)

171 
	#MTEE_INPUT_RNG
 0x03

	)

176 
mãe_c⁄ãxt_t
 *
£cuª_c⁄ãxt
;

179 c⁄° 
•d_pm_›s_t
 
mãe_pm
;

185 
	#MTEE_INIT_NONE
 0

	)

186 
	#MTEE_INIT_CONFIG_OK
 1

	)

187 
	#MTEE_INIT_SYSREGS_OK
 2

	)

190 
uöt64_t
 
mãeInôSètus
;

193 
uöt64_t
 
mãeExecuti⁄Sètus
;

196 
uöt64_t
 
mãeE¡ryBa£
;

198 
uöt32_t
 
mãeE¡rySp§
;

207 
	#REGISTER_FILE_COUNT
 2

	)

208 
	#REGISTER_FILE_NWD
 0

	)

209 
	#REGISTER_FILE_MONITOR
 1

	)

211 
uöt64_t
 
ªgi°îFûeSèπ
[
REGISTER_FILE_COUNT
];

212 
uöt64_t
 
ªgi°îFûeEnd
[
REGISTER_FILE_COUNT
];

218 
öt32_t
 
mãe_öô_£cuª_c⁄ãxt
(
uöt64_t
 
íåypoöt
,

219 
uöt32_t
 
rw
,

220 
uöt64_t
 
mpidr
,

221 
mãe_c⁄ãxt_t
 *
mãe_˘x
);

222 
mãe_£tup_íåy
(
˝u_c⁄ãxt_t
 *
ns_c⁄ãxt
, 
uöt32_t
 
ˇŒ_off£t
, uöt32_à
ªgfûeNro
);

223 
uöt64_t
 
mãe_fiq_h™dÀr
(
uöt32_t
 
id
, uöt32_à
Êags
, *
h™dÀ
, *
cookõ
);

226 
uöt64_t
 
mãe_íãr_•
(uöt64_à*
c_π_˘x
);

227 
__dód2
 
mãe_exô_•
(
uöt64_t
 
c_π_˘x
, uöt64_à
ªt
);

228 
uöt64_t
 
mãe_synchr⁄ous_•_íåy
(
mãe_c⁄ãxt_t
 *
mãe_˘x
);

229 
__dód2
 
mãe_synchr⁄ous_•_exô
(
mãe_c⁄ãxt_t
 *
mãe_˘x
, 
uöt64_t
 
ªt
);

231 
uöt64_t
 
maskSWdRegi°î
(uöt64_à
x
);

233 
öt32_t
 
mãe_Á°ˇŒ_£tup
();

234 
ßve_sy§egs_Ælc‹e
();

235 
mãe_öô_c‹e
(
uöt64_t
 
mpidr
);

236 
c⁄figuª_mãe
(
uöt64_t
 
x1
, uöt64_à
x2
);

238 #i‡
DEBUG


239 
	#DBG_PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

241 
	#DBG_PRINTF
(...)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee32/mtee32.mk

2 
	gMTEE_DIR
 :
£rvi˚s
/
•d
/
mãe


3 
SPD_INCLUDES
 :-
Iö˛ude
/
bl32
/
∑ylﬂds
 \

4 -
I$
{
MTEE_DIR
}/
ö˛ude
 \

5 -
I$
{
MTEE_DIR
}

7 
SPD_SOURCES
 :
mãe_comm⁄
.
c
 \

8 
mãe_hñ≥rs
.
S
 \

9 
mãe_maö
.
c
 \

10 
mãe_pm
.
c


12 
MTEE32
 := 1

13 
$
(
evÆ
 
	$$
(
ˇŒ
 
add_deföe
,
MTEE32
))

15 
v∑th
 %.
c
 
$
{
MTEE_DIR
}

16 
	gv∑th
 %.
S
 
	g$
{
	gMTEE_DIR
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase.mk

3 
	gTBASE_DIR
 :
£rvi˚s
/
•d
/
tba£


4 
SPD_INCLUDES
 :-
Iö˛ude
/
bl32
/
∑ylﬂds
 \

5 -
I$
{
TBASE_DIR
}

7 
SPD_SOURCES
 :
tba£_Á°ˇŒ
.
c
 \

8 
tba£_£tup
.
c
 \

9 
tba£_pm
.
c
 \

10 
tba£_hñ≥rs
.
S
 \

11 
tba£_comm⁄
.
c


13 
v∑th
 %.
c
 
$
{
TBASE_DIR
}

14 
v∑th
 %.
S
 
$
{
TBASE_DIR
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_common.c

12 
	~<°dio.h
>

13 
	~<î∫o.h
>

14 
	~<°rög.h
>

15 
	~<as£π.h
>

16 
	~<¨ch_hñ≥rs.h
>

17 
	~<∂©f‹m.h
>

18 
	~<bl_comm⁄.h
>

19 
	~<ru¡ime_svc.h
>

20 
	~<c⁄ãxt_mgmt.h
>

21 
	~<bl31.h
>

22 
	~<tba£_¥iv©e.h
>

33 
uöt64_t
 
	$tba£_synchr⁄ous_•_íåy
(
tba£_c⁄ãxt
 *
tba£_˘x
)

35 
uöt64_t
 
rc
;

37 
	`as£π
(
tba£_˘x
->
c_π_˘x
 == 0);

40 
	`as£π
(
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
SECURE
Ë=&
tba£_˘x
->
˝u_˘x
);

41 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
SECURE
);

42 
	`cm_£t_√xt_îë_c⁄ãxt
(
SECURE
);

44 
rc
 = 
	`tba£_íãr_•
(&
tba£_˘x
->
c_π_˘x
);

45 #i‡
DEBUG


46 
tba£_˘x
->
c_π_˘x
 = 0;

49  
rc
;

50 
	}
}

61 
	$tba£_synchr⁄ous_•_exô
(
tba£_c⁄ãxt
 *
tba£_˘x
, 
uöt64_t
 
ªt
, 
uöt32_t
 
ßve_sy§egs
)

64 
	`as£π
(
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
SECURE
Ë=&
tba£_˘x
->
˝u_˘x
);

65 i‡(
ßve_sy§egs
)

66 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
SECURE
);

68 
	`as£π
(
tba£_˘x
->
c_π_˘x
 != 0);

69 
	`tba£_exô_•
(
tba£_˘x
->
c_π_˘x
, 
ªt
);

72 
	`as£π
(0);

73 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_fastcall.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<as£π.h
>

15 
	~<¨ch_hñ≥rs.h
>

16 
	~<c⁄sﬁe.h
>

17 
	~<∂©f‹m.h
>

18 
	~<c⁄ãxt_mgmt.h
>

19 
	~<ru¡ime_svc.h
>

20 
	~<bl31.h
>

21 
	~<tba£_¥iv©e.h
>

23 
	~<bl_comm⁄.h
>

24 
	~<gic_v2.h
>

25 
	~<gic_v3.h
>

26 
	~<öãºu±_mgmt.h
>

27 
	~"∂©_¥iv©e.h
"

46 
msm_¨ó_t
 
	gmsm_¨ó
;

49 
tba£_c⁄ãxt
 *
	g£cuª_c⁄ãxt
 = 
msm_¨ó
.
£cuª_c⁄ãxt
;

52 
uöt32_t
 
∂©_tba£_öput
(
uöt64_t
 
D©aId
,uöt64_t* 
Lígth
,* 
out
);

53 
uöt32_t
 
∂©_tba£_dump
();

54 
mt_©f_åiggî_WDT_FIQ
();

59 
	$tba£_£tup_íåy_comm⁄
–
˝u_c⁄ãxt_t
 *
s_c⁄ãxt
,

60 
˝u_c⁄ãxt_t
 *
ns_c⁄ãxt
,

61 
uöt32_t
 
ˇŒ_off£t
) {

63 
gp_ªgs_t
 *
s_g¥egs
 = 
	`gë_g¥egs_˘x
(
s_c⁄ãxt
);

66 
uöt64_t
 
ns_•§
 = 
	`ªad_˘x_ªg
(
	`gë_ñ3°©e_˘x
(
ns_c⁄ãxt
), 
CTX_SPSR_EL3
);

67 
	`wrôe_˘x_ªg
(
s_g¥egs
, 
CTX_GPREG_X2
, 
ns_•§
);

70 
ñ3_°©e_t
 *
ñ3sy§egs
 = 
	`gë_ñ3°©e_˘x
(
s_c⁄ãxt
);

71 
	`wrôe_˘x_ªg
(
ñ3sy§egs
, 
CTX_SPSR_EL3
, 
tba£E¡rySp§
);

73 
	`cm_£t_ñr_ñ3
(
SECURE
,
tba£E¡ryBa£
+
ˇŒ_off£t
);

74 
	}
}

79 
	$tba£_£tup_íåy_nwd
–
˝u_c⁄ãxt_t
 *
ns_c⁄ãxt
, 
uöt32_t
 
ˇŒ_off£t
 ) {

81 
uöt64_t
 
ªgi°îAddªss
 = (
öt64_t
)
	`gë_g¥egs_˘x
(
ns_c⁄ãxt
);

84 
˝u_c⁄ãxt_t
 *
s_c⁄ãxt
 = (˝u_c⁄ãxt_à*Ë
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
SECURE
);

85 
gp_ªgs_t
 *
s_g¥egs
 = 
	`gë_g¥egs_˘x
(
s_c⁄ãxt
);

88 
uöt64_t
 
ªgi°îOff£t
 = 
ªgi°îAddªss
 -
ªgi°îFûeSèπ
[
REGISTER_FILE_NWD
];

89 
	`wrôe_˘x_ªg
(
s_g¥egs
, 
CTX_GPREG_X0
, 
ªgi°îOff£t
);

91 
	`wrôe_˘x_ªg
(
s_g¥egs
, 
CTX_GPREG_X1
, (
TBASE_NWD_REGISTER_COUNT
<<8Ë| 
TBASE_SMC_NWD
);

93 
	`tba£_£tup_íåy_comm⁄
–
s_c⁄ãxt
, 
ns_c⁄ãxt
, 
ˇŒ_off£t
 );

94 
	}
}

99 
	$tba£_£tup_íåy_m⁄ô‹
–
˝u_c⁄ãxt_t
 *
ns_c⁄ãxt
 ) {

100 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

101 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

102 
uöt64_t
 
ªgi°îAddªss
 = (
öt64_t
)
£cuª_c⁄ãxt
[
löór_id
].
m⁄ô‹CÆlRegs
;

105 
˝u_c⁄ãxt_t
 *
s_c⁄ãxt
 = (˝u_c⁄ãxt_à*Ë
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
SECURE
);

106 
gp_ªgs_t
 *
s_g¥egs
 = 
	`gë_g¥egs_˘x
(
s_c⁄ãxt
);

109 
uöt64_t
 
ªgi°îOff£t
 = 
ªgi°îAddªss
 -
ªgi°îFûeSèπ
[
REGISTER_FILE_MONITOR
];

110 
	`wrôe_˘x_ªg
(
s_g¥egs
, 
CTX_GPREG_X0
, 
ªgi°îOff£t
);

112 
	`wrôe_˘x_ªg
(
s_g¥egs
, 
CTX_GPREG_X1
, (
TBASE_MAX_MONITOR_CALL_REGS
<<8Ë| 
TBASE_SMC_MONITOR
);

114 
	`tba£_£tup_íåy_comm⁄
–
s_c⁄ãxt
, 
ns_c⁄ãxt
, 
ENTRY_OFFSET_FASTCALL
 );

115 
	}
}

120 #i‡
DEBUG


121 
	$¥öt_Á°ˇŒ_∑øms
–*
msg
, 
uöt32_t
 
£cuª
 ) {

122 
gp_ªgs_t
 *
ns_g¥egs
 = 
	`gë_g¥egs_˘x
((
˝u_c⁄ãxt_t
 *Ë
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(),
£cuª
));

123 
	`DBG_PRINTF
("tba£ %†(%dË0x%Œx 0x%Œx 0x%Œx 0x%Œx\n\r", 
msg
, 
£cuª
,

124 
	`ªad_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X0
),

125 
	`ªad_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X1
),

126 
	`ªad_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X2
),

127 
	`ªad_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X3
) );

128 
	}
}

138 
uöt64_t
 
	$tba£_m⁄ô‹_Á°ˇŒ
(
uöt32_t
 
smc_fid
,

139 
uöt64_t
 
x1
,

140 
uöt64_t
 
x2
,

141 
uöt64_t
 
x3
,

142 
uöt64_t
 
x4
,

143 
fc_ª•⁄£_t
 *
ª•
 )

145 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

146 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

147 
tba£_c⁄ãxt
 *
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

148 
uöt64_t
 *
ªgs
 = 
tba£_˘x
->
m⁄ô‹CÆlRegs
;

150 i‡((
tba£Executi⁄Sètus
&
TBASE_STATUS_FASTCALL_OK_BIT
)==0) {

152 
	`DBG_PRINTF
( "tbase_monitor_fastcallÅbaseÇotÑeady for fastcall\n\r" );

155 if(
tba£_˘x
->
°©e
 =
TBASE_STATE_OFF
) {

156 
	`DBG_PRINTF
( "tbase_monitor_fastcallÅbaseÇotÑeady for fastcall\n\r" );

162 
ªgs
[0] = 
smc_fid
;

163 
ªgs
[1] = 
x1
;

164 
ªgs
[2] = 
x2
;

165 
ªgs
[3] = 
x3
;

166 
ªgs
[4] = 
x4
;

168 
˝u_c⁄ãxt_t
 *
ns_c⁄ãxt
 = (˝u_c⁄ãxt_à*Ë
	`cm_gë_c⁄ãxt
(
mpidr
,
NON_SECURE
);

169 
	`tba£_£tup_íåy_m⁄ô‹
(
ns_c⁄ãxt
);

171 
	`tba£_synchr⁄ous_•_íåy
(
tba£_˘x
);

173 i‡(
ª•
!=
NULL
) {

174 
ª•
->
x1
 = 
ªgs
[1];

175 
ª•
->
x2
 = 
ªgs
[2];

176 
ª•
->
x3
 = 
ªgs
[3];

177 
ª•
->
x4
 = 
ªgs
[4];

181 
	}
}

186 
	$ouçut
(
uöt64_t
 
x1
,uöt64_à
x2
)

188 
	`maskSWdRegi°î
(
x1
)) {

189 
TBASE_SMC_FASTCALL_OUTPUT_PUTC
:

190 
	`TBASE_OUTPUT_PUTC
(
x2
&0xFF);

193 
	}
}

199 
	$tba£_°©us
(
uöt64_t
 
x1
,uöt64_à
x2
)

201 
	`DBG_PRINTF
–"tba£_Á°ˇŒ_h™dÀ∏TBASE_SMC_FASTCALL_STATUS %x %x\n\r", 
x1
, 
x2
 );

202 
	`maskSWdRegi°î
(
x1
)) {

203 
TBASE_SMC_FASTCALL_STATUS_EXECUTION
:

204 
tba£Executi⁄Sètus
 = 
	`maskSWdRegi°î
(
x2
);

205 
	`TBASE_EXECUTION_STATUS
(
tba£Executi⁄Sètus
);

208 
	}
}

214 
	$tba£_åiggîSgiDump
()

216 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

217 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

219 
uöt32_t
 
SGIT¨gës
;

222 
	`gicd_˛r_igrou¥
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
FIQ_SMP_CALL_SGI
);

223 
	`gicd_£t_ùri‹ôyr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
FIQ_SMP_CALL_SGI
, 
GIC_HIGHEST_SEC_PRIORITY
);

226 
	`gicd_£t_i£«bÀr
(
	`mt_gë_cfgv¨
(
CONFIG_GICD_ADDR
), 
FIQ_SMP_CALL_SGI
);

230 
SGIT¨gës
 = 0xFF;

231 
SGIT¨gës
 &~(1 << 
löór_id
);

234 
	`úq_øi£_so·úq
(
SGIT¨gës
, 
FIQ_SMP_CALL_SGI
);

237 
	`∂©_tba£_dump
();

238 
	}
}

243 
uöt64_t
 
	$tba£_Á°ˇŒ_h™dÀr
(
uöt32_t
 
smc_fid
,

244 
uöt64_t
 
x1
,

245 
uöt64_t
 
x2
,

246 
uöt64_t
 
x3
,

247 
uöt64_t
 
x4
,

248 *
cookõ
,

249 *
h™dÀ
,

250 
uöt64_t
 
Êags
)

252 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

253 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

254 
tba£_c⁄ãxt
 *
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

255 
ˇŒî_£curôy_°©e
 = 
Êags
&1;

257 i‡(
ˇŒî_£curôy_°©e
==
SECURE
) {

258 
	`maskSWdRegi°î
(
smc_fid
)) {

259 
TBASE_SMC_FASTCALL_RETURN
: {

262 
	`DBG_PRINTF
( "tbase_fastcall_handler TBASE_SMC_FASTCALL_RETURN\n\r");

263 
	`tba£_synchr⁄ous_•_exô
(
tba£_˘x
, 0, 1);

265 
TBASE_SMC_FASTCALL_CONFIG_OK
: {

266 
	`DBG_PRINTF
( "tbase_fastcall_handler TBASE_SMC_FASTCALL_CONFIG_OK\n\r");

267 
	`c⁄figuª_tba£
(
x1
,
x2
);

268 
	`SMC_RET1
(
h™dÀ
,
smc_fid
);

271 
TBASE_SMC_FASTCALL_OUTPUT
: {

272 
	`ouçut
(
x1
,
x2
);

273 
	`SMC_RET1
(
h™dÀ
,
smc_fid
);

276 
TBASE_SMC_FASTCALL_STATUS
: {

277 
	`DBG_PRINTF
( "tbase_fastcall_handler TBASE_SMC_FASTCALL_STATUS\n\r");

278 
	`tba£_°©us
(
x1
,
x2
);

279 
	`SMC_RET1
(
h™dÀ
,
smc_fid
);

282 
TBASE_SMC_FASTCALL_INPUT
: {

283 
	`DBG_PRINTF
( "tbase_fastcall_handler TBASE_SMC_FASTCALL_INPUT\n\r");

284 
smc_fid
 = 
	`∂©_tba£_öput
(
x1
,&
x2
,&(
tba£_˘x
->
tba£_öput_Á°ˇŒ
));

285 
	`SMC_RET3
(
h™dÀ
,
smc_fid
,
	`∑ge_Æign
(
ªgi°îFûeEnd
[
REGISTER_FILE_NWD
] - 
ªgi°îFûeSèπ
[REGISTER_FILE_NWD], 
UP
)+(
uöt64_t
)&(
tba£_˘x
->
tba£_öput_Á°ˇŒ
)-Ñegi°îFûeSèπ[
REGISTER_FILE_MONITOR
],
x2
);

288 
TBASE_SMC_FASTCALL_DUMP
: {

289 
	`DBG_PRINTF
( "tbase_fastcall_handler TBASE_SMC_FASTCALL_DUMP\n\r");

290 
	`tba£_åiggîSgiDump
();

291 
	`SMC_RET1
(
h™dÀ
,
smc_fid
);

297 
	`DBG_PRINTF
–"tba£_Á°ˇŒ_h™dÀ∏SMC_UNK %x\n\r", 
smc_fid
 );

298 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

305 i‡(
smc_fid
 =
TBASE_SMC_AEE_DUMP
)

307 
	`mt_©f_åiggî_WDT_FIQ
();

313 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

314 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

317 i‡((
tba£Executi⁄Sètus
&
TBASE_STATUS_FASTCALL_OK_BIT
)==0) {

320 
	`DBG_PRINTF
( "tbase_fastcall_handlerÅbaseÇotÑeady for fastcall\n\r" );

321 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

324 if(
tba£_˘x
->
°©e
 =
TBASE_STATE_OFF
) {

325 
	`DBG_PRINTF
( "tbase_fastcall_handlerÅbaseÇotÑeady for fastcall\n\r" );

326 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

330 
	`DBG_PRINTF
–"tba£_Á°ˇŒ_h™dÀ∏NWd %x\n\r", 
smc_fid
 );

333 
gp_ªgs_t
 *
ns_g¥egs
 = 
	`gë_g¥egs_˘x
((
˝u_c⁄ãxt_t
 *)
h™dÀ
);

334 
	`wrôe_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X0
, 
smc_fid
 );

335 
	`wrôe_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X1
, 
x1
 );

336 
	`wrôe_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X2
, 
x2
 );

337 
	`wrôe_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X3
, 
x3
 );

338 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

341 
	`tba£_£tup_íåy_nwd
((
˝u_c⁄ãxt_t
 *)
h™dÀ
,
ENTRY_OFFSET_FASTCALL
);

342 #i‡
DEBUG


343 
	`¥öt_Á°ˇŒ_∑øms
("íåy", 
NON_SECURE
);

345 
	`tba£_synchr⁄ous_•_íåy
(
tba£_˘x
);

346 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

347 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

350 
	}
}

356 
uöt64_t
 
	$tba£_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

357 
uöt64_t
 
x1
,

358 
uöt64_t
 
x2
,

359 
uöt64_t
 
x3
,

360 
uöt64_t
 
x4
,

361 *
cookõ
,

362 *
h™dÀ
,

363 
uöt64_t
 
Êags
)

365 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

366 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

367 
tba£_c⁄ãxt
 *
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

368 
ˇŒî_£curôy_°©e
 = 
Êags
&1;

370 
	`DBG_PRINTF
("tba£_smc_h™dÀ∏%d %x\n\r", 
ˇŒî_£curôy_°©e
, 
smc_fid
);

372 i‡(
ˇŒî_£curôy_°©e
==
SECURE
) {

375 i‡(
tba£InôSètus
==
TBASE_INIT_CONFIG_OK
) {

378 
	`ßve_sy§egs_Ælc‹e
();

379 
tba£InôSètus
 = 
TBASE_INIT_SYSREGS_OK
;

380 i‡(
tba£Executi⁄Sètus
==
TBASE_STATUS_UNINIT
) {

381 
tba£Executi⁄Sètus
 = 
TBASE_STATUS_NORMAL
;

385 
	`tba£_synchr⁄ous_•_exô
(
tba£_˘x
, 0, 1);

388 i‡((
tba£Executi⁄Sètus
&
TBASE_STATUS_SMC_OK_BIT
)==0) {

390 
	`DBG_PRINTF
( "tbase_smc_handlerÅbaseÇotÑeady for smc.\n\r");

392 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

395 if(
tba£_˘x
->
°©e
 =
TBASE_STATE_OFF
) {

396 
	`DBG_PRINTF
( "tbase_smc_handlerÅbaseÇotÑeady for fastcall\n\r" );

404 
gp_ªgs_t
 *
ns_g¥egs
 = 
	`gë_g¥egs_˘x
((
˝u_c⁄ãxt_t
 *)
h™dÀ
);

405 
	`wrôe_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X0
, 
smc_fid
 );

406 
	`wrôe_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X1
, 
x1
 );

407 
	`wrôe_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X2
, 
x2
 );

408 
	`wrôe_˘x_ªg
(
ns_g¥egs
, 
CTX_GPREG_X3
, 
x3
 );

409 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

412 
	`tba£_£tup_íåy_nwd
((
˝u_c⁄ãxt_t
 *)
h™dÀ
,
ENTRY_OFFSET_SMC
);

414 
	`tba£_synchr⁄ous_•_íåy
(
tba£_˘x
);

416 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

417 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

420 
	}
}

424 
uöt64_t
 
	$tba£_fiq_h™dÀr
–
uöt32_t
 
id
,

425 
uöt32_t
 
Êags
,

426 *
h™dÀ
,

427 *
cookõ
)

429 
uöt64_t
 
mpidr
;

430 
uöt32_t
 
löór_id
;

431 
tba£_c⁄ãxt
 *
tba£_˘x
;

433 
mpidr
 = 
	`ªad_mpidr
();

434 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

435 
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

436 
	`as£π
(&
tba£_˘x
->
˝u_˘x
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

439 i‡(
id
 =
FIQ_SMP_CALL_SGI
) {

442 
ür
;

443 
ür
 = 
	`gicc_ªad_IAR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
));

444 
	`gicc_wrôe_EOIR
(
	`mt_gë_cfgv¨
(
CONFIG_GICC_ADDR
), 
ür
);

447 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

449 
	`∂©_tba£_dump
();

457 
	`as£π
(
	`gë_öãºu±_§c_ss
(
Êags
Ë=
NON_SECURE
);

460 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
));

462 i‡((
tba£Executi⁄Sètus
&
TBASE_STATUS_SMC_OK_BIT
)==0) {

466 
	`DBG_PRINTF
( "tbase_interrupt_handlerÅbaseÇotÑeady for interrupt\n\r" );

469 if(
tba£_˘x
->
°©e
 =
TBASE_STATE_OFF
) {

470 
	`DBG_PRINTF
( "tbase_interrupt_handlerÅbaseÇotÑeady for fastcall\n\r" );

475 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

478 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
SECURE
);

479 
	`cm_£t_√xt_îë_c⁄ãxt
(
SECURE
);

482 
	`tba£_£tup_íåy_nwd
((
˝u_c⁄ãxt_t
 *)
h™dÀ
,
ENTRY_OFFSET_FIQ
);

485 
	`tba£_synchr⁄ous_•_íåy
(
tba£_˘x
);

488 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

489 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

493 
	}
}

498 
DECLARE_RT_SVC
(

499 
tba£_Á°ˇŒ
,

500 
OEN_TOS_START
,

501 
OEN_TOS_END
,

502 
SMC_TYPE_FAST
,

503 
tba£_Á°ˇŒ_£tup
,

504 
tba£_Á°ˇŒ_h™dÀr


509 
DECLARE_RT_SVC
(

510 
tba£_smc
,

513 
SMC_TYPE_STD
,

514 
NULL
,

515 
tba£_smc_h™dÀr


518 #i‡
TBASE_OEM_ROUTE_ENABLE


520 
DECLARE_RT_SVC
(

521 
tba£_€m_Á°ˇŒ
,

522 
OEN_OEM_START
,

523 
OEN_OEM_END
,

524 
SMC_TYPE_FAST
,

525 
NULL
,

526 
tba£_Á°ˇŒ_h™dÀr


530 #i‡
TBASE_SIP_ROUTE_ENABLE


532 
DECLARE_RT_SVC
(

533 
tba£_sù_Á°ˇŒ
,

534 
OEN_SIP_START
,

535 
OEN_SIP_END
,

536 
SMC_TYPE_FAST
,

537 
NULL
,

538 
tba£_Á°ˇŒ_h™dÀr


542 #i‡
TBASE_DUMMY_SIP_ROUTE_ENABLE


545 
DECLARE_RT_SVC
(

546 
tba£_dummy_sù_Á°ˇŒ
,

547 
OEN_CPU_START
,

548 
OEN_CPU_END
,

549 
SMC_TYPE_FAST
,

550 
tba£_dummy_£tup
,

551 
tba£_Á°ˇŒ_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_helpers.S

31 
	~<asm_ma¸os.S
>

32 
	~"tba£_¥iv©e.h
"

34 .
globÆ
 
tba£_íãr_•


45 
func
 
tba£_íãr_•


47 
mov
 
	gx3
, 
•


48 
°r
 
	gx3
, [
x0
, #0]

49 
sub
 
	g•
, sp, #TSPD_C_RT_CTX_SIZE

52 
°p
 
	gx19
, 
	gx20
, [
•
, #TSPD_C_RT_CTX_X19]

53 
°p
 
	gx21
, 
	gx22
, [
•
, #TSPD_C_RT_CTX_X21]

54 
°p
 
	gx23
, 
	gx24
, [
•
, #TSPD_C_RT_CTX_X23]

55 
°p
 
	gx25
, 
	gx26
, [
•
, #TSPD_C_RT_CTX_X25]

56 
°p
 
	gx27
, 
	gx28
, [
•
, #TSPD_C_RT_CTX_X27]

57 
°p
 
	gx29
, 
	gx30
, [
•
, #TSPD_C_RT_CTX_X29]

66 
b
 
	gñ3_exô


79 .
globÆ
 
tba£_exô_•


80 
func
 
tba£_exô_•


82 
mov
 
	g•
, 
x0


85 
ldp
 
	gx19
, 
	gx20
, [
x0
, #(
TSPD_C_RT_CTX_X19
 - 
TSPD_C_RT_CTX_SIZE
)]

86 
ldp
 
	gx21
, 
	gx22
, [
x0
, #(
TSPD_C_RT_CTX_X21
 - 
TSPD_C_RT_CTX_SIZE
)]

87 
ldp
 
	gx23
, 
	gx24
, [
x0
, #(
TSPD_C_RT_CTX_X23
 - 
TSPD_C_RT_CTX_SIZE
)]

88 
ldp
 
	gx25
, 
	gx26
, [
x0
, #(
TSPD_C_RT_CTX_X25
 - 
TSPD_C_RT_CTX_SIZE
)]

89 
ldp
 
	gx27
, 
	gx28
, [
x0
, #(
TSPD_C_RT_CTX_X27
 - 
TSPD_C_RT_CTX_SIZE
)]

90 
ldp
 
	gx29
, 
	gx30
, [
x0
, #(
TSPD_C_RT_CTX_X29
 - 
TSPD_C_RT_CTX_SIZE
)]

100 
mov
 
	gx0
, 
x1


101 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_pm.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<as£π.h
>

15 
	~<¨ch_hñ≥rs.h
>

16 
	~<c⁄sﬁe.h
>

17 
	~<∂©f‹m.h
>

18 
	~<c⁄ãxt_mgmt.h
>

19 
	~<ru¡ime_svc.h
>

20 
	~<bl31.h
>

22 
	~<tba£_¥iv©e.h
>

23 
	~<debug.h
>

25 #i‡
TBASE_PM_ENABLE


27 
	~<psci.h
>

32 
	$tba£_˝u_⁄_h™dÀr
(
uöt64_t
 
èrgë_˝u
)

34 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

35 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

36 
tba£_c⁄ãxt
 *
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

40 
tba£_˘x
->
°©e
 = 
TBASE_STATE_ON
;

41 
	}
}

46 
öt32_t
 
	$tba£_˝u_off_h™dÀr
(
uöt64_t
 
cookõ
)

48 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

49 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

50 
tba£_c⁄ãxt
 *
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

51 
	`as£π
(
tba£_˘x
->
°©e
 =
TBASE_STATE_ON
);

53 
	`DBG_PRINTF
("\r\¡ba£_˝u_off_h™dÀ∏%d\r\n", 
löór_id
);

55 
tba£_˘x
->
°©e
 = 
TBASE_STATE_OFF
;

57 
	}
}

63 
	$tba£_˝u_su•íd_h™dÀr
(
uöt64_t
 
powî_°©e
)

65 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

66 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

67 
tba£_c⁄ãxt
 *
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

68 
	`as£π
(
tba£_˘x
->
°©e
 =
TBASE_STATE_ON
);

70 
	`DBG_PRINTF
("\r\¡ba£_˝u_su•íd_h™dÀ∏%d\r\n", 
löór_id
);

72 
tba£_˘x
->
°©e
 = 
TBASE_STATE_SUSPEND
;

73 
	}
}

78 
	$tba£_˝u_⁄_föish_h™dÀr
(
uöt64_t
 
cookõ
)

81 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

82 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

83 
tba£_c⁄ãxt
 *
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

85 
	`as£π
(
tba£_˘x
->
°©e
 =
TBASE_STATE_OFF
);

88 
	`tba£_öô_c‹e
(
mpidr
);

90 
	`DBG_PRINTF
("\r\¡ba£_˝u_⁄_föish_h™dÀ∏%d\r\n", 
löór_id
);

93 
tba£_˘x
->
°©e
 = 
TBASE_STATE_ON
;

94 
	}
}

99 
	$tba£_˝u_su•íd_föish_h™dÀr
(
uöt64_t
 
su•íd_Àvñ
)

102 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

103 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

104 
tba£_c⁄ãxt
 *
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

106 
	`as£π
(
tba£_˘x
->
°©e
 =
TBASE_STATE_SUSPEND
);

108 
	`DBG_PRINTF
("\r\¡ba£_˝u_su•íd_föish_h™dÀ∏%d\r\n", 
löór_id
);

111 
tba£_˘x
->
°©e
 = 
TBASE_STATE_ON
;

112 
	}
}

117 
öt32_t
 
	$tba£_˝u_migøã_öfo
(
uöt64_t
 *
ªsidít_˝u
)

119  
TBASE_MIGRATE_INFO
;

120 
	}
}

125 
	$tba£_migøã_h™dÀr
(
uöt64_t
 
x1
, uöt64_à
∑r2
) {

126 #i‡
DEBUG


127 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

128 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

131 
	`DBG_PRINTF
("\r\¡ba£_migøã_h™dÀ∏%d %x %x\r\n", 
löór_id
, 
x1
, 
∑r2
);

137 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

139 
fc_ª•⁄£_t
 
ª•
;

140  
	`tba£_m⁄ô‹_Á°ˇŒ
(0 , 
x1
, 
∑r2
, 0, 0, &
ª•
 );

142 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

143 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

144 
	}
}

151 c⁄° 
•d_pm_›s_t
 
	gtba£_pm
 = {

152 
tba£_˝u_⁄_h™dÀr
,

153 
tba£_˝u_off_h™dÀr
,

154 
tba£_˝u_su•íd_h™dÀr
,

155 
tba£_˝u_⁄_föish_h™dÀr
,

156 
tba£_˝u_su•íd_föish_h™dÀr
,

157 
tba£_migøã_h™dÀr
,

158 
tba£_˝u_migøã_öfo


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_private.h

32 #i‚de‡
__TBASE_PRIVATE_H__


33 
	#__TBASE_PRIVATE_H__


	)

35 
	~<c⁄ãxt.h
>

36 
	~<¨ch.h
>

37 
	~<psci.h
>

38 
	~<öãºu±_mgmt.h
>

39 
	~<∂©f‹m_def.h
>

41 
	~<tba£.h
>

46 
	#TBASE_STATE_OFF
 0

	)

47 
	#TBASE_STATE_ON
 1

	)

48 
	#TBASE_STATE_SUSPEND
 2

	)

53 
	#TBASE_AARCH32
 
MODE_RW_32


	)

54 
	#TBASE_AARCH64
 
MODE_RW_64


	)

59 
	#TBASE_TYPE_UP
 
PSCI_TOS_NOT_UP_MIG_CAP


	)

60 
	#TBASE_TYPE_UPM
 
PSCI_TOS_UP_MIG_CAP


	)

61 
	#TBASE_TYPE_MP
 
PSCI_TOS_NOT_PRESENT_MP


	)

67 
	#TBASE_MIGRATE_INFO
 
TBASE_TYPE_MP


	)

74 
	#TBASE_CORE_COUNT
 
PLATFORM_CORE_COUNT


	)

80 
	#TSPD_C_RT_CTX_X19
 0x0

	)

81 
	#TSPD_C_RT_CTX_X20
 0x8

	)

82 
	#TSPD_C_RT_CTX_X21
 0x10

	)

83 
	#TSPD_C_RT_CTX_X22
 0x18

	)

84 
	#TSPD_C_RT_CTX_X23
 0x20

	)

85 
	#TSPD_C_RT_CTX_X24
 0x28

	)

86 
	#TSPD_C_RT_CTX_X25
 0x30

	)

87 
	#TSPD_C_RT_CTX_X26
 0x38

	)

88 
	#TSPD_C_RT_CTX_X27
 0x40

	)

89 
	#TSPD_C_RT_CTX_X28
 0x48

	)

90 
	#TSPD_C_RT_CTX_X29
 0x50

	)

91 
	#TSPD_C_RT_CTX_X30
 0x58

	)

92 
	#TSPD_C_RT_CTX_SIZE
 0x60

	)

93 
	#TSPD_C_RT_CTX_ENTRIES
 (
TSPD_C_RT_CTX_SIZE
 >> 
DWORD_SHIFT
)

	)

95 #i‚de‡
__ASSEMBLY__


98 
DEFINE_REG_STRUCT
(
c_π_ªgs
, 
TSPD_C_RT_CTX_ENTRIES
);

105 
CASSERT
(
TSPD_C_RT_CTX_SIZE
 =(
c_π_ªgs_t
), \

106 
as£π_•d_c_π_ªgs_size_mism©ch
);

119 
uöt32_t
 
	m°©e
;

120 
uöt64_t
 
	mmpidr
;

121 
uöt64_t
 
	mc_π_˘x
;

122 
˝u_c⁄ãxt_t
 
	m˝u_˘x
;

123 
uöt64_t
 
	mm⁄ô‹CÆlRegs
[
TBASE_MAX_MONITOR_CALL_REGS
];

124 
uöt64_t
 
	mtba£_öput_Á°ˇŒ
[4];

125 } 
	ttba£_c⁄ãxt
;

128 
uöt32_t
 
	mmagic
;

129 
uöt32_t
 
	mÀngth
;

130 
uöt64_t
 
	mvîsi⁄
;

131 
uöt64_t
 
	mdRamBa£
;

132 
uöt64_t
 
	mdRamSize
;

133 
uöt64_t
 
	m£cDRamBa£
;

134 
uöt64_t
 
	m£cDRamSize
;

135 
uöt64_t
 
	m£cIRamBa£
;

136 
uöt64_t
 
	m£cIRamSize
;

137 
uöt64_t
 
	mc⁄f_maú_ñ3
;

138 
uöt32_t
 
	mRFU1
;

139 
uöt32_t
 
	mMSMPãCou¡
;

140 
uöt64_t
 
	mMSMBa£
;

141 
uöt64_t
 
	mgic_di°ribut‹_ba£
;

142 
uöt64_t
 
	mgic_˝uöãrÁ˚_ba£
;

143 
uöt32_t
 
	mgic_vîsi⁄
;

144 
uöt32_t
 
	mtŸÆ_numbî_•i
;

145 
uöt32_t
 
	mssiq_numbî
;

146 
uöt32_t
 
	mRFU2
;

147 
uöt64_t
 
	mÊags
;

148 } 
	tboŸCfg_t
;

152 
	#TBASE_BOOTCFG_MAGIC
 (0x434d4254)

153 

	)

155 
	#TBASE_SMC_NWD
 0

	)

156 
	#TBASE_SMC_MONITOR
 2

	)

159 
	#ENTRY_OFFSET_FASTCALL
 0x2C

	)

160 
	#ENTRY_OFFSET_FIQ
 0x28

	)

161 
	#ENTRY_OFFSET_SMC
 0x24

	)

168 
	#TBASE_SMC_FASTCALL_RETURN
 (0xB2000001)

	)

170 
	#TBASE_SMC_FASTCALL_CONFIG_OK
 (0xB2000002)

	)

171 
	#TBASE_SMC_FASTCALL_CONFIG_VECTOR
 1

	)

172 
	#TBASE_SMC_FASTCALL_CONFIG_DEBUG
 2

	)

174 
	#TBASE_SMC_FASTCALL_OUTPUT
 (0xB2000003)

	)

175 
	#TBASE_SMC_FASTCALL_OUTPUT_PUTC
 1

	)

177 
	#TBASE_SMC_FASTCALL_STATUS
 (0xB2000004)

	)

178 
	#TBASE_SMC_FASTCALL_STATUS_EXECUTION
 1

	)

179 
	#TBASE_STATUS_NORMAL_BIT
 0x01

	)

180 
	#TBASE_STATUS_FASTCALL_OK_BIT
 0x02

	)

181 
	#TBASE_STATUS_SMC_OK_BIT
 0x04

	)

183 
	#TBASE_STATUS_UNINIT
 0x00

	)

184 
	#TBASE_STATUS_NORMAL
 (
TBASE_STATUS_NORMAL_BIT
|
TBASE_STATUS_FASTCALL_OK_BIT
|
TBASE_STATUS_SMC_OK_BIT
)

	)

186 
	#TBASE_SMC_FASTCALL_INPUT
 (0xB2000005)

	)

187 
	#TBASE_INPUT_HWIDENTITY
 0x01

	)

188 
	#TBASE_INPUT_HWKEY
 0x02

	)

189 
	#TBASE_INPUT_RNG
 0x03

	)

191 
	#TBASE_SMC_FASTCALL_DUMP
 (0xB2000006)

	)

193 
	#TBASE_SMC_AEE_DUMP
 (0xB200AEED)

	)

197 
	smsm_¨ó_t
 {

198 
tba£_c⁄ãxt
 
	m£cuª_c⁄ãxt
[
TBASE_CORE_COUNT
];

201 
msm_¨ó_t
 
msm_¨ó
;

204 
tba£_c⁄ãxt
 *
£cuª_c⁄ãxt
;

207 c⁄° 
•d_pm_›s_t
 
tba£_pm
;

213 
	#TBASE_INIT_NONE
 0

	)

214 
	#TBASE_INIT_CONFIG_OK
 1

	)

215 
	#TBASE_INIT_SYSREGS_OK
 2

	)

218 
uöt64_t
 
tba£InôSètus
;

221 
uöt64_t
 
tba£Executi⁄Sètus
;

224 
uöt64_t
 
tba£E¡ryBa£
;

226 
uöt32_t
 
tba£E¡rySp§
;

235 
	#REGISTER_FILE_COUNT
 2

	)

236 
	#REGISTER_FILE_NWD
 0

	)

237 
	#REGISTER_FILE_MONITOR
 1

	)

239 
uöt64_t
 
ªgi°îFûeSèπ
[
REGISTER_FILE_COUNT
];

240 
uöt64_t
 
ªgi°îFûeEnd
[
REGISTER_FILE_COUNT
];

246 
tba£_£tup_íåy
–
˝u_c⁄ãxt_t
 *
ns_c⁄ãxt
, 
uöt32_t
 
ˇŒ_off£t
, uöt32_à
ªgfûeNro
);

247 
uöt64_t
 
tba£_fiq_h™dÀr
(
uöt32_t
 
id
, uöt32_à
Êags
, *
h™dÀ
, *
cookõ
);

250 
uöt64_t
 
tba£_íãr_•
(uöt64_à*
c_π_˘x
);

251 
__dód2
 
tba£_exô_•
(
uöt64_t
 
c_π_˘x
, uöt64_à
ªt
);

252 
uöt64_t
 
tba£_synchr⁄ous_•_íåy
(
tba£_c⁄ãxt
 *
t•_˘x
);

253 
__dód2
 
tba£_synchr⁄ous_•_exô
(
tba£_c⁄ãxt
 *
tba£_˘x
, 
uöt64_t
 
ªt
, 
uöt32_t
 
ßve_sy§egs
);

255 
uöt64_t
 
maskSWdRegi°î
(uöt64_à
x
);

257 
öt32_t
 
tba£_Á°ˇŒ_£tup
();

258 
ßve_sy§egs_Ælc‹e
();

259 
tba£_öô_c‹e
(
uöt64_t
 
mpidr
);

260 
c⁄figuª_tba£
(
uöt64_t
 
x1
, uöt64_à
x2
);

262 #i‡
DEBUG


263 
	#DBG_PRINTF
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

265 
	#DBG_PRINTF
(...)

	)

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_setup.c

12 
	~<°dio.h
>

13 
	~<°rög.h
>

14 
	~<as£π.h
>

15 
	~<¨ch_hñ≥rs.h
>

16 
	~<c⁄sﬁe.h
>

17 
	~<∂©f‹m.h
>

18 
	~<c⁄ãxt_mgmt.h
>

19 
	~<ru¡ime_svc.h
>

20 
	~<bl31.h
>

21 
	~<tba£_¥iv©e.h
>

25 
	#TBASE_INIT_SPSR
 0x1d3

	)

28 
	#TBASE_ENTRY_SPSR
 0x1d1

	)

31 
	#TBASE_INTERFACE_PAGES
 20

	)

33 
uöt64_t
 
	gªgi°îFûeL2
[
TBASE_INTERFACE_PAGES
];

36 
uöt64_t
 
	gªgi°îFûeSèπ
[
REGISTER_FILE_COUNT
];

37 
uöt64_t
 
	gªgi°îFûeEnd
[
REGISTER_FILE_COUNT
];

40 
boŸCfg_t
 
	gtba£BoŸCfg
;

44 
uöt64_t
 
	gtba£E¡ryBa£
;

46 
uöt32_t
 
	gtba£E¡rySp§
;

49 
uöt64_t
 
	gswd32Bô
 = 1;

52 
uöt64_t
 
	gtba£InôSètus
 = 
TBASE_INIT_NONE
;

55 
uöt64_t
 
	gtba£Executi⁄Sètus
 = 
TBASE_STATUS_UNINIT
;

59 
uöt64_t
 
	gtba£BoŸC‹eMpidr
;

64 
uöt64_t
 
	$maskSWdRegi°î
(
uöt64_t
 
x
)

66 i‡(
swd32Bô
)

67  (
uöt32_t
)
x
;

68  
x
;

69 
	}
}

77 
öt32_t
 
	$tba£_öô_£cuª_c⁄ãxt
(
tba£_c⁄ãxt
 *
tba£_˘x
)

79 
uöt32_t
 
s˘Ã
 = 
	`ªad_s˘Ã_ñ3
();

80 
ñ1_sys_ªgs_t
 *
ñ1_°©e
;

81 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

84 
	`as£π
(
tba£_˘x
);

86 
	`DBG_PRINTF
("tbase_init_secure_context\n\r");

88 
	`mem£t
(
tba£_˘x
, 0, (*tbase_ctx));

91 
ñ1_°©e
 = 
	`gë_sy§egs_˘x
(&
tba£_˘x
->
˝u_˘x
);

94 
s˘Ã
 &
SCTLR_EE_BIT
;

95 
s˘Ã
 |
SCTLR_EL1_RES1
;

96 
	`wrôe_˘x_ªg
(
ñ1_°©e
, 
CTX_SCTLR_EL1
, 
s˘Ã
);

99 
tba£_˘x
->
°©e
 = 
TBASE_STATE_OFF
;

102 
tba£_˘x
->
mpidr
 = mpidr;

105 
	`cm_£t_c⁄ãxt
(
mpidr
, &
tba£_˘x
->
˝u_˘x
, 
SECURE
);

109 
	}
}

113 
	$tba£_öô_îë
–
uöt64_t
 
íåypoöt
, 
uöt32_t
 
rw
 ) {

114 
uöt32_t
 
s¸
 = 
	`ªad_s¸
();

115 
uöt32_t
 
•§
 = 
TBASE_INIT_SPSR
;

117 
	`as£π
(
rw
 =
TBASE_AARCH32
);

120 
s¸
 &~
SCR_NS_BIT
;

121 
s¸
 &~
SCR_RW_BIT
;

123 
s¸
 &~(
SCR_FIQ_BIT
|
SCR_IRQ_BIT
);

125 
s¸
 |
SCR_SIF_BIT
;

127 
	`cm_£t_ñ3_îë_c⁄ãxt
(
SECURE
, 
íåypoöt
, 
•§
, 
s¸
);

128 
íåy_poöt_öfo_t
 *
image_öfo
 = 
	`bl31_∂©_gë_√xt_image_ï_öfo
(
SECURE
);

129 
	`as£π
(
image_öfo
);

130 
image_öfo
->
•§
 = spsr;

132 
	}
}

137 
	$tba£_öô_ªgi°î_fûe
–
¨ó
, 
°¨tPage
, 
∑geCou¡
 )

139 
uöt64_t
 
MAPPING_FLAGS
 = 
TBASE_REGISTER_FILE_MMU_FLAGS
;

140 
∑geNro
=0;ÖageNro<
∑geCou¡
;ÖageNro++) {

141 
ªgi°îFûeL2
[
∑geNro
+
°¨tPage
] = (
ªgi°îFûeSèπ
[
¨ó
] +
PAGE_SIZE
*pageNro)

142 | 
MAPPING_FLAGS
;

144 
	}
}

151 
öt32_t
 
	$tba£_öô_íåy
()

153 
	`DBG_PRINTF
("tbase_init\n\r");

156 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

158 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

159 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

160 
tba£_c⁄ãxt
 *
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

164 
˝u_c⁄ãxt_t
 *
ns_íåy_c⁄ãxt
 = (˝u_c⁄ãxt_à*Ë
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

170 
ªgi°îFûeSèπ
[
REGISTER_FILE_NWD
] = 
	`∑ge_Æign
((
uöt64_t
)&
ns_íåy_c⁄ãxt
, 
DOWN
);

171 
ªgi°îFûeSèπ
[
REGISTER_FILE_MONITOR
] = 
	`∑ge_Æign
((
uöt64_t
)&
msm_¨ó
, 
DOWN
);

174 
ªgi°îFûeEnd
[
REGISTER_FILE_NWD
] = (
uöt64_t
)(&
ns_íåy_c⁄ãxt
[
TBASE_CORE_COUNT
]);

175 
ªgi°îFûeEnd
[
REGISTER_FILE_MONITOR
] = ((
uöt64_t
)&
msm_¨ó
) +(msm_area);

177 
öt32_t
 
tŸÆPages
 = 0;

178 
¨ó
=0;áªa<
REGISTER_FILE_COUNT
;área++) {

179 
öt32_t
 
∑ges
 = 
	`∑ge_Æign
(
ªgi°îFûeEnd
[
¨ó
] - 
ªgi°îFûeSèπ
[¨ó], 
UP
Ë/ 
PAGE_SIZE
;

180 
	`as£π
–
∑ges
 +
tŸÆPages
 <
TBASE_INTERFACE_PAGES
 );

181 
	`tba£_öô_ªgi°î_fûe
(
¨ó
, 
tŸÆPages
, 
∑ges
);

182 
tŸÆPages
 +
∑ges
;

187 
tba£BoŸCfg
.
magic
 = 
TBASE_BOOTCFG_MAGIC
;

188 
tba£BoŸCfg
.
Àngth
 = (
boŸCfg_t
);

189 
tba£BoŸCfg
.
vîsi⁄
 = 
TBASE_MONITOR_INTERFACE_VERSION
;

191 
tba£BoŸCfg
.
dRamBa£
 = 
TBASE_NWD_DRAM_BASE
;

192 
tba£BoŸCfg
.
dRamSize
 = 
TBASE_NWD_DRAM_SIZE
;

193 
tba£BoŸCfg
.
£cDRamBa£
 = 
TBASE_SWD_DRAM_BASE
;

194 
tba£BoŸCfg
.
£cDRamSize
 = 
TBASE_SWD_DRAM_SIZE
;

195 
tba£BoŸCfg
.
£cIRamBa£
 = 
TBASE_SWD_IMEM_BASE
;

196 
tba£BoŸCfg
.
£cIRamSize
 = 
TBASE_SWD_IMEM_SIZE
;

198 
tba£BoŸCfg
.
c⁄f_maú_ñ3
 = 
	`ªad_maú_ñ3
();

199 
tba£BoŸCfg
.
MSMPãCou¡
 = 
tŸÆPages
;

200 
tba£BoŸCfg
.
MSMBa£
 = (
uöt64_t
)
ªgi°îFûeL2
;

202 
tba£BoŸCfg
.
gic_di°ribut‹_ba£
 = 
TBASE_GIC_DIST_BASE
;

203 
tba£BoŸCfg
.
gic_˝uöãrÁ˚_ba£
 = 
TBASE_GIC_CPU_BASE
;

204 
tba£BoŸCfg
.
gic_vîsi⁄
 = 
TBASE_GIC_VERSION
;

206 
tba£BoŸCfg
.
tŸÆ_numbî_•i
 = 
TBASE_SPI_COUNT
;

207 
tba£BoŸCfg
.
ssiq_numbî
 = 
TBASE_SSIQ_NRO
;

209 
tba£BoŸCfg
.
Êags
 = 
TBASE_MONITOR_FLAGS
;

212 
	`DBG_PRINTF
("***Åbase boot cfg ***\n\r");

213 
	`DBG_PRINTF
("* magi¯ : 0x%.X\n\r",
tba£BoŸCfg
.
magic
);

214 
	`DBG_PRINTF
("*Üígth : 0x%.X\n\r",
tba£BoŸCfg
.
Àngth
);

215 
	`DBG_PRINTF
("* vîsi⁄ : 0x%.X\n\r",
tba£BoŸCfg
.
vîsi⁄
);

216 
	`DBG_PRINTF
("* dRamBa£ : 0x%.X\n\r",
tba£BoŸCfg
.
dRamBa£
);

217 
	`DBG_PRINTF
("* dRamSizê : 0x%.X\n\r",
tba£BoŸCfg
.
dRamSize
);

218 
	`DBG_PRINTF
("* secDRamBa£ : 0x%.X\n\r",
tba£BoŸCfg
.
£cDRamBa£
);

219 
	`DBG_PRINTF
("* secDRamSizê : 0x%.X\n\r",
tba£BoŸCfg
.
£cDRamSize
);

220 
	`DBG_PRINTF
("* secIRamBa£ : 0x%.X\n\r",
tba£BoŸCfg
.
£cIRamBa£
);

221 
	`DBG_PRINTF
("* secIRamSizê : 0x%.X\n\r",
tba£BoŸCfg
.
£cIRamSize
);

222 
	`DBG_PRINTF
("* c⁄f_maú_ñ3 : 0x%.X\n\r",
tba£BoŸCfg
.
c⁄f_maú_ñ3
);

223 
	`DBG_PRINTF
("* MSMPãCou¡ : 0x%.X\n\r",
tba£BoŸCfg
.
MSMPãCou¡
);

224 
	`DBG_PRINTF
("* MSMBa£ : 0x%.X\n\r",
tba£BoŸCfg
.
MSMBa£
);

225 
	`DBG_PRINTF
("* gic_di°ribut‹_ba£ : 0x%.X\n\r",
tba£BoŸCfg
.
gic_di°ribut‹_ba£
);

226 
	`DBG_PRINTF
("* gic_˝uöãrÁ˚_ba£ : 0x%.X\n\r",
tba£BoŸCfg
.
gic_˝uöãrÁ˚_ba£
);

227 
	`DBG_PRINTF
("* gic_vîsi⁄ : 0x%.X\n\r",
tba£BoŸCfg
.
gic_vîsi⁄
);

228 
	`DBG_PRINTF
("*ÅŸÆ_numbî_•ò : 0x%.X\n\r",
tba£BoŸCfg
.
tŸÆ_numbî_•i
);

229 
	`DBG_PRINTF
("* ssiq_numbî : 0x%.X\n\r",
tba£BoŸCfg
.
ssiq_numbî
);

230 
	`DBG_PRINTF
("* fœg† : 0x%.X\n\r",
tba£BoŸCfg
.
Êags
);

234 
	`Êush_dˇche_ønge
(()&
tba£BoŸCfg
, (
boŸCfg_t
));

235 
	`Êush_dˇche_ønge
(()&
ªgi°îFûeL2
, (registerFileL2));

239 
˝u_c⁄ãxt_t
 *
s_íåy_c⁄ãxt
 = &
tba£_˘x
->
˝u_˘x
;

240 
gp_ªgs_t
 *
s_íåy_g¥egs
 = 
	`gë_g¥egs_˘x
(
s_íåy_c⁄ãxt
);

241 
	`wrôe_˘x_ªg
(
s_íåy_g¥egs
, 
CTX_GPREG_X1
, 0);

242 
	`wrôe_˘x_ªg
(
s_íåy_g¥egs
, 
CTX_GPREG_X1
, (
öt64_t
)&
tba£BoŸCfg
);

246 
tba£E¡rySp§
 = 
TBASE_ENTRY_SPSR
;

248 
	`DBG_PRINTF
("tba£ inô SPSR 0x%x\n\r", 
	`ªad_˘x_ªg
(
	`gë_ñ3°©e_˘x
(&
tba£_˘x
->
˝u_˘x
),

249 
CTX_SPSR_EL3
) );

250 
	`DBG_PRINTF
("tba£ SMC SPSR %x\ƒ\r", 
tba£E¡rySp§
 );

255 
	`tba£_synchr⁄ous_•_íåy
(
tba£_˘x
);

256 
tba£_˘x
->
°©e
 = 
TBASE_STATE_ON
;

258 #i‡
TBASE_PM_ENABLE


260 
	`psci_ªgi°î_•d_pm_hook
(&
tba£_pm
);

263 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

264 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

267 
	}
}

273 
	$ßve_sy§egs_c‹e
(
uöt64_t
 
‰omC‹eNro
, 
uöt32_t
 
toC‹eNro
) {

274 i‡(
‰omC‹eNro
 !
toC‹eNro
) {

275 
˝u_c⁄ãxt_t
 *
˝u_˘x
 = &
£cuª_c⁄ãxt
[
‰omC‹eNro
].cpu_ctx;

276 
	`mem˝y
(&
£cuª_c⁄ãxt
[
toC‹eNro
].
˝u_˘x
, cpu_˘x, (
˝u_c⁄ãxt_t
) );

278 
	}
}

283 
	$ßve_sy§egs_Ælc‹e
() {

284 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

285 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

286 
c‹eNro
 = 0; c‹eNrÿ< 
TBASE_CORE_COUNT
; coreNro++) {

287 
	`ßve_sy§egs_c‹e
(
löór_id
, 
c‹eNro
);

289 
tba£BoŸC‹eMpidr
 = 
mpidr
;

290 
	}
}

295 
	$tba£_öô_c‹e
(
uöt64_t
 
mpidr
) {

296 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

297 
tba£_c⁄ãxt
 *
tba£_˘x
 = &
£cuª_c⁄ãxt
[
löór_id
];

299 
	`tba£_öô_£cuª_c⁄ãxt
(
tba£_˘x
);

301 
uöt32_t
 
boŸ_c‹e_ƒo
 = 
	`∂©f‹m_gë_c‹e_pos
(
tba£BoŸC‹eMpidr
);

302 
	`ßve_sy§egs_c‹e
(
boŸ_c‹e_ƒo
, 
löór_id
);

303 
	}
}

310 
	$c⁄figuª_tba£
(
uöt64_t
 
x1
, uöt64_à
x2
)

312 
uöt32_t
 
w1
 = 
	`maskSWdRegi°î
(
x1
);

313 
	`DBG_PRINTF
( "tbase_fastcall_handler TBASE_SMC_FASTCALL_CONFIG_OK\n\r");

315 i‡(
TBASE_SMC_FASTCALL_CONFIG_VECTOR
==
w1
) {

316 
tba£E¡ryBa£
 = 
	`maskSWdRegi°î
(
x2
);

317 
tba£InôSètus
 = 
TBASE_INIT_CONFIG_OK
;

318 
	`DBG_PRINTF
("tba£ c⁄fig ok %Œx %x\n\r", 
tba£E¡ryBa£
, 
tba£InôSètus
);

320 
uöt32_t
 
Êags
 = 0;

321 
	`£t_öãºu±_rm_Êag
(
Êags
, 
NON_SECURE
);

322 
uöt32_t
 
rc
 = 
	`ªgi°î_öãºu±_ty≥_h™dÀr
(
INTR_TYPE_S_EL1
,

323 
tba£_fiq_h™dÀr
,

324 
Êags
);

325 i‡(
rc
!=0) {

326 
	`DBG_PRINTF
( "tbase_fastcall_setup FIQÑegister failed.\n\r");

329 
tba£E¡ryBa£
 = 
w1
;

330 
tba£InôSètus
 = 
TBASE_INIT_CONFIG_OK
;

332 
	}
}

338 
öt32_t
 
	$tba£_Á°ˇŒ_£tup
()

340 
íåy_poöt_öfo_t
 *
image_öfo
;

342 
image_öfo
 = 
	`bl31_∂©_gë_√xt_image_ï_öfo
(
SECURE
);

343 
	`as£π
(
image_öfo
);

345 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
	`ªad_mpidr
());

348 
	`tba£_öô_£cuª_c⁄ãxt
(&
£cuª_c⁄ãxt
[
löór_id
]);

350 
	`tba£_öô_îë
(
image_öfo
->
pc
,
TBASE_AARCH32
);

351 
	`bl31_ªgi°î_bl32_öô
(&
tba£_öô_íåy
);

354 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd.mk

1 #
#C›yrighà(
c
Ë2013-2014, 
ARM
 
Limôed
 
™d
 
C⁄åibut‹s
. 
AŒ
 
rights
 
ª£rved
.

2 #
#Redi°ributi⁄ 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
f‹ms
, 
wôh
 
‹
 
wôhout


3 #modifiˇti⁄, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
c⁄dôi⁄s
áª 
më
:

4 #
#Redi°ributi⁄†
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright
 
nŸi˚
, 
this


5 #li° 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
.

6 #
#Redi°ributi⁄†
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
above
 
c›yright
 
nŸi˚
,

7 #thi†
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
dis˛aimî
 
ö
Åhê
documíèti⁄


8 #™d/
‹
 
Ÿhî
 
m©îüls
 
¥ovided
 
wôh
 
the
 
di°ributi⁄
.

9 #
#Neôhî 
the
 
«me
 
of
 
ARM
 
n‹
Åhê
«mes
 o‡
ôs
 
c⁄åibut‹s
 
may
 
be
 
u£d


10 #tÿ
íd‹£
 
‹
 
¥omŸe
 
¥odu˘s
 
dîived
 
‰om
 
this
 
so·w¨e
 
wôhout
 
•ecific


11 #¥i‹ 
wrôãn
 
≥rmissi⁄
.

12 #
#THIS 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
COPYRIGHT
 
HOLDERS
 
AND
 
CONTRIBUTORS
 "AS IS"

13 #AND 
ANY
 
EXPRESS
 
OR
 
IMPLIED
 
WARRANTIES
, 
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
THE


14 #IMPLIED 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
PARTICULAR
 
PURPOSE


15 #ARE 
DISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
COPYRIGHT
 
HOLDER
 
OR
 
CONTRIBUTORS
 
BE


16 #LIABLE 
FOR
 
ANY
 
DIRECT
, 
INDIRECT
, 
INCIDENTAL
, 
SPECIAL
, 
EXEMPLARY
, 
OR


17 #CONSEQUENTIAL 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
, 
PROCUREMENT
 
OF


18 #SUBSTITUTE 
GOODS
 
OR
 
SERVICES
; 
LOSS
 
OF
 
USE
, 
DATA
, OR 
PROFITS
; OR 
BUSINESS


19 #INTERRUPTIONË
HOWEVER
 
CAUSED
 
AND
 
ON
 
ANY
 
THEORY
 
OF
 
LIABILITY
, 
WHETHER
 
IN


20 #CONTRACT, 
STRICT
 
LIABILITY
, 
OR
 
TORT
 (
INCLUDING
 
NEGLIGENCE
 OR 
OTHERWISE
)

21 #ARISING 
IN
 
ANY
 
WAY
 
OUT
 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE

22 #POSSIBILITY 
OF
 
SUCH
 
DAMAGE
.

24 
	gTSPD_DIR
 :
£rvi˚s
/
•d
/
t•d


25 
SPD_INCLUDES
 :-
Iö˛ude
/
bl32
/
∑ylﬂds


27 
SPD_SOURCES
 :
£rvi˚s
/
•d
/
t•d
/
t•d_comm⁄
.
c
 \

28 
£rvi˚s
/
•d
/
t•d
/
t•d_hñ≥rs
.
S
 \

29 
£rvi˚s
/
•d
/
t•d
/
t•d_maö
.
c
 \

30 
£rvi˚s
/
•d
/
t•d
/
t•d_pm
.
c


32 #Thi†
di•©chî
 
is
 
∑úed
 
wôh
 
a
 
Te°
 
Secuª
 
Paylﬂd
 
sour˚
 
™d
 
we
 
öãnd
 
to


33 #buûd 
the
 
Te°
 
Secuª
 
Paylﬂd
 
Æ⁄g
 
wôh
 
this
 
di•©chî
.

34 #
#I¿
ˇ£s
 
whîe
 
™
 
assocüãd
 
Secuª
 
Paylﬂd
 
lõs
 
outside
 
this
 
buûd


35 #sy°em/
sour˚
 
åì
, 
the
Åhê
di•©chî
 
Makefûe
 
ˇn
 
eôhî
 
övoke
 
™
 
exã∫Æ


36 #buûd 
comm™d
 
‹
 
assume
 
ô
 
¥e
-
buût


38 #BL32_ROOT :
bl32
/
t•


40 #In˛udê
SP
'†Makefûe. Thêassum±i⁄ i†th©ÅhêTSP'
s
 
buûd
 
sy°em
 
is


41 #com∑tibÀ 
wôh
 
th©
 
of
 
Tru°ed
 
Fúmw¨e
, 
™d
 
ô
'lláddándÖopulateÇecessary

42 #buûd 
èrgës
 
™d
 
v¨übÀs


43 #ö˛udê
$
{
BL32_ROOT
}/
t•
.
mk


45 #Lë 
the
 
t›
-
Àvñ
 
Makefûe
 
know
 
th©
 
we
 
öãnd
 
to
 
buûd
Åhê
SP
 
‰om
 
sour˚


46 #NEED_BL32 :
yes


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd_common.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄ãxt_mgmt.h
>

35 
	~<°rög.h
>

36 
	~"t•d_¥iv©e.h
"

43 
öt32_t
 
	$t•d_öô_£cuª_c⁄ãxt
(
uöt64_t
 
íåypoöt
,

44 
uöt32_t
 
rw
,

45 
uöt64_t
 
mpidr
,

46 
t•_c⁄ãxt_t
 *
t•_˘x
)

48 
uöt32_t
 
s¸
, 
s˘Ã
;

49 
ñ1_sys_ªgs_t
 *
ñ1_°©e
;

50 
uöt32_t
 
•§
;

53 
	`as£π
(
t•_˘x
);

59 
	`as£π
(
rw
 =
TSP_AARCH64
);

65 
	`mem£t
(
t•_˘x
, 0, (*tsp_ctx));

71 
s¸
 = 
	`ªad_s¸
();

72 
s¸
 &~
SCR_NS_BIT
;

73 
s¸
 &~
SCR_RW_BIT
;

74 
s¸
 |
SCR_ST_BIT
;

75 i‡(
rw
 =
TSP_AARCH64
)

76 
s¸
 |
SCR_RW_BIT
;

79 
ñ1_°©e
 = 
	`gë_sy§egs_˘x
(&
t•_˘x
->
˝u_˘x
);

85 
s˘Ã
 = 
	`ªad_s˘Ã_ñ3
();

86 
s˘Ã
 &
SCTLR_EE_BIT
;

87 
s˘Ã
 |
SCTLR_EL1_RES1
;

88 
	`wrôe_˘x_ªg
(
ñ1_°©e
, 
CTX_SCTLR_EL1
, 
s˘Ã
);

91 
	`£t_t•_p°©e
(
t•_˘x
->
°©e
, 
TSP_PSTATE_OFF
);

98 
	`˛r_°d_smc_a˘ive_Êag
(
t•_˘x
->
°©e
);

101 
t•_˘x
->
mpidr
 = mpidr;

103 
	`cm_£t_c⁄ãxt
(
mpidr
, &
t•_˘x
->
˝u_˘x
, 
SECURE
);

104 
•§
 = 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

105 
	`cm_£t_ñ3_îë_c⁄ãxt
(
SECURE
, 
íåypoöt
, 
•§
, 
s¸
);

108 
	}
}

118 
uöt64_t
 
	$t•d_synchr⁄ous_•_íåy
(
t•_c⁄ãxt_t
 *
t•_˘x
)

120 
uöt64_t
 
rc
;

122 
	`as£π
(
t•_˘x
->
c_π_˘x
 == 0);

125 
	`as£π
(
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
SECURE
Ë=&
t•_˘x
->
˝u_˘x
);

126 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
SECURE
);

127 
	`cm_£t_√xt_îë_c⁄ãxt
(
SECURE
);

129 
rc
 = 
	`t•d_íãr_•
(&
t•_˘x
->
c_π_˘x
);

130 #i‡
DEBUG


131 
t•_˘x
->
c_π_˘x
 = 0;

134  
rc
;

135 
	}
}

146 
	$t•d_synchr⁄ous_•_exô
(
t•_c⁄ãxt_t
 *
t•_˘x
, 
uöt64_t
 
ªt
)

149 
	`as£π
(
	`cm_gë_c⁄ãxt
(
	`ªad_mpidr
(), 
SECURE
Ë=&
t•_˘x
->
˝u_˘x
);

150 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
SECURE
);

152 
	`as£π
(
t•_˘x
->
c_π_˘x
 != 0);

153 
	`t•d_exô_•
(
t•_˘x
->
c_π_˘x
, 
ªt
);

156 
	`as£π
(0);

157 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd_helpers.S

31 
	~<asm_ma¸os.S
>

32 
	~"t•d_¥iv©e.h
"

34 .
globÆ
 
t•d_íãr_•


45 
func
 
t•d_íãr_•


47 
mov
 
	gx3
, 
•


48 
°r
 
	gx3
, [
x0
, #0]

49 
sub
 
	g•
, sp, #TSPD_C_RT_CTX_SIZE

52 
°p
 
	gx19
, 
	gx20
, [
•
, #TSPD_C_RT_CTX_X19]

53 
°p
 
	gx21
, 
	gx22
, [
•
, #TSPD_C_RT_CTX_X21]

54 
°p
 
	gx23
, 
	gx24
, [
•
, #TSPD_C_RT_CTX_X23]

55 
°p
 
	gx25
, 
	gx26
, [
•
, #TSPD_C_RT_CTX_X25]

56 
°p
 
	gx27
, 
	gx28
, [
•
, #TSPD_C_RT_CTX_X27]

57 
°p
 
	gx29
, 
	gx30
, [
•
, #TSPD_C_RT_CTX_X29]

66 
b
 
	gñ3_exô


79 .
globÆ
 
t•d_exô_•


80 
func
 
t•d_exô_•


82 
mov
 
	g•
, 
x0


85 
ldp
 
	gx19
, 
	gx20
, [
x0
, #(
TSPD_C_RT_CTX_X19
 - 
TSPD_C_RT_CTX_SIZE
)]

86 
ldp
 
	gx21
, 
	gx22
, [
x0
, #(
TSPD_C_RT_CTX_X21
 - 
TSPD_C_RT_CTX_SIZE
)]

87 
ldp
 
	gx23
, 
	gx24
, [
x0
, #(
TSPD_C_RT_CTX_X23
 - 
TSPD_C_RT_CTX_SIZE
)]

88 
ldp
 
	gx25
, 
	gx26
, [
x0
, #(
TSPD_C_RT_CTX_X25
 - 
TSPD_C_RT_CTX_SIZE
)]

89 
ldp
 
	gx27
, 
	gx28
, [
x0
, #(
TSPD_C_RT_CTX_X27
 - 
TSPD_C_RT_CTX_SIZE
)]

90 
ldp
 
	gx29
, 
	gx30
, [
x0
, #(
TSPD_C_RT_CTX_X29
 - 
TSPD_C_RT_CTX_SIZE
)]

100 
mov
 
	gx0
, 
x1


101 
	gªt


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd_main.c

41 
	~<¨ch_hñ≥rs.h
>

42 
	~<as£π.h
>

43 
	~<bl_comm⁄.h
>

44 
	~<bl31.h
>

45 
	~<c⁄ãxt_mgmt.h
>

46 
	~<debug.h
>

47 
	~<î∫o.h
>

48 
	~<∂©f‹m.h
>

49 
	~<ru¡ime_svc.h
>

50 
	~<°ddef.h
>

51 
	~<t•.h
>

52 
	~<uuid.h
>

53 
	~"t•d_¥iv©e.h
"

54 
	~<∂©f‹m_def.h
>

55 
	~<fiq_smp_ˇŒ.h
>

61 
t•_ve˘‹s_t
 *
	gt•_ve˘‹s
;

66 
t•_c⁄ãxt_t
 
	gt•d_•_c⁄ãxt
[
TSPD_CORE_COUNT
];

70 
DEFINE_SVC_UUID
(
t•_uuid
,

74 
öt32_t
 
t•d_öô
(, );

77 
	$ã°_´e_fun˘i⁄
()

79 
mpidr
 = 
	`ªad_mpidr
();

81 
	`¥ötf
("CPU_%d CÆ»sm∞fun˘i⁄ i¿ATF suc˚ss!\n", 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
));

82 
	}
}

84 
	$ã°_´e_h™dÀr
()

86 
m≠
 = 0xE;

87 
	`fiq_smp_ˇŒ_fun˘i⁄
(
m≠
, 
ã°_´e_fun˘i⁄
, 0, 1);

88 
	}
}

95 
uöt64_t
 
	$t•d_£l1_öãºu±_h™dÀr
(
uöt32_t
 
id
,

96 
uöt32_t
 
Êags
,

97 *
h™dÀ
,

98 *
cookõ
)

100 
uöt32_t
 
löór_id
;

101 
uöt64_t
 
mpidr
;

102 
t•_c⁄ãxt_t
 *
t•_˘x
;

103 
˝u_c⁄ãxt_t
 *
ns_˝u_c⁄ãxt
;

109 
	`as£π
(
	`gë_öãºu±_§c_ss
(
Êags
Ë=
NON_SECURE
);

111 #i‡
IMF_READ_INTERRUPT_ID


113 
	`as£π
(
	`∂©_ic_gë_öãºu±_ty≥
(
id
Ë=
INTR_TYPE_S_EL1
);

117 
mpidr
 = 
	`ªad_mpidr
();

118 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
));

121 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

123 if(
id
 =
WDT_IRQ_BIT_ID
)

126 
	`ã°_´e_h™dÀr
();

127 
ns_˝u_c⁄ãxt
 = 
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

128 
	`as£π
(
ns_˝u_c⁄ãxt
);

131 
	`SMC_SET_EL3
(
ns_˝u_c⁄ãxt
,

132 
CTX_ELR_EL3
,

134 
	`SMC_RET0
(
h™dÀ
);

137 if(
id
 =
FIQ_SMP_CALL_SGI
)

139 
	`fiq_icc_i§
();

140 
	`SMC_RET0
(
h™dÀ
);

144 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

145 
t•_˘x
 = &
t•d_•_c⁄ãxt
[
löór_id
];

146 
	`as£π
(&
t•_˘x
->
˝u_˘x
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

158 i‡(
	`gë_°d_smc_a˘ive_Êag
(
t•_˘x
->
°©e
)) {

159 
t•_˘x
->
ßved_•§_ñ3
 = 
	`SMC_GET_EL3
(&t•_˘x->
˝u_˘x
,

160 
CTX_SPSR_EL3
);

161 
t•_˘x
->
ßved_ñr_ñ3
 = 
	`SMC_GET_EL3
(&t•_˘x->
˝u_˘x
,

162 
CTX_ELR_EL3
);

165 
	`SMC_SET_EL3
(&
t•_˘x
->
˝u_˘x
,

166 
CTX_SPSR_EL3
,

167 
	`SPSR_64
(
MODE_EL1
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
));

168 
	`SMC_SET_EL3
(&
t•_˘x
->
˝u_˘x
,

169 
CTX_ELR_EL3
,

170 (
uöt64_t
Ë&
t•_ve˘‹s
->
fiq_íåy
);

171 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
SECURE
);

172 
	`cm_£t_√xt_îë_c⁄ãxt
(
SECURE
);

181 
	`SMC_RET2
(&
t•_˘x
->
˝u_˘x
, 
TSP_HANDLE_FIQ_AND_RETURN
, 
	`ªad_ñr_ñ3
());

182 
	}
}

189 
öt32_t
 
	$t•d_£tup
()

191 
íåy_poöt_öfo_t
 *
image_öfo
;

192 
öt32_t
 
rc
;

193 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

194 
uöt32_t
 
löór_id
;

196 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

203 
image_öfo
 = 
	`bl31_∂©_gë_√xt_image_ï_öfo
(
SECURE
);

204 
	`as£π
(
image_öfo
);

211 i‡(!
image_öfo
->
pc
)

219 
rc
 = 
	`t•d_öô_£cuª_c⁄ãxt
(
image_öfo
->
pc
,

220 
TSP_AARCH64
,

221 
mpidr
,

222 &
t•d_•_c⁄ãxt
[
löór_id
]);

223 
	`as£π
(
rc
 == 0);

229 
	`bl31_ªgi°î_bl32_öô
(&
t•d_öô
);

231  
rc
;

232 
	}
}

243 
öt32_t
 
	$t•d_öô
(
boŸ_íåy
, 
boŸ_¨gs
)

247 
uöt32_t
 
Êags
;

248 
uöt64_t
 
rc
;

257 
rc
 = 
	`t•d_synchr⁄ous_•_íåy
(
t•_˘x
);

258 
	`as£π
(
rc
 != 0);

259 i‡(
rc
) {

260 
	`£t_t•_p°©e
(
t•_˘x
->
°©e
, 
TSP_PSTATE_ON
);

266 
	`psci_ªgi°î_•d_pm_hook
(&
t•d_pm
);

273 
Êags
 = 0;

274 
	`£t_öãºu±_rm_Êag
(
Êags
, 
NON_SECURE
);

275 
rc
 = 
	`ªgi°î_öãºu±_ty≥_h™dÀr
(
INTR_TYPE_S_EL1
,

276 
t•d_£l1_öãºu±_h™dÀr
,

277 
Êags
);

278 i‡(
rc
)

279 
	`∑nic
();

281  
rc
;

282 
	}
}

293 
uöt64_t
 
	$t•d_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

294 
uöt64_t
 
x1
,

295 
uöt64_t
 
x2
,

296 
uöt64_t
 
x3
,

297 
uöt64_t
 
x4
,

298 *
cookõ
,

299 *
h™dÀ
,

300 
uöt64_t
 
Êags
)

302 
˝u_c⁄ãxt_t
 *
ns_˝u_c⁄ãxt
;

303 
mpidr
 = 
	`ªad_mpidr
();

304 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
), 
ns
;

305 
t•_c⁄ãxt_t
 *
t•_˘x
 = &
t•d_•_c⁄ãxt
[
löór_id
];

308 
ns
 = 
	`is_ˇŒî_n⁄_£cuª
(
Êags
);

310 
smc_fid
) {

317 
TSP_PREEMPTED
:

318 i‡(
ns
)

319 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

321 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

322 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
SECURE
);

324 
ns_˝u_c⁄ãxt
 = 
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

325 
	`as£π
(
ns_˝u_c⁄ãxt
);

332 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

333 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

335 
	`SMC_RET1
(
ns_˝u_c⁄ãxt
, 
SMC_PREEMPTED
);

342 
TSP_HANDLED_S_EL1_FIQ
:

343 i‡(
ns
)

344 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

346 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

352 i‡(
	`gë_°d_smc_a˘ive_Êag
(
t•_˘x
->
°©e
)) {

353 
	`SMC_SET_EL3
(&
t•_˘x
->
˝u_˘x
,

354 
CTX_SPSR_EL3
,

355 
t•_˘x
->
ßved_•§_ñ3
);

356 
	`SMC_SET_EL3
(&
t•_˘x
->
˝u_˘x
,

357 
CTX_ELR_EL3
,

358 
t•_˘x
->
ßved_ñr_ñ3
);

362 
ns_˝u_c⁄ãxt
 = 
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

363 
	`as£π
(
ns_˝u_c⁄ãxt
);

370 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

371 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

373 
	`SMC_RET0
((
uöt64_t
Ë
ns_˝u_c⁄ãxt
);

381 
TSP_EL3_FIQ
:

382 i‡(
ns
)

383 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

385 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

388 
	`as£π
(
	`gë_°d_smc_a˘ive_Êag
(
t•_˘x
->
°©e
));

391 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
SECURE
);

394 
ns_˝u_c⁄ãxt
 = 
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

395 
	`as£π
(
ns_˝u_c⁄ãxt
);

398 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

399 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

401 
	`SMC_RET1
(
ns_˝u_c⁄ãxt
, 
TSP_EL3_FIQ
);

408 
TSP_ENTRY_DONE
:

409 i‡(
ns
)

410 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

416 
	`as£π
(
t•_ve˘‹s
 =
NULL
);

417 
t•_ve˘‹s
 = (
t•_ve˘‹s_t
 *Ë
x1
;

425 
	`t•d_synchr⁄ous_•_exô
(
t•_˘x
, 
x1
);

435 
TSP_ON_DONE
:

436 
TSP_RESUME_DONE
:

446 
TSP_OFF_DONE
:

447 
TSP_SUSPEND_DONE
:

448 i‡(
ns
)

449 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

457 
	`t•d_synchr⁄ous_•_exô
(
t•_˘x
, 
x1
);

464 
	`TSP_FAST_FID
(
TSP_ADD
):

465 
	`TSP_FAST_FID
(
TSP_SUB
):

466 
	`TSP_FAST_FID
(
TSP_MUL
):

467 
	`TSP_FAST_FID
(
TSP_DIV
):

469 
	`TSP_STD_FID
(
TSP_ADD
):

470 
	`TSP_STD_FID
(
TSP_SUB
):

471 
	`TSP_STD_FID
(
TSP_MUL
):

472 
	`TSP_STD_FID
(
TSP_DIV
):

473 i‡(
ns
) {

480 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
));

483 i‡(
	`gë_°d_smc_a˘ive_Êag
(
t•_˘x
->
°©e
))

484 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

486 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

489 
	`°‹e_t•_¨gs
(
t•_˘x
, 
x1
, 
x2
);

503 
	`as£π
(&
t•_˘x
->
˝u_˘x
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

509 i‡(
	`GET_SMC_TYPE
(
smc_fid
Ë=
SMC_TYPE_FAST
) {

510 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
)

511 &
t•_ve˘‹s
->
Á°_smc_íåy
);

513 
	`£t_°d_smc_a˘ive_Êag
(
t•_˘x
->
°©e
);

514 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
)

515 &
t•_ve˘‹s
->
°d_smc_íåy
);

518 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
SECURE
);

519 
	`cm_£t_√xt_îë_c⁄ãxt
(
SECURE
);

520 
	`SMC_RET3
(&
t•_˘x
->
˝u_˘x
, 
smc_fid
, 
x1
, 
x2
);

528 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
SECURE
));

529 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
SECURE
);

532 
ns_˝u_c⁄ãxt
 = 
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

533 
	`as£π
(
ns_˝u_c⁄ãxt
);

536 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

537 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

538 i‡(
	`GET_SMC_TYPE
(
smc_fid
Ë=
SMC_TYPE_STD
)

539 
	`˛r_°d_smc_a˘ive_Êag
(
t•_˘x
->
°©e
);

540 
	`SMC_RET3
(
ns_˝u_c⁄ãxt
, 
x1
, 
x2
, 
x3
);

549 
TSP_FID_RESUME
:

551 i‡(!
ns
) {

552 
	`as£π
(0);

561 
	`as£π
(
h™dÀ
 =
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
));

564 i‡(!
	`gë_°d_smc_a˘ive_Êag
(
t•_˘x
->
°©e
))

565 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

567 
	`cm_ñ1_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

577 
	`cm_ñ1_sy§egs_c⁄ãxt_ª°‹e
(
SECURE
);

578 
	`cm_£t_√xt_îë_c⁄ãxt
(
SECURE
);

579 
	`SMC_RET0
(&
t•_˘x
->
˝u_˘x
);

587 
TSP_GET_ARGS
:

588 i‡(
ns
)

589 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

591 
	`gë_t•_¨gs
(
t•_˘x
, 
x1
, 
x2
);

592 
	`SMC_RET2
(
h™dÀ
, 
x1
, 
x2
);

594 
TOS_CALL_COUNT
:

599 
	`SMC_RET1
(
h™dÀ
, 
TSP_NUM_FID
);

601 
TOS_UID
:

603 
	`SMC_UUID_RET
(
h™dÀ
, 
t•_uuid
);

605 
TOS_CALL_VERSION
:

607 
	`SMC_RET2
(
h™dÀ
, 
TSP_VERSION_MAJOR
, 
TSP_VERSION_MINOR
);

613 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

614 
	}
}

617 
DECLARE_RT_SVC
(

618 
t•d_Á°
,

620 
OEN_TOS_START
,

621 
OEN_TOS_END
,

622 
SMC_TYPE_FAST
,

623 
t•d_£tup
,

624 
t•d_smc_h™dÀr


628 
DECLARE_RT_SVC
(

629 
t•d_°d
,

631 
OEN_TOS_START
,

632 
OEN_TOS_END
,

633 
SMC_TYPE_STD
,

634 
NULL
,

635 
t•d_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd_pm.c

31 
	~<¨ch_hñ≥rs.h
>

32 
	~<as£π.h
>

33 
	~<bl_comm⁄.h
>

34 
	~<c⁄ãxt_mgmt.h
>

35 
	~<debug.h
>

36 
	~<∂©f‹m.h
>

37 
	~<t•.h
>

38 
	~"t•d_¥iv©e.h
"

44 
	$t•d_˝u_⁄_h™dÀr
(
uöt64_t
 
èrgë_˝u
)

46 
	}
}

52 
öt32_t
 
	$t•d_˝u_off_h™dÀr
(
uöt64_t
 
cookõ
)

54 
öt32_t
 
rc
 = 0;

55 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

56 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

57 
t•_c⁄ãxt_t
 *
t•_˘x
 = &
t•d_•_c⁄ãxt
[
löór_id
];

59 
	`as£π
(
t•_ve˘‹s
);

60 
	`as£π
(
	`gë_t•_p°©e
(
t•_˘x
->
°©e
Ë=
TSP_PSTATE_ON
);

63 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
Ë&
t•_ve˘‹s
->
˝u_off_íåy
);

64 
rc
 = 
	`t•d_synchr⁄ous_•_íåy
(
t•_˘x
);

70 i‡(
rc
 != 0)

71 
	`∑nic
();

77 
	`£t_t•_p°©e
(
t•_˘x
->
°©e
, 
TSP_PSTATE_OFF
);

80 
	}
}

86 
	$t•d_˝u_su•íd_h™dÀr
(
uöt64_t
 
powî_°©e
)

88 
öt32_t
 
rc
 = 0;

89 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

90 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

91 
t•_c⁄ãxt_t
 *
t•_˘x
 = &
t•d_•_c⁄ãxt
[
löór_id
];

93 
	`as£π
(
t•_ve˘‹s
);

94 
	`as£π
(
	`gë_t•_p°©e
(
t•_˘x
->
°©e
Ë=
TSP_PSTATE_ON
);

97 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(&
t•_˘x
->
˝u_˘x
),

98 
CTX_GPREG_X0
,

99 
powî_°©e
);

100 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
Ë&
t•_ve˘‹s
->
˝u_su•íd_íåy
);

101 
rc
 = 
	`t•d_synchr⁄ous_•_íåy
(
t•_˘x
);

107 i‡(
rc
 != 0)

108 
	`∑nic
();

111 
	`£t_t•_p°©e
(
t•_˘x
->
°©e
, 
TSP_PSTATE_SUSPEND
);

112 
	}
}

120 
	$t•d_˝u_⁄_föish_h™dÀr
(
uöt64_t
 
cookõ
)

122 
öt32_t
 
rc
 = 0;

123 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

124 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

125 
t•_c⁄ãxt_t
 *
t•_˘x
 = &
t•d_•_c⁄ãxt
[
löór_id
];

127 
	`as£π
(
t•_ve˘‹s
);

128 
	`as£π
(
	`gë_t•_p°©e
(
t•_˘x
->
°©e
Ë=
TSP_PSTATE_OFF
);

131 
	`t•d_öô_£cuª_c⁄ãxt
((
uöt64_t
Ë&
t•_ve˘‹s
->
˝u_⁄_íåy
,

132 
TSP_AARCH64
,

133 
mpidr
,

134 
t•_˘x
);

137 
rc
 = 
	`t•d_synchr⁄ous_•_íåy
(
t•_˘x
);

143 i‡(
rc
 != 0)

144 
	`∑nic
();

147 
	`£t_t•_p°©e
(
t•_˘x
->
°©e
, 
TSP_PSTATE_ON
);

148 
	}
}

155 
	$t•d_˝u_su•íd_föish_h™dÀr
(
uöt64_t
 
su•íd_Àvñ
)

157 
öt32_t
 
rc
 = 0;

158 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

159 
uöt32_t
 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

160 
t•_c⁄ãxt_t
 *
t•_˘x
 = &
t•d_•_c⁄ãxt
[
löór_id
];

162 
	`as£π
(
t•_ve˘‹s
);

163 
	`as£π
(
	`gë_t•_p°©e
(
t•_˘x
->
°©e
Ë=
TSP_PSTATE_SUSPEND
);

166 
	`wrôe_˘x_ªg
(
	`gë_g¥egs_˘x
(&
t•_˘x
->
˝u_˘x
),

167 
CTX_GPREG_X0
,

168 
su•íd_Àvñ
);

169 
	`cm_£t_ñr_ñ3
(
SECURE
, (
uöt64_t
Ë&
t•_ve˘‹s
->
˝u_ªsume_íåy
);

170 
rc
 = 
	`t•d_synchr⁄ous_•_íåy
(
t•_˘x
);

176 i‡(
rc
 != 0)

177 
	`∑nic
();

180 
	`£t_t•_p°©e
(
t•_˘x
->
°©e
, 
TSP_PSTATE_ON
);

181 
	}
}

187 
öt32_t
 
	$t•d_˝u_migøã_öfo
(
uöt64_t
 *
ªsidít_˝u
)

189  
TSP_MIGRATE_INFO
;

190 
	}
}

196 c⁄° 
•d_pm_›s_t
 
	gt•d_pm
 = {

197 
t•d_˝u_⁄_h™dÀr
,

198 
t•d_˝u_off_h™dÀr
,

199 
t•d_˝u_su•íd_h™dÀr
,

200 
t•d_˝u_⁄_föish_h™dÀr
,

201 
t•d_˝u_su•íd_föish_h™dÀr
,

202 
NULL
,

203 
t•d_˝u_migøã_öfo


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd_private.h

31 #i‚de‡
__TSPD_PRIVATE_H__


32 
	#__TSPD_PRIVATE_H__


	)

34 
	~<¨ch.h
>

35 
	~<c⁄ãxt.h
>

36 
	~<öãºu±_mgmt.h
>

37 
	~<∂©f‹m_def.h
>

38 
	~<psci.h
>

44 
	#TSP_PSTATE_OFF
 0

	)

45 
	#TSP_PSTATE_ON
 1

	)

46 
	#TSP_PSTATE_SUSPEND
 2

	)

47 
	#TSP_PSTATE_SHIFT
 0

	)

48 
	#TSP_PSTATE_MASK
 0x3

	)

49 
	#gë_t•_p°©e
(
°©e
Ë((°©ê>> 
TSP_PSTATE_SHIFT
Ë& 
TSP_PSTATE_MASK
)

	)

50 
	#˛r_t•_p°©e
(
°©e
Ë(°©ê&~(
TSP_PSTATE_MASK
 \

51 << 
TSP_PSTATE_SHIFT
))

	)

52 
	#£t_t•_p°©e
(
°
, 
p°
) do { \

53 
	`˛r_t•_p°©e
(
°
); \

54 
°
 |(
p°
 & 
TSP_PSTATE_MASK
) << \

55 
TSP_PSTATE_SHIFT
; \

56 } 0);

	)

68 
	#STD_SMC_ACTIVE_FLAG_SHIFT
 2

	)

69 
	#STD_SMC_ACTIVE_FLAG_MASK
 1

	)

70 
	#gë_°d_smc_a˘ive_Êag
(
°©e
Ë((°©ê>> 
STD_SMC_ACTIVE_FLAG_SHIFT
) \

71 & 
STD_SMC_ACTIVE_FLAG_MASK
)

	)

72 
	#£t_°d_smc_a˘ive_Êag
(
°©e
) (state |= \

73 1 << 
STD_SMC_ACTIVE_FLAG_SHIFT
)

	)

74 
	#˛r_°d_smc_a˘ive_Êag
(
°©e
) (state &= \

75 ~(
STD_SMC_ACTIVE_FLAG_MASK
 \

76 << 
STD_SMC_ACTIVE_FLAG_SHIFT
))

	)

81 
	#TSP_AARCH32
 
MODE_RW_32


	)

82 
	#TSP_AARCH64
 
MODE_RW_64


	)

87 
	#TSP_TYPE_UP
 
PSCI_TOS_NOT_UP_MIG_CAP


	)

88 
	#TSP_TYPE_UPM
 
PSCI_TOS_UP_MIG_CAP


	)

89 
	#TSP_TYPE_MP
 
PSCI_TOS_NOT_PRESENT_MP


	)

95 
	#TSP_MIGRATE_INFO
 
TSP_TYPE_MP


	)

102 
	#TSPD_CORE_COUNT
 
PLATFORM_CORE_COUNT


	)

108 
	#TSPD_C_RT_CTX_X19
 0x0

	)

109 
	#TSPD_C_RT_CTX_X20
 0x8

	)

110 
	#TSPD_C_RT_CTX_X21
 0x10

	)

111 
	#TSPD_C_RT_CTX_X22
 0x18

	)

112 
	#TSPD_C_RT_CTX_X23
 0x20

	)

113 
	#TSPD_C_RT_CTX_X24
 0x28

	)

114 
	#TSPD_C_RT_CTX_X25
 0x30

	)

115 
	#TSPD_C_RT_CTX_X26
 0x38

	)

116 
	#TSPD_C_RT_CTX_X27
 0x40

	)

117 
	#TSPD_C_RT_CTX_X28
 0x48

	)

118 
	#TSPD_C_RT_CTX_X29
 0x50

	)

119 
	#TSPD_C_RT_CTX_X30
 0x58

	)

120 
	#TSPD_C_RT_CTX_SIZE
 0x60

	)

121 
	#TSPD_C_RT_CTX_ENTRIES
 (
TSPD_C_RT_CTX_SIZE
 >> 
DWORD_SHIFT
)

	)

123 #i‚de‡
__ASSEMBLY__


125 
	~<ˇs£π.h
>

126 
	~<°döt.h
>

132 
	#TSP_NUM_ARGS
 0x2

	)

135 
DEFINE_REG_STRUCT
(
c_π_ªgs
, 
TSPD_C_RT_CTX_ENTRIES
);

142 
CASSERT
(
TSPD_C_RT_CTX_SIZE
 =(
c_π_ªgs_t
), \

143 
as£π_•d_c_π_ªgs_size_mism©ch
);

159 
	st•_c⁄ãxt
 {

160 
uöt64_t
 
	mßved_ñr_ñ3
;

161 
uöt32_t
 
	mßved_•§_ñ3
;

162 
uöt32_t
 
	m°©e
;

163 
uöt64_t
 
	mmpidr
;

164 
uöt64_t
 
	mc_π_˘x
;

165 
˝u_c⁄ãxt_t
 
	m˝u_˘x
;

166 
uöt64_t
 
	mßved_t•_¨gs
[
TSP_NUM_ARGS
];

167 } 
	tt•_c⁄ãxt_t
;

170 
	#°‹e_t•_¨gs
(
t•_˘x
, 
x1
, 
x2
) do {\

171 
t•_˘x
->
ßved_t•_¨gs
[0] = 
x1
;\

172 
t•_˘x
->
ßved_t•_¨gs
[1] = 
x2
;\

173 } 0)

	)

175 
	#gë_t•_¨gs
(
t•_˘x
, 
x1
, 
x2
) do {\

176 
x1
 = 
t•_˘x
->
ßved_t•_¨gs
[0];\

177 
x2
 = 
t•_˘x
->
ßved_t•_¨gs
[1];\

178 } 0)

	)

181 c⁄° 
•d_pm_›s_t
 
t•d_pm
;

186 
	gt•_ve˘‹s
;

191 
uöt64_t
 
t•d_íãr_•
(uöt64_à*
c_π_˘x
);

192 
__dód2
 
t•d_exô_•
(
uöt64_t
 
c_π_˘x
, uöt64_à
ªt
);

193 
uöt64_t
 
t•d_synchr⁄ous_•_íåy
(
t•_c⁄ãxt_t
 *
t•_˘x
);

194 
__dód2
 
t•d_synchr⁄ous_•_exô
(
t•_c⁄ãxt_t
 *
t•_˘x
, 
uöt64_t
 
ªt
);

195 
öt32_t
 
t•d_öô_£cuª_c⁄ãxt
(
uöt64_t
 
íåypoöt
,

196 
uöt32_t
 
rw
,

197 
uöt64_t
 
mpidr
,

198 
t•_c⁄ãxt_t
 *
t•_˘x
);

199 
t•_c⁄ãxt_t
 
t•d_•_c⁄ãxt
[
TSPD_CORE_COUNT
];

200 
t•_ve˘‹s
 *tsp_vectors;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_afflvl_off.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<°rög.h
>

35 
	~"psci_¥iv©e.h
"

37 (*
	tafÊvl_off_h™dÀr_t
)(, 
	taff_m≠_node_t
 *);

43 
	$psci_afÊvl0_off
(
mpidr
, 
aff_m≠_node_t
 *
˝u_node
)

45 
ödex
, 
∂©_°©e
;

46 
rc
 = 
PSCI_E_SUCCESS
;

47 
s˘Ã
;

49 
	`as£π
(
˝u_node
->
Àvñ
 =
MPIDR_AFFLVL0
);

52 
	`psci_£t_°©e
(
˝u_node
, 
PSCI_STATE_OFF
);

64 i‡(
psci_•d_pm
 &&Ösci_•d_pm->
svc_off
) {

65 
rc
 = 
psci_•d_pm
->
	`svc_off
(0);

66 i‡(
rc
)

67  
rc
;

70 
ödex
 = 
˝u_node
->
d©a
;

71 
	`mem£t
(&
psci_ns_íåy_öfo
[
ödex
], 0, (psci_ns_entry_info[index]));

82 
s˘Ã
 = 
	`ªad_s˘Ã_ñ3
();

83 
s˘Ã
 &~
SCTLR_C_BIT
;

84 
	`wrôe_s˘Ã_ñ3
(
s˘Ã
);

85 
	`isb
();

93 
	`dcsw_›_louis
(
DCCISW
);

99 i‡(
psci_∂©_pm_›s
->
affö°_off
) {

102 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
˝u_node
);

103 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_off
(
mpidr
,

104 
˝u_node
->
Àvñ
,

105 
∂©_°©e
);

108  
rc
;

109 
	}
}

111 
	$psci_afÊvl1_off
(
mpidr
, 
aff_m≠_node_t
 *
˛u°î_node
)

113 
rc
 = 
PSCI_E_SUCCESS
;

114 
∂©_°©e
;

117 
	`as£π
(
˛u°î_node
->
Àvñ
 =
MPIDR_AFFLVL1
);

120 
	`psci_£t_°©e
(
˛u°î_node
, 
PSCI_STATE_OFF
);

126 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
˛u°î_node
);

132 i‡(
∂©_°©e
 =
PSCI_STATE_OFF
)

133 
	`dcsw_›_Æl
(
DCCISW
);

140 i‡(
psci_∂©_pm_›s
->
affö°_off
)

141 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_off
(
mpidr
,

142 
˛u°î_node
->
Àvñ
,

143 
∂©_°©e
);

145  
rc
;

146 
	}
}

148 
	$psci_afÊvl2_off
(
mpidr
, 
aff_m≠_node_t
 *
sy°em_node
)

150 
rc
 = 
PSCI_E_SUCCESS
;

151 
∂©_°©e
;

154 
	`as£π
(
sy°em_node
->
Àvñ
 =
MPIDR_AFFLVL2
);

157 
	`psci_£t_°©e
(
sy°em_node
, 
PSCI_STATE_OFF
);

163 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
sy°em_node
);

171 i‡(
psci_∂©_pm_›s
->
affö°_off
)

172 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_off
(
mpidr
,

173 
sy°em_node
->
Àvñ
,

174 
∂©_°©e
);

175  
rc
;

176 
	}
}

178 c⁄° 
afÊvl_off_h™dÀr_t
 
	gpsci_afÊvl_off_h™dÀrs
[] = {

179 
psci_afÊvl0_off
,

180 
psci_afÊvl1_off
,

181 
psci_afÊvl2_off
,

189 
	$psci_ˇŒ_off_h™dÀrs
(
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
,

190 
°¨t_afÊvl
,

191 
íd_afÊvl
,

192 
mpidr
)

194 
rc
 = 
PSCI_E_INVALID_PARAMS
, 
Àvñ
;

195 
aff_m≠_node_t
 *
node
;

197 
Àvñ
 = 
°¨t_afÊvl
;Üevñ <
íd_afÊvl
;Üevel++) {

198 
node
 = 
mpidr_nodes
[
Àvñ
];

199 i‡(
node
 =
NULL
)

207 
rc
 = 
psci_afÊvl_off_h™dÀrs
[
Àvñ
](
mpidr
, 
node
);

208 i‡(
rc
 !
PSCI_E_SUCCESS
)

212  
rc
;

213 
	}
}

237 
	$psci_afÊvl_off
(
mpidr
,

238 
°¨t_afÊvl
,

239 
íd_afÊvl
)

241 
rc
 = 
PSCI_E_SUCCESS
;

242 
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
;

244 
mpidr
 &
MPIDR_AFFINITY_MASK
;;

253 
rc
 = 
	`psci_gë_aff_m≠_nodes
(
mpidr
,

254 
°¨t_afÊvl
,

255 
íd_afÊvl
,

256 
mpidr_nodes
);

257 
	`as£π
 (
rc
 =
PSCI_E_SUCCESS
);

264 
	`psci_acquúe_afÊvl_locks
(
mpidr
,

265 
°¨t_afÊvl
,

266 
íd_afÊvl
,

267 
mpidr_nodes
);

270 
rc
 = 
	`psci_ˇŒ_off_h™dÀrs
(
mpidr_nodes
,

271 
°¨t_afÊvl
,

272 
íd_afÊvl
,

273 
mpidr
);

279 
	`psci_ªÀa£_afÊvl_locks
(
mpidr
,

280 
°¨t_afÊvl
,

281 
íd_afÊvl
,

282 
mpidr_nodes
);

284  
rc
;

285 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_afflvl_on.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<bl31.h
>

36 
	~<c⁄ãxt_mgmt.h
>

37 
	~<∂©f‹m.h
>

38 
	~<ru¡ime_svc.h
>

39 
	~<°ddef.h
>

40 
	~"psci_¥iv©e.h
"

42 (*
	tafÊvl_⁄_h™dÀr_t
)(,

43 
	taff_m≠_node_t
 *,

51 
	$˝u_⁄_vÆid©e_°©e
(
aff_m≠_node_t
 *
node
)

53 
psci_°©e
;

56 
psci_°©e
 = 
	`psci_gë_°©e
(
node
);

58 i‡(
psci_°©e
 =
PSCI_STATE_ON
 ||Ösci_°©ê=
PSCI_STATE_SUSPEND
)

59  
PSCI_E_ALREADY_ON
;

61 i‡(
psci_°©e
 =
PSCI_STATE_ON_PENDING
)

62  
PSCI_E_ON_PENDING
;

64 
	`as£π
(
psci_°©e
 =
PSCI_STATE_OFF
);

65  
PSCI_E_SUCCESS
;

66 
	}
}

73 
	$psci_afÊvl0_⁄
(
èrgë_˝u
,

74 
aff_m≠_node_t
 *
˝u_node
,

75 
ns_íåypoöt
,

76 
c⁄ãxt_id
)

78 
ödex
, 
∂©_°©e
;

79 
psci_íåypoöt
;

80 
rc
;

83 
	`as£π
(
˝u_node
->
Àvñ
 =
MPIDR_AFFLVL0
);

89 
rc
 = 
	`˝u_⁄_vÆid©e_°©e
(
˝u_node
);

90 i‡(
rc
 !
PSCI_E_SUCCESS
)

91  
rc
;

98 i‡(
psci_•d_pm
 &&Ösci_•d_pm->
svc_⁄
)

99 
psci_•d_pm
->
	`svc_⁄
(
èrgë_˝u
);

106 
ödex
 = 
˝u_node
->
d©a
;

107 
rc
 = 
	`psci_£t_ns_íåy_öfo
(
ödex
, 
ns_íåypoöt
, 
c⁄ãxt_id
);

108 i‡(
rc
 !
PSCI_E_SUCCESS
)

109  
rc
;

112 
psci_íåypoöt
 = (Ë
psci_aff_⁄_föish_íåy
;

115 
	`psci_£t_°©e
(
˝u_node
, 
PSCI_STATE_ON_PENDING
);

122 i‡(
psci_∂©_pm_›s
->
affö°_⁄
) {

125 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
˝u_node
);

126 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_⁄
(
èrgë_˝u
,

127 
psci_íåypoöt
,

128 
ns_íåypoöt
,

129 
˝u_node
->
Àvñ
,

130 
∂©_°©e
);

133  
rc
;

134 
	}
}

141 
	$psci_afÊvl1_⁄
(
èrgë_˝u
,

142 
aff_m≠_node_t
 *
˛u°î_node
,

143 
ns_íåypoöt
,

144 
c⁄ãxt_id
)

146 
rc
 = 
PSCI_E_SUCCESS
;

147 
∂©_°©e
;

148 
psci_íåypoöt
;

150 
	`as£π
(
˛u°î_node
->
Àvñ
 =
MPIDR_AFFLVL1
);

164 i‡(
psci_∂©_pm_›s
->
affö°_⁄
) {

165 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
˛u°î_node
);

166 
psci_íåypoöt
 = (Ë
psci_aff_⁄_föish_íåy
;

167 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_⁄
(
èrgë_˝u
,

168 
psci_íåypoöt
,

169 
ns_íåypoöt
,

170 
˛u°î_node
->
Àvñ
,

171 
∂©_°©e
);

174  
rc
;

175 
	}
}

182 
	$psci_afÊvl2_⁄
(
èrgë_˝u
,

183 
aff_m≠_node_t
 *
sy°em_node
,

184 
ns_íåypoöt
,

185 
c⁄ãxt_id
)

187 
rc
 = 
PSCI_E_SUCCESS
;

188 
∂©_°©e
;

189 
psci_íåypoöt
;

192 
	`as£π
(
sy°em_node
->
Àvñ
 =
MPIDR_AFFLVL2
);

206 i‡(
psci_∂©_pm_›s
->
affö°_⁄
) {

207 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
sy°em_node
);

208 
psci_íåypoöt
 = (Ë
psci_aff_⁄_föish_íåy
;

209 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_⁄
(
èrgë_˝u
,

210 
psci_íåypoöt
,

211 
ns_íåypoöt
,

212 
sy°em_node
->
Àvñ
,

213 
∂©_°©e
);

216  
rc
;

217 
	}
}

220 c⁄° 
afÊvl_⁄_h™dÀr_t
 
	gpsci_afÊvl_⁄_h™dÀrs
[] = {

221 
psci_afÊvl0_⁄
,

222 
psci_afÊvl1_⁄
,

223 
psci_afÊvl2_⁄
,

231 
	$psci_ˇŒ_⁄_h™dÀrs
(
mpidr_aff_m≠_nodes_t
 
èrgë_˝u_nodes
,

232 
°¨t_afÊvl
,

233 
íd_afÊvl
,

234 
èrgë_˝u
,

235 
íåypoöt
,

236 
c⁄ãxt_id
)

238 
rc
 = 
PSCI_E_INVALID_PARAMS
, 
Àvñ
;

239 
aff_m≠_node_t
 *
node
;

241 
Àvñ
 = 
íd_afÊvl
;Üevñ >
°¨t_afÊvl
;Üevel--) {

242 
node
 = 
èrgë_˝u_nodes
[
Àvñ
];

243 i‡(
node
 =
NULL
)

251 
rc
 = 
psci_afÊvl_⁄_h™dÀrs
[
Àvñ
](
èrgë_˝u
,

252 
node
,

253 
íåypoöt
,

254 
c⁄ãxt_id
);

255 i‡(
rc
 !
PSCI_E_SUCCESS
)

259  
rc
;

260 
	}
}

278 
	$psci_afÊvl_⁄
(
èrgë_˝u
,

279 
íåypoöt
,

280 
c⁄ãxt_id
,

281 
°¨t_afÊvl
,

282 
íd_afÊvl
)

284 
rc
 = 
PSCI_E_SUCCESS
;

285 
mpidr_aff_m≠_nodes_t
 
èrgë_˝u_nodes
;

286 
mpidr
 = 
	`ªad_mpidr
(Ë& 
MPIDR_AFFINITY_MASK
;

294 
rc
 = 
	`psci_gë_aff_m≠_nodes
(
èrgë_˝u
,

295 
°¨t_afÊvl
,

296 
íd_afÊvl
,

297 
èrgë_˝u_nodes
);

298 i‡(
rc
 !
PSCI_E_SUCCESS
)

299  
rc
;

307 
	`psci_acquúe_afÊvl_locks
(
mpidr
,

308 
°¨t_afÊvl
,

309 
íd_afÊvl
,

310 
èrgë_˝u_nodes
);

313 
rc
 = 
	`psci_ˇŒ_⁄_h™dÀrs
(
èrgë_˝u_nodes
,

314 
°¨t_afÊvl
,

315 
íd_afÊvl
,

316 
èrgë_˝u
,

317 
íåypoöt
,

318 
c⁄ãxt_id
);

324 
	`psci_ªÀa£_afÊvl_locks
(
mpidr
,

325 
°¨t_afÊvl
,

326 
íd_afÊvl
,

327 
èrgë_˝u_nodes
);

329  
rc
;

330 
	}
}

336 
	$psci_afÊvl0_⁄_föish
(
mpidr
,

337 
aff_m≠_node_t
 *
˝u_node
)

339 
ödex
, 
∂©_°©e
, 
°©e
, 
rc
 = 
PSCI_E_SUCCESS
;

341 
	`as£π
(
˝u_node
->
Àvñ
 =
MPIDR_AFFLVL0
);

344 
°©e
 = 
	`psci_gë_°©e
(
˝u_node
);

345 
	`as£π
(
°©e
 =
PSCI_STATE_ON_PENDING
);

353 i‡(
psci_∂©_pm_›s
->
affö°_⁄_föish
) {

356 
∂©_°©e
 = 
	`gë_phys_°©e
(
°©e
);

357 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_⁄_föish
(
mpidr
,

358 
˝u_node
->
Àvñ
,

359 
∂©_°©e
);

360 
	`as£π
(
rc
 =
PSCI_E_SUCCESS
);

366 
	`bl31_∂©_íabÀ_mmu
();

373 
	`bl31_¨ch_£tup
();

381 
	`as£π
(
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
));

382 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

383 
	`cm_öô_p˝u_±r_ˇche
();

384 
	`wrôe_vb¨_ñ3
((
uöt64_t
Ë
ru¡ime_ex˚±i⁄s
);

391 i‡(
psci_•d_pm
 &&Ösci_•d_pm->
svc_⁄_föish
)

392 
psci_•d_pm
->
	`svc_⁄_föish
(0);

400 
ödex
 = 
˝u_node
->
d©a
;

401 
	`psci_gë_ns_íåy_öfo
(
ödex
);

404 
	`psci_£t_°©e
(
˝u_node
, 
PSCI_STATE_ON
);

407 
	`dcsw_›_louis
(
DCCSW
);

409  
rc
;

410 
	}
}

412 
	$psci_afÊvl1_⁄_föish
(
mpidr
,

413 
aff_m≠_node_t
 *
˛u°î_node
)

415 
∂©_°©e
, 
rc
 = 
PSCI_E_SUCCESS
;

417 
	`as£π
(
˛u°î_node
->
Àvñ
 =
MPIDR_AFFLVL1
);

427 i‡(
psci_∂©_pm_›s
->
affö°_⁄_föish
) {

430 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
˛u°î_node
);

431 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_⁄_föish
(
mpidr
,

432 
˛u°î_node
->
Àvñ
,

433 
∂©_°©e
);

434 
	`as£π
(
rc
 =
PSCI_E_SUCCESS
);

438 
	`psci_£t_°©e
(
˛u°î_node
, 
PSCI_STATE_ON
);

440  
rc
;

441 
	}
}

444 
	$psci_afÊvl2_⁄_föish
(
mpidr
,

445 
aff_m≠_node_t
 *
sy°em_node
)

447 
∂©_°©e
, 
rc
 = 
PSCI_E_SUCCESS
;

450 
	`as£π
(
sy°em_node
->
Àvñ
 =
MPIDR_AFFLVL2
);

465 i‡(
psci_∂©_pm_›s
->
affö°_⁄_föish
) {

468 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
sy°em_node
);

469 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_⁄_föish
(
mpidr
,

470 
sy°em_node
->
Àvñ
,

471 
∂©_°©e
);

472 
	`as£π
(
rc
 =
PSCI_E_SUCCESS
);

476 
	`psci_£t_°©e
(
sy°em_node
, 
PSCI_STATE_ON
);

478  
rc
;

479 
	}
}

481 c⁄° 
afÊvl_powî_⁄_föishî_t
 
	gpsci_afÊvl_⁄_föishîs
[] = {

482 
psci_afÊvl0_⁄_föish
,

483 
psci_afÊvl1_⁄_föish
,

484 
psci_afÊvl2_⁄_föish
,

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_afflvl_suspend.c

31 
	~<as£π.h
>

32 
	~<bl_comm⁄.h
>

33 
	~<¨ch.h
>

34 
	~<¨ch_hñ≥rs.h
>

35 
	~<c⁄ãxt.h
>

36 
	~<c⁄ãxt_mgmt.h
>

37 
	~<ru¡ime_svc.h
>

38 
	~<°ddef.h
>

39 
	~<log.h
>

40 
	~"psci_¥iv©e.h
"

42 (*
	tafÊvl_su•íd_h™dÀr_t
)(,

43 
	taff_m≠_node_t
 *,

52 
	$psci_£t_su•íd_powî_°©e
(
aff_m≠_node_t
 *
node
, 
powî_°©e
)

58 
	`as£π
(
node
->
mpidr
 =(
	`ªad_mpidr
(Ë& 
MPIDR_AFFINITY_MASK
));

59 
	`as£π
(
node
->
Àvñ
 =
MPIDR_AFFLVL0
);

62 
psci_su•íd_c⁄ãxt
[
node
->
d©a
].
powî_°©e
 =Öower_state;

68 
	`Êush_dˇche_ønge
(

69 ()&
psci_su•íd_c⁄ãxt
[
node
->
d©a
],

70 (
su•íd_c⁄ãxt_t
));

71 
	}
}

78 
	$psci_gë_su•íd_afÊvl
(
mpidr
)

80 
aff_m≠_node_t
 *
node
;

82 
node
 = 
	`psci_gë_aff_m≠_node
(
mpidr
 & 
MPIDR_AFFINITY_MASK
,

83 
MPIDR_AFFLVL0
);

84 
	`as£π
(
node
);

86  
	`psci_gë_aff_m≠_node_su•íd_afÊvl
(
node
);

87 
	}
}

95 
	$psci_gë_aff_m≠_node_su•íd_afÊvl
(
aff_m≠_node_t
 *
node
)

97 
powî_°©e
;

99 
	`as£π
(
node
->
Àvñ
 =
MPIDR_AFFLVL0
);

101 
powî_°©e
 = 
psci_su•íd_c⁄ãxt
[
node
->
d©a
].power_state;

102  ((
powî_°©e
 =
PSCI_INVALID_DATA
) ?

103 
powî_°©e
 : 
	`psci_gë_p°©e_afÊvl
(power_state));

104 
	}
}

111 
	$psci_gë_su•íd_°©eid
(
mpidr
)

113 
aff_m≠_node_t
 *
node
;

114 
powî_°©e
;

116 
node
 = 
	`psci_gë_aff_m≠_node
(
mpidr
 & 
MPIDR_AFFINITY_MASK
,

117 
MPIDR_AFFLVL0
);

118 
	`as£π
(
node
);

119 
	`as£π
(
node
->
Àvñ
 =
MPIDR_AFFLVL0
);

121 
powî_°©e
 = 
psci_su•íd_c⁄ãxt
[
node
->
d©a
].power_state;

122  ((
powî_°©e
 =
PSCI_INVALID_DATA
) ?

123 
powî_°©e
 : 
	`psci_gë_p°©e_id
(power_state));

124 
	}
}

130 
	$psci_afÊvl0_su•íd
(
mpidr
,

131 
aff_m≠_node_t
 *
˝u_node
,

132 
ns_íåypoöt
,

133 
c⁄ãxt_id
,

134 
powî_°©e
)

136 
ödex
, 
∂©_°©e
;

137 
psci_íåypoöt
;

138 
ñ3_°©e_t
 *
ßved_ñ3_°©e
;

139 
rc
 = 
PSCI_E_SUCCESS
;

142 
	`as£π
(
˝u_node
->
Àvñ
 =
MPIDR_AFFLVL0
);

145 
	`psci_£t_su•íd_powî_°©e
(
˝u_node
, 
powî_°©e
);

157 i‡(
psci_•d_pm
 &&Ösci_•d_pm->
svc_su•íd
)

158 
psci_•d_pm
->
	`svc_su•íd
(
powî_°©e
);

161 
	`psci_£t_°©e
(
˝u_node
, 
PSCI_STATE_SUSPEND
);

167 
ödex
 = 
˝u_node
->
d©a
;

168 
rc
 = 
	`psci_£t_ns_íåy_öfo
(
ödex
, 
ns_íåypoöt
, 
c⁄ãxt_id
);

169 i‡(
rc
 !
PSCI_E_SUCCESS
)

170  
rc
;

177 
	`cm_ñ3_sy§egs_c⁄ãxt_ßve
(
NON_SECURE
);

178 
rc
 = 
PSCI_E_SUCCESS
;

184 
ßved_ñ3_°©e
 = 
	`gë_ñ3°©e_˘x
(
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
));

185 
	`Êush_dˇche_ønge
((
uöt64_t
Ë
ßved_ñ3_°©e
, (*saved_el3_state));

188 
psci_íåypoöt
 = (Ë
psci_aff_su•íd_föish_íåy
;

202 
s˘Ã
 = 
	`ªad_s˘Ã_ñ3
();

203 
s˘Ã
 &~
SCTLR_C_BIT
;

204 
	`wrôe_s˘Ã_ñ3
(
s˘Ã
);

205 
	`isb
();

213 
	`dcsw_›_louis
(
DCCISW
);

221 i‡(
psci_∂©_pm_›s
->
affö°_su•íd
) {

222 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
˝u_node
);

223 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_su•íd
(
mpidr
,

224 
psci_íåypoöt
,

225 
ns_íåypoöt
,

226 
˝u_node
->
Àvñ
,

227 
∂©_°©e
);

230  
rc
;

231 
	}
}

233 
	$psci_afÊvl1_su•íd
(
mpidr
,

234 
aff_m≠_node_t
 *
˛u°î_node
,

235 
ns_íåypoöt
,

236 
c⁄ãxt_id
,

237 
powî_°©e
)

239 
rc
 = 
PSCI_E_SUCCESS
;

240 
∂©_°©e
;

241 
psci_íåypoöt
, 
s˘Ã
;

244 
	`as£π
(
˛u°î_node
->
Àvñ
 =
MPIDR_AFFLVL1
);

247 
	`psci_£t_°©e
(
˛u°î_node
, 
PSCI_STATE_SUSPEND
);

253 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
˛u°î_node
);

255 
s˘Ã
 = 
	`ªad_s˘Ã_ñ3
();

256 
s˘Ã
 &~
SCTLR_C_BIT
;

257 
	`wrôe_s˘Ã_ñ3
(
s˘Ã
);

258 
	`isb
();

266 
	`dcsw_›_louis
(
DCCISW
);

272 i‡(
∂©_°©e
 =
PSCI_STATE_OFF
)

273 
	`dcsw_›_Æl
(
DCCISW
);

280 i‡(
psci_∂©_pm_›s
->
affö°_su•íd
) {

288 
psci_íåypoöt
 = (Ë
psci_aff_su•íd_föish_íåy
;

289 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_su•íd
(
mpidr
,

290 
psci_íåypoöt
,

291 
ns_íåypoöt
,

292 
˛u°î_node
->
Àvñ
,

293 
∂©_°©e
);

296  
rc
;

297 
	}
}

300 
	$psci_afÊvl2_su•íd
(
mpidr
,

301 
aff_m≠_node_t
 *
sy°em_node
,

302 
ns_íåypoöt
,

303 
c⁄ãxt_id
,

304 
powî_°©e
)

306 
rc
 = 
PSCI_E_SUCCESS
;

307 
∂©_°©e
;

308 
psci_íåypoöt
;

311 
	`as£π
(
sy°em_node
->
Àvñ
 =
MPIDR_AFFLVL2
);

314 
	`psci_£t_°©e
(
sy°em_node
, 
PSCI_STATE_SUSPEND
);

320 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
sy°em_node
);

326 i‡(
psci_∂©_pm_›s
->
affö°_su•íd
) {

334 
psci_íåypoöt
 = (Ë
psci_aff_su•íd_föish_íåy
;

335 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_su•íd
(
mpidr
,

336 
psci_íåypoöt
,

337 
ns_íåypoöt
,

338 
sy°em_node
->
Àvñ
,

339 
∂©_°©e
);

342  
rc
;

343 
	}
}

345 c⁄° 
afÊvl_su•íd_h™dÀr_t
 
	gpsci_afÊvl_su•íd_h™dÀrs
[] = {

346 
psci_afÊvl0_su•íd
,

347 
psci_afÊvl1_su•íd
,

348 
psci_afÊvl2_su•íd
,

356 
	$psci_ˇŒ_su•íd_h™dÀrs
(
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
,

357 
°¨t_afÊvl
,

358 
íd_afÊvl
,

359 
mpidr
,

360 
íåypoöt
,

361 
c⁄ãxt_id
,

362 
powî_°©e
)

364 
rc
 = 
PSCI_E_INVALID_PARAMS
, 
Àvñ
;

365 
aff_m≠_node_t
 *
node
;

367 
Àvñ
 = 
°¨t_afÊvl
;Üevñ <
íd_afÊvl
;Üevel++) {

368 
node
 = 
mpidr_nodes
[
Àvñ
];

369 i‡(
node
 =
NULL
)

377 
rc
 = 
psci_afÊvl_su•íd_h™dÀrs
[
Àvñ
](
mpidr
,

378 
node
,

379 
íåypoöt
,

380 
c⁄ãxt_id
,

381 
powî_°©e
);

382 i‡(
rc
 !
PSCI_E_SUCCESS
)

386  
rc
;

387 
	}
}

411 
	$psci_afÊvl_su•íd
(
mpidr
,

412 
íåypoöt
,

413 
c⁄ãxt_id
,

414 
powî_°©e
,

415 
°¨t_afÊvl
,

416 
íd_afÊvl
)

418 
rc
 = 
PSCI_E_SUCCESS
;

419 
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
;

421 
mpidr
 &
MPIDR_AFFINITY_MASK
;

429 
rc
 = 
	`psci_gë_aff_m≠_nodes
(
mpidr
,

430 
°¨t_afÊvl
,

431 
íd_afÊvl
,

432 
mpidr_nodes
);

433 i‡(
rc
 !
PSCI_E_SUCCESS
)

434  
rc
;

441 
	`psci_acquúe_afÊvl_locks
(
mpidr
,

442 
°¨t_afÊvl
,

443 
íd_afÊvl
,

444 
mpidr_nodes
);

447 
rc
 = 
	`psci_ˇŒ_su•íd_h™dÀrs
(
mpidr_nodes
,

448 
°¨t_afÊvl
,

449 
íd_afÊvl
,

450 
mpidr
,

451 
íåypoöt
,

452 
c⁄ãxt_id
,

453 
powî_°©e
);

459 
	`psci_ªÀa£_afÊvl_locks
(
mpidr
,

460 
°¨t_afÊvl
,

461 
íd_afÊvl
,

462 
mpidr_nodes
);

464  
rc
;

465 
	}
}

471 
	$psci_afÊvl0_su•íd_föish
(
mpidr
,

472 
aff_m≠_node_t
 *
˝u_node
)

474 
ödex
, 
∂©_°©e
, 
°©e
, 
rc
 = 
PSCI_E_SUCCESS
;

475 
öt32_t
 
su•íd_Àvñ
;

477 
	`as£π
(
˝u_node
->
Àvñ
 =
MPIDR_AFFLVL0
);

480 
°©e
 = 
	`psci_gë_°©e
(
˝u_node
);

481 
	`as£π
(
°©e
 =
PSCI_STATE_SUSPEND
);

490 i‡(
psci_∂©_pm_›s
->
affö°_su•íd_föish
) {

493 
∂©_°©e
 = 
	`gë_phys_°©e
(
°©e
);

494 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_su•íd_föish
(
mpidr
,

495 
˝u_node
->
Àvñ
,

496 
∂©_°©e
);

497 
	`as£π
(
rc
 =
PSCI_E_SUCCESS
);

501 
ödex
 = 
˝u_node
->
d©a
;

507 
	`cm_ñ3_sy§egs_c⁄ãxt_ª°‹e
(
NON_SECURE
);

508 
rc
 = 
PSCI_E_SUCCESS
;

516 
	`as£π
(
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
));

517 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

518 
	`cm_öô_p˝u_±r_ˇche
();

519 
	`wrôe_vb¨_ñ3
((
uöt64_t
Ë
ru¡ime_ex˚±i⁄s
);

526 i‡(
psci_•d_pm
 &&Ösci_•d_pm->
svc_su•íd
) {

527 
su•íd_Àvñ
 = 
	`psci_gë_aff_m≠_node_su•íd_afÊvl
(
˝u_node
);

528 
	`as£π
 (
su•íd_Àvñ
 !
PSCI_INVALID_DATA
);

529 
psci_•d_pm
->
	`svc_su•íd_föish
(
su•íd_Àvñ
);

533 
	`psci_£t_su•íd_powî_°©e
(
˝u_node
, 
PSCI_INVALID_DATA
);

540 
	`psci_gë_ns_íåy_öfo
(
ödex
);

543 
	`psci_£t_°©e
(
˝u_node
, 
PSCI_STATE_ON
);

546 
	`dcsw_›_louis
(
DCCSW
);

548  
rc
;

549 
	}
}

551 
	$psci_afÊvl1_su•íd_föish
(
mpidr
,

552 
aff_m≠_node_t
 *
˛u°î_node
)

554 
∂©_°©e
, 
rc
 = 
PSCI_E_SUCCESS
;

556 
	`as£π
(
˛u°î_node
->
Àvñ
 =
MPIDR_AFFLVL1
);

566 i‡(
psci_∂©_pm_›s
->
affö°_su•íd_föish
) {

569 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
˛u°î_node
);

570 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_su•íd_föish
(
mpidr
,

571 
˛u°î_node
->
Àvñ
,

572 
∂©_°©e
);

573 
	`as£π
(
rc
 =
PSCI_E_SUCCESS
);

577 
	`psci_£t_°©e
(
˛u°î_node
, 
PSCI_STATE_ON
);

579  
rc
;

580 
	}
}

583 
	$psci_afÊvl2_su•íd_föish
(
mpidr
,

584 
aff_m≠_node_t
 *
sy°em_node
)

586 
∂©_°©e
, 
rc
 = 
PSCI_E_SUCCESS
;;

589 
	`as£π
(
sy°em_node
->
Àvñ
 =
MPIDR_AFFLVL2
);

604 i‡(
psci_∂©_pm_›s
->
affö°_su•íd_föish
) {

607 
∂©_°©e
 = 
	`psci_gë_phys_°©e
(
sy°em_node
);

608 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_su•íd_föish
(
mpidr
,

609 
sy°em_node
->
Àvñ
,

610 
∂©_°©e
);

611 
	`as£π
(
rc
 =
PSCI_E_SUCCESS
);

615 
	`psci_£t_°©e
(
sy°em_node
, 
PSCI_STATE_ON
);

617  
rc
;

618 
	}
}

620 c⁄° 
afÊvl_powî_⁄_föishî_t
 
	gpsci_afÊvl_su•íd_föishîs
[] = {

621 
psci_afÊvl0_su•íd_föish
,

622 
psci_afÊvl1_su•íd_föish
,

623 
psci_afÊvl2_su•íd_föish
,

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_common.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<c⁄ãxt.h
>

36 
	~<c⁄ãxt_mgmt.h
>

37 
	~<debug.h
>

38 
	~<∂©f‹m.h
>

39 
	~"psci_¥iv©e.h
"

45 c⁄° 
•d_pm_›s_t
 *
	gpsci_•d_pm
;

52 
su•íd_c⁄ãxt_t
 
	gpsci_su•íd_c⁄ãxt
[
PSCI_NUM_AFFS
];

53 
ns_íåy_öfo_t
 
	gpsci_ns_íåy_öfo
[
PSCI_NUM_AFFS
];

60 
aff_m≠_node_t
 
	gpsci_aff_m≠
[
PSCI_NUM_AFFS
]

61 
__©åibuã__
 ((
£˘i⁄
("tzfw_coherent_mem")));

66 c⁄° 
∂©_pm_›s_t
 *
	gpsci_∂©_pm_›s
;

76 
	$gë_powî_⁄_èrgë_afÊvl
(
mpidr
)

78 
aff_m≠_node_t
 *
node
;

79 
°©e
;

80 
afÊvl
;

83 
node
 = 
	`psci_gë_aff_m≠_node
(
mpidr
 & 
MPIDR_AFFINITY_MASK
,

84 
MPIDR_AFFLVL0
);

85 
	`as£π
(
node
);

92 
°©e
 = 
	`psci_gë_°©e
(
node
);

93 i‡(
°©e
 =
PSCI_STATE_ON_PENDING
)

94  
	`gë_max_afÊvl
();

96 i‡(
°©e
 =
PSCI_STATE_SUSPEND
) {

97 
afÊvl
 = 
	`psci_gë_aff_m≠_node_su•íd_afÊvl
(
node
);

98 
	`as£π
(
afÊvl
 !
PSCI_INVALID_DATA
);

99  
afÊvl
;

101  
PSCI_E_INVALID_PARAMS
;

102 
	}
}

108 
	$gë_max_afÊvl
()

110 
aff_lvl
;

112 
aff_lvl
 = 
	`∂©_gë_max_afÊvl
();

113 
	`as£π
(
aff_lvl
 <
MPIDR_MAX_AFFLVL
 &&áff_lv»>
MPIDR_AFFLVL0
);

115  
aff_lvl
;

116 
	}
}

122 
	$mpidr_£t_aff_ö°
(
mpidr
,

123 
aff_ö°
,

124 
aff_lvl
)

126 
aff_shi·
;

128 
	`as£π
(
aff_lvl
 <
MPIDR_AFFLVL3
);

134 
aff_shi·
 = 
	`gë_afÊvl_shi·
(
aff_lvl
);

137 
mpidr
 &~(
MPIDR_AFFLVL_MASK
 << 
aff_shi·
);

138 
mpidr
 |
aff_ö°
 << 
aff_shi·
;

140  
mpidr
;

141 
	}
}

146 
	$psci_check_afÊvl_ønge
(
°¨t_afÊvl
, 
íd_afÊvl
)

149 i‡(
íd_afÊvl
 > 
MPIDR_MAX_AFFLVL
)

150  
PSCI_E_INVALID_PARAMS
;

152 i‡(
°¨t_afÊvl
 < 
MPIDR_AFFLVL0
)

153  
PSCI_E_INVALID_PARAMS
;

155 i‡(
íd_afÊvl
 < 
°¨t_afÊvl
)

156  
PSCI_E_INVALID_PARAMS
;

158  
PSCI_E_SUCCESS
;

159 
	}
}

166 
	$psci_acquúe_afÊvl_locks
(
mpidr
,

167 
°¨t_afÊvl
,

168 
íd_afÊvl
,

169 
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
)

171 
Àvñ
;

173 
Àvñ
 = 
°¨t_afÊvl
;Üevñ <
íd_afÊvl
;Üevel++) {

174 i‡(
mpidr_nodes
[
Àvñ
] =
NULL
)

176 
	`bakîy_lock_gë
(
mpidr
, &
mpidr_nodes
[
Àvñ
]->
lock
);

178 
	}
}

185 
	$psci_ªÀa£_afÊvl_locks
(
mpidr
,

186 
°¨t_afÊvl
,

187 
íd_afÊvl
,

188 
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
)

190 
Àvñ
;

192 
Àvñ
 = 
íd_afÊvl
;Üevñ >
°¨t_afÊvl
;Üevel--) {

193 i‡(
mpidr_nodes
[
Àvñ
] =
NULL
)

195 
	`bakîy_lock_ªÀa£
(
mpidr
, &
mpidr_nodes
[
Àvñ
]->
lock
);

197 
	}
}

203 
	$psci_vÆid©e_mpidr
(
mpidr
, 
Àvñ
)

205 
aff_m≠_node_t
 *
node
;

207 
node
 = 
	`psci_gë_aff_m≠_node
(
mpidr
, 
Àvñ
);

208 i‡(
node
 && (node->
°©e
 & 
PSCI_AFF_PRESENT
))

209  
PSCI_E_SUCCESS
;

211  
PSCI_E_INVALID_PARAMS
;

212 
	}
}

219 
	$psci_gë_ns_íåy_öfo
(
ödex
)

221 
s˘Ã
 = 0, 
s¸
, 
ñ_°©us
, 
id_Ø64p‰0
;

222 
uöt64_t
 
mpidr
 = 
	`ªad_mpidr
();

223 
˝u_c⁄ãxt_t
 *
ns_íåy_c⁄ãxt
;

224 
gp_ªgs_t
 *
ns_íåy_g¥egs
;

226 
s¸
 = 
	`ªad_s¸
();

229 
id_Ø64p‰0
 = 
	`ªad_id_Ø64p‰0_ñ1
();

230 
ñ_°©us
 = (
id_Ø64p‰0
 >> 
ID_AA64PFR0_EL2_SHIFT
) &

231 
ID_AA64PFR0_ELX_MASK
;

234 i‡(
psci_ns_íåy_öfo
[
ödex
].
s˘Ã
 & 
SCTLR_EE_BIT
)

235 
s˘Ã
 |
SCTLR_EE_BIT
;

237 
s˘Ã
 &~
SCTLR_EE_BIT
;

240 
s˘Ã
 &~(
SCTLR_M_BIT
 | 
SCTLR_C_BIT
 | SCTLR_M_BIT);

243 i‡(
psci_ns_íåy_öfo
[
ödex
].
s¸
 & 
SCR_RW_BIT
)

245 
s¸
 |
SCR_RW_BIT
;

249 
s¸
 &~
SCR_RW_BIT
;

252 
s¸
 |
SCR_NS_BIT
;

267 i‡(
psci_ns_íåy_öfo
[
ödex
].
s¸
 & 
SCR_HCE_BIT
)

269 
s¸
 |
SCR_HCE_BIT
;

273 
s¸
 &~
SCR_HCE_BIT
;

277 i‡(
ñ_°©us
)

278 
	`wrôe_s˘Ã_ñ2
(
s˘Ã
);

280 
	`wrôe_s˘Ã_ñ1
(
s˘Ã
);

283 
ns_íåy_c⁄ãxt
 = (
˝u_c⁄ãxt_t
 *Ë
	`cm_gë_c⁄ãxt
(
mpidr
, 
NON_SECURE
);

284 
	`as£π
(
ns_íåy_c⁄ãxt
);

290 
ns_íåy_g¥egs
 = 
	`gë_g¥egs_˘x
(
ns_íåy_c⁄ãxt
);

291 
	`wrôe_˘x_ªg
(
ns_íåy_g¥egs
,

292 
CTX_GPREG_X0
,

293 
psci_ns_íåy_öfo
[
ödex
].
c⁄ãxt_id
);

300 
	`cm_£t_ñ3_îë_c⁄ãxt
(
NON_SECURE
,

301 
psci_ns_íåy_öfo
[
ödex
].
îë_öfo
.
íåypoöt
,

302 
psci_ns_íåy_öfo
[
ödex
].
îë_öfo
.
•§
,

303 
s¸
);

305 
	`cm_£t_√xt_îë_c⁄ãxt
(
NON_SECURE
);

306 
	}
}

314 
	$psci_£t_ns_íåy_öfo
(
ödex
,

315 
íåypoöt
,

316 
c⁄ãxt_id
)

318 
rc
 = 
PSCI_E_SUCCESS
;

319 
rw
, 
mode
, 
ì
, 
•§
 = 0;

320 
id_Ø64p‰0
 = 
	`ªad_id_Ø64p‰0_ñ1
(), 
s¸
 = 
	`ªad_s¸
();

321 
ñ_°©us
;

322 
daif
;

325 
ñ_°©us
 = (
id_Ø64p‰0
 >> 
ID_AA64PFR0_EL2_SHIFT
) &

326 
ID_AA64PFR0_ELX_MASK
;

332 
rw
 = 
s¸
 & 
SCR_RW_BIT
;

333 i‡(
rw
) {

339 i‡(
íåypoöt
 & 0x1)

340  
PSCI_E_INVALID_PARAMS
;

342 i‡(
ñ_°©us
 && (
s¸
 & 
SCR_HCE_BIT
)) {

343 
mode
 = 
MODE_EL2
;

344 
ì
 = 
	`ªad_s˘Ã_ñ2
(Ë& 
SCTLR_EE_BIT
;

345 
psci_ns_íåy_öfo
[
ödex
].
s¸
 |
SCR_HCE_BIT
;

347 
mode
 = 
MODE_EL1
;

348 
ì
 = 
	`ªad_s˘Ã_ñ1
(Ë& 
SCTLR_EE_BIT
;

349 
psci_ns_íåy_öfo
[
ödex
].
s¸
 &~
SCR_HCE_BIT
;

352 
•§
 = 
	`SPSR_64
(
mode
, 
MODE_SP_ELX
, 
DISABLE_ALL_EXCEPTIONS
);

354 
psci_ns_íåy_öfo
[
ödex
].
s˘Ã
 |
ì
;

355 
psci_ns_íåy_öfo
[
ödex
].
s¸
 |
SCR_RW_BIT
;

359 i‡(
ñ_°©us
 && (
s¸
 & 
SCR_HCE_BIT
)) {

360 
mode
 = 
MODE32_hyp
;

361 
ì
 = 
	`ªad_s˘Ã_ñ2
(Ë& 
SCTLR_EE_BIT
;

362 
psci_ns_íåy_öfo
[
ödex
].
s¸
 |
SCR_HCE_BIT
;

364 
mode
 = 
MODE32_svc
;

365 
ì
 = 
	`ªad_s˘Ã_ñ1
(Ë& 
SCTLR_EE_BIT
;

366 
psci_ns_íåy_öfo
[
ödex
].
s¸
 &~
SCR_HCE_BIT
;

373 
daif
 = 
DAIF_ABT_BIT
 | 
DAIF_IRQ_BIT
 | 
DAIF_FIQ_BIT
;

375 
•§
 = 
	`SPSR_MODE32
(
mode
, 
íåypoöt
 & 0x1, 
ì
, 
daif
);

378 
psci_ns_íåy_öfo
[
ödex
].
s˘Ã
 |
ì
;

379 
psci_ns_íåy_öfo
[
ödex
].
s¸
 &~
SCR_RW_BIT
;

382 
psci_ns_íåy_öfo
[
ödex
].
îë_öfo
.
íåypoöt
 =Éntrypoint;

383 
psci_ns_íåy_öfo
[
ödex
].
îë_öfo
.
•§
 = spsr;

384 
psci_ns_íåy_öfo
[
ödex
].
c⁄ãxt_id
 = context_id;

386  
rc
;

387 
	}
}

393 
	$psci_gë_°©e
(
aff_m≠_node_t
 *
node
)

395 
	`as£π
(
node
->
Àvñ
 >
MPIDR_AFFLVL0
 &&Çode->Àvñ <
MPIDR_MAX_AFFLVL
);

398 i‡(
node
->
Àvñ
 =
MPIDR_AFFLVL0
)

399  (
node
->
°©e
 >> 
PSCI_STATE_SHIFT
Ë& 
PSCI_STATE_MASK
;

409 i‡(
node
->
ªf_cou¡
)

410  
PSCI_STATE_ON
;

412  
PSCI_STATE_OFF
;

413 
	}
}

420 
	$psci_£t_°©e
(
aff_m≠_node_t
 *
node
, 
°©e
)

422 
	`as£π
(
node
->
Àvñ
 >
MPIDR_AFFLVL0
 &&Çode->Àvñ <
MPIDR_MAX_AFFLVL
);

430 i‡(
node
->
Àvñ
 > 
MPIDR_AFFLVL0
) {

431 
°©e
) {

432 
PSCI_STATE_ON
:

433 
node
->
ªf_cou¡
++;

435 
PSCI_STATE_OFF
:

436 
PSCI_STATE_SUSPEND
:

437 
node
->
ªf_cou¡
--;

439 
PSCI_STATE_ON_PENDING
:

446 
	`as£π
(0);

449 
node
->
°©e
 &~(
PSCI_STATE_MASK
 << 
PSCI_STATE_SHIFT
);

450 
node
->
°©e
 |(°©ê& 
PSCI_STATE_MASK
Ë<< 
PSCI_STATE_SHIFT
;

452 
	}
}

461 
	$psci_gë_phys_°©e
(
aff_m≠_node_t
 *
node
)

463 
°©e
;

465 
°©e
 = 
	`psci_gë_°©e
(
node
);

466  
	`gë_phys_°©e
(
°©e
);

467 
	}
}

474 
	$psci_ˇŒ_powî_⁄_h™dÀrs
(
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
,

475 
°¨t_afÊvl
,

476 
íd_afÊvl
,

477 
afÊvl_powî_⁄_föishî_t
 *
p⁄_h™dÀrs
,

478 
mpidr
)

480 
rc
 = 
PSCI_E_INVALID_PARAMS
, 
Àvñ
;

481 
aff_m≠_node_t
 *
node
;

483 
Àvñ
 = 
íd_afÊvl
;Üevñ >
°¨t_afÊvl
;Üevel--) {

484 
node
 = 
mpidr_nodes
[
Àvñ
];

485 i‡(
node
 =
NULL
)

494 
rc
 = 
p⁄_h™dÀrs
[
Àvñ
](
mpidr
, 
node
);

495 i‡(
rc
 !
PSCI_E_SUCCESS
)

499  
rc
;

500 
	}
}

521 
	$psci_afÊvl_powî_⁄_föish
(
mpidr
,

522 
°¨t_afÊvl
,

523 
íd_afÊvl
,

524 
afÊvl_powî_⁄_föishî_t
 *
p⁄_h™dÀrs
)

526 
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
;

527 
rc
;

529 
mpidr
 &
MPIDR_AFFINITY_MASK
;

537 
rc
 = 
	`psci_gë_aff_m≠_nodes
(
mpidr
,

538 
°¨t_afÊvl
,

539 
íd_afÊvl
,

540 
mpidr_nodes
);

541 i‡(
rc
 !
PSCI_E_SUCCESS
)

542 
	`∑nic
();

549 
	`psci_acquúe_afÊvl_locks
(
mpidr
,

550 
°¨t_afÊvl
,

551 
íd_afÊvl
,

552 
mpidr_nodes
);

555 
rc
 = 
	`psci_ˇŒ_powî_⁄_h™dÀrs
(
mpidr_nodes
,

556 
°¨t_afÊvl
,

557 
íd_afÊvl
,

558 
p⁄_h™dÀrs
,

559 
mpidr
);

560 i‡(
rc
 !
PSCI_E_SUCCESS
)

561 
	`∑nic
();

567 
	`psci_ªÀa£_afÊvl_locks
(
mpidr
,

568 
°¨t_afÊvl
,

569 
íd_afÊvl
,

570 
mpidr_nodes
);

572 
	}
}

579 
	$psci_ªgi°î_•d_pm_hook
(c⁄° 
•d_pm_›s_t
 *
pm
)

581 
psci_•d_pm
 = 
pm
;

582 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_entry.S

31 
	~<¨ch.h
>

32 
	~<asm_ma¸os.S
>

33 
	~<psci.h
>

35 .
globl
 
	gpsci_aff_⁄_föish_íåy


36 .
globl
 
	gpsci_aff_su•íd_föish_íåy


37 .
globl
 
	g__psci_˝u_off


38 .
globl
 
	g__psci_˝u_su•íd


39 .
globl
 
psci_powî_down_wfi


53 
func
 
psci_aff_⁄_föish_íåy


54 
adr
 
	gx23
, 
psci_afÊvl_⁄_föishîs


55 
b
 
psci_aff_comm⁄_föish_íåy


57 
	gpsci_aff_su•íd_föish_íåy
:

58 
adr
 
x23
, 
psci_afÊvl_su•íd_föishîs


60 
	gpsci_aff_comm⁄_föish_íåy
:

61 
adr
 
x22
, 
psci_afÊvl_powî_⁄_föish


69 
adr
 
	gx0
, 
óæy_ex˚±i⁄s


70 
m§
 
	gvb¨_ñ3
, 
x0


71 
isb


77 
m§
 
	g•£l
, #0

79 
mrs
 
	gx0
, 
mpidr_ñ1


80 
bl
 
∂©f‹m_£t_cohîít_°ack


87 
mrs
 
	gx0
, 
mpidr_ñ1


88 
bl
 
gë_powî_⁄_èrgë_afÊvl


89 
cmp
 
	gx0
, 
xzr


90 
	gb
.
…
 
_∑nic


91 
mov
 
	gx3
, 
x23


92 
mov
 
	gx2
, 
x0


93 
mov
 
	gx1
, #MPIDR_AFFLVL0

94 
mrs
 
	gx0
, 
mpidr_ñ1


95 
bÃ
 
x22


102 
mrs
 
	gx0
, 
mpidr_ñ1


103 
bl
 
∂©f‹m_£t_°ack


105 
b
 
ñ3_exô


106 
	g_∑nic
:

107 
b
 
_∑nic


115 
func
 
__psci_˝u_off


116 
func_¥ﬁogue


117 
sub
 
•
, 
	g•
, #0
x10


118 
°p
 
	gx19
, 
	gx20
, [
•
, #0]

119 
mov
 
	gx19
, 
•


120 
mrs
 
	gx0
, 
mpidr_ñ1


121 
bl
 
∂©f‹m_£t_cohîít_°ack


122 
bl
 
psci_˝u_off


123 
mov
 
	g•
, 
x19


124 
ldp
 
	gx19
, 
	gx20
, [
•
,#0]

125 
add
 
	g•
, sp, #0
x10


126 
func_ïûogue


127 
ªt


129 
func
 
__psci_˝u_su•íd


130 
func_¥ﬁogue


131 
sub
 
	g•
, sp, #0
x20


132 
°p
 
	gx19
, 
	gx20
, [
•
, #0]

133 
°p
 
	gx21
, 
	gx22
, [
•
, #0
x10
]

134 
mov
 
	gx19
, 
•


135 
mov
 
	gx20
, 
x0


136 
mov
 
	gx21
, 
x1


137 
mov
 
	gx22
, 
x2


138 
mrs
 
	gx0
, 
mpidr_ñ1


139 
bl
 
∂©f‹m_£t_cohîít_°ack


140 
mov
 
	gx0
, 
x20


141 
mov
 
	gx1
, 
x21


142 
mov
 
	gx2
, 
x22


143 
bl
 
psci_˝u_su•íd


144 
mov
 
	g•
, 
x19


145 
ldp
 
	gx21
, 
	gx22
, [
•
,#0
x10
]

146 
ldp
 
	gx19
, 
	gx20
, [
•
,#0]

147 
add
 
	g•
, sp, #0
x20


148 
func_ïûogue


149 
ªt


160 
func
 
psci_powî_down_wfi


161 
mov
 
	gx0
, #0

162 
mrs
 
	gx1
, 
	gi§_ñ1


164 
dsb
 
sy


165 
wfi


166 
n›


167 
n›


168 
add
 
x0
, 
	gx0
, #1

169 
	gb
 1b

171 
	gwfi_•ûl
:

172 
b
 
wfi_•ûl


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_main.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<ru¡ime_svc.h
>

35 
	~<debug.h
>

36 
	~"psci_¥iv©e.h
"

41 
	$psci_˝u_⁄
(
èrgë_˝u
,

42 
íåypoöt
,

43 
c⁄ãxt_id
)

46 
rc
;

47 
°¨t_afÊvl
, 
íd_afÊvl
;

50 
rc
 = 
	`psci_vÆid©e_mpidr
(
èrgë_˝u
, 
MPIDR_AFFLVL0
);

51 i‡(
rc
 !
PSCI_E_SUCCESS
) {

52 
exô
;

59 
°¨t_afÊvl
 = 
MPIDR_AFFLVL0
;

60 
íd_afÊvl
 = 
	`gë_max_afÊvl
();

61 
rc
 = 
	`psci_afÊvl_⁄
(
èrgë_˝u
,

62 
íåypoöt
,

63 
c⁄ãxt_id
,

64 
°¨t_afÊvl
,

65 
íd_afÊvl
);

67 
exô
:

68  
rc
;

69 
	}
}

71 
	$psci_vîsi⁄
()

73  
PSCI_MAJOR_VER
 | 
PSCI_MINOR_VER
;

74 
	}
}

76 
	$psci_˝u_su•íd
(
powî_°©e
,

77 
íåypoöt
,

78 
c⁄ãxt_id
)

80 
rc
;

81 
mpidr
;

82 
èrgë_afÊvl
, 
p°©e_ty≥
;

85 i‡(
	`psci_vÆid©e_powî_°©e
(
powî_°©e
))

86  
PSCI_E_INVALID_PARAMS
;

89 
èrgë_afÊvl
 = 
	`psci_gë_p°©e_afÊvl
(
powî_°©e
);

90 i‡(
èrgë_afÊvl
 > 
MPIDR_MAX_AFFLVL
)

91  
PSCI_E_INVALID_PARAMS
;

94 
p°©e_ty≥
 = 
	`psci_gë_p°©e_ty≥
(
powî_°©e
);

100 i‡(
p°©e_ty≥
 =
PSTATE_TYPE_STANDBY
) {

101 i‡(!
psci_∂©_pm_›s
->
affö°_°™dby
)

102  
PSCI_E_INVALID_PARAMS
;

104 
rc
 = 
psci_∂©_pm_›s
->
	`affö°_°™dby
(
powî_°©e
);

105 
	`as£π
(
rc
 =
PSCI_E_INVALID_PARAMS
 ||Ñ¯=
PSCI_E_SUCCESS
);

106  
rc
;

114 
mpidr
 = 
	`ªad_mpidr
();

115 
rc
 = 
	`psci_afÊvl_su•íd
(
mpidr
,

116 
íåypoöt
,

117 
c⁄ãxt_id
,

118 
powî_°©e
,

119 
MPIDR_AFFLVL0
,

120 
èrgë_afÊvl
);

121 i‡(
rc
 =
PSCI_E_SUCCESS
)

122 
	`psci_powî_down_wfi
();

123 
	`as£π
(
rc
 =
PSCI_E_INVALID_PARAMS
);

124  
rc
;

125 
	}
}

127 
	$psci_˝u_off
()

129 
rc
;

130 
mpidr
;

131 
èrgë_afÊvl
 = 
	`gë_max_afÊvl
();

133 
mpidr
 = 
	`ªad_mpidr
();

141 
rc
 = 
	`psci_afÊvl_off
(
mpidr
, 
MPIDR_AFFLVL0
, 
èrgë_afÊvl
);

148 i‡(
rc
 =
PSCI_E_SUCCESS
)

149 
	`psci_powî_down_wfi
();

155 
	`as£π
 (
rc
 =
PSCI_E_DENIED
);

157  
rc
;

158 
	}
}

160 
	$psci_afföôy_öfo
(
èrgë_afföôy
,

161 
lowe°_afföôy_Àvñ
)

163 
rc
 = 
PSCI_E_INVALID_PARAMS
;

164 
aff_°©e
;

165 
aff_m≠_node_t
 *
node
;

167 i‡(
lowe°_afföôy_Àvñ
 > 
	`gë_max_afÊvl
())

168  
rc
;

170 
node
 = 
	`psci_gë_aff_m≠_node
(
èrgë_afföôy
, 
lowe°_afföôy_Àvñ
);

171 i‡(
node
 && (node->
°©e
 & 
PSCI_AFF_PRESENT
)) {

178 
aff_°©e
 = 
	`psci_gë_°©e
(
node
);

181 i‡(
aff_°©e
 =
PSCI_STATE_SUSPEND
) {

182 
aff_°©e
 = 
PSCI_STATE_ON
;

185 
rc
 = 
aff_°©e
;

188  
rc
;

189 
	}
}

192 
	$psci_migøã
(
èrgë_˝u
)

194  
PSCI_E_NOT_SUPPORTED
;

195 
	}
}

198 
	$psci_migøã_öfo_ty≥
()

200  
PSCI_TOS_NOT_PRESENT_MP
;

201 
	}
}

203 
	$psci_migøã_öfo_up_˝u
()

209  
PSCI_E_SUCCESS
;

210 
	}
}

215 
uöt64_t
 
	$psci_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

216 
uöt64_t
 
x1
,

217 
uöt64_t
 
x2
,

218 
uöt64_t
 
x3
,

219 
uöt64_t
 
x4
,

220 *
cookõ
,

221 *
h™dÀ
,

222 
uöt64_t
 
Êags
)

224 
uöt64_t
 
rc
;

226 
smc_fid
) {

227 
PSCI_VERSION
:

228 
rc
 = 
	`psci_vîsi⁄
();

231 
PSCI_CPU_OFF
:

232 
rc
 = 
	`__psci_˝u_off
();

235 
PSCI_CPU_SUSPEND_AARCH64
:

236 
PSCI_CPU_SUSPEND_AARCH32
:

237 
rc
 = 
	`__psci_˝u_su•íd
(
x1
, 
x2
, 
x3
);

240 
PSCI_CPU_ON_AARCH64
:

241 
PSCI_CPU_ON_AARCH32
:

242 
rc
 = 
	`psci_˝u_⁄
(
x1
, 
x2
, 
x3
);

245 
PSCI_AFFINITY_INFO_AARCH32
:

246 
PSCI_AFFINITY_INFO_AARCH64
:

247 
rc
 = 
	`psci_afföôy_öfo
(
x1
, 
x2
);

250 
PSCI_MIG_AARCH32
:

251 
PSCI_MIG_AARCH64
:

252 
rc
 = 
	`psci_migøã
(
x1
);

255 
PSCI_MIG_INFO_TYPE
:

256 
rc
 = 
	`psci_migøã_öfo_ty≥
();

259 
PSCI_MIG_INFO_UP_CPU_AARCH32
:

260 
PSCI_MIG_INFO_UP_CPU_AARCH64
:

261 
rc
 = 
	`psci_migøã_öfo_up_˝u
();

265 
rc
 = 
SMC_UNK
;

266 
	`WARN
("Unim∂emíãd PSCI CÆl: 0x%x \n", 
smc_fid
);

269 
	`SMC_RET1
(
h™dÀ
, 
rc
);

270 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_private.h

31 #i‚de‡
__PSCI_PRIVATE_H__


32 
	#__PSCI_PRIVATE_H__


	)

34 
	~<¨ch.h
>

35 
	~<bakîy_lock.h
>

36 
	~<psci.h
>

42 
	sîë_∑øms
 {

43 
	míåypoöt
;

44 
	m•§
;

45 } 
	tîë_∑øms_t
;

47 
	sns_íåy_öfo
 {

48 
îë_∑øms_t
 
	mîë_öfo
;

49 
	mc⁄ãxt_id
;

50 
	ms¸
;

51 
	ms˘Ã
;

52 } 
	tns_íåy_öfo_t
;

58 
	saff_m≠_node
 {

59 
	mmpidr
;

60 
	mªf_cou¡
;

61 
	m°©e
;

62 
	mÀvñ
;

63 
	md©a
;

64 
bakîy_lock_t
 
	mlock
;

65 } 
	taff_m≠_node_t
;

67 
	saff_limôs_node
 {

68 
	mmö
;

69 
	mmax
;

70 } 
	taff_limôs_node_t
;

76 
	ssu•íd_c⁄ãxt
 {

77 
	mpowî_°©e
;

78 } 
	t__Æig√d
(
	tCACHE_WRITEBACK_GRANULE
Ë
	tsu•íd_c⁄ãxt_t
;

80 
	`aff_m≠_node_t
 (*
	tmpidr_aff_m≠_nodes_t
[
MPIDR_MAX_AFFLVL
+1]);

81 (*
	tafÊvl_powî_⁄_föishî_t
)(,

82 
	taff_m≠_node_t
 *);

87 
su•íd_c⁄ãxt_t
 
psci_su•íd_c⁄ãxt
[
PSCI_NUM_AFFS
];

88 
ns_íåy_öfo_t
 
psci_ns_íåy_öfo
[
PSCI_NUM_AFFS
];

89 c⁄° 
∂©_pm_›s_t
 *
psci_∂©_pm_›s
;

90 
aff_m≠_node_t
 
psci_aff_m≠
[
PSCI_NUM_AFFS
];

95 c⁄° 
•d_pm_›s_t
 *
psci_•d_pm
;

101 
	`gë_max_afÊvl
();

102 
	`psci_gë_°©e
(
aff_m≠_node_t
 *
node
);

103 
	`psci_gë_phys_°©e
(
aff_m≠_node_t
 *
node
);

104 
	`psci_£t_°©e
(
aff_m≠_node_t
 *
node
, 
°©e
);

105 
	`psci_gë_ns_íåy_öfo
(
ödex
);

106 
	`mpidr_£t_aff_ö°
(, , );

107 
	`psci_vÆid©e_mpidr
(, );

108 
	`gë_powî_⁄_èrgë_afÊvl
(
mpidr
);

109 
	`psci_afÊvl_powî_⁄_föish
(,

112 
afÊvl_powî_⁄_föishî_t
 *);

113 
	`psci_£t_ns_íåy_öfo
(
ödex
,

114 
íåypoöt
,

115 
c⁄ãxt_id
);

116 
	`psci_check_afÊvl_ønge
(
°¨t_afÊvl
, 
íd_afÊvl
);

117 
	`psci_acquúe_afÊvl_locks
(
mpidr
,

118 
°¨t_afÊvl
,

119 
íd_afÊvl
,

120 
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
);

121 
	`psci_ªÀa£_afÊvl_locks
(
mpidr
,

122 
°¨t_afÊvl
,

123 
íd_afÊvl
,

124 
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
);

127 
	`psci_gë_aff_m≠_nodes
(
mpidr
,

128 
°¨t_afÊvl
,

129 
íd_afÊvl
,

130 
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
);

131 
aff_m≠_node_t
 *
	`psci_gë_aff_m≠_node
(, );

134 
	`psci_afÊvl_⁄
(,

141 
	`psci_afÊvl_off
(, , );

144 
	`psci_£t_su•íd_powî_°©e
(
aff_m≠_node_t
 *
node
,

145 
powî_°©e
);

146 
	`psci_gë_aff_m≠_node_su•íd_afÊvl
(
aff_m≠_node_t
 *
node
);

147 
	`psci_afÊvl_su•íd
(,

153 
	`psci_afÊvl_su•íd_föish
(, , );

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_setup.c

31 
	~<¨ch.h
>

32 
	~<¨ch_hñ≥rs.h
>

33 
	~<as£π.h
>

34 
	~<bl_comm⁄.h
>

35 
	~<c⁄ãxt.h
>

36 
	~<c⁄ãxt_mgmt.h
>

37 
	~<∂©f‹m.h
>

38 
	~<°ddef.h
>

39 
	~"psci_¥iv©e.h
"

48 
˝u_c⁄ãxt_t
 
	gpsci_ns_c⁄ãxt
[
PLATFORM_CORE_COUNT
];

58 
aff_limôs_node_t
 
	gpsci_aff_limôs
[
MPIDR_MAX_AFFLVL
 + 1];

64 
	gpsci_ns_eöfo_idx
;

72 
	$psci_aff_m≠_gë_idx
(
key
,

73 
mö_idx
,

74 
max_idx
)

76 
mid
;

82 i‡(
max_idx
 < 
mö_idx
)

83  
PSCI_E_INVALID_PARAMS
;

91 
mid
 = 
mö_idx
 + ((
max_idx
 - min_idx) >> 1);

92 i‡(
psci_aff_m≠
[
mid
].
mpidr
 > 
key
)

93  
	`psci_aff_m≠_gë_idx
(
key
, 
mö_idx
, 
mid
 - 1);

94 i‡(
psci_aff_m≠
[
mid
].
mpidr
 < 
key
)

95  
	`psci_aff_m≠_gë_idx
(
key
, 
mid
 + 1, 
max_idx
);

97  
mid
;

98 
	}
}

100 
aff_m≠_node_t
 *
	$psci_gë_aff_m≠_node
(
mpidr
, 
aff_lvl
)

102 
rc
;

105 
mpidr
 = 
	`mpidr_mask_lowî_afÊvls
(mpidr, 
aff_lvl
);

107 
rc
 = 
	`psci_aff_m≠_gë_idx
(
mpidr
,

108 
psci_aff_limôs
[
aff_lvl
].
mö
,

109 
psci_aff_limôs
[
aff_lvl
].
max
);

110 i‡(
rc
 >= 0)

111  &
psci_aff_m≠
[
rc
];

113  
NULL
;

114 
	}
}

122 
	$psci_gë_aff_m≠_nodes
(
mpidr
,

123 
°¨t_afÊvl
,

124 
íd_afÊvl
,

125 
mpidr_aff_m≠_nodes_t
 
mpidr_nodes
)

127 
rc
 = 
PSCI_E_INVALID_PARAMS
, 
Àvñ
;

128 
aff_m≠_node_t
 *
node
;

130 
rc
 = 
	`psci_check_afÊvl_ønge
(
°¨t_afÊvl
, 
íd_afÊvl
);

131 i‡(
rc
 !
PSCI_E_SUCCESS
)

132  
rc
;

134 
Àvñ
 = 
°¨t_afÊvl
;Üevñ <
íd_afÊvl
;Üevel++) {

141 
node
 = 
	`psci_gë_aff_m≠_node
(
mpidr
, 
Àvñ
);

142 i‡(
node
 =
NULL
) {

143 
rc
 = 
PSCI_E_INVALID_PARAMS
;

152 i‡(!(
node
->
°©e
 & 
PSCI_AFF_PRESENT
)) {

153 i‡(
Àvñ
 =
MPIDR_AFFLVL0
) {

154 
rc
 = 
PSCI_E_INVALID_PARAMS
;

158 
mpidr_nodes
[
Àvñ
] = 
NULL
;

160 
mpidr_nodes
[
Àvñ
] = 
node
;

163  
rc
;

164 
	}
}

173 
	$psci_öô_aff_m≠_node
(
mpidr
,

174 
Àvñ
,

175 
idx
)

177 
°©e
;

178 
uöt32_t
 
löór_id
;

179 
psci_aff_m≠
[
idx
].
mpidr
 = mpidr;

180 
psci_aff_m≠
[
idx
].
Àvñ
 =Üevel;

181 
	`bakîy_lock_öô
(&
psci_aff_m≠
[
idx
].
lock
);

186 
°©e
 = 
	`∂©_gë_aff_°©e
(
Àvñ
, 
mpidr
);

187 
psci_aff_m≠
[
idx
].
°©e
 = state;

189 i‡(
Àvñ
 =
MPIDR_AFFLVL0
) {

195 i‡(
°©e
 & 
PSCI_AFF_PRESENT
)

196 
	`psci_£t_°©e
(&
psci_aff_m≠
[
idx
], 
PSCI_STATE_OFF
);

199 
	`as£π
(
psci_ns_eöfo_idx
 < 
PSCI_NUM_AFFS
);

201 
psci_aff_m≠
[
idx
].
d©a
 = 
psci_ns_eöfo_idx
;

203 
psci_su•íd_c⁄ãxt
[
psci_ns_eöfo_idx
].
powî_°©e
 = 
PSCI_INVALID_DATA
;

204 
psci_ns_eöfo_idx
++;

210 
löór_id
 = 
	`∂©f‹m_gë_c‹e_pos
(
mpidr
);

211 
	`as£π
(
löór_id
 < 
PLATFORM_CORE_COUNT
);

213 
	`cm_£t_c⁄ãxt
(
mpidr
,

214 (*Ë&
psci_ns_c⁄ãxt
[
löór_id
],

215 
NON_SECURE
);

220 
	}
}

238 
	$psci_öô_aff_m≠
(
mpidr
,

239 
affm≠_idx
,

240 
cur_afÊvl
,

241 
tgt_afÊvl
)

243 
˘r
, 
aff_cou¡
;

245 
	`as£π
(
cur_afÊvl
 >
tgt_afÊvl
);

252 
aff_cou¡
 = 
	`∂©_gë_aff_cou¡
(
cur_afÊvl
, 
mpidr
);

253 
	`as£π
(
aff_cou¡
);

255 i‡(
tgt_afÊvl
 < 
cur_afÊvl
) {

256 
˘r
 = 0; cå < 
aff_cou¡
; ctr++) {

257 
mpidr
 = 
	`mpidr_£t_aff_ö°
(mpidr, 
˘r
, 
cur_afÊvl
);

258 
affm≠_idx
 = 
	`psci_öô_aff_m≠
(
mpidr
,

259 
affm≠_idx
,

260 
cur_afÊvl
 - 1,

261 
tgt_afÊvl
);

264 
˘r
 = 0; cå < 
aff_cou¡
; cå++, 
affm≠_idx
++) {

265 
mpidr
 = 
	`mpidr_£t_aff_ö°
(mpidr, 
˘r
, 
cur_afÊvl
);

266 
	`psci_öô_aff_m≠_node
(
mpidr
, 
cur_afÊvl
, 
affm≠_idx
);

270 
psci_aff_limôs
[
cur_afÊvl
].
max
 = 
affm≠_idx
 - 1;

273  
affm≠_idx
;

274 
	}
}

298 
öt32_t
 
	$psci_£tup
()

300 
mpidr
 = 
	`ªad_mpidr
();

301 
afÊvl
, 
affm≠_idx
, 
max_afÊvl
;

302 
aff_m≠_node_t
 *
node
;

304 
psci_ns_eöfo_idx
 = 0;

305 
psci_∂©_pm_›s
 = 
NULL
;

308 
max_afÊvl
 = 
	`gë_max_afÊvl
();

309 
	`as£π
(
max_afÊvl
 <
MPIDR_MAX_AFFLVL
);

317 
affm≠_idx
 = 0;

318 
afÊvl
 = 
max_afÊvl
;áfÊv»>
MPIDR_AFFLVL0
;áfflvl--) {

319 
affm≠_idx
 = 
	`psci_öô_aff_m≠
(
FIRST_MPIDR
,

320 
affm≠_idx
,

321 
max_afÊvl
,

322 
afÊvl
);

333 
afÊvl
 = 
MPIDR_AFFLVL0
;áfÊv»< 
max_afÊvl
;áfflvl++) {

334 
psci_aff_limôs
[
afÊvl
].
mö
 =

335 
psci_aff_limôs
[
afÊvl
 + 1].
max
 + 1;

338 
	`Êush_dˇche_ønge
((Ë
psci_aff_limôs
,

339 (
psci_aff_limôs
));

345 
mpidr
 &
MPIDR_AFFINITY_MASK
;

346 
afÊvl
 = 
MPIDR_AFFLVL0
;áfÊv»<
max_afÊvl
;áfflvl++) {

348 
node
 = 
	`psci_gë_aff_m≠_node
(
mpidr
, 
afÊvl
);

349 
	`as£π
(
node
);

352 i‡(
node
->
°©e
 & 
PSCI_AFF_PRESENT
)

353 
	`psci_£t_°©e
(
node
, 
PSCI_STATE_ON
);

356 
	`∂©f‹m_£tup_pm
(&
psci_∂©_pm_›s
);

357 
	`as£π
(
psci_∂©_pm_›s
);

360 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/std_svc_setup.c

31 
	~<debug.h
>

32 
	~<psci.h
>

33 
	~<ru¡ime_svc.h
>

34 
	~<°d_svc.h
>

35 
	~<°döt.h
>

36 
	~<uuid.h
>

39 
DEFINE_SVC_UUID
(
¨m_svc_uid
,

44 
öt32_t
 
	$°d_svc_£tup
()

50  
	`psci_£tup
();

51 
	}
}

57 
uöt64_t
 
	$°d_svc_smc_h™dÀr
(
uöt32_t
 
smc_fid
,

58 
uöt64_t
 
x1
,

59 
uöt64_t
 
x2
,

60 
uöt64_t
 
x3
,

61 
uöt64_t
 
x4
,

62 *
cookõ
,

63 *
h™dÀ
,

64 
uöt64_t
 
Êags
)

70 i‡(
	`is_psci_fid
(
smc_fid
)) {

71  
	`psci_smc_h™dÀr
(
smc_fid
, 
x1
, 
x2
, 
x3
, 
x4
, 
cookõ
,

72 
h™dÀ
, 
Êags
);

75 
smc_fid
) {

76 
ARM_STD_SVC_CALL_COUNT
:

81 
	`SMC_RET1
(
h™dÀ
, 
PSCI_NUM_CALLS
);

83 
ARM_STD_SVC_UID
:

85 
	`SMC_UUID_RET
(
h™dÀ
, 
¨m_svc_uid
);

87 
ARM_STD_SVC_VERSION
:

89 
	`SMC_RET2
(
h™dÀ
, 
STD_SVC_VERSION_MAJOR
, 
STD_SVC_VERSION_MINOR
);

92 
	`WARN
("Unim∂emíãd Sènd¨d Sîvi˚ CÆl: 0x%x \n", 
smc_fid
);

93 
	`SMC_RET1
(
h™dÀ
, 
SMC_UNK
);

95 
	}
}

98 
DECLARE_RT_SVC
(

99 
°d_svc
,

101 
OEN_STD_START
,

102 
OEN_STD_END
,

103 
SMC_TYPE_FAST
,

104 
°d_svc_£tup
,

105 
°d_svc_smc_h™dÀr


	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/tools/fip_create/fip_create.c

31 
	~<î∫o.h
>

32 
	~<gë›t.h
>

33 
	~<°dboﬁ.h
>

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

36 
	~<°rög.h
>

37 
	~<sys/°©.h
>

38 
	~"fù_¸óã.h
"

39 
	~"fúmw¨e_image_∑ckage.h
"

42 
	#OPT_TOC_ENTRY
 0

	)

43 
	#OPT_DUMP
 1

	)

44 
	#OPT_HELP
 2

	)

46 
fûe_öfo_t
 
	gfûes
[
MAX_FILES
];

47 
	gfûe_öfo_cou¡
 = 0;

48 
uuid_t
 
	guuid_nuŒ
 = {0};

57 
íåy_lookup_li°_t
 
	gtoc_íåy_lookup_li°
[] = {

58 { "Tru°ed BoŸ Fúmw¨êBL2", 
UUID_TRUSTED_BOOT_FIRMWARE_BL2
,

59 "bl2", 
NULL
, 
FLAG_FILENAME
 },

60 { "SCP Fúmw¨êBL3-0", 
UUID_SCP_FIRMWARE_BL30
,

61 "bl30", 
NULL
, 
FLAG_FILENAME
},

62 { "EL3 Ru¡imêFúmw¨êBL3-1", 
UUID_EL3_RUNTIME_FIRMWARE_BL31
,

63 "bl31", 
NULL
, 
FLAG_FILENAME
},

64 { "Secuª Paylﬂd BL3-2 (Tru°ed OS)", 
UUID_SECURE_PAYLOAD_BL32
,

65 "bl32", 
NULL
, 
FLAG_FILENAME
},

66 { "N⁄-Tru°ed Fúmw¨êBL3-3", 
UUID_NON_TRUSTED_FIRMWARE_BL33
,

67 "bl33", 
NULL
, 
FLAG_FILENAME
},

68 { 
NULL
, {0}, 0 }

73 
ölöe
 
	$com∑ª_uuids
(c⁄° 
uuid_t
 *
uuid1
, c⁄° uuid_à*
uuid2
)

75  
	`memcmp
(
uuid1
, 
uuid2
, (
uuid_t
));

76 
	}
}

79 
ölöe
 
	$c›y_uuid
(
uuid_t
 *
to_uuid
, c⁄° uuid_à*
‰om_uuid
)

81 
	`mem˝y
(
to_uuid
, 
‰om_uuid
, (
uuid_t
));

82 
	}
}

85 
	$¥öt_ußge
()

87 
íåy_lookup_li°_t
 *
íåy
 = 
toc_íåy_lookup_li°
;

89 
	`¥ötf
("Usage: fip_create [options] FIP_FILENAME\n\n");

90 
	`¥ötf
("\tThisÅool is usedÅo createá Firmware Image Package.\n\n");

91 
	`¥ötf
("Options:\n");

92 
	`¥ötf
("\t--help: PrintÅhis help messageándÉxit\n");

93 
	`¥ötf
("\t--dump: Print contents of FIP\n\n");

94 
	`¥ötf
("\tComponentsÅhat can beádded/updated:\n");

95 ; 
íåy
->
comm™d_löe_«me
 !
NULL
;Éntry++) {

96 
	`¥ötf
("\t--%s%s\t\t%s",

97 
íåy
->
comm™d_löe_«me
,

98 (
íåy
->
Êags
 & 
FLAG_FILENAME
) ? " FILENAME" : "",

99 
íåy
->
«me
);

100 
	`¥ötf
("\n");

102 
	}
}

105 
íåy_lookup_li°_t
 *
	$gë_íåy_lookup_‰om_uuid
(c⁄° 
uuid_t
 *
uuid
)

107 
lookup_ödex
 = 0;

109 
toc_íåy_lookup_li°
[
lookup_ödex
].
comm™d_löe_«me
 !
NULL
) {

110 i‡(
	`com∑ª_uuids
(&
toc_íåy_lookup_li°
[
lookup_ödex
].
«me_uuid
,

111 
uuid
) == 0) {

112  &
toc_íåy_lookup_li°
[
lookup_ödex
];

114 
lookup_ödex
++;

116  
NULL
;

117 
	}
}

120 
fûe_öfo_t
 *
	$föd_fûe_öfo_‰om_uuid
(c⁄° 
uuid_t
 *
uuid
)

122 
ödex
;

124 
ödex
 = 0; index < 
fûe_öfo_cou¡
; index++) {

125 i‡(
	`com∑ª_uuids
(&
fûes
[
ödex
].
«me_uuid
, 
uuid
) == 0) {

126  &
fûes
[
ödex
];

129  
NULL
;

130 
	}
}

133 
	$add_fûe_öfo_íåy
(
íåy_lookup_li°_t
 *
lookup_íåy
, *
fûíame
)

135 
fûe_öfo_t
 *
fûe_öfo_íåy
;

136 
îr‹
;

137 
°©
 
fûe_°©us
;

138 
boﬁ
 
is_√w_íåy
 = 
Ál£
;

141 
fûe_öfo_íåy
 = 
	`föd_fûe_öfo_‰om_uuid
(&
lookup_íåy
->
«me_uuid
);

142 i‡(
fûe_öfo_íåy
 =
NULL
) {

148 
fûe_öfo_íåy
 = &
fûes
[
fûe_öfo_cou¡
];

149 
is_√w_íåy
 = 
åue
;

152 
	`c›y_uuid
(&
fûe_öfo_íåy
->
«me_uuid
,

153 &
lookup_íåy
->
«me_uuid
);

157 
îr‹
 = 
	`°©
(
fûíame
, &
fûe_°©us
);

158 i‡(
îr‹
 != 0) {

159 
	`¥ötf
("Error: Cannot get information for file \"%s\": %s\n",

160 
fûíame
, 
	`°ªº‹
(
î∫o
));

161  
î∫o
;

163 
fûe_öfo_íåy
->
fûíame
 = filename;

164 
fûe_öfo_íåy
->
size
 = ()
fûe_°©us
.
°_size
;

165 
fûe_öfo_íåy
->
íåy
 = 
lookup_íåy
;

168 i‡(
is_√w_íåy
) {

169 
fûe_öfo_cou¡
++;

172 i‡(
fûe_öfo_cou¡
 > 
MAX_FILES
) {

173 
	`¥ötf
("ERROR: Too many files in Package\n");

179 
	}
}

182 
	$wrôe_mem‹y_to_fûe
(c⁄° 
uöt8_t
 *
°¨t
, c⁄° *
fûíame
,

183 
size
)

185 
FILE
 *
°ªam
;

186 
byãs_wrôãn
;

189 
°ªam
 = 
	`f›í
(
fûíame
, "r+");

190 i‡(
°ªam
 =
NULL
) {

191 
°ªam
 = 
	`f›í
(
fûíame
, "w");

192 i‡(
°ªam
 =
NULL
) {

193 
	`¥ötf
("Error: Cannot create output file \"%s\": %s\n",

194 
fûíame
, 
	`°ªº‹
(
î∫o
));

195  
î∫o
;

197 
	`¥ötf
("Cª©ög \"%s\"\n", 
fûíame
);

200 
	`¥ötf
("Upd©ög \"%s\"\n", 
fûíame
);

203 
byãs_wrôãn
 = 
	`fwrôe
(
°¨t
, (
uöt8_t
), 
size
, 
°ªam
);

204 
	`f˛o£
(
°ªam
);

206 i‡(
byãs_wrôãn
 !
size
) {

207 
	`¥ötf
("Error: Incorrect write for file \"%s\": Size=%u,"

208 "Wrôãn=%u byãs.\n", 
fûíame
, 
size
, 
byãs_wrôãn
);

209  
EIO
;

213 
	}
}

216 
	$ªad_fûe_to_mem‹y
(*
mem‹y
, c⁄° 
fûe_öfo_t
 *
öfo
)

218 
FILE
 *
°ªam
;

219 
byãs_ªad
;

222 i‡(
öfo
->
fûíame
) {

224 
°ªam
 = 
	`f›í
(
öfo
->
fûíame
, "r");

225 i‡(
°ªam
 =
NULL
) {

226 
	`¥ötf
("Error: Cannot open file \"%s\": %s\n",

227 
öfo
->
fûíame
, 
	`°ªº‹
(
î∫o
));

228  
î∫o
;

231 
byãs_ªad
 = ()
	`‰ód
(
mem‹y
, (
uöt8_t
),

232 
öfo
->
size
, 
°ªam
);

233 
	`f˛o£
(
°ªam
);

234 i‡(
byãs_ªad
 !
öfo
->
size
) {

235 
	`¥ötf
("Error: IncompleteÑead for file \"%s\":"

236 "Size=%u, Ród=%u byãs.\n", 
öfo
->
fûíame
,

237 
öfo
->
size
, 
byãs_ªad
);

238  
EIO
;

241 i‡(
öfo
->
image_buf„r
 =
NULL
) {

242 
	`¥ötf
("ERROR: info->image_buffer = NULL\n");

243  
EIO
;

248 
	`mem˝y
(
mem‹y
, 
öfo
->
image_buf„r
, info->
size
);

252 
	}
}

256 
	$∑ck_images
(c⁄° *
fù_fûíame
)

258 
°©us
;

259 
uöt8_t
 *
fù_ba£_addªss
;

260 *
íåy_addªss
;

261 
fù_toc_hódî_t
 *
toc_hódî
;

262 
fù_toc_íåy_t
 *
toc_íåy
;

263 
íåy_ödex
;

264 
toc_size
;

265 
fù_size
;

266 
íåy_off£t_addªss
;

267 
∑ylﬂd_size
 = 0;

270 i‡((
fù_fûíame
 =
NULL
Ë|| (
	`°rcmp
(fip_filename, "") == 0)) {

271  
EINVAL
;

275 
íåy_ödex
 = 0;É¡ry_ödex < 
fûe_öfo_cou¡
;Éntry_index++) {

276 
∑ylﬂd_size
 +
fûes
[
íåy_ödex
].
size
;

280 
toc_size
 = ((
fù_toc_hódî_t
) +

281 ((
fù_toc_íåy_t
Ë* (
fûe_öfo_cou¡
 + 1)));

282 
fù_size
 = 
toc_size
 + 
∑ylﬂd_size
;

283 
fù_ba£_addªss
 = 
	`mÆloc
(
fù_size
);

284 i‡(
fù_ba£_addªss
 =
NULL
) {

285 
	`¥ötf
("Error: Can'tállocateÉnough memoryÅo createÖackage."

287  
ENOMEM
;

289 
	`mem£t
(
fù_ba£_addªss
, 0, 
fù_size
);

292 
toc_hódî
 = (
fù_toc_hódî_t
 *)
fù_ba£_addªss
;

293 
toc_hódî
->
«me
 = 
TOC_HEADER_NAME
;

294 
toc_hódî
->
£rül_numbî
 = 
TOC_HEADER_SERIAL_NUMBER
;

295 
toc_hódî
->
Êags
 = 0;

297 
toc_íåy
 = (
fù_toc_íåy_t
 *)(
fù_ba£_addªss
 +

298 (
fù_toc_hódî_t
));

303 
íåy_off£t_addªss
 = 
toc_size
;

304 
íåy_ödex
 = 0;

307 
íåy_ödex
 = 0;É¡ry_ödex < 
fûe_öfo_cou¡
;Éntry_index++) {

308 
íåy_addªss
 = (
fù_ba£_addªss
 + 
íåy_off£t_addªss
);

309 
°©us
 = 
	`ªad_fûe_to_mem‹y
(
íåy_addªss
,

310 &
fûes
[
íåy_ödex
]);

311 i‡(
°©us
 != 0) {

312 
	`¥ötf
("Error: WhileÑeading \"%s\" from filesystem.\n",

313 
fûes
[
íåy_ödex
].
fûíame
);

314  
°©us
;

317 
	`c›y_uuid
(&
toc_íåy
->
uuid
, &
fûes
[
íåy_ödex
].
«me_uuid
);

318 
toc_íåy
->
off£t_addªss
 = 
íåy_off£t_addªss
;

319 
toc_íåy
->
size
 = 
fûes
[
íåy_ödex
].size;

320 
toc_íåy
->
Êags
 = 0;

321 
íåy_off£t_addªss
 +
toc_íåy
->
size
;

322 
toc_íåy
++;

326 
	`c›y_uuid
(&
toc_íåy
->
uuid
, &
uuid_nuŒ
);

327 
toc_íåy
->
off£t_addªss
 = 
íåy_off£t_addªss
;

328 
toc_íåy
->
size
 = 0;

329 
toc_íåy
->
Êags
 = 0;

332 
°©us
 = 
	`wrôe_mem‹y_to_fûe
(
fù_ba£_addªss
, 
fù_fûíame
, 
fù_size
);

333 i‡(
°©us
 != 0) {

334 
	`¥ötf
("Error: Failed while writingÖackageÅo file \"%s\" "

335 "wôh sètus=%d.\n", 
fù_fûíame
, 
°©us
);

336  
°©us
;

339 
	}
}

342 
	$dump_toc
()

344 
ödex
 = 0;

345 
image_off£t
;

346 
image_size
 = 0;

348 
image_off£t
 = (
fù_toc_hódî_t
) +

349 ((
fù_toc_íåy_t
Ë* (
fûe_öfo_cou¡
 + 1));

351 
	`¥ötf
("Firmware Image Package ToC:\n");

352 
	`¥ötf
("---------------------------\n");

353 
ödex
 = 0; index < 
fûe_öfo_cou¡
; index++) {

354 i‡(
fûes
[
ödex
].
íåy
) {

355 
	`¥ötf
("- %s: ", 
fûes
[
ödex
].
íåy
->
«me
);

357 
	`¥ötf
("- UnknownÉntry: ");

359 
image_size
 = 
fûes
[
ödex
].
size
;

361 
	`¥ötf
("off£t=0x%X, size=0x%X\n", 
image_off£t
, 
image_size
);

362 
image_off£t
 +
image_size
;

364 i‡(
fûes
[
ödex
].
fûíame
) {

365 
	`¥ötf
(" fûe: '%s'\n", 
fûes
[
ödex
].
fûíame
);

368 
	`¥ötf
("---------------------------\n");

369 
	}
}

373 
	$∑r£_fù
(c⁄° *
fù_fûíame
)

375 
FILE
 *
fù
;

376 *
fù_buf„r
;

377 *
fù_buf„r_íd
;

378 
fù_size
, 
ªad_fù_size
;

379 
fù_toc_hódî_t
 *
toc_hódî
;

380 
fù_toc_íåy_t
 *
toc_íåy
;

381 
boﬁ
 
found_œ°_toc_íåy
 = 
Ál£
;

382 
fûe_öfo_t
 *
fûe_öfo_íåy
;

383 
°©us
 = -1;

384 
°©
 
°
;

386 
fù
 = 
	`f›í
(
fù_fûíame
, "r");

387 i‡(
fù
 =
NULL
) {

391 
°©us
 = 0;

392 
∑r£_fù_ªtu∫
;

395 i‡(
	`°©
(
fù_fûíame
, &
°
) != 0) {

396 
°©us
 = 
î∫o
;

397 
∑r£_fù_f˛o£
;

399 
fù_size
 = ()
°
.
°_size
;

403 
fù_buf„r
 = (*)
	`mÆloc
(
fù_size
);

404 i‡(
fù_buf„r
 =
NULL
) {

405 
	`¥ötf
("ERROR: C™nŸáŒoˇã %d byãs.\n", 
fù_size
);

406 
°©us
 = 
î∫o
;

407 
∑r£_fù_f˛o£
;

409 
fù_buf„r_íd
 = 
fù_buf„r
 + 
fù_size
;

412 
ªad_fù_size
 = 
	`‰ód
(
fù_buf„r
, (), 
fù_size
, 
fù
);

413 i‡(
ªad_fù_size
 !
fù_size
) {

414 
	`¥ötf
("ERROR: CannotÑeadÅhe FIP.\n");

415 
°©us
 = 
EIO
;

416 
∑r£_fù_‰ì
;

418 
	`f˛o£
(
fù
);

419 
fù
 = 
NULL
;

422 i‡(
fù_size
 < (
fù_toc_hódî_t
)) {

423 
	`¥ötf
("ERROR: Given FIP is smallerÅhanÅhe ToC header.\n");

424 
°©us
 = 
EINVAL
;

425 
∑r£_fù_‰ì
;

428 
toc_hódî
 = (
fù_toc_hódî_t
 *)
fù_buf„r
;

430 
toc_íåy
 = (
fù_toc_íåy_t
 *)(
toc_hódî
 + 1);

433 
˙t
 = 0;

434 ((*)
toc_íåy
 + (
fù_toc_íåy_t
)Ë< 
fù_buf„r_íd
) {

435 
˙t
++;

437 i‡(
	`com∑ª_uuids
(&
toc_íåy
->
uuid
, &
uuid_nuŒ
) == 0) {

438 
found_œ°_toc_íåy
 = 
åue
;

439 
°©us
 = 0;

446 
fûe_öfo_íåy
 = &
fûes
[
fûe_öfo_cou¡
++];

447 
	`mem£t
(
fûe_öfo_íåy
, 0, (
fûe_öfo_t
));

450 
	`c›y_uuid
(&
fûe_öfo_íåy
->
«me_uuid
, &
toc_íåy
->
uuid
);

451 
fûe_öfo_íåy
->
image_buf„r
 = 
fù_buf„r
 +

452 
toc_íåy
->
off£t_addªss
;

453 
fûe_öfo_íåy
->
size
 = 
toc_íåy
->size;

456 
fûe_öfo_íåy
->
íåy
 =

457 
	`gë_íåy_lookup_‰om_uuid
(&
toc_íåy
->
uuid
);

460 
toc_íåy
++;

463 i‡(!
found_œ°_toc_íåy
) {

464 
	`¥ötf
("ERROR: Given FIP doesÇot haveánÉnd ToCÉntry.\n");

465 
°©us
 = 
EINVAL
;

466 
∑r£_fù_‰ì
;

469 
∑r£_fù_f˛o£
;

472 
∑r£_fù_‰ì
:

473 i‡(
fù_buf„r
 !
NULL
) {

474 
	`‰ì
(
fù_buf„r
);

475 
fù_buf„r
 = 
NULL
;

478 
∑r£_fù_f˛o£
:

479 i‡(
fù
 !
NULL
) {

480 
	`f˛o£
(
fù
);

483 
∑r£_fù_ªtu∫
:

484  
°©us
;

485 
	}
}

489 *
	$gë_fûíame
(
¨gc
, **
¨gv
, 
›ti⁄
 *
›ti⁄s
)

491 
c
;

492 *
fûíame
 = 
NULL
;

497 
›töd
 = 1;

499 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "", 
›ti⁄s
, 
NULL
);

500 i‡(
c
 == -1)

503 i‡(
c
 == '?') {

505  
NULL
;

512 i‡(
›töd
 + 1 =
¨gc
)

513 
fûíame
 = 
¨gv
[
›töd
];

515  
fûíame
;

516 
	}
}

520 
	$∑r£_cmdlöe
(
¨gc
, **
¨gv
, 
›ti⁄
 *
›ti⁄s
,

521 *
do_∑ck
)

523 
c
;

524 
°©us
 = 0;

525 
›ti⁄_ödex
 = 0;

526 
íåy_lookup_li°_t
 *
lookup_íåy
;

527 
do_dump
 = 0;

530 
›töd
 = 1;

532 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "", 
›ti⁄s
, &
›ti⁄_ödex
);

533 i‡(
c
 == -1)

536 
c
) {

537 
OPT_TOC_ENTRY
:

538 i‡(
›èrg
) {

540 
lookup_íåy
 = &
toc_íåy_lookup_li°
[
›ti⁄_ödex
];

541 i‡(
lookup_íåy
->
Êags
 & 
FLAG_FILENAME
) {

542 
°©us
 = 
	`add_fûe_öfo_íåy
(
lookup_íåy
, 
›èrg
);

543 i‡(
°©us
 != 0) {

544 
	`¥ötf
("FailedÅoÖrocess %s\n",

545 
›ti⁄s
[
›ti⁄_ödex
].
«me
);

549 *
do_∑ck
 = 1;

555 
OPT_DUMP
:

556 
do_dump
 = 1;

559 
OPT_HELP
:

560 
	`¥öt_ußge
();

561 
	`exô
(0);

571 i‡((
°©us
 =0Ë&& (
do_dump
)) {

572 
	`dump_toc
();

575  
°©us
;

577 
	}
}

579 
	$maö
(
¨gc
, **
¨gv
)

581 
i
;

582 
°©us
;

583 *
fù_fûíame
;

584 
do_∑ck
 = 0;

587 
	`mem£t
(
fûes
, 0, (files));

593 
›ti⁄
 
l⁄g_›ti⁄s
[((
toc_íåy_lookup_li°
)/

594 (
íåy_lookup_li°_t
)) + 2];

596 
i
 = 0;

598 
i
 < (
toc_íåy_lookup_li°
)/(
íåy_lookup_li°_t
) - 1;

599 
i
++) {

600 
l⁄g_›ti⁄s
[
i
].
«me
 = 
toc_íåy_lookup_li°
[i].
comm™d_löe_«me
;

602 
l⁄g_›ti⁄s
[
i
].
has_¨g
 = 
toc_íåy_lookup_li°
[i].
Êags
 ? 1 : 0;

603 
l⁄g_›ti⁄s
[
i
].
Êag
 = 0;

604 
l⁄g_›ti⁄s
[
i
].
vÆ
 = 
OPT_TOC_ENTRY
;

608 
l⁄g_›ti⁄s
[
i
].
«me
 = "dump";

609 
l⁄g_›ti⁄s
[
i
].
has_¨g
 = 0;

610 
l⁄g_›ti⁄s
[
i
].
Êag
 = 0;

611 
l⁄g_›ti⁄s
[
i
].
vÆ
 = 
OPT_DUMP
;

614 
l⁄g_›ti⁄s
[++
i
].
«me
 = "help";

615 
l⁄g_›ti⁄s
[
i
].
has_¨g
 = 0;

616 
l⁄g_›ti⁄s
[
i
].
Êag
 = 0;

617 
l⁄g_›ti⁄s
[
i
].
vÆ
 = 
OPT_HELP
;

620 
l⁄g_›ti⁄s
[++
i
].
«me
 = 0;

621 
l⁄g_›ti⁄s
[
i
].
has_¨g
 = 0;

622 
l⁄g_›ti⁄s
[
i
].
Êag
 = 0;

623 
l⁄g_›ti⁄s
[
i
].
vÆ
 = 0;

625 #ifde‡
DEBUG


627 
i
 = 0; i < (
l⁄g_›ti⁄s
)/(
›ti⁄
); i++) {

628 
	`¥ötf
("l⁄g o± (%dË:Çamê%s\n", 
i
, 
l⁄g_›ti⁄s
[i].
«me
);

637 
fù_fûíame
 = 
	`gë_fûíame
(
¨gc
, 
¨gv
, 
l⁄g_›ti⁄s
);

640 i‡(
fù_fûíame
 !
NULL
) {

641 
°©us
 = 
	`∑r£_fù
(
fù_fûíame
);

642 i‡(
°©us
 != 0) {

643  
°©us
;

648 
°©us
 = 
	`∑r£_cmdlöe
(
¨gc
, 
¨gv
, 
l⁄g_›ti⁄s
, &
do_∑ck
);

649 i‡(
°©us
 != 0) {

650  
°©us
;

653 i‡(
fù_fûíame
 =
NULL
) {

654 
	`¥ötf
("ERROR: Missing FIP filename\n");

655 
	`¥öt_ußge
();

662 i‡(
do_∑ck
) {

663 
°©us
 = 
	`∑ck_images
(
fù_fûíame
);

664 i‡(
°©us
 != 0) {

665 
	`¥ötf
("FailedÅo createÖackage (status = %d).\n",

666 
°©us
);

670  
°©us
;

671 
	}
}

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/tools/fip_create/fip_create.h

31 #i‚de‡
__FIP_CREATE_H__


32 
	#__FIP_CREATE_H__


	)

34 
	~<°döt.h
>

35 
	~<uuid.h
>

37 
	#MAX_FILES
 10

	)

40 
	#TOC_HEADER_SERIAL_NUMBER
 0x12345678

	)

42 
	#FLAG_FILENAME
 (1 << 0)

	)

44 
	síåy_lookup_li°
 {

45 c⁄° *
	m«me
;

46 
uuid_t
 
	m«me_uuid
;

47 c⁄° *
	mcomm™d_löe_«me
;

48 
fûe_öfo
 *
	möfo
;

49 
	mÊags
;

50 } 
	tíåy_lookup_li°_t
;

52 
	sfûe_öfo
 {

53 
uuid_t
 
	m«me_uuid
;

54 c⁄° *
	mfûíame
;

55 
	msize
;

56 *
	mimage_buf„r
;

57 
íåy_lookup_li°_t
 *
	míåy
;

58 } 
	tfûe_öfo_t
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/tools/fip_create/firmware_image_package.h

31 #i‚de‡
__FIRMWARE_IMAGE_PACKAGE_H__


32 
	#__FIRMWARE_IMAGE_PACKAGE_H__


	)

34 
	~<°döt.h
>

35 
	~<uuid.h
>

38 
	#TOC_HEADER_NAME
 0xAA640001

	)

42 
	#UUID_TRUSTED_BOOT_FIRMWARE_BL2
 \

43 {0x0becf95f, 0x224d, 0x4d3e, 0xa5, 0x44, {0xc3, 0x9d, 0x81, 0xc7, 0x3f, 0x0a} }

	)

44 
	#UUID_SCP_FIRMWARE_BL30
 \

45 {0x3dfd6697, 0xbe89, 0x49e8, 0x´, 0x5d, {0x78, 0xa1, 0x40, 0x60, 0x82, 0x13} }

	)

46 
	#UUID_EL3_RUNTIME_FIRMWARE_BL31
 \

47 {0x6d08d447, 0x„4c, 0x4698, 0x9b, 0x95, {0x29, 0x50, 0xcb, 0xbd, 0x5a, 0x00} }

	)

48 
	#UUID_SECURE_PAYLOAD_BL32
 \

49 {0x89e1d005, 0xdc53, 0x4713, 0x8d, 0x2b, {0x50, 0x0a, 0x4b, 0x7a, 0x3e, 0x38} }

	)

50 
	#UUID_NON_TRUSTED_FIRMWARE_BL33
 \

51 {0xa7ìd0d6, 0xófc, 0x4bd5, 0x97, 0x82, {0x99, 0x34, 0xf2, 0x34, 0xb6, 0xe4} }

	)

53 
	sfù_toc_hódî
 {

54 
uöt32_t
 
	m«me
;

55 
uöt32_t
 
	m£rül_numbî
;

56 
uöt64_t
 
	mÊags
;

57 } 
	tfù_toc_hódî_t
;

59 
	sfù_toc_íåy
 {

60 
uuid_t
 
	muuid
;

61 
uöt64_t
 
	moff£t_addªss
;

62 
uöt64_t
 
	msize
;

63 
uöt64_t
 
	mÊags
;

64 } 
	tfù_toc_íåy_t
;

	@/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/tools/fip_create/uuid.h

34 #i‚de‡
_SYS_UUID_H_


35 
	#_SYS_UUID_H_


	)

37 
	~<sys/cdefs.h
>

40 
	#_UUID_NODE_LEN
 6

	)

49 
	suuid
 {

50 
uöt32_t
 
	mtime_low
;

51 
uöt16_t
 
	mtime_mid
;

52 
uöt16_t
 
	mtime_hi_™d_vîsi⁄
;

53 
uöt8_t
 
	m˛ock_£q_hi_™d_ª£rved
;

54 
uöt8_t
 
	m˛ock_£q_low
;

55 
uöt8_t
 
	mnode
[
_UUID_NODE_LEN
];

59 
uuid
 
	tuuid_t
;

	@
1
.
0
413
37704
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/aarch64/bl31_arch_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/aarch64/bl31_entrypoint.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/aarch64/context.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/aarch64/crash_reporting.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/aarch64/runtime_exceptions.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/bl31.ld.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/bl31.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/bl31_main.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/context_mgmt.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/interrupt_mgmt.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl31/runtime_svc.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/aarch64/tsp_entrypoint.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/aarch64/tsp_exceptions.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/aarch64/tsp_request.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp-fvp.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp-mt6752.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp.ld.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp_interrupt.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp_main.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/bl32/tsp/tsp_timer.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/build.sh
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/common/aarch64/early_exceptions.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/common/bl_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/common/debug.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oem_error.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oem_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oem_svc.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oem_svc_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oem_svc_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/custom/oems.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/cci400/cci400.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/gic/aarch64/gic_v3_sysregs.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/gic/gic_v2.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/gic/gic_v3.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/pl011/pl011.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/pl011/pl011_console.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/arm/tzc400/tzc400.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/io/io_fip.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/io/io_memmap.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/drivers/io/io_semihosting.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/bl31.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/context.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/context_mgmt.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/interrupt_mgmt.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/runtime_svc.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/services/psci.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/services/sip_error.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/services/sip_svc.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/services/std_svc.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl31/services/tbase.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl32/payloads/mtee.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/bl32/payloads/tsp.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/common/asm_macros.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/common/bl_common.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/common/debug.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/common/firmware_image_package.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/arm/cci400.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/arm/gic_v2.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/arm/gic_v3.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/arm/pl011.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/arm/tzc400.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/console.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/io_driver.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/io_fip.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/io_memmap.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/drivers/io_semihosting.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/aarch64/arch.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/aarch64/arch_helpers.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/aarch64/xlat_tables.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/bakery_lock.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/cassert.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/io_storage.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/mmio.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/semihosting.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/lib/spinlock.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/plat/common/fiq_smp_call.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/plat/common/platform.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/assert.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/machine/_limits.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/machine/_stdint.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/machine/_types.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/stddef.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/stdio.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/string.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/_null.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/_stdint.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/_types.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/cdefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/ctype.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/errno.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/limits.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/stdarg.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/stdint.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/include/stdlib/sys/uuid.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/cache_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/cpu_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/misc_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/sysreg_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/tlb_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/xlat_helpers.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/aarch64/xlat_tables.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/io_storage.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/locks/bakery/bakery_lock.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/locks/exclusive/spinlock.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/mmio.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/semihosting/aarch64/semihosting_call.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/semihosting/semihosting.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/abort.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/assert.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/mem.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/printf.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/putchar.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/puts.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/std.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/strchr.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/strcmp.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/strlen.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/strncmp.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/lib/stdlib/subr_prf.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/local_build.sh
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/common/aarch64/plat_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/common/aarch64/platform_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/common/aarch64/platform_mp_stack.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/common/aarch64/platform_up_stack.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/common/fiq_smp_call.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/aarch64/fvp_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/aarch64/fvp_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/bl1_fvp_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/bl2_fvp_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/bl31_fvp_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/bl32_fvp_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/drivers/pwrc/fvp_pwrc.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/drivers/pwrc/fvp_pwrc.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_gic.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_io_storage.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_pm.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_security.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/fvp_topology.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/include/plat_macros.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/include/platform_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/fvp/platform.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/aarch64/plat_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/aarch64/plat_helpers.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/aarch64/platform_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/bl1_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/bl2_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/bl31_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/bl32_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/l2c/l2c.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/l2c/l2c.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/log/log.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/log/log.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/pwrc/plat_pwrc.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/pwrc/plat_pwrc.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/timer/mt_cpuxgpt.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/timer/mt_cpuxgpt.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/timer/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/uart/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/uart/uart.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/drivers/uart/uart.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/include/plat_macros.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/include/platform_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/include/power_tracer.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/include/scu.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/include/tbase_platform.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/mailbox.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_gic.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_io_storage.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_pm.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_security.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_tbase.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/plat_topology.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/platform.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/power_tracer.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/scu.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/sip_svc/sip_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/sip_svc/sip_svc_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6580/sip_svc/sip_svc_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/aarch64/plat_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/aarch64/plat_helpers.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/aarch64/platform_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/bl1_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/bl2_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/bl31_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/bl32_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/devapc/devapc.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/devapc/devapc.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/l2c/l2c.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/l2c/l2c.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/log/log.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/log/log.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/timer/mt_cpuxgpt.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/timer/mt_cpuxgpt.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/timer/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/uart/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/uart/uart.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/drivers/uart/uart.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/include/plat_macros.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/include/platform_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/include/power_tracer.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/include/scu.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/include/tbase_platform.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/mailbox.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_gic.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_io_storage.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_pm.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_security.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_tbase.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/plat_topology.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/platform.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/power_tracer.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/scu.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/sip_svc/sip_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/sip_svc/sip_svc_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6735/sip_svc/sip_svc_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/aarch64/plat_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/aarch64/plat_helpers.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/aarch64/platform_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/bl1_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/bl2_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/bl31_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/bl32_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/l2c/l2c.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/l2c/l2c.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/log/log.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/log/log.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/pwrc/plat_pwrc.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/pwrc/plat_pwrc.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/timer/mt_cpuxgpt.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/timer/mt_cpuxgpt.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/timer/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/uart/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/uart/uart.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/drivers/uart/uart.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/include/plat_macros.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/include/platform_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/include/power_tracer.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/include/scu.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/include/tbase_platform.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/mailbox.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_gic.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_io_storage.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_pm.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_security.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_tbase.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/plat_topology.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/platform.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/power_tracer.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/scu.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/sip_svc/sip_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/sip_svc/sip_svc_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6752/sip_svc/sip_svc_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/aarch64/plat_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/aarch64/plat_helpers.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/aarch64/platform_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/bl1_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/bl2_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/bl31_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/bl32_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/l2c/l2c.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/l2c/l2c.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/log/log.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/log/log.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/pwrc/plat_pwrc.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/pwrc/plat_pwrc.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/timer/mt_cpuxgpt.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/timer/mt_cpuxgpt.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/timer/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/uart/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/uart/uart.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/drivers/uart/uart.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/include/plat_macros.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/include/platform_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/include/power_tracer.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/include/scu.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/include/tbase_platform.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/mailbox.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_gic.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_io_storage.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_pm.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_security.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_tbase.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/plat_topology.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/platform.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/power_tracer.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/scu.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/sip_svc/sip_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/sip_svc/sip_svc_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6755/sip_svc/sip_svc_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/aarch64/plat_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/aarch64/plat_helpers.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/aarch64/platform_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/bl1_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/bl2_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/bl31_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/bl32_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/l2c/l2c.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/l2c/l2c.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/log/log.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/log/log.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/timer/mt_cpuxgpt.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/timer/mt_cpuxgpt.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/timer/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/uart/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/uart/uart.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/drivers/uart/uart.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/include/plat_macros.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/include/platform_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/include/power_tracer.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/include/scu.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/include/tbase_platform.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/mailbox.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_gic.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_io_storage.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_pm.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_security.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_tbase.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/plat_topology.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/platform.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/power_tracer.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/scu.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/sip_svc/sip_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/sip_svc/sip_svc_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6795/sip_svc/sip_svc_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/aarch64/plat_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/aarch64/plat_helpers.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/aarch64/platform_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/bl1_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/bl2_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/bl31_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/bl32_plat_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/devapc/devapc.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/devapc/devapc.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/l2c/l2c.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/l2c/l2c.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/log/log.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/log/log.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/timer/mt_cpuxgpt.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/timer/mt_cpuxgpt.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/timer/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/uart/typedefs.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/uart/uart.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/drivers/uart/uart.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/include/plat_macros.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/include/platform_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/include/power_tracer.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/include/scu.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/include/tbase_platform.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/mailbox.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_def.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_gic.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_io_storage.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_pm.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_security.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_tbase.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/plat_topology.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/platform.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/power_tracer.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/scu.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/sip_svc/sip_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/sip_svc/sip_svc_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/plat/mt6797/sip_svc/sip_svc_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/fiqd/fiqd.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/fiqd/fiqd_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/fiqd/fiqd_main.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/fiqd/fiqd_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee_main.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee_pm.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee/mtee_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/mtee32/mtee32.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_fastcall.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_pm.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tbase/tbase_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd.mk
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd_helpers.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd_main.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd_pm.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/spd/tspd/tspd_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_afflvl_off.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_afflvl_on.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_afflvl_suspend.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_common.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_entry.S
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_main.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_private.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/psci/psci_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/services/std_svc/std_svc_setup.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/tools/fip_create/fip_create.c
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/tools/fip_create/fip_create.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/tools/fip_create/firmware_image_package.h
/proj/mtk08948/p4root/ws/ALPS_SW/TRUNK/L1/alps/vendor/arm/atf/tools/fip_create/uuid.h
